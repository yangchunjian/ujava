<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://ujava.cn/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://ujava.cn/rss.xml" rel="self" type="application/rss+xml"/>
    <title>UJava</title>
    <link>https://ujava.cn/</link>
    <description> 【Java学习 + Java面试】首选UJava！  </description>
    <language>zh-CN</language>
    <pubDate>Tue, 24 Sep 2024 15:04:49 GMT</pubDate>
    <lastBuildDate>Tue, 24 Sep 2024 15:04:49 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>应用相关</category>
    <category>公告</category>
    <category>Java</category>
    <category>设计高频</category>
    <category>设计基础</category>
    <category>设计组件</category>
    <category>设计综合</category>
    <category>设计算法</category>
    <category>设计模式</category>
    <item>
      <title>公众号</title>
      <link>https://ujava.cn/app/wechat.html</link>
      <guid>https://ujava.cn/app/wechat.html</guid>
      <source url="https://ujava.cn/rss.xml">公众号</source>
      <description>微信公众号 微信搜索公众号UJava，或直接扫下面公众号</description>
      <category>应用相关</category>
      <pubDate>Wed, 18 Sep 2024 08:45:41 GMT</pubDate>
      <content:encoded><![CDATA[<h2>微信公众号</h2>
<blockquote>
<p>微信搜索公众号<code>UJava</code>，或直接扫下面<code>公众号</code></p>
</blockquote>
<img style="width: 200px" src="/logo/gzh.png"> ]]></content:encoded>
    </item>
    <item>
      <title>公告</title>
      <link>https://ujava.cn/notice/notice.html</link>
      <guid>https://ujava.cn/notice/notice.html</guid>
      <source url="https://ujava.cn/rss.xml">公告</source>
      <description>网站更新 项目更新 公众号 微信搜索公众号UJava，或直接扫下面公众号 小程序 微信搜索小程序UJava，或直接扫下面小程序码 安装包 小游戏 2048 吃豆人 跳一跳</description>
      <category>公告</category>
      <pubDate>Wed, 18 Sep 2024 08:45:41 GMT</pubDate>
      <content:encoded><![CDATA[<h2><a class="header-anchor" href="#网站更新"><span></span></a><a href="https://ujava.cn/timeline/" target="_blank" rel="noopener noreferrer">网站更新</a></h2>
<h2><a class="header-anchor" href="#项目更新"><span></span></a><a href="https://ujava.cn/project/changelog.html" target="_blank" rel="noopener noreferrer">项目更新</a></h2>
<h2><a class="header-anchor" href="#公众号"><span></span></a><a href="/app/wechat">公众号</a></h2>
<blockquote>
<p>微信搜索公众号<code>UJava</code>，或直接扫下面<code>公众号</code></p>
</blockquote>
<img style="width: 200px" src="/logo/gzh.png">
<h2><a class="header-anchor" href="#小程序"><span></span></a><a href="/app/applet">小程序</a></h2>
<blockquote>
<p>微信搜索小程序<code>UJava</code>，或直接扫下面<code>小程序码</code></p>
</blockquote>
<img style="width: 200px" src="/logo/xcx.jpg"> 
<h2><a class="header-anchor" href="#安装包"><span></span></a><a href="/app/pack">安装包</a></h2>
<h2><a class="header-anchor" href="#小游戏"><span></span></a><a href="">小游戏</a></h2>
<ul>
<li><a href="https://ujava.cn/2048/" target="_blank" rel="noopener noreferrer">2048</a></li>
<li><a href="https://ujava.cn/pacman/" target="_blank" rel="noopener noreferrer">吃豆人</a></li>
<li><a href="https://ujava.cn/jump/" target="_blank" rel="noopener noreferrer">跳一跳</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>小程序</title>
      <link>https://ujava.cn/app/applet.html</link>
      <guid>https://ujava.cn/app/applet.html</guid>
      <source url="https://ujava.cn/rss.xml">小程序</source>
      <description>微信小程序 微信搜索小程序UJava，或直接扫下面小程序码</description>
      <category>应用相关</category>
      <pubDate>Wed, 18 Sep 2024 07:56:37 GMT</pubDate>
      <content:encoded><![CDATA[<h2>微信小程序</h2>
<blockquote>
<p>微信搜索小程序<code>UJava</code>，或直接扫下面<code>小程序码</code></p>
</blockquote>
<img style="width: 200px" src="/logo/xcx.jpg"> ]]></content:encoded>
    </item>
    <item>
      <title>安装包</title>
      <link>https://ujava.cn/app/pack.html</link>
      <guid>https://ujava.cn/app/pack.html</guid>
      <source url="https://ujava.cn/rss.xml">安装包</source>
      <description>安卓安装包 安装包下载 IOS安装包 暂无</description>
      <category>应用相关</category>
      <pubDate>Wed, 18 Sep 2024 07:56:37 GMT</pubDate>
      <content:encoded><![CDATA[<h2>安卓安装包</h2>
<p><a href="/weapp-data/com.tencent.weauth-0.0.1.apk">安装包下载</a></p>
<h2>IOS安装包</h2>
<p><a href="/weapp-data/com.tencent.weauth-0.0.1.apk">暂无</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>项目管理</title>
      <link>https://ujava.cn/manage/</link>
      <guid>https://ujava.cn/manage/</guid>
      <source url="https://ujava.cn/rss.xml">项目管理</source>
      <description>目录 项目管理经验1 项目管理经验2 项目管理经验3 项目管理经验4 项目管理经验5 项目管理经验6 项目管理经验7 项目管理经验8 项目管理经验9 项目管理经验10</description>
      <pubDate>Sat, 07 Sep 2024 16:20:07 GMT</pubDate>
      <content:encoded><![CDATA[<div class="vp-catalog-wrapper">
  <h2 class="vp-catalog-main-title">目录</h2>
  <ul class="vp-catalogs">
    <li class="vp-catalog">
      <div class="vp-catalog-child-title">
        <a class="route-link vp-catalog-title" href="/manage/project1.html">
          <span class="font-icon icon" data-fa-i2svg="">
            <svg class="svg-inline--fa fa-laptop-code fa-fw fa-sm" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="laptop-code" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" data-fa-i2svg="">
              <path fill="currentColor" d="M64 96c0-35.3 28.7-64 64-64l384 0c35.3 0 64 28.7 64 64l0 256-64 0 0-256L128 96l0 256-64 0L64 96zM0 403.2C0 392.6 8.6 384 19.2 384l601.6 0c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8L76.8 480C34.4 480 0 445.6 0 403.2zM281 209l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-48-48c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM393 175l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z"></path>
            </svg>
          </span>
          项目管理经验1
        </a>
      </div>
    </li>
    <li class="vp-catalog">
      <div class="vp-catalog-child-title">
        <a class="route-link vp-catalog-title" href="/manage/project2.html">
          <span class="font-icon icon" data-fa-i2svg="">
            <svg class="svg-inline--fa fa-laptop-code fa-fw fa-sm" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="laptop-code" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" data-fa-i2svg="">
              <path fill="currentColor" d="M64 96c0-35.3 28.7-64 64-64l384 0c35.3 0 64 28.7 64 64l0 256-64 0 0-256L128 96l0 256-64 0L64 96zM0 403.2C0 392.6 8.6 384 19.2 384l601.6 0c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8L76.8 480C34.4 480 0 445.6 0 403.2zM281 209l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-48-48c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM393 175l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z"></path>
            </svg>
          </span>
          项目管理经验2
        </a>
      </div>
    </li>
    <li class="vp-catalog">
      <div class="vp-catalog-child-title">
        <a class="route-link vp-catalog-title" href="/manage/project3.html">
          <span class="font-icon icon" data-fa-i2svg="">
            <svg class="svg-inline--fa fa-laptop-code fa-fw fa-sm" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="laptop-code" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" data-fa-i2svg="">
              <path fill="currentColor" d="M64 96c0-35.3 28.7-64 64-64l384 0c35.3 0 64 28.7 64 64l0 256-64 0 0-256L128 96l0 256-64 0L64 96zM0 403.2C0 392.6 8.6 384 19.2 384l601.6 0c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8L76.8 480C34.4 480 0 445.6 0 403.2zM281 209l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-48-48c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM393 175l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z"></path>
            </svg>
          </span>
          项目管理经验3
        </a>
      </div>
    </li>
    <li class="vp-catalog">
      <div class="vp-catalog-child-title">
        <a class="route-link vp-catalog-title" href="/manage/project4.html">
          <span class="font-icon icon" data-fa-i2svg="">
            <svg class="svg-inline--fa fa-laptop-code fa-fw fa-sm" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="laptop-code" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" data-fa-i2svg="">
              <path fill="currentColor" d="M64 96c0-35.3 28.7-64 64-64l384 0c35.3 0 64 28.7 64 64l0 256-64 0 0-256L128 96l0 256-64 0L64 96zM0 403.2C0 392.6 8.6 384 19.2 384l601.6 0c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8L76.8 480C34.4 480 0 445.6 0 403.2zM281 209l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-48-48c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM393 175l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z"></path>
            </svg>
          </span>
          项目管理经验4
        </a>
      </div>
    </li>
    <li class="vp-catalog">
      <div class="vp-catalog-child-title">
        <a class="route-link vp-catalog-title" href="/manage/project5.html">
          <span class="font-icon icon" data-fa-i2svg="">
            <svg class="svg-inline--fa fa-laptop-code fa-fw fa-sm" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="laptop-code" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" data-fa-i2svg="">
              <path fill="currentColor" d="M64 96c0-35.3 28.7-64 64-64l384 0c35.3 0 64 28.7 64 64l0 256-64 0 0-256L128 96l0 256-64 0L64 96zM0 403.2C0 392.6 8.6 384 19.2 384l601.6 0c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8L76.8 480C34.4 480 0 445.6 0 403.2zM281 209l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-48-48c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM393 175l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z"></path>
            </svg>
          </span>
          项目管理经验5
        </a>
      </div>
    </li>
    <li class="vp-catalog">
      <div class="vp-catalog-child-title">
        <a class="route-link vp-catalog-title" href="/manage/project6.html">
          <span class="font-icon icon" data-fa-i2svg="">
            <svg class="svg-inline--fa fa-laptop-code fa-fw fa-sm" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="laptop-code" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" data-fa-i2svg="">
              <path fill="currentColor" d="M64 96c0-35.3 28.7-64 64-64l384 0c35.3 0 64 28.7 64 64l0 256-64 0 0-256L128 96l0 256-64 0L64 96zM0 403.2C0 392.6 8.6 384 19.2 384l601.6 0c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8L76.8 480C34.4 480 0 445.6 0 403.2zM281 209l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-48-48c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM393 175l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z"></path>
            </svg>
          </span>
          项目管理经验6
        </a>
      </div>
    </li>
    <li class="vp-catalog">
      <div class="vp-catalog-child-title">
        <a class="route-link vp-catalog-title" href="/manage/project7.html">
          <span class="font-icon icon" data-fa-i2svg="">
            <svg class="svg-inline--fa fa-laptop-code fa-fw fa-sm" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="laptop-code" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" data-fa-i2svg="">
              <path fill="currentColor" d="M64 96c0-35.3 28.7-64 64-64l384 0c35.3 0 64 28.7 64 64l0 256-64 0 0-256L128 96l0 256-64 0L64 96zM0 403.2C0 392.6 8.6 384 19.2 384l601.6 0c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8L76.8 480C34.4 480 0 445.6 0 403.2zM281 209l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-48-48c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM393 175l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z"></path>
            </svg>
          </span>
          项目管理经验7
        </a>
      </div>
    </li>
    <li class="vp-catalog">
      <div class="vp-catalog-child-title">
        <a class="route-link vp-catalog-title" href="/manage/project8.html">
          <span class="font-icon icon" data-fa-i2svg="">
            <svg class="svg-inline--fa fa-laptop-code fa-fw fa-sm" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="laptop-code" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" data-fa-i2svg="">
              <path fill="currentColor" d="M64 96c0-35.3 28.7-64 64-64l384 0c35.3 0 64 28.7 64 64l0 256-64 0 0-256L128 96l0 256-64 0L64 96zM0 403.2C0 392.6 8.6 384 19.2 384l601.6 0c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8L76.8 480C34.4 480 0 445.6 0 403.2zM281 209l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-48-48c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM393 175l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z"></path>
            </svg>
          </span>
          项目管理经验8
        </a>
      </div>
    </li>
    <li class="vp-catalog">
      <div class="vp-catalog-child-title">
        <a class="route-link vp-catalog-title" href="/manage/project9.html">
          <span class="font-icon icon" data-fa-i2svg="">
            <svg class="svg-inline--fa fa-laptop-code fa-fw fa-sm" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="laptop-code" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" data-fa-i2svg="">
              <path fill="currentColor" d="M64 96c0-35.3 28.7-64 64-64l384 0c35.3 0 64 28.7 64 64l0 256-64 0 0-256L128 96l0 256-64 0L64 96zM0 403.2C0 392.6 8.6 384 19.2 384l601.6 0c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8L76.8 480C34.4 480 0 445.6 0 403.2zM281 209l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-48-48c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM393 175l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z"></path>
            </svg>
          </span>
          项目管理经验9
        </a>
      </div>
    </li>
    <li class="vp-catalog">
      <div class="vp-catalog-child-title">
        <a class="route-link vp-catalog-title" href="/manage/project10.html">
          <span class="font-icon icon" data-fa-i2svg="">
            <svg class="svg-inline--fa fa-laptop-code fa-fw fa-sm" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="laptop-code" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" data-fa-i2svg="">
              <path fill="currentColor" d="M64 96c0-35.3 28.7-64 64-64l384 0c35.3 0 64 28.7 64 64l0 256-64 0 0-256L128 96l0 256-64 0L64 96zM0 403.2C0 392.6 8.6 384 19.2 384l601.6 0c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8L76.8 480C34.4 480 0 445.6 0 403.2zM281 209l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-48-48c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM393 175l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z"></path>
            </svg>
          </span>
          项目管理经验10
        </a>
      </div>
    </li>
  </ul>
</div>]]></content:encoded>
    </item>
    <item>
      <title>更新记录</title>
      <link>https://ujava.cn/project/changelog.html</link>
      <guid>https://ujava.cn/project/changelog.html</guid>
      <source url="https://ujava.cn/rss.xml">更新记录</source>
      <description>友情提示 UJava(架构设计)持续更新中~</description>
      <pubDate>Sat, 07 Sep 2024 16:20:07 GMT</pubDate>
      <content:encoded><![CDATA[<div class="hint-container tip">
<p class="hint-container-title">友情提示</p>
<p>UJava(架构设计)持续更新中~</p>
</div>

]]></content:encoded>
    </item>
    <item>
      <title>Java虚拟线程</title>
      <link>https://ujava.cn/java/virtualthread.html</link>
      <guid>https://ujava.cn/java/virtualthread.html</guid>
      <source url="https://ujava.cn/rss.xml">Java虚拟线程</source>
      <description>2023年9月19日，Oracle正式发布了JDK21。 JDK21是一个长期支持版本（上一个LTS版本是JDK17，Oracle将LTS版本的发布时间从3年改为了2年），包含了众多新特性，其中最重磅的莫过于虚拟线程（Virtual Threads）。使用虚拟线程，在不改变原来的编程风格的前提下，只需少量改动，就可以极大地提高系统的吞吐量。让我们从Ja...</description>
      <category>Java</category>
      <pubDate>Wed, 04 Sep 2024 12:19:56 GMT</pubDate>
      <content:encoded><![CDATA[<p>2023年9月19日，Oracle正式发布了JDK21。</p>
<p>JDK21是一个长期支持版本（上一个LTS版本是JDK17，Oracle将LTS版本的发布时间从3年改为了2年），包含了众多新特性，其中最重磅的莫过于虚拟线程（Virtual Threads）。使用虚拟线程，在不改变原来的编程风格的前提下，只需少量改动，就可以极大地提高系统的吞吐量。让我们从Java线程模型的发展、如何使用虚拟线程及性能对比来探一探虚拟线程吧！</p>
<p><strong>1、Java线程模型</strong></p>
<p>在早期JDK 1.2以前的Sun Classic虚拟机上Java线程是基于一种被称为“绿色线程”的用户线程（User Thread）实现的。用户线程完全建立在用户空间，系统内核不能感知用户线程的存在。用户线程的建立、同步、调度和销毁完全在用户态中完成，因此操作可以是非常快速且低消耗的，能够支持规模更大的线程数量。同时也因为没有系统内核支持，操作系统只负责把处理器资源分配到进程，线程的所有操作都需要程序自己去处理，比如“阻塞如何处理”、“多处理器系统中如何将线程映射到其他处理器上”等等，这些问题解决起来比较困难，使用用户线程实现的程序一般比较复杂（很多程序依赖特定的线程库来完成基本的线程操作，这些复杂性都封装在线程库之中）。因此Java在JDK1.2之后放弃了用户线程。</p>
<figure><figcaption>图1早期用户线程模型</figcaption></figure>
<p>从JDK 1.3起，主流平台上的商用Java虚拟机Sun HotSpot的线程模型普遍被替换为基于内核原生线程模型来实现。内核线程（Kernel-Level Thread）直接由操作系统内核支持，由内核完成线程的切换，内核通过操纵调度器对线程进行调度，并负责将线程的任务映射到各个处理器上。程序一般不会直接使用内核线程，而是使用内核线程的一种高级接口—轻量级进程（Light Weight Process）。轻量级进程就是通常意义上所讲的线程，每个轻量级进程都由一个内核线程支持。因为每个轻量级进程都需要一个内核线程支持，所以具有局限性。首先，轻量级进程要消耗一定的内核资源，因此一个系统支持轻量级进程的数量是有限的。其次，各种线程操作，如创建、析构及同步，都需要进行系统调用。而系统调用需要在用户态和内核态中来回切换，代价相对较高。<br>
</p>
<p>因为内核原生线程模型存在线程操作占用资源高，无法大量创建等局限性，以及go语言等云原生、高并发语言的崛起和冲击，OpenJDK在2018年创建了Loom项目，试图解决传统并发模型中的限制，提出了官方解决方案—Fiber（纤程）。Fiber（纤程）后续被规范团队改为"Virtual Thread"（虚拟线程）。虚拟线程是在Java虚拟机（JVM）中实现的通过协作式线程调度的轻量级线程。JVM提供了默认的ForkJoinPool用于执行任务，任务执行时会将虚拟线程挂载到一个平台线程，当任务遇到阻塞时，将虚拟线程从平台线程进行卸载，平台线程会分配给其他的虚拟线程执行，而当任务结束阻塞时，虚拟线程重新被调度到平台线程上继续执行任务。平台线程是对操作系统线程的包装，是在底层操作系统线程上运行Java代码，并在整个生命周期过程中一直捕获操作系统线程，通常有大型的线程堆栈和其他资源。</p>
<p>因此，平台线程可用数量受限于操作系统线程的数量，而虚拟线程创建和销毁成本极低，可以被大量创建（参照官方说法可以达到百万级），该特性使得虚拟线程在处理IO密集型任务时可以指数级地提升处理效率。<br>
</p>
<p><strong>2、如何使用虚拟线程</strong></p>
<p>使用虚拟线程，首先当然是需要安装JDK21，然后在Spring Boot 3.2.0前，可以通过以下形式设置Tomcat（Tomcat 10.1.x 版本开始支持,11默认使用）启用虚拟线程。<br>
</p>
<p>Spring Boot 3.2.0已经支持虚拟线程，启用虚拟线程只需要添加配置：</p>
<p>spring.threads.virtual.enabled=true</p>
<p>虚拟线程的使用方法和普通的线程基本没有区别。Java在设计虚拟线程API的时候进行了充分的考虑，程序不需要很大的改动，就能从普通线程平滑迁移到虚拟线程，可以通过Thread.startVirtualThread(...)ThreadFactory.newThread(...)等方式进行创建并启动。</p>
<p>另外，我们还需要注意使用虚拟线程与传统线程的一些区别，以下是一些建议。</p>
<p>①避免固定虚拟线程。JDK中绝大多数的阻塞操作（如网络库API、大部分IO操作）都会卸载虚拟线程，然而有一些阻塞操作不会卸载虚拟线程，使得虚拟线程被固定在其载体线程，从而阻塞其载体线程和底层操作系统线程，比如当虚拟线程持有监视器或者等待监视器的时候（一般是使用了synchronized关键字或者Object.wait()）或者当虚拟线程持执行本地方法或外部函数时。固定虚拟线程并不会使程序发生错误，但可能会阻碍其可扩展性。针对第一种情况，可以通过使用JUC里的锁API（ReentrantLock）替换synchronized关键字，保护潜在的长IO操作，以避免虚拟线程频繁和长期的固定。第二种情况则只能避免在虚拟线程中执行native方法或者外部函数。</p>
<p>②不建议使用ThreadLocal。虚拟线程支持ThreadLocal，使用方式和普通线程没有区别。但是因为虚拟线程可以大量创建，大量的ThreadLocal会带来额外的内存开销。因此，官方不推荐在使用虚拟线程的场景使用ThreadLocal。在一些场景下，可以使用作用域值（Scoped Values）来替代ThreadLocal。</p>
<p>③对有限资源使用信号量。如果需要限制并发，在确定只有指定数量的线程可以访问有限的资源情况下，如对数据库的请求、对下游系统的调用，使用信号量（Semaphore）而不是线程池，通过信号量限制可以访问物理资源或逻辑资源的线程数。</p>
<p><strong>3、性能对比</strong></p>
<p>我们分别模拟IO密集型任务以及CPU密集型任务在使用虚拟线程（Virtual Thread）与普通线程（Thread）执行时的效率进行对比分析。执行代码的机器为10核，Thread线程池数量固定为CPU核数的20倍。</p>
<p><strong>3.1 模拟IO场景，线程不做实际IO，sleep 50ms，测试代码与执行结果如下。</strong><br>
<br>
<br>
<br>
<strong>3.2 模拟计算场景，普通线程和虚拟线程测试代码与执行对比结果如下。</strong><br>
<br>
<br>
<br>
从测试结果可以看出，虚拟线程相较于普通线程在IO密集型任务执行中优势非常惊人，但是在CPU密集型任务执行中并没有优势，效率反而不如普通线程。</p>
<p><strong>4、结束语</strong></p>
<p>虚拟线程不是更快的线程，其运行代码的速度并不比平台线程快，它适用于高并发高吞吐量的应用程序中，尤其是那些由大量并发任务组成且需要花费大量时间等待的应用程序。虚拟线程的存在是为了提供规模的扩展（更高的吞吐量），而不是速度的优化（更低的延迟）。</p>
<p>同时，由于虚拟线程推出时间不长，一些现有的Java库和框架设计可能依赖于传统线程的假设或API，使用虚拟线程可能造成一些兼容性问题。大家在使用虚拟线程时需充分考虑业务场景以及使用的第三方库对虚拟线程的支持情况，做好充分压力测试，合理使用虚拟线程，方能助力系统提升吞吐量，达到事半功倍的效果。</p>
]]></content:encoded>
    </item>
    <item>
      <title>项目管理经验10</title>
      <link>https://ujava.cn/manage/project10.html</link>
      <guid>https://ujava.cn/manage/project10.html</guid>
      <source url="https://ujava.cn/rss.xml">项目管理经验10</source>
      <description>项目管理是确保产品高质量上线的必要的手段，我们的最终目标是做出高质量的产品。 知止而后有定，定而后能静，静而后能安，安而后能虑，虑而后能得。这是《大学》中解决问题的思路。 意思是在我们想要做一件事情之前，先要搞清楚要达到的目标，这样才能心里有定数，心里有了定数就会比较平静，心里平静了才能够比较心安，心安之后才能充分的思考，然后就会得到解决问题的方案。 ...</description>
      <pubDate>Wed, 04 Sep 2024 06:40:09 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>项目管理是确保产品高质量上线的必要的手段，我们的最终目标是做出高质量的产品。</p>
</blockquote>
<p>知止而后有定，定而后能静，静而后能安，安而后能虑，虑而后能得。这是《大学》中解决问题的思路。</p>
<p>意思是在我们想要做一件事情之前，先要搞清楚要达到的目标，这样才能心里有定数，心里有了定数就会比较平静，心里平静了才能够比较心安，心安之后才能充分的思考，然后就会得到解决问题的方案。</p>
<h2>IT项目管理的最终目标：高质量、高产出</h2>
<p>2017年1月份期间入职一个新的公司搭建公司的项目管理规范制度。公司属于零售行业的电子商务公司，规模1200+、研发中心约70人。公司刚引进新的项目管理工具Teambition，一个我之前没有用过的项目管理工具。相比之前项目管理的工作只包含事件、人员冲突协调，或者做专职项目经理的时候做协调的执行，这次真是要站在PMO经理的角度审视整个产品、测试、研发团队项目管理的问题。第一次面对这样的机会感觉还是比较焦虑的。</p>
<p>入职的第一个周末我在家摸清了Teambition这个项目管理工具所能提供的所有功能。但是最没考虑清楚的是这样一个问题：</p>
<p><strong>IT的项目管理要达到一个什么样的目标？</strong></p>
<p>只有彻底搞清楚这个问题，我们才能知道要做什么工作。我在本子上列出了产品研发各个环节项目管理的内容：</p>
<p><strong>1. 项目管理要解决的问题：</strong></p>
<ul>
<li>项目计划</li>
<li>人事冲突</li>
<li>项目协调</li>
<li>风险管理</li>
<li>跨团队协调</li>
</ul>
<p><strong>2. 作为产品经理负责产品线时，产品团队的项目管理内容：</strong></p>
<ul>
<li>单产品线需求管理（需求池）</li>
<li>单产品线版本规划</li>
<li>多产品线管理</li>
</ul>
<p><strong>3. 研发团队项目管理的问题：</strong></p>
<ul>
<li>项目研发工作排期及任务分配</li>
<li>研发风险管理，主要包括下列风险：</li>
<li>项目计划排期不当风险。</li>
<li>棘手技术问题导致的延期风险</li>
<li>跨团队协作时协作团队出现的延期风险引起的项目延期风险</li>
<li>开发环境不稳定导致团队联调延期风险</li>
<li>需求变更导致的项目计划变更风险</li>
<li>线上紧急问题解决引起的当前研发产品的延期风险</li>
<li>上线前上线工作准备不充分导致上线失败风险</li>
<li>上线后线上测试不通过风险</li>
<li>跨团队协调管理</li>
</ul>
<p><strong>4. 测试团队项目管理的问题：</strong></p>
<p>项目测试工作排期，包括编写测试用例、及黑盒测试工作排期。</p>
<p>测试风险管理，主要包括：</p>
<ul>
<li>测试环境故障引起的测试工作阻塞风险</li>
<li>需求变更导致的测试用例追加及测试工作变更风险</li>
<li>研发提测产品质量低于预期，测试团队工作延期风险</li>
</ul>
<p>然后，我发现项目管理在各个环节最关键的工作是计划和风险。一个计划是为了给一个有固定需求范围、人员的项目一个时间目标，很多的计划是为了保证在人力资源和时间范围有限的时候让产出的需求范围尽可能的大，也就是<strong>高产出</strong>。风险则是为了保证项目计划的目标能成功达到，同时又能保证产出项目的<strong>高质量</strong>。所以，IT项目管理的目标是<strong>高质量、高产出</strong>，至于更关注高产出还是高质量，在公司发展的不同阶段有着些许的优先级调整。</p>
<h2>IT项目管理的制度目标：透明化</h2>
<p>在得出项目管理的目标是：<strong>高质量、高产出。</strong></p>
<p>后，还是不知道怎么落地。因为客观上来讲，这个目标是包含产品、研发、测试在内的整个团队的目标，特别是项目管理，在这里显得很无力，因为项目管理人员既不能帮产品梳理业务些PRD、也不能撸起袖子自己敲代码、也不能越俎代庖做测试，当然也没这个时间。那么项目管理人员能怎么去达到这个目标呢？或者能怎么发现当前团队的产出是否是<strong>高质量、高产出</strong>的呢？</p>
<p>似乎这个问题提到了点子上，接下来我需要搞清楚：</p>
<p><strong>怎么发现当前团队的产出不是 高质量、高产出的呢？</strong></p>
<p>于是我在本子上列出了IT产品研发所涉及的团队，和各个团队中会导致不能达到<strong>高质量、高产出</strong>的一些场景。</p>
<p><strong>1. 产品经理</strong></p>
<ul>
<li>研发当前迭代上线后，无后续产品规划。</li>
<li>产品规划迭代内容长期处于优化、BUG修复等状态，对于业务的驱动没有更为强劲的驱动和支持。</li>
<li>线上BUG不做梳理分级分类和汇总统计，线上产品长期处于低质量状态。</li>
<li>版本规划不合理或需求梳理不明确，研发期间大量需求变更导致项目延期、长期不能上线或低质量上线。</li>
</ul>
<p><strong>2. 研发人员</strong></p>
<ul>
<li>项目排期计划预估不当，研发人力资源发挥不充分（估长）或提测产品质量低于预期。</li>
<li>项目研发期间遇到棘手技术问题和跨团队协作时间问题不能及时协调，最后产品上线延期或线上低质量。</li>
<li>上线前后准备工作不充分，产品线上故障回撤，延期。</li>
</ul>
<p><strong>3. 测试人员</strong></p>
<ul>
<li>测试计划排期不当，测试人员人力资源发挥不充分（估长）或产品匆忙上线，线上产品质量低下。</li>
<li>测试时间不够充分，测试用例覆盖范围不够全面，线上产品质量低下。</li>
<li>测试时间不够充分，回归测试的力度不够导致的线上产品质量低下等。</li>
</ul>
<p>在梳理场景的过程当中我发现，提高IT产品研发产出和质量的过程其实就是为了避免这些场景的出现，或者说在这些场景出现后，项目经理能及时的发现并协调解决，避免影响恶化。</p>
<p>为了避免这些风险场景的出现，需要建立一系列明确公开透明的团队协作流程规范，来规范产品研发的过程。对于已出现的风险能否及时的发现，则取决于项目管理过程透明化的程度。透明化程度越高，产品规划、项目计划、人力资源安排、跨团队协作、延期等风险就能比较快速的展现到整个团队面前，项目经理就能尽早并且比较充分的时间来协调并将风险造成的影响控制到最小。</p>
<p><strong>流程规范的透明化</strong>在于确保<strong>产品业务方需求接口人</strong>、<strong>产品</strong>、<strong>研发</strong>、<strong>测试</strong>对流程规范有一致的理解，一套体系的流程规范的建立是为了确保各团队在工作过程中为<strong>高质量、高产出</strong>这样一个统一的目标服务。这样的流程需要各团队配合项目管理所做的工作要尽可能少，<strong>性价比</strong>要足够高。</p>
<blockquote>
<p>Value1 = 各团队在项目管理中投入的时间资源价值。</p>
<p>Value2 = 流程规范推动产品研发产出和质量的提升的价值。</p>
<p><strong>性价比= Value2 – Value1。</strong></p>
</blockquote>
<p>给予共赢的局面，参与项目的各个团队对流程规范有一致的理解并完全接受的。</p>
<p><strong>项目管理过程的透明化</strong></p>
<p>可以基于下面的模板来体现，一些常见的项目管理工具Scrum看板都可以做成包含下面属性的卡片，也能在计划时间的不同阶段有相应的提示预警，一个版本迭代的周期控制在1-2周左右，建议最长不要超过1个月。项目周期过长则建议调整产品规划方案。</p>
<blockquote>
<p>【产品名称V1.0.0】当前迭代核心需求范围概述：</p>
<ol>
<li>产品经理</li>
<li>PRD开始时间</li>
<li>PRD完成时间</li>
<li>PRD评审时间</li>
<li>UX设计人员</li>
<li>UX设计完成时间</li>
<li>研发成员</li>
<li>研发完成时间</li>
<li>测试成员</li>
<li>测试完成时间</li>
</ol>
</blockquote>
<p>一个包含团队所有项目的Scrum看板，可以充分的展示团队处于各个阶段的项目，能反映出产品规划、研发测试进度健康状态，能反映出研发中心的现状和后续计划，能反映出人力资源的使用情况。从而能暴露出项目存在的<strong>问题和风险</strong>。</p>
<h2>IT项目管理的过程目标：及早暴露问题和风险</h2>
<p>一个考过PMP或者一个对项目管理工作有所了解的人都知道项目管理需要做的工作内容。但是项目延期始终是各个领域司空见惯的现象。更多人对延期习以为常，或者觉得不延期不正常。因为项目管理的过程最难把控。</p>
<p>过程的把控是为了把过程中的问题和风险造成的影响通过及早协调解决的方式降到最低，而这及早协调解决的前提则是及早的<strong>暴露问题和风险</strong>。所以，项目管理过程中的目标是<strong>及早的暴露问题和风险</strong>。</p>
<h2>总结：</h2>
<p>项目管理的目标在于<strong>高质量、高产出</strong>，项目管理过程的目标在于<strong>暴露问题和风险</strong>。从细节中暴露问题和风险需要流程规范和项目信息的<strong>透明化</strong>。</p>
<p>基于以上的思考，我制定出了适合于被我总结为矩阵团队（多个产品线和多个研发团队交叉迭代）的项目流程规范。配合流程规范和团队协作情况，我制定出了三套基于Teambition这个项目管理工具的看板组织方式，和产品研发相关团队一一沟通选择最适合团队现状的看板组织方式（最后大家都选择了同一种看板，这个当然是我预期之中的）。将配合项目流程规范和看板组织方式的项目管理规范制度通过培训传达给所有的团队成员，1个月的时间，整个公司的项目管理就这样落实到位了。</p>
<p>项目管理是确保产品高质量上线的必要的手段，我们的最终目标是做出高质量的产品。</p>
]]></content:encoded>
    </item>
    <item>
      <title>项目管理经验7</title>
      <link>https://ujava.cn/manage/project7.html</link>
      <guid>https://ujava.cn/manage/project7.html</guid>
      <source url="https://ujava.cn/rss.xml">项目管理经验7</source>
      <description>确定项目目标和范围，制定详细的项目计划。 确定项目的关键路径和风险点，制定相应的应对措施。 确保项目团队成员的角色和职责清晰明确。 建立有效的沟通机制，确保项目进展情况及时传达。 确保项目资源充足，合理分配和利用资源。 确保项目质量符合要求，制定相应的质量控制计划。 确保项目进度符合计划，及时调整计划以保证项目进度。 确保项目成本控制在预算范围内，制定...</description>
      <pubDate>Mon, 02 Sep 2024 10:04:45 GMT</pubDate>
      <content:encoded><![CDATA[<ol>
<li>确定项目目标和范围，制定详细的项目计划。</li>
<li>确定项目的关键路径和风险点，制定相应的应对措施。</li>
<li>确保项目团队成员的角色和职责清晰明确。</li>
<li>建立有效的沟通机制，确保项目进展情况及时传达。</li>
<li>确保项目资源充足，合理分配和利用资源。</li>
<li>确保项目质量符合要求，制定相应的质量控制计划。</li>
<li>确保项目进度符合计划，及时调整计划以保证项目进度。</li>
<li>确保项目成本控制在预算范围内，制定相应的成本控制计划。</li>
<li>确保项目风险得到有效管理，制定相应的风险管理计划。</li>
<li>确保项目变更得到有效管理，制定相应的变更管理计划。</li>
<li>确保项目文档得到有效管理，制定相应的文档管理计划。</li>
<li>确保项目干系人得到有效管理，制定相应的干系人管理计划。</li>
<li>确保项目团队得到有效管理，制定相应的团队管理计划。</li>
<li>确保项目交付得到有效管理，制定相应的交付管理计划。</li>
<li>确保项目财务得到有效管理，制定相应的财务管理计划。</li>
<li>确保项目采购得到有效管理，制定相应的采购管理计划。</li>
<li>确保项目安全得到有效管理，制定相应的安全管理计划</li>
<li>确保项目环境得到有效管理，制定相应的环境管理计划。</li>
<li>确保项目法律得到有效管理，制定相应的法律管理计划。</li>
<li>确保项目信息得到有效管理，制定相应的信息管理计划。</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>项目管理经验8</title>
      <link>https://ujava.cn/manage/project8.html</link>
      <guid>https://ujava.cn/manage/project8.html</guid>
      <source url="https://ujava.cn/rss.xml">项目管理经验8</source>
      <description>什么是项目管理方法？ 项目管理方法是一组原则和实践，可指导您组织项目以确保其最佳性能。基本上，它是一个可以帮助您以最佳方式管理项目的框架。 项目管理对于组织和团队非常重要，但为了使其真正有效，您需要确保将项目管理方法正确地映射到您的团队类型、项目、组织和目标。 为什么有这么多不同类型的项目管理方法？ 没有两个项目是完全相同的，即使您使用项目模板等方便的...</description>
      <pubDate>Mon, 02 Sep 2024 10:04:45 GMT</pubDate>
      <content:encoded><![CDATA[
<p>项目管理方法是一组原则和实践，可指导您组织项目以确保其最佳性能。基本上，它是一个可以帮助您以最佳方式管理项目的框架。</p>
<p>项目管理对于组织和团队非常重要，但为了使其真正有效，您需要确保将项目管理方法正确地映射到您的团队类型、项目、组织和目标。</p>
<h1>为什么有这么多不同类型的项目管理方法？</h1>
<p>没有两个项目是完全相同的，即使您使用项目模板等方便的功能来复制过去的成功。当您考虑不同类型的团队以及不同类型的 行业的不同目标、KPI和生产方法时，就会发现没有一种放之四海皆准的项目管理方法是有道理的。对于一种类型的团队来说最有效的方法对于另一种类型的团队来说可能绝对是一场噩梦。</p>
<p>例如，许多软件开发人员开始发现传统的项目管理方法正在阻碍（而不是帮助）他们的工作流程，并对他们的绩效和结果产生负面影响。因此，软件团队开始开发一种新型的项目管理方法，旨在解决他们的特殊问题。</p>
<p>不久之后，其他团队和行业开始采用这些新的项目管理方法来满足他们独特的需求和关注点。不断地，不同的项目管理方法被重新调整用途并适应不同的行业，并进行调整以适应特定的用例。</p>
<h1>1. 瀑布法</h1>
<p>瀑布方法是项目管理的传统方法。其中，任务和阶段以线性、顺序的方式完成，并且项目的每个阶段必须在下一个阶段开始之前完成。</p>
<p>瀑布项目管理的阶段通常遵循以下顺序：</p>
<ul>
<li>要求</li>
<li>分析</li>
<li>设计</li>
<li>建造</li>
<li>测试</li>
<li>部署与维护</li>
</ul>
<p>进步朝着一个方向流动，就像真正的瀑布一样。</p>
<p>不过，就像真正的瀑布一样，这很快就会变得危险。由于一切都是一开始就计划好的，如果期望与现实不符，就有很大的出错空间。而且一旦完成就无法返回到前一阶段（想象一下尝试逆着瀑布游泳——一点也不好玩）。</p>
<p>如果出现以下情况，请尝试此项目管理方法：</p>
<ul>
<li>项目的最终目标是明确定义的，并且不会改变。</li>
<li>利益相关者确切地知道他们想要什么（并且不会改变）。</li>
<li>您的项目是一致且可预测的（即不会改变）。</li>
<li>您在一个受监管的行业工作，需要大量的项目跟踪或文档。</li>
<li>您可能需要在中途将新人员引入项目并让他们快速跟上进度。</li>
</ul>
<p>如果出现以下情况，此项目管理方法可能不适合您：</p>
<ul>
<li>您的项目可能会发生变化。</li>
<li>在开始之前，您无法全面了解所有要求。</li>
<li>在此过程中您需要进行持续测试或适应反馈。<br>
</li>
</ul>
<h1>2. 敏捷方法论</h1>
<p>敏捷项目管理方法源于对传统项目管理方法的线性方法日益增长的不满。</p>
<p>由于对项目管理方法的局限性感到沮丧，这些方法无法适应项目的进展，因此焦点开始转向更多的迭代模型，该模型允许团队在过程中根据需要修改项目，而不必等到最后才修改项目，审查并修改。</p>
<p>敏捷项目管理的概念已经引发了一些特定的子框架和方法，例如 Scrum、看板和精益。但它们有什么共同点呢？敏捷项目管理方法的关键原则是：</p>
<ul>
<li>这是协作的。</li>
<li>进度很快。</li>
<li>它对数据驱动的变革持开放态度。</li>
</ul>
<p>因此，敏捷项目管理方法通常涉及短期的工作阶段，并在整个过程中进行频繁的测试、重新评估和调整。</p>
<p>在许多敏捷方法中，所有要完成的工作都添加到积压工作中，团队可以在每个阶段或周期中完成工作，项目经理或产品负责人对积压工作进行优先级排序，以便团队知道首先要关注什么。</p>
<p>如果出现以下情况，请尝试此项目管理方法：</p>
<ul>
<li>您的项目可能会发生变化。</li>
<li>您一开始并不确定解决方案会是什么样子。</li>
<li>你需要快速工作，看到快速的进展比完美的结果更重要。</li>
<li>您的利益相关者或客户需要（或希望）参与每个阶段。</li>
</ul>
<p>如果出现以下情况，此项目管理方法不适合您：</p>
<ul>
<li>您需要大量文档（例如，如果您将在项目期间引入新人员）。</li>
<li>您需要可预测的交付成果，并且需要从一开始就非常清楚它是什么样的。</li>
<li>您的项目在其过程中无法承受更改。</li>
<li>你没有自我激励的人。</li>
<li>您有严格的截止日期或可交付成果，需要及时掌握。<br>
</li>
</ul>
<h1>3. Scrum 方法论</h1>
<p>Scrum 是敏捷项目管理的一种形式。您可以将其视为一个框架，而不是其本身的项目管理方法。</p>
<p>使用 Scrum，工作被分成称为“冲刺”的短周期，通常持续约 1-2 周。每个冲刺迭代的工作都是从积压工作中获取的（参见：上面的敏捷项目管理），小团队在冲刺期间由 Scrum Master（与项目经理不同）领导 ，之后他们在“冲刺回顾”中审查自己的表现，并在开始下一个冲刺之前进行必要的更改。</p>
<p>如果出现以下情况，请尝试此项目管理方法：您正在努力持续改进。</p>
<p>如果出现以下情况，此项目管理方法可能不适合您：您没有得到团队的充分承诺来使其发挥作用。</p>
<h1>4. 看板方法</h1>
<p>看板是敏捷项目管理中的另一种方法。“看板”一词起源于制造业，现已发展为一种框架，在该框架中，任务在 看板上的列中进展时以可视方式表示。当团队有能力并在板上的列中移动时，工作会连续从预定义的待办事项中提取，每列代表流程的一个阶段。</p>
<p>看板非常适合让每个人立即直观地了解每件作品在任何给定时间的位置。它还可以帮助您了解哪里有可能形成瓶颈——例如，如果您注意到其中一个色谱柱被堵塞，您就会知道这是流程中需要检查的一个阶段。</p>
<p>当用作敏捷项目管理方法的一部分时，实施在制品 (WIP) 限制也很常见。正在进行的工作限制限制了在任何给定时间进行的任务数量，这意味着每列（或整个板上）只能有一定数量的任务。</p>
<p>这可以防止您的团队将精力分散在过多的任务上，而是确保他们可以通过单独关注每项任务来提高工作效率。</p>
<p>如果出现以下情况，请尝试此项目管理方法：</p>
<ul>
<li>您正在寻找项目进度的可视化表示。</li>
<li>您想要一目了然的状态更新。</li>
<li>您希望鼓励使用 WIP 限制，以便您的团队能够保持专注。</li>
<li>您更喜欢在持续的“拉动”基础上工作。</li>
</ul>
<p>如果出现以下情况，此项目管理方法可能不适合您：</p>
<ul>
<li>您的流程非常复杂或有很多阶段。</li>
<li>您需要一个推送系统而不是拉动系统。</li>
</ul>
<h1>5. Scrumban 方法</h1>
<p>这是一个古老问题的答案：如果 Scrum 和看板有了一个孩子怎么办？</p>
<p>Scrumban 是一种混合敏捷项目管理方法，具有 Scrum 的鼻子和看板的眼睛。</p>
<p>Scrumban 作为一种方法的主要好处是，Scrumban 允许团队不断地从待办事项中“拉动”，而不是在每个冲刺一开始就决定要处理待办事项中的哪个任务（就像在“传统”Scrum 框架中那样）。根据他们的能力积压（就像在看板框架中一样）。</p>
<p>在冲刺周期（来自 Scrum）中使用正在进行的工作限制（来自看板），您可以保持连续的流程，同时仍然根据需要合并项目规划、审查和回顾。</p>
<p>如果出现以下情况，请尝试此项目管理方法：</p>
<p>您曾经看过 Scrum 和看板并想“我希望这两个疯狂的孩子能够聚在一起”。</p>
<p>如果出现以下情况，此项目管理方法可能不适合您：</p>
<p>您曾经若有所思地望向窗外，心想：“噢，scrum 就是 scrum，看板就是看板，两者永远不会相遇”。</p>
<h1>6. 极限编程（XP）方法论</h1>
<p>极限编程 (XP) 方法是敏捷项目管理的另一种形式，专为软件开发而设计。</p>
<p>它强调管理者、客户和开发人员之间的团队合作和协作，以及团队的自组织。它 有一套团队应遵循的明确规则 ，这些规则基于其五个价值观：简单、沟通（首选面对面）、反馈、尊重和勇气。</p>
<p>如果出现以下情况，请尝试此项目管理方法：</p>
<ul>
<li>您想要促进团队合作和协作。</li>
<li>您有一个小型的、位于同一地点的团队。</li>
</ul>
<p>如果出现以下情况，此项目管理方法可能不适合您：</p>
<ul>
<li>你是一个规则破坏者。</li>
<li>您的团队分布在不同的地点和时区。</li>
</ul>
<h1>7. 适应性项目框架（APF）方法</h1>
<p>自适应项目框架（APF）方法，也称为自适应项目管理（APM），是一种敏捷项目管理方法，其设计时考虑到了变革的不可避免性。</p>
<p>适应性项目框架知道，正如约翰·斯坦贝克（John Steinbeck）可能会说的那样，即使是老鼠和人精心设计的项目也经常会出错。所以APF的基本属性是团队需要能够自适应地响应变化。</p>
<p>这意味着使用自适应项目框架方法，团队必须尝试预测风险并为项目中的意外情况做好准备。他们需要了解关键组件不断变化，并能够根据这些变化的部分不断重新评估结果和决策。</p>
<p>这需要与所有利益相关者进行大量沟通，并且像其他敏捷项目管理方法一样能够协作工作。</p>
<p>如果出现以下情况，请尝试此项目管理方法：</p>
<p>你知道你的最终目标（用项目管理的术语来说，你已经概述了你的满意条件；或者，用野兽男孩的术语来说，你很清楚你清楚你想要什么）。</p>
<p>如果出现以下情况，此项目管理方法不适合您：</p>
<ul>
<li>你需要可预测性。</li>
<li>您没有资源来处理适应性的潜在负面影响（例如范围蔓延、返工、滥用时间）。</li>
</ul>
<h1>8. 精益方法论</h1>
<p>精益是另一种项目管理方法，起源于制造业（特别是丰田生产系统）。这一切都是为了将精益原则应用到您的项目管理方法中，以最大化价值并最大程度地减少浪费。</p>
<p>虽然这最初是指减少制造过程中的物理浪费，但现在它指的是项目管理过程中的其他浪费做法。它们被称为 3M：muda、mura 和 muri。</p>
<p>Muda （浪费）消耗资源，却没有为客户增加价值。</p>
<p>当某一区域生产过剩，导致所有其他区域陷入混乱，导致库存过多（浪费！）或流程效率低下（同样浪费！）时，就会出现Mura （不均匀）。</p>
<p>当设备和人员等资源压力过大时，就会发生Muri （超载），这通常会导致机器和人员故障。</p>
<p>利用精益的关键原则，项目经理可以减少这些类型的浪费，从而创建更高效的工作流程。</p>
<p>如果出现以下情况，请尝试此项目管理方法：</p>
<ul>
<li>您正在寻找一套原则来帮助您减少脂肪并优化您的流程。</li>
<li>您始终致力于为客户改进并增加价值。</li>
<li>您希望最终降低成本。</li>
</ul>
<p>如果出现以下情况，此项目管理方法可能不适合您：</p>
<ul>
<li>您无法承担遇到供应问题（例如您没有足够的库存）或失去出错空间（例如在重要设备故障的情况下）的后果。</li>
<li>您没有预算进行投资（虽然精益项目管理旨在降低总体成本，但实施成本可能很高）。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>项目管理经验9</title>
      <link>https://ujava.cn/manage/project9.html</link>
      <guid>https://ujava.cn/manage/project9.html</guid>
      <source url="https://ujava.cn/rss.xml">项目管理经验9</source>
      <description>1、项目管理一定要有发动机思维，一定不要有等靠要思维。设计、成本、招标、采购等职能部门均是为项目管理目标服务的，项目管理者就是一台发动机，要每时每刻督促相关部门按时完成相应工作，以确保项目管理目标的实现。 2、项目管理工作不能仅仅局限到工程管理，要从经营角度统筹考虑销售、回款、成本、利润。从经营角度来做项目管理，许多工作才更能够有的放矢。 3、项目管理...</description>
      <pubDate>Mon, 02 Sep 2024 10:04:45 GMT</pubDate>
      <content:encoded><![CDATA[<p>1、项目管理一定要有发动机思维，一定不要有等靠要思维。设计、成本、招标、采购等职能部门均是为项目管理目标服务的，项目管理者就是一台发动机，要每时每刻督促相关部门按时完成相应工作，以确保项目管理目标的实现。</p>
<p>2、项目管理工作不能仅仅局限到工程管理，要从经营角度统筹考虑销售、回款、成本、利润。从经营角度来做项目管理，许多工作才更能够有的放矢。</p>
<p>3、项目管理一定要有项目策划，一定不要脚踩西瓜皮干到哪里算哪里。项目策划是“事前风险防控、事中跟进落实、事后复盘总结”的有效工具。</p>
<p>4、项目管理不仅要有工程计划，而且一定要有相应的配套计划，包括设计出图计划、开发报建计划、招标采购计划、材料供应计划、劳动力配置计划、资金支付计划等。</p>
<p>5、项目管理的计划工作，一定要充分利用穿插原则。</p>
<p>6、项目管理工作一定要重视专业度，专业度是开展其他任何工作的基础。应该由专业的人来做专业的事。非专业的人能不能做？能做，但一定有管理不到位的地方，这就会导致项目管理过程中出现挖坑埋雷等隐患。</p>
<p>7、项目管理工作一定要注重过程监控的及时性。定期对照计划与实际之间的偏差情况，把各方面工作做到抓小抓细抓苗头，避免问题被发现的太晚，浪费纠偏的时间，贻误战机。</p>
<p>8、项目管理工作一定要坚持做好合同交底和熟知合约常识，合约是管理合作单位的基本遵循，熟知合同约定是项目管理人员做好项目管理工作的基本技能。</p>
<p>9、再优秀的合作方不宜连续中标两个以上的项目，因为从第三个连续中标项目开始大概率会出现问题。</p>
<p>10、各参建单位的界面要清晰明确，并且要很细致。这个工作需要具有丰富现场管理经验的专业管理人员进行把关，尤其对各个施工单位的接口部位进行明确约定，必须细致到最后一步完工工序，例如谁负责收边收口、谁负责打胶等。</p>
<p>11、项目质量安全管理一定要充分发挥监理单位的作用。</p>
<p>12、项目品质管控的关键，前端是设计管理，后端是施工过程中的接口管理。</p>
<p>13、项目管理工作一定要实施样板引路制度。</p>
<p>首先，销售展示样板对外开放之前，一定要落实销售展示样板（含公共部分）会签制度，由销售、工程、设计、供应等部门共同验收签字确认，确保销售宣传内容与设计图纸、施工成品保持一致。</p>
<p>其次，施工单位进场后进行大面积施工前，必须在项目部指定区域，做出项目部所要求的分项工程施工样板，经监理、项目部认可后方能进行大面积施工。</p>
<p>第三，主体结构做至标准层，必须要求承包商先做标准层房间施工的工程实体样板房（即交付标准）。</p>
<p>14、项目管理工作是一项笨功夫，容不得一点偷奸耍滑。</p>
<p>15、商办类项目（大商业、酒店、办公等），对比土建装修工程来说，一定要更加重视机电安装工程。</p>
<p>16、在很多项目已经反复出现坑，要高度警惕，常见的坑不要踩。踩这种坑，只能说明你的管理水平真的很Low。</p>
<p>17、项目进入收尾阶段时，一定要及时开展一户一验工作，提前发现问题、整改问题。</p>
<p>18、项目管理工作一定要改掉不重视工程管理资料的坏习惯。</p>
<p>19、项目管理工作一定要搞明白利益、人性、关系。团结一切可以团结的力量。</p>
<p>20、项目结束后一定要开展后评估工作，并按照功劳或过错不同情况予以奖罚分明。</p>
<p>还需注意：</p>
<ul>
<li>项目管理即问题管理</li>
<li>尽早让用户参与</li>
<li>选程序员时，不要只在乎最初速度，还要考虑调整和改进，不选快，而选高质量</li>
<li>让项目发起人自己写需求，项目经理在项目实施前花时间与资助该项目的人交流，帮他们准确定义各自想要的功能。（越详细越好）</li>
<li>尽早让利益相关者参与进来，并让他们参与到底。一定要知道他们支持项目的商业需求</li>
<li>传递信息时，要将复杂的问题转为简单化</li>
<li>评估在每个迭代结束前发生的所有“债务”</li>
<li>为团队增添人才而非技能</li>
<li>不要总因项目放弃休假</li>
<li>不要当众过度批评团队成员</li>
<li>聘请新的团队成员时候，应提前明确自己的需求，仔细评估</li>
<li>花额外的钱聘请和培养优秀的软件开发人员，有时很值得</li>
<li>记录工作流程，然后严格执行</li>
<li>多余的流程，不要</li>
<li>商业价值始终是衡量成功的标准</li>
<li>项目失败不要忽略人为因素</li>
<li>要对项目估算，估算，再估算</li>
<li>别指望开会写出代码</li>
<li>项目要依靠团队合作</li>
<li>识别和消除障碍，提供团队资源，为团队服务</li>
<li>增加交流，时常召开，即时会议</li>
<li>总结一个适用于自己项目的，通用流程和文档（模板）工具</li>
<li>开发速度在项目生命周期的各个阶段自然是不同的，应依据现实制定计划</li>
<li>电子表格不能完全管理和监测各个项目</li>
<li>—件交付任务需由—人负总责</li>
<li>项目经理应该跳出微观管理的模式，高瞻远瞩</li>
<li>定期审査项目范围说明可以提高项目成功的几率，并且使利益相关者的期望与该项目的目标保持一致。</li>
<li>明确界定项目的主要目的,让每个人都明白为什么要开展这个项目。</li>
<li>避免合同纠纷</li>
<li>适当放权</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>项目管理经验5</title>
      <link>https://ujava.cn/manage/project5.html</link>
      <guid>https://ujava.cn/manage/project5.html</guid>
      <source url="https://ujava.cn/rss.xml">项目管理经验5</source>
      <description>在软件行业中，项目管理是一项至关重要的任务，它涉及到目标设定、团队沟通、质量保证、风险管理以及资源管理等多个方面。为了有效地推动项目进展并确保高质量交付，项目团队需要采取一系列细化的行动步骤和规避策略。本文将对这些策略进行详细的探讨，并提供实用的实施指南。 一、明确目标与计划：软件项目成功的第一步 在软件项目的实施过程中，明确目标与制定详细的计划是至关...</description>
      <pubDate>Thu, 29 Aug 2024 08:28:27 GMT</pubDate>
      <content:encoded><![CDATA[<p>在软件行业中，项目管理是一项至关重要的任务，它涉及到目标设定、团队沟通、质量保证、风险管理以及资源管理等多个方面。为了有效地推动项目进展并确保高质量交付，项目团队需要采取一系列细化的行动步骤和规避策略。本文将对这些策略进行详细的探讨，并提供实用的实施指南。</p>
<h2>一、明确目标与计划：软件项目成功的第一步</h2>
<p>在软件项目的实施过程中，明确目标与制定详细的计划是至关重要的。这不仅能够为团队成员提供清晰的工作方向，还能确保项目资源得到合理分配，风险得到及时预测和应对。</p>
<h3>1.1 确立清晰、可实现的目标是项目成功的基石</h3>
<p>在任何一个项目的启动阶段，确立清晰、可实现的目标都被视为至关重要的第一步。这不仅为整个项目团队指明了方向，也为后续的计划、执行和监控提供了明确的基准。</p>
<h4>1.1.1 目标的具体性对于项目的成功至关重要</h4>
<p>模糊或过于宽泛的目标往往导致团队成员在执行过程中产生困惑或分歧，进而影响项目的进度和结果。因此，项目团队在设定目标时，必须确保其足够具体，能够清晰地描述出期望的成果或状态。</p>
<h4>1.1.2 目标的可衡量性也是不容忽视的要素。</h4>
<p>只有能够量化的目标，才能让团队在项目执行过程中有效地跟踪进度，评估绩效，并及时调整策略以应对可能出现的问题。通过设定明确的指标或里程碑，项目团队可以更加直观地了解项目的进展情况，从而确保项目能够按照既定的路线前进。</p>
<h4>1.1.3 与业务需求保持一致是目标设定的另一个关键原则</h4>
<p>项目团队在确立目标时，必须深入了解干系人的期望和需求，确保所设定的目标能够真正反映业务的实际情况和需要。这样，项目团队的工作才能更加贴近实际，更加有价值，从而为项目的成功奠定坚实的基础。 确立清晰、可实现的目标是项目成功的基石。项目团队在设定目标时，必须注重目标的具体性、可衡量性以及与业务需求的契合度，这样才能确保项目能够按照既定的方向稳步推进，最终实现预期的成果。</p>
<p>确认明确清晰目标的建议 在项目开始之前明确清晰的目标对于项目的成功至关重要。以下是一些建议，帮助你在项目启动阶段就确立明确的目标：</p>
<ul>
<li>理解项目背景和业务需求：
<ul>
<li>与项目发起人、干系人和关键利益相关者进行深入的交流，了解项目的起因、期望解决的问题、以及期望的业务成果。</li>
<li>研究相关的市场趋势、行业标准和最佳实践，确保项目目标符合外部环境和组织战略。</li>
</ul>
</li>
<li>定义项目范围：
<ul>
<li>通过项目章程或项目范围说明书来界定项目的边界，明确哪些内容属于项目范畴，哪些不属于。</li>
<li>使用工作分解结构（WBS）将项目目标分解为更小、更易于管理的组成部分，确保每个部分都有明确的目标和交付物。</li>
</ul>
</li>
<li>制定SMART目标：
<ul>
<li>确保目标是具体（Specific）、可衡量（Measurable）、可达成（Achievable）、相关性（Relevant）和时限性（Time-bound）的，即SMART原则。</li>
<li>例如，而不是说“提高客户满意度”，应该说“在接下来的六个月内，将客户满意度提高10%，通过定期的满意度调查来衡量”。</li>
</ul>
</li>
<li>获取干系人的反馈和认可：
<ul>
<li>在目标制定过程中，积极征求干系人的意见和建议，确保他们的需求和期望被充分考虑。</li>
<li>获得干系人对目标的正式认可，这有助于在项目执行过程中减少变更请求和范围蔓延的风险。</li>
</ul>
</li>
<li>进行风险评估：
<ul>
<li>识别可能影响目标实现的风险因素，并评估其潜在影响。</li>
<li>制定风险应对策略，确保在目标受到威胁时能够迅速而有效地作出反应。</li>
</ul>
</li>
<li>文档化目标：
<ul>
<li>将项目目标书面化，作为项目计划的一部分，并确保所有干系人都能轻松访问这些文档。</li>
<li>定期回顾和更新项目目标，以确保它们仍然与业务需求保持一致。</li>
</ul>
</li>
<li>建立监控和沟通机制：
<ul>
<li>设定定期的项目评审会议，以监控目标的进展情况。</li>
<li>建立有效的沟通渠道，确保项目团队和干系人能够及时获取关于目标状态的信息。</li>
</ul>
</li>
</ul>
<p>通过上述步骤，你可以在项目开始之前就确立清晰、明确且得到广泛认可的目标，从而为项目的顺利实施和成功奠定坚实的基础。</p>
<h3>1.2 制定详细的计划是实现目标的关键</h3>
<p>在项目管理领域，一个明确且详细的计划往往被视为成功的先决条件。它不仅为团队成员提供了一个清晰的行动蓝图，还能够确保资源得到合理分配、风险得到及时识别，并最终推动项目按照既定的路线前进直至达成目标。</p>
<p>项目管理软件的出现和普及，无疑为项目团队在制定和执行计划方面提供了强有力的支持。这些软件通常集成了任务管理、时间跟踪、资源分配和风险评估等功能，使得项目团队能够在一个统一的平台上轻松地创建、维护和更新项目计划。</p>
<p>通过项目管理软件，项目团队可以将整个项目分解为若干个阶段，每个阶段再细分为具体的任务和活动。这样做的好处是显而易见的：一方面，它有助于团队成员更好地理解项目的整体结构和自己的职责所在；另一方面，它也为项目团队提供了一个更加精确的时间表，使得团队成员能够清楚地了解每个任务的开始时间、结束时间以及关键里程碑的达成日期。</p>
<p>此外，项目管理软件还具备实时更新和同步的功能，确保所有团队成员都能够及时获取最新的项目信息和进度报告。这种透明度的提升不仅有助于增强团队成员之间的信任和协作，还能够减少因为信息不同步而导致的误解和冲突。</p>
<p>在资源分配方面，项目管理软件可以帮助项目团队更加科学地进行人力、物力和财力的分配。通过软件内置的资源管理工具，项目经理可以轻松地了解每个团队成员的技能、可用性以及当前的工作负荷，从而做出更加合理的任务分配和资源调配决策。</p>
<p>最后，项目管理软件还具备风险评估和管理的功能。在项目计划阶段，项目经理就可以利用软件内置的风险模板和评估工具来识别潜在的风险因素，并制定相应的应对措施。这些风险信息会被整合到项目计划中，并随着项目的进展进行持续的监控和更新，确保项目团队始终对风险保持高度警惕。</p>
<p>项目管理软件在制定详细的计划方面发挥着至关重要的作用。通过利用这些软件的功能和优势，项目团队可以更加高效地创建、维护和执行项目计划，从而为项目的成功奠定坚实的基础。</p>
<h3>1.3 与干系人的定期沟通</h3>
<p>除了制定计划外，与干系人的定期沟通也是确保项目目标与业务需求保持一致的关键。通过定期召开项目会议、发送进度报告或使用其他沟通渠道，项目团队可以及时获取干系人的反馈和建议，从而根据实际情况调整计划和目标。这种持续的沟通不仅可以增强干系人对项目的信心和支持，还可以帮助团队及时发现和解决问题，确保项目能够按照既定路线顺利推进。</p>
<p>在项目管理中，与干系人（包括项目发起人、关键决策者、利益相关者等）的定期沟通不仅是制定计划时的必要步骤，更是确保项目在整个生命周期内与业务需求保持一致、减少偏差的核心活动。通过精心设计的沟通策略，项目团队能够建立起一个有效的信息反馈机制，这对于项目的成功至关重要。</p>
<h4>1.3.1 定期沟通的方式</h4>
<p>定期沟通的方式多种多样，可以是面对面的项目会议、电话会议、电子邮件通讯、项目管理软件中的实时更新，或者是专门为干系人定制的进度报告和演示文稿。每种沟通方式都有其独特的优势，项目团队应根据干系人的偏好、沟通内容的复杂性和紧急性来选择最合适的沟通渠道。</p>
<p>例如，面对面的项目会议通常适用于需要深入讨论、解决复杂问题或建立人际关系的场合。在这种环境下，团队成员可以利用身体语言、面部表情和即时反馈来增强沟通效果，从而更好地理解干系人的需求和期望。而电子邮件和项目管理软件则更适合于快速传递信息、分享文件和跟踪任务进度，它们为干系人提供了一个便捷的方式来获取项目状态更新，而无需投入过多的时间和精力。</p>
<h4>1.3.2 定期沟通的目标</h4>
<p>无论采用何种沟通方式，定期沟通的目标都是一致的：确保所有干系人都能够及时了解项目的进展情况、面临的挑战和取得的成果。通过这种方式，项目团队可以收集到干系人的宝贵反馈和建议，这些信息对于调整项目计划、优化资源分配和应对潜在风险都具有不可估量的价值。</p>
<h4>1.3.3 定期沟通有助于增强干系人对项目的信心和支持</h4>
<p>此外，定期沟通还有助于增强干系人对项目的信心和支持。当干系人感到他们的声音被听到、他们的需求被重视时，他们更有可能为项目提供必要的资源和支持。这种正面的互动关系不仅可以提升团队的士气和动力，还可以为项目创造一个更加有利的外部环境。</p>
<p>然而，要实现有效的定期沟通并不容易。项目团队需要投入足够的时间和精力来准备沟通内容、选择合适的沟通渠道、以及跟进干系人的反馈。此外，团队还需要培养一种开放和透明的沟通文化，鼓励成员积极分享信息、提出问题和寻求帮助。只有这样，定期沟通才能真正发挥其应有的作用，成为推动项目成功的强大动力。</p>
<p>明确目标与计划是软件项目成功的第一步。通过确立清晰的目标、制定详细的计划以及与干系人的定期沟通，项目团队可以为项目的顺利实施奠定坚实的基础，并为最终实现项目目标奠定良好的开端。</p>
<h2>二、加强团队沟通与协作：软件项目成功的关键要素</h2>
<p>在软件项目开发中，团队的沟通和协作能力直接决定了项目的成功与否。有效的沟通可以确保信息在团队成员之间准确、及时地传递，而良好的协作则能够提升团队的整体效率和创造力。</p>
<h3>2.1 沟通工具</h3>
<p>为了实现高效的团队沟通，项目团队应该充分利用各种沟通工具，如实时聊天软件、项目管理平台等。这些工具不仅可以方便团队成员进行日常交流，还能促进跨部门和跨地域的协作。此外，团队还应鼓励面对面的交流，尤其是在解决复杂问题和进行创新性工作时。通过面对面的讨论和协作，团队成员可以更好地理解彼此的想法和需求，从而找到最佳的解决方案。</p>
<h3>2.2 团队建设活动</h3>
<p>除了日常沟通外，定期的团队建设活动也是增强团队凝聚力和协作精神的重要手段。这些活动可以包括团队研讨会、技术分享会、户外拓展等，旨在让团队成员在轻松的氛围中增进了解、建立信任，并提升团队协作能力。通过参与这些活动，团队成员可以更加深入地了解彼此的专业技能和工作经验，从而在项目中更好地发挥各自的优势。</p>
<h3>2.3 协作工具</h3>
<p>为了进一步提升团队协作效率，项目团队还可以使用各种协作工具来共享文档、讨论问题和记录决策。这些工具可以帮助团队成员更加便捷地协作和共享信息，确保所有相关人员都能够及时了解项目的最新进展和决策结果。通过使用这些工具，项目团队可以避免信息孤岛和重复工作，提高团队协作的整体效率。</p>
<p>加强团队沟通与协作是软件项目成功的关键要素。通过充分利用沟通工具、鼓励面对面交流、开展团队建设活动以及使用协作工具，项目团队可以建立高效、紧密的沟通协作机制，为项目的顺利实施提供有力保障。</p>
<h2>三、质量管理：确保软件项目卓越品质的核心策略</h2>
<p>在软件项目的生命周期中，质量管理是确保产品符合既定标准和用户期望的关键环节。随着技术的不断发展和市场竞争的加剧，对软件质量的要求也越来越高。因此，项目团队必须采取一系列有效的策略来确保软件的质量。</p>
<h3>3.1 自动化测试</h3>
<p>自动化测试是质量管理的重要组成部分。通过编写和执行自动化测试用例，团队可以在短时间内对大量代码进行快速、准确的测试，从而确保软件的功能和性能符合预期。此外，自动化测试还可以帮助团队在开发过程中及时发现和修复缺陷，避免问题在后期才暴露出来，造成更大的修复成本和时间延误。</p>
<h3>3.2 持续集成和持续部署（CI/CD）</h3>
<p>持续集成和持续部署（CI/CD）是另一个重要的质量管理策略。通过自动化的构建、测试和部署流程，团队可以更加频繁地集成和发布软件更新。这不仅可以加快软件的交付速度，还可以减少因手动操作而引入的错误。同时，CI/CD流程中的自动化测试环节也可以确保每次更新都不会破坏现有的功能或引入新的缺陷。</p>
<h3>3.3 严格的质量门禁</h3>
<p>除了自动化测试和CI/CD外，严格的质量门禁也是确保软件质量的重要手段。在项目的关键阶段设立质量门禁，要求团队在进入下一阶段前必须通过一系列的质量检查和评审。这可以确保软件在开发过程中始终保持高质量，并防止潜在的问题被带到后期才发现。</p>
<h3>3.4 持续的质量改进计划</h3>
<p>实施持续的质量改进计划也是提升软件质量的关键。这包括定期进行代码审查、技术债务偿还和重构活动。代码审查可以帮助团队发现潜在的缺陷和不符合标准的代码实践，并及时进行修复和改进。技术债务管理和重构活动则可以帮助团队清理和维护代码库，确保软件的可维护性和可扩展性。</p>
<p>质量管理是确保软件项目卓越品质的核心策略。通过自动化测试、持续集成/持续部署、严格的质量门禁以及持续的质量改进计划，项目团队可以在开发过程中不断改进和提升软件的质量，从而为用户提供更加稳定、可靠和高效的产品。</p>
<h2>四、风险管理：软件项目稳健前行的守护者</h2>
<p>在软件项目的实施过程中，风险是不可避免的存在。它可能潜藏在技术难题之中，也可能由于需求变更、资源不足或团队沟通不畅等多种因素而引发。这些风险，如果不加以有效管理，很可能会像暗流涌动的漩涡，将项目卷入其中，导致严重的后果，甚至可能使项目彻底失败。因此，风险管理不仅仅是项目管理中的一个环节，更是确保项目稳健前行、最终取得成功的守护者。</p>
<h3>4.1 风险登记册</h3>
<p>要构建坚固的风险防线，首先需要建立一份全面的风险登记册。这份登记册不仅是对项目过程中可能出现的各种风险的简单罗列，更是对风险的深入剖析和全面把握。它详细记录了风险的性质、发生的概率、潜在的影响以及应对措施等信息，为团队提供了一个清晰的风险图谱。通过定期评估和更新风险状况，团队可以像掌握航向的舵手一样，实时掌握项目的风险状况，从而做出及时的应对和调整。这样，团队不仅能够对项目风险有全面的了解，还能够为后续的风险应对提供有力的数据支持和策略指导。</p>
<h3>4.2 风险缓解计划和应急响应策略</h3>
<p>针对高风险任务，团队需要制定具体的风险缓解计划和应急响应策略。这些计划不是纸上谈兵，而是需要明确指出在风险事件发生时，团队应如何迅速响应并降低潜在影响。例如，对于可能出现的技术难题，团队可以提前进行技术预研和储备，这样在问题出现时就能够迅速找到解决方案，而不是在风险面前手足无措。通过制定这些具有针对性的计划和策略，团队就像是为项目穿上了一层防护铠甲，即使风险真的发生，也能够应对自如。</p>
<h3>4.3 提升风险管理效率</h3>
<p>在风险管理的过程中，利用风险管理工具和软件可以进一步提升团队的风险管理效率。这些工具具有强大的功能，它们能够帮助团队更加集中和高效地识别、评估、监控和应对风险。例如，一些先进的风险管理软件提供了自动化的风险识别和预警功能，它们能够实时提醒团队关注潜在的风险事件，就像是为项目配备了一位全天候的风险哨兵。这样，团队就能够在第一时间发现并处理风险，避免风险扩大化，从而确保项目的顺利进行。</p>
<h3>4.4 培育风险文化</h3>
<p>然而，风险管理并不仅仅是工具和技术的运用，更重要的是培育一种风险文化。通过定期的风险意识培训和团队建设活动，可以增强团队成员的风险意识和协作精神。这样，在整个项目周期内就能够形成全员参与、共同应对风险的良好氛围。这种氛围不仅有助于提升团队的风险应对能力，还能够增强团队的凝聚力和战斗力，使团队在面对风险时能够更加团结、更加有信心。</p>
<p>有效的风险管理是软件项目稳健前行的守护者。它通过建立全面的风险登记册、制定风险缓解计划和应急响应策略、利用风险管理工具和软件以及培育风险文化等措施，为项目构筑了一道坚固的风险防线。在这道防线的保护下，团队可以更加从容地应对各种挑战和不确定性，确保项目的顺利进行和最终成功。因此，我们应该充分重视风险管理在软件项目中的重要作用，将其视为项目成功的关键因素之一。</p>
<h2>五、规避策略的应用：软件项目中的智慧选择</h2>
<p>在复杂多变的软件项目中，采取规避策略是一种前瞻性的管理方法。它不仅能帮助团队识别潜在的风险和问题，还能提前规划应对措施，确保项目能够平稳、高效地进行。</p>
<h3>5.1. 确保目标与业务需求的一致性</h3>
<p>在软件项目的早期阶段，与干系人紧密合作，明确并界定项目目标是至关重要的。这样做的目的是为了避免在项目后期出现目标与业务需求不符的情况，从而减少返工和资源浪费。通过详细的需求收集和分析，团队可以确保项目的目标与业务目标紧密相连，为项目的成功奠定坚实的基础。</p>
<h3>5.2. 优化沟通与协作</h3>
<p>沟通是项目管理中的关键环节，而明确的沟通协议和团队规范能够确保信息在团队成员之间高效、准确地传递。提供沟通技能培训，可以帮助团队成员提升沟通技巧，减少误解和冲突。此外，定期的团队建设活动和协作工具的使用，也能进一步增强团队的凝聚力和协作能力。</p>
<h3>5.3. 强化质量保证</h3>
<p>软件项目的成功与否，很大程度上取决于产品的质量。定义清晰的质量标准和验收准则，可以确保软件在开发过程中始终保持高质量。而设立独立的质量保证团队，则能够对项目的质量进行持续的监督和评估，确保最终交付的产品符合用户的期望和需求。</p>
<h3>5.4. 深化风险管理</h3>
<p>将风险管理纳入项目的日常工作中，是一种非常有效的规避策略。通过定期评估项目的风险状况，团队可以及时发现潜在的风险和问题，并制定相应的风险缓解计划和应急响应策略。提供风险管理培训，可以增强团队的风险意识，提升应对风险的能力。</p>
<h3>5.5. 持续学习与创新</h3>
<p>鼓励团队成员持续学习和创新，是避免僵化不变和资源管理不善的关键。在快速发展的软件行业中，只有不断学习新的技术和工具，才能跟上市场的步伐。同时，提供必要的资源支持，如培训资金、学习时间和创新平台，可以激发团队成员的创造力和创新能力，推动项目的持续改进和发展。</p>
<p>规避策略的应用是软件项目中的智慧选择。通过确保项目目标与业务需求一致、建立明确的沟通协议和团队规范、定义清晰的质量标准和验收准则、将风险管理纳入日常工作以及鼓励持续学习和创新等策略的应用，团队可以更加有效地应对挑战、降低风险，并推动项目的顺利实施和成功交付。</p>
<h2>总结</h2>
<p>通过深入实施细化的行动步骤和规避策略，软件行业的项目团队可以更加有效地管理项目、提高质量、降低风险，并提升项目评级。项目管理不仅仅是一门科学，更是一门艺术，需要团队在实践中不断探索和改进。希望本文提供的指南能对软件行业的项目团队在项目管理方面提供一些有益的启示和帮助。</p>
]]></content:encoded>
    </item>
    <item>
      <title>项目管理经验6</title>
      <link>https://ujava.cn/manage/project6.html</link>
      <guid>https://ujava.cn/manage/project6.html</guid>
      <source url="https://ujava.cn/rss.xml">项目管理经验6</source>
      <description>01 认识项目经理 为了成功管理一个项目，项目经理通常承担着管理者和领导者的双重角色，但也有着说不完的辛酸和无奈。 1、项目经理的词汇中最有价值也是最少用到的是“不”。 2、他有业绩；如果你恨一个人，你就让他去当项目经理，因为十有八九他会被失败的项目毁了。 3、卓有成效的管理者善于用人之长。 4、 “专才”对越来越少的事物了解得越来越多，直到最后他对不...</description>
      <pubDate>Sun, 25 Aug 2024 01:33:22 GMT</pubDate>
      <content:encoded><![CDATA[<h2><strong>01 认识项目经理</strong></h2>
<p>为了成功管理一个项目，项目经理通常承担着管理者和领导者的双重角色，但也有着说不完的辛酸和无奈。</p>
<p>1、项目经理的词汇中最有价值也是最少用到的是“不”。</p>
<p>2、他有业绩；如果你恨一个人，你就让他去当项目经理，因为十有八九他会被失败的项目毁了。</p>
<p>3、卓有成效的管理者善于用人之长。</p>
<p>4、 “专才”对越来越少的事物了解得越来越多，直到最后他对不存在的事物无所不知；然而，“通才”对越来越多的事物了解得越来越少，直到最后他对一切事物一无所知。</p>
<h2><strong>02 项目启动</strong></h2>
<p>1、项目不是在结束时失败，而是在开始时失败。</p>
<p>2、花大量的时间来确定需求，需求将会消失。</p>
<p>3、“我说不清我的需求是什么，但我能说清，你给我的不是我想要的”</p>
<p>——这就是客户的需求</p>
<p>4、大变更用迭代型和增量型，你和我说要造飞船，后面才知道要造的是宇宙飞船</p>
<p>密集的小变更用敏捷型，比如造一个敞篷车改为造一个SUV。</p>
<p>5、你可以冻结用户的要求，但你不能阻止他的期望。</p>
<h2><strong>03 项目计划/项目目标</strong></h2>
<p>1、领导不应该直接管人管事儿，而应该管计划；项目不应该被领导惯着，而应该被计划惯着；员工不应该按领导的指示做事，而应该按计划的安排做事。</p>
<p>2、如果你，不知道要到哪里去，即使给你张地图，也没有任何帮助</p>
<p>——项目的目标管理</p>
<p>3、计划细节永远不要超出你的控制范围。</p>
<p>4、计划的首要原则就是让具体做事的人参与到计划的制定中来。</p>
<p>5、Plan is nothing, planning is everything.</p>
<p>——拿破仑</p>
<p>6、不能纪录下来的诺言，等于什么也没说，签字就意味着牵制。</p>
<h2><strong>04 项目执行</strong></h2>
<p>1、我们应该将行动纳入决策当中，否则就是纸上谈兵。</p>
<p>——管理学大师彼得·德鲁克</p>
<p>2、我们不能用产生问题的思维方式来解决问题。</p>
<p>——爱因斯坦</p>
<p>3、慢慢计划，快速执行。</p>
<p>4、问题再大、再复杂，也不会让你跑都跑不掉。</p>
<p>——Charles Schultz</p>
<p>5、当事情进展顺利的时候，某些事情将会出问题。</p>
<p>6、最危险的常用语就是“我们一直是专业做的。”</p>
<h2><strong>05 项目控制/监督</strong></h2>
<p>1、眼睛盯住细节的，是工程师；眼睛盯住结果的，是老板；眼睛盯住过程的，是项目经理</p>
<p>2、无法评估，就无法管理。</p>
<p>3、随着时间增长，改变行动方向所需的努力成几何倍增长。</p>
<p>4、项目团队的成员憎恶每周报告项目进度，因为它生动地表明项目进展甚微。</p>
<p>5、每个大型项目内总有一个想要脱离出去的小项目。</p>
<p>6、正是那些不可测量的事物，才使可测量得以诞生。</p>
<h2><strong>06 项目风险管理</strong></h2>
<p>1、如果你担心某种情况发生，那么它就更有可能发生。</p>
<p>2、两个可能发生事件，只有那个不期望发生的事件会发生。</p>
<p>3、不仅每一个项目是唯一的，它的相关风险也是唯一的。</p>
<p>4、当你觉得一切正常时，某个差错已发生。</p>
<h2><strong>07 相关方沟通管理</strong></h2>
<p>1、项目运作成功的秘密在于，要让所有的决策者，对全部事实，都有相同的理解。</p>
<p>2、说服别人最好的方法是使用我们的耳朵。</p>
<p>3、解决项目冲突的办法总是存在的，问题是我们不一定能找到它。</p>
<p>4、人们只会告诉你问的东西，而不会告诉你他想的东西。</p>
<p>5、如果你不能说服他们，那就把他们弄糊涂。</p>
]]></content:encoded>
    </item>
    <item>
      <title>项目管理经验3</title>
      <link>https://ujava.cn/manage/project3.html</link>
      <guid>https://ujava.cn/manage/project3.html</guid>
      <source url="https://ujava.cn/rss.xml">项目管理经验3</source>
      <description>前言 优秀的软件质量意味着少量的错误和 Bug，减少了重复开发和调试的时间，提高开发效率，有利于按时交付项目。 而且，软件项目质量低下可能导致频繁的修复，这将会使维护成本增加，所以，高质量的软件在长期运行中可以降低维护成本，减少资源浪费。 对于用户而言，高质量的软件能够很好地满足用户的需求，提供良好的用户体验，从而增强用户对产品的信任和满意度。 软件项...</description>
      <pubDate>Thu, 22 Aug 2024 06:10:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2>前言</h2>
<p>优秀的软件质量意味着少量的错误和 Bug，减少了重复开发和调试的时间，提高开发效率，有利于按时交付项目。</p>
<p>而且，软件项目质量低下可能导致频繁的修复，这将会使维护成本增加，所以，高质量的软件在长期运行中可以降低维护成本，减少资源浪费。</p>
<p>对于用户而言，高质量的软件能够很好地满足用户的需求，提供良好的用户体验，从而增强用户对产品的信任和满意度。</p>
<p>软件项目质量对于软件产品的重要性不言而喻，</p>
<p>作为一名软件项目经理，如何把控好项目质量呢？</p>
<h2>1. 分解任务时，任务要足够小而且可测量</h2>
<p>两个关键词: “足够小” 和 “可测量”。</p>
<p>这两个关键词非常重要，</p>
<p>“足够小” 保证任务可以管控，</p>
<p>“可测量” 保证任务可以质控，</p>
<p>这两点确保任务完成的可靠性。</p>
<h2>2. 建立 Code Review 制度</h2>
<p>重视和建立代码审查制度，有两点好处：</p>
<ol>
<li>
<p>让程序员有意识地提高和改进代码的质量，毕竟程序员们的自尊心都是很强的，谁也不想被别人说自己的代码不行；</p>
</li>
<li>
<p>通过让有经验的技术骨干审查初级程序员的代码，可以有效地发现问题，和帮助初级程序员成长。</p>
</li>
</ol>
<h2>3. 将程序员和测试员分开</h2>
<p>多年的经验告诉我，让程序员做测试的工作，并不是一个好主意。</p>
<p>有条件的情况，尽可能地保持开发和测试团队的独立性，让测试员从独立的角度审视软件质量，减少开发人员的偏见，可以有效地提升发现问题的效率。</p>
<h2>4. 丰富测试知识，尤其是边界测试</h2>
<p>测试团队需要丰富自身的测试知识，尤其是要了解和重视边界测试，确保软件在各种极端情况下也能正常运行。</p>
<h2>5. 做好单元测试和集成测试</h2>
<p>首先要让程序员做好单元测试，单元测试要确保覆盖到所有路径，有条件可以尝试测试驱动进行开发，这可以有效地减少程序的 Bug。</p>
<p>其次在程序员实现和交付功能后，要组织测试团队有计划地做好集成测试，确保各个模块和组件之间的正确交互，提前发现和解决潜在的问题，保障整体功能的稳定性。</p>
<h2>6. 尽可能让开发环境跟生产环境一致</h2>
<p>在我多年的开发和项目管理经验中，环境和数据问题至少占软件产品质量问题的一半。</p>
<p>所以，在软件开发的过程中，确保开发、测试和生产环境的一致性，可以有效地避免因环境差异引发的环境和数据问题，保障软件在生产环境下的稳定性和兼容性。</p>
<h2>7. 设定明确的里程碑</h2>
<p>设定明确的里程碑和项目进度规划，可以有效地监控项目进展情况，出现问题时能够及时调整计划，确保项目按时交付且质量可控。</p>
<h2>8. 建立程序质量奖罚制度</h2>
<p>对于程序质量好的程序员要给予一定的奖励，而对于经常被测试人员 ReOpen 的程序员要给予一定的惩罚。</p>
<p>公开公正透明的程序质量奖罚制度，对于提高软件质量的作用是非常巨大的。</p>
<h2>9. 周末或节假日尽可能不上线新功能</h2>
<p>这主要是一个心理知识的应用，对于用户而言，使用过程中出现问题，有没有人进行及时处理，用户体验的差别是很大的，如果没有人进行及时处理，就会扩大用户对软件产品质量的看法。所以，避免在周末或节假日上线新功能，以免因人手不足或其他因素导致问题难以及时处理，影响用户对软件质量的观感。</p>
<h2>写在末尾</h2>
<p>高质量的软件产品可以提升用户体验、增强竞争力，维护企业形象，以及降低运营风险。</p>
<p>它直接关系到软件产品的成功与否、用户满意度、企业的声誉以及整体业务运营的效率和稳定性。</p>
]]></content:encoded>
    </item>
    <item>
      <title>项目管理经验4</title>
      <link>https://ujava.cn/manage/project4.html</link>
      <guid>https://ujava.cn/manage/project4.html</guid>
      <source url="https://ujava.cn/rss.xml">项目管理经验4</source>
      <description>项目实施管理是确保项目按照预定目标、进度和质量完成的关键环节。有效的项目实施管理能够提高项目的成功率，降低风险，并为企业创造更大的价值。 整个项目的实施过程总结分为九个阶段主要包含项目准备阶段、业务建模阶段、需求分析阶段、分析和设计阶段、编码实现阶段、测试阶段、部署阶段、项目收尾阶段和项目验收阶段。并在项目的开展过程中全程对其进行项目管理。以实现既定的...</description>
      <pubDate>Thu, 22 Aug 2024 06:10:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>项目实施管理是确保项目按照预定目标、进度和质量完成的关键环节。有效的项目实施管理能够提高项目的成功率，降低风险，并为企业创造更大的价值。</p>
<p>整个项目的实施过程总结分为九个阶段主要包含项目准备阶段、业务建模阶段、需求分析阶段、分析和设计阶段、编码实现阶段、测试阶段、部署阶段、项目收尾阶段和项目验收阶段。并在项目的开展过程中全程对其进行项目管理。以实现既定的项目目标、保证项目的成功、取得项目干系人最大程度的满意。</p>
<p>整个项目的实施工作主要分为项目管理工作和软件开发工作两大类：</p>
<p>其中项目管理工作主要体现为项目计划、项目控制和质量保证三部份。他们贯穿着项目的整个过程，保证项目是有计划、按进度并保证质量的情况下进行的。软件开发工作根据开发流程规范，主要分为以下七个阶段：</p>
<h2>一、项目准备阶段</h2>
<p>建立项目团队，并且根据项目开发需要，完成开发环境的制定或完善相应的开发规范，并完成相关人员的培训工作，以令到整个开发过程是在标准持续的规范中运行。</p>
<p>软件件开发过程主要分为五个阶段：</p>
<p>业务建模阶段：实地去到用户单位的相关业务部门进行调研，分析其业务流程，和需要割接、整合的系统的现状分析，并制定出业务模型。</p>
<p>需求分析阶段：明确各个子系统的业务需求，对其进行分析之后得出用例模型，并编写需求分析说明书，提交用户确定。</p>
<p>分析和设计阶段：分析系统实现的技术需要，按照OOA和OOD的思想，得出分析模型和设计模型，对其进行架构设计、详细设计和数据库设计，并根据割接整合的需要，给出割接整合方案。</p>
<p>编码实现阶段：根据系统设计得到的实施模型，对各个组件进行编码，并对其进行单元测试和集成测试。</p>
<p>测试阶段：对系统进行功能测试、性能测试、割接整合方案测试和例外应急处理测试。</p>
<p>部署阶段：将开发好的系统部署到用户方，包括安装系统、系统割接、系统整合，用户培训和用户验收等。</p>
<h2>二、项目需求与商务准备阶段</h2>
<p>准备阶段主要工作是根据本项目需要，组建项目软件开发团队和系统集成团队和开发环境的准备工作。其中开发环境的准备是指项目经理组织相关人员根据本项目需要建立开发环境，建立标准开发过程。并制订统一硬件交付和软件开发规范，包括命名规范，业务建模规范，需求编写规范，设计规范，编码规则，测试指南等。</p>
<h2>三、业务建模阶段</h2>
<p>项目团队通过对本项目相关的业务处室组成的用户代表进行业务调研工作，了解的本项目的业务流程及其业务需求，并且得到用户的确认。</p>
<h2>四、需求分析阶段</h2>
<p>项目团队通过需求来描述系统功能需求，并使开发人员和用户就这一描述达成共识。经过需求分析后，项目团队编写需求说明书，并得到用户的确认。</p>
<h2>五、分析和设计阶段</h2>
<p>项目团队将需求转化成未来系统的设计，采用分层的方法，进行架构设计，并且在整个系统遵从统一的架构的原则下，经过分析和设计，得到实施模型。</p>
<h2>六、编码实现阶段</h2>
<p>项目团队通过实现过程中主要是以组件的形式实现类和对象，将开发出的组件进行单元测试和集成测试。</p>
<h2>七、测试阶段</h2>
<p>项目团队给出的测试计划和测试用例，与用户代表讨论通过后，方可按计划进行测试。系统每一项测试必须有详细的测试记录，测试过程的输出包括测试计划、测试记录和测试分析报告，阶段性的测试输出需要用户代表、实施单位和监理方共同签字确认。</p>
<h2>八、部署阶段</h2>
<p>系统经过测试之后，项目团队提供完整的开发文档和用户支持文档，并协助用户将系统发布在用户相应的环境中。</p>
<p>系统实施人员制订部署计划并进行大量的准备工作，以保证系统完成时，能够在客户的使用环境下成功地部署系统。</p>
<h2>九、项目收尾阶段和项目验收阶段</h2>
<p>文档编写人员生成部署时所需的材料，包括系统安装文档，用户手册，和培训材料等。</p>
<p>安装系统：系统安装人员将新建的系统部署到用户的云服务器中，并进行现场联调。</p>
<p>系统切割：系统安装人员以更新的系统替换旧有系统，并进行现场联调。</p>
<p>系统整合：系统安装人员将气象的系统和其他部门的系统进行整合，并进行现场联调。</p>
<p>培训：根据用户的需要， 项目经理会安排相关人员用幻灯片， 示例， 教程等方式编写培训教材， 并对用户进行必要的培训。</p>
<p>试运行：用户对系统所提供的功能进行实际的运行测试。</p>
<p>验收：系统实施人员确保按照“项目验收计划”进行测试时所需的所有软件和测试平台都已就绪。用户进行验收测试，并完成系统的移交工作。​​​​​​​</p>
]]></content:encoded>
    </item>
    <item>
      <title>项目管理经验2</title>
      <link>https://ujava.cn/manage/project2.html</link>
      <guid>https://ujava.cn/manage/project2.html</guid>
      <source url="https://ujava.cn/rss.xml">项目管理经验2</source>
      <description>前言 介于许多人对项目经理这个职位的陌生和含糊，将自己的切身经历和阅读、交流得到的一些经典案例整理出来。 要做好一个项目经理，是很有点难的，他首先必须要是技术和管理的化身，其次要具备较好的形象和极佳的口才，同时拥有一定的人格魅力，另外他还要具备一定的设计头脑和审美观，还有很多，不再赘述....在大多数boss的眼里，是没有体系分工的概念或者基于各种原因...</description>
      <pubDate>Mon, 19 Aug 2024 15:39:03 GMT</pubDate>
      <content:encoded><![CDATA[<p><strong>前言</strong></p>
<p>介于许多人对项目经理这个职位的陌生和含糊，将自己的切身经历和阅读、交流得到的一些经典案例整理出来。</p>
<p>要做好一个项目经理，是很有点难的，他首先必须要是技术和管理的化身，其次要具备较好的形象和极佳的口才，同时拥有一定的人格魅力，另外他还要具备一定的设计头脑和审美观，还有很多，不再赘述....在大多数boss的眼里，是没有体系分工的概念或者基于各种原因分工比较简单，所以很多书里讲的东西拿到现实里多少会有点靠不住，不管你是正在转型做项目经理，还是有打算转型，那一定要转变以前种种思想的包袱了，由内而外的改变自己，很多路子只是苦于我们没有发现，没有人指引。我们不希望每字每句的总结和讨论都能去符合每个人的行走线路，因为那是不可能，只希望当我们遇到困难缺乏指引时它能成为我们的参考和依据，因为沟通才是通往成功最好的桥梁！</p>
<p><strong>正文</strong></p>
<p>做项目经理工作多年，感到做这个工作最要紧的就是要明白什么是因地制宜、因势利导，只有最合适的，没有什么叫对的，什么叫错的，项目经理最忌讳的就是完美主义倾向，尤其是做技术人员出身的，喜欢寻找标准答案，耽误了工作进度，也迷茫了自己。以下是本人一些做项目的个人体会，写出来供大家指点，在讨论过程中共同提高水平。软件工程跟其它建筑工程之间的区别之一是，总有人会拿各种各样的事来讽刺软件的设计和开发过程中的不确定性，但从没有听说过有什么大桥建成之后和图纸上设计的不一样的。下面有一个漫画《 客户真正的需求是这样的 》已经足够一针见血的了，<br>
</p>
<p>还有这幅漫画同样一点情面的不留，虽是漫画，但现实生活中不乏实例<br>
</p>
<p>项目开始阶段是一个最重要的阶段。项目经理在接手一个新项目的时候，首先要尽可能地多从各个方面了解项目的情况，如：</p>
<ol>
<li>
<p>这个项目是什么项目，具体大概做什么事情，是谁提出来的，目的是解决什么问题。在国内很多客户都很不成熟的情况下，千万不要根据项目的名称望文生义地去想象项目的目标。一个名为“办公自动化”的项目很有可能在你进场以后一个月才发现客户其实需要的是一个计算机生产管理辅助信息系统。前期了解情况的工作越详细，后面的惊讶就越少，项目的风险就越小。</p>
</li>
<li>
<p>这个项目里牵涉哪些方面的人，如投资方、具体业务干系方、项目建成后的运营方、技术监督方等等，很多项目里除了业主单位的结构很复杂以外，还有一些其他单位也会牵涉进来，如项目监理公司、业主的行业主管机构等。项目经理需要了解每个方面的人对这个项目的看法和期望是什么。事先了解各个方面的看法和期望，可以让你在做项目碰到问题的时候，就每件事情分析哪些人会在什么方面支持你，哪些人会出于什么目的反对你，从而提前准备联合朋友去对抗敌人，让事情向你所希望的方向发展。没有永远的朋友，也没有永远的敌人，只有一致的利益，这句话作为项目经理是一定要记住的。</p>
</li>
<li>
<p>基本了解了客户的情况后，下面的事情就是了解自己公司各方面对这个项目的看法。首先是高层领导是否重视，这个决定了你在需要资源的时候，公司是否会根据你的要求提供最有力的支持。领导口头肯定是说支持的，你需要做的是了解公司对这个项目的实际期望，是想把项目越做越大还是想赚钱？是想做样板工程还是干脆想敷衍了事，公司领导对项目的态度决定了你做这个项目的战略，而这个战略方针将对你做项目计划产生直接的影响。</p>
</li>
<li>
<p>在做整体项目计划前，还要大致计算一下你手上的资源。首先是时间，现在市场竞争激烈，往往很多项目要求在几乎不可能的时间范围里完成。对于这一点，你在做项目的风险控制计划的时候要充分考虑。其次是人员，根据项目预算和已往经验，大致计算一下未来的项目小组有多少种角色，每个角色目前公司是否有人，是否能完全归这个项目使用，是否需要另外招聘一些人员，招聘的准备工作要尽早启动。最后就是一些设备的准备，项目所需大件关键设备要尽早预定，以后不管发生设备等人还是人等设备的情况，浪费的都是你的时间。</p>
</li>
<li>
<p>现在是做项目说明书的时候了。一份好的项目说明书不仅将要做的事情描述得很清楚（主要是讲做什么，而不是说怎么做），而且把如何检查也说明得很透彻。也就是说它不仅说明白了要做哪些事情，也让客户的业务人员（一般不懂技术）知道项目做成什么样就算完成了。简单地说，项目说明书描述项目做哪些事情和每件事情做到什么程度以及如何检查每一个结果。</p>
</li>
<li>
<p>是到做总体计划的时间了吗？不，你现在已经知道了客户的目标和你手上的资源，那么做计划以前，你还需要和你的经理和客户充分沟通资源的问题。因为很多资源是还不明确的，你需要写一份报告，详细分析这个项目的风险以及对资源的需求情况。如果一些问题不能得到解决的话，将发生什么样的后果。如果资源不够，就要高层改变策略，增加对这个项目的投入。甚至在条件许可的情况下，有些公司会放弃这个项目。总之，没有人能完成一个不可能完成的任务，如果项目经理不能尽早发现风险，那么就只能去当烈士了。</p>
</li>
<li>
<p>明白了要做哪些事情和你手上的筹码以及你做这个项目的总体策略，现在是成立项目小组的时候了。很多项目经理都没有自己选择组员的权利，那么，就尽量发挥你的影响力去寻找那些你想要的人吧。成员的组成根据项目不同，相差较大，很难有什么具体要求，但是，一定要有精通客户业务的人，很多小项目里，这个人就是项目经理本人，大项目里会配备行业专家（Industry expert），这样和客户沟通起来才不会鸡同鸭讲，双方才可以相互理解。我经常看到的情况是我们的技术人员和客户交谈时满口的专业术语，结果搞得客户一头雾水，反过来，他还指责客户不懂技术。其实，明白自己想做什么的客户已经是很好的客户了，不知道自己要做什么，更不懂怎么做还要指手画脚的客户到处存在，但是要明白，是客户选择了你，而不是你选择了客户，有了客户你才有工资拿，心平气和一点吧。</p>
</li>
</ol>
<p>对于这种需求天天变的客户，你就一定要事先做好规矩：</p>
<ul>
<li>一、统一联系人，客户指定一个人和项目组进行沟通，不能张领导、王领导都来说几句，如果他们意见不一致，那你只有得罪领导的选择了。所以，项目的最初就要定好规矩，我项目组只认一个的意见，有什么要求你们内部先统一再和我谈，我不想卷入你们内部业务部门之间的矛盾之中。</li>
<li>二、所有需求变更全部要有书面文字，这点切记！这样做好处多多：</li>
</ul>
<ul>
<li>有书面证据，以后他还想改，你有了他以前要求的证据，告诉他：你以前可是这么说的。</li>
<li>便于需求变更管理，需求如何慢慢演变的历史可以看清楚，从而更深切地体会客户的目。</li>
<li>对于客户来说，嘴巴一动最方便，反正是你们做，不花他的资源，所以要求是否合理，是否和项目的目的一致，他是不负责任的。但是如果要他写书面要求，还要签字盖章，他就要谨慎多了，而且一写东西，思想就会更加深入，很多无理要求也就这样胎死腹中了。</li>
</ul>
<ol start="8">
<li>
<p>现在你要面对三群人：你的领导、你的组员和你的客户，和这些人沟通，让他们知道你打算怎么做，什么时候要他们做什么准备，这些事情将是你的主要工作。既然沟通这么重要，那事先定义一下沟通的原则也是一件很要紧的事情。很多沟通原则都是潜规则，如果你在一个部门时间做长了，对这些规则的运用觉得是一件理所应当的事情。但是，你现在面对的是多个部门甚至多个单位，不把沟通规则说清楚，你以后就会吃亏。下面的东西看起来无聊，其实还是很管用的：第一个是规定信息的流动方式和介质，是推还是拉。推的意思就是项目经理将主动发布信息，不管通过电话、邮件还是书面方式，保证将信息传达到每个人。这种情况适合小项目，人少。拉的意思就是项目经理就是一个类似web服务器，你自己需要什么信息就去问他。当然，没有项目经理把自己搞得那么累，他会用发布信息到公共介质的方式公布信息，简单的是白板，复杂一点的是项目的公共信息交互区，潜规则就是我发了你没去看就不要说我没告诉你。说这些看似很无聊，其实里面牵涉信息传达不完全的责任问题。当然，这些都是指一般的方式，而且不要绝对化，一般情况下，主动沟通和被动访问是同时存在的，尤其是对领导，项目经理更加应该主动去和领导沟通。第二个问题就是文档问题，很多人怕写文档，但是项目经理一定要牢记“好记性不如烂笔头”的道理。有理有时候为什么会说不清呢？就是因为没有证据。所以项目经理开始就要和客户说清楚有些文档是必须签字的，比如项目经理的项目日志，每个星期至少让客户签字，另外所有达成共识的东西，比如会议纪要，甚至领导的讲话记录，都要写成文档，双方签字，这样以后扯皮的时候，就能做到有据可查。记住：说了的就和没说一样，只有写下来大家签字后才算真正发生了的。还有一些问题，比如你提交的报告，给领导（包括本方领导和客户领导）做一个选择题，结果领导压住不批，让你无所适从，结果拖延了进度。这时候，你可以等，但是注意要留记录，标明是谁的责任；另外，如果你在开始阶段就和领导商定：如果批示提交三天后没有得到领导答复就算对方同意，这样你就会主动很多。再比如不同事件的审批流程问题：什么等级的事情记录在项目日志里、什么等级的事情要双方项目经理专门签署备忘录、什么等级的事情要双方领导出面签署合同附件等等。事先想得越周到，以后的工作就越主动</p>
</li>
<li>
<p>好了，做了很多前期工作，定义了一些游戏规则，现在是坐下来做计划的时候了。这一节，任意找一本项目管理的书都会说得比我好，所以我就少写一点，说一些自己的体会就是了。首先是找几个关键组员，比如客户业务专家、系统分析员等等，做一下项目模块划分工作。项目分成几块去做，每一块完成什么，模块之间的信息如何交换等等。需求定义的是做什么的问题，而这里说的是怎么做的问题。这里要强调一点：完成一个目标有很多种方式，你要选一种你最熟悉的，而不是看上去最完美的，这个思路会让你的项目减少很多风险。有时候客户会被某种新技术打动，坚持要你采用那种新技术，你就应该告诉他：你选我做这个项目，就应该容许我采用自己最喜欢的方式做事情，新技术之所以有诱惑力，就是因为吃亏的人还不多，我不希望你成为第一批受害者。采用一个计划会让你的工作更加明确，比如用微软的Project软件，你填写完表格以后，就可以知道这个项目有多少件事情要做，每件事情需要什么资源，他们之间的前后关系如何，消耗的时间有多长，完成后有什么标志等。所有的结果最后用一个叫做甘特图的形式表现出来。你做完这个表以后会惊奇地发现，甘特图上项目的结束时间会远远落后于你的计划结束时间（签合同的人永远不会先征求你的意见的）。当然，学过项目管理的人会大谈什么WBS、优化路径之类的东西，但是我的经验是你再优化也不可能把这些东西安排到计划的时间结束。如果你没碰到这个问题，在我恭喜你挑了一个轻松活之前，请你再去确认你是否罗列了所有要做的事情和正确评估了它们所需要的时间。这时候，你就要考虑牺牲一些任务的时间（也意味着质量）了。按照什么标准牺牲？这个项目的战略！我们在第三节提到过的战略。我的经验是如果你什么都赶进度，其结果可能就是十件事情你一件也没做好，想想多么失败啊。所以，把资源投到你熟悉和有把握的事情上，最后的结果是十件事情，你有三件做成了精品，三件完成，还有四件因为某些原因延误，成绩单是否靓丽了很多呢？战略决定优先级，而正确排列事情的优先级是一个项目经理能力的主要体现。</p>
</li>
<li>
<p>好，现在项目已经完成了前期工作，了解了项目的目标、搞清楚了手上的资源，制定了项目的策略，然后编制了项目的整体计划，项目进入实施阶段。进入这个阶段反而是项目经理比较空闲的时候，不像前期的时候项目经理要象记者一样到处和不同的人接触，搞清楚他们在说什么，努力猜测他们在想什么和他们的真正目的，那才是最累人的事情。当然，小项目的项目经理往往自己也是一个资源，要做很多事情，这时候反而比谁都苦。项目经理这段时间的主要工作是保持和客户领导以及自己领导的沟通。和客户领导沟通时特别要注意，除非你需要对方给你支持，那么你才需要讲得具体一点，否则，告诉他一切正常就可以了，而且态度要积极一些，千万不要说一些领导不懂的细节，比如：“王局长，最近项目进度还算正常，就是JVM经常发生一些内存泄漏的情况…”王局长：“(*&amp;$@@”。和自己的领导汇报也要注意这个问题，除非他是一个技术高手，你需要他的技术经验，否则一般就汇报进度是否正常以及有问题时你的对策和打算就可以了，有些需要他支持的地方，比如资源调用需要说详细一点。和组员开会，除了一些项目进度跟踪会议以外，还有很多讨论会，需要大家用头脑风暴方法给出解决问题。与会人员很多都是技术人员，他们的特点是注重细节、缺乏大局观、有点消极悲观、自尊心强（如果总结得不对，欢迎大家拍砖），所以，你作为会议的主持人，只要负责提出问题和记录下他们的观点，千万不要做评判者的角色。一个问题，有很多方面，从不同的角度看，现象是完全不同的，想想盲人摸象的故事吧。这些技术人员，他们往往精通一个方面，就自己的角度发表见解，除非一些很特别的情况，你都应该认为，他们提出的方案，从他们的角度来看是最合理的。你的长处是掌握事情的优先级，评估各个方面的轻重缓急，从而根据他们的意见得出一个合适的（而不是正确的）方案。所以，在会议上，你要充分尊重每一个人和他的意见，夸奖那些意见提得比较好的人，千万不要把会议带入无休止的争论（你要让大家知道事情不是非黑即白的，而是多元的，唉，我们的教育惹的祸…）。会后，你自己写文档，做决定。会议上大家的面子都被照顾了，自己实施起来的阻力就小，如果还有意见的，你就私下找他聊，如果还不能说服他，你就要让他明白，因为你负责这个项目、你担当风险，所以，这个优先级应该你来判断。组织中的高层，并不见得水平会比一般的成员高，但是，他要承担组织的风险，加之信息的不对称性，所以，对事情的优先级的判断肯定比下属强。</p>
</li>
</ol>
<p>终可交付成果一定要是可以被检查的，比如，【界面要求：美观大方、简洁明快】，这个要求我就不知道如何检查。所以，给开发小组布置任务的时候就要考虑如何检查结果，比如我见过一个计划，里面有一个任务【开发人员熟悉EJB编程】，这个任务，除了让这些人去参加一些专业认证考试，否则，结果很难被检查。所以，时刻考虑如何检查结果、如何向客户交付是项目经理一直要注意的事情，我听说有些老项目经理拿到项目是倒排计划的，即首先看如何验收和验收标准，然后决定工作计划。很多项目开始了很久，还不知道如何验收，那么这个项目出问题的可能性就很大了。做项目就是为了验收，我们的角色不是研究机构，我们的目的就是在付出那么多劳动后得到结果。</p>
<p>另外我插一句：我是极其不主张到客户现场开发的。尤其是一大群技术人员直接和客户交流，很容易引起冲突和矛盾（技术人员的本性决定的）。我的做法是项目经理和项目实施人员到现场，软件开发人员还是在公司做项目。项目实施人员就是初级项目经理，他们了解自己的产品，懂得一些客户的业务，关键是在于他们具有良好的沟通能力，俗称“皮厚”。他们是客户和研发人员的桥梁，其职业方向也是很机动灵活，以后可以有很多方向可以转，比开发人员的路要宽得多。</p>
<ol start="11">
<li>
<p>接着，我们再谈谈最让人头痛的需求变更问题。变更通常分为两种：一种是部分更改了原先的目标，即需求变更；另一种是没改变目标，但是客户不满意目前的实现方式，大到流程的实现，小到界面的布局，都是属于这类。碰到这种情况是难以避免的，主要是事先沟通的不够充分和客户随着项目的进展，慢慢想清楚了问题，改变了以前的思路。这时候，如果需要改并且你的战略是容许这种情况的，那么注意下面几点：</p>
<ol>
<li>确保以前的文档，就是记载着以前的结论的东西，客户是否签过字，如果没有，赶紧把你的工作停下来，赶快再和客户自己确认一下你的方案，然后让他签字，避免以后说话没有凭据；</li>
<li>和客户坐下来，探讨他修改的根本目的是什么，是不是有同样能达到相同目的、但是对你来说有代价更小的选择？</li>
<li>（项目初期的工作）明确更改流程，一般是客户指定一人签字（否则客户每个领导都有权力来插一杠子，你就废了），以正式项目文件的方式提交给你，然后，你做评估分析，分析对成本、进度的影响，在你的领导同意后，出相应意见书，主要是要说明更改设计的原因和指出由此带来的不确定后果（这个东西先写出来，后面如果真的发生了，至少不是你的错）。然后再让客户在上面签字。见过医院给病人做手术以前让家人签的免责条款吗？对，就学习那个，让大家都意识到任何的更改都有成本和代价。</li>
</ol>
</li>
<li>
<p>系统开发告一段落后，就进入客户培训、系统验收阶段，这个阶段，我一般会注意以下几个问题：</p>
</li>
</ol>
<p>一、给客户做培训前，多注意一些表面功夫。很多程序员认为，系统的逻辑核心是否正确是关键，至于界面如何，界面上的用词是否准确，那是无关紧要的问题，而且培训的时候也是信手拈来，想到哪里说到哪里，下面听讲的人不知所云，云山雾罩，培训效果自然可以想象。我的体会是，给客户做培训的版本，如果你在做多次测试以后仍然不能确定逻辑是否合乎要求，那么，你至少要在界面上多花一点功夫。注意每个界面的布局、用词、链接的正确性等等，总之不要让客户看到一些他不该看到的东西。文档方面，准备至少两个文档：用户手册和培训手册。这两个文档的内容很多都是一致的，但是角度完全不同。用户手册往往是站在系统设计者的角度，按照自己的思路，分模块讲解系统的操作和功能；而培训手册，一定要站在客户业务人员的角度，根据每个角色面对不同业务的办理，如何通过使用本系统的一系列功能来实现目标。所以，第一次培训以前，系统界面是否完整正确、培训文档是否完备都是很关键的因素，第一炮打不响，以后就麻烦很多</p>
<p>作为项目经理，其实脑子里就是几样东西：做哪些事情、做到什么程度、怎么交货、手上的资源以及各个事情的优先级。所谓多快好省那是人类的梦想，这四个方面都是相互矛盾的，属于典型的又要马儿跑，又要马儿不吃草的类型。考虑问题的轻重缓急方面，往往是把快放在第一位，各方领导都会给你最后期限，所以保进度是第一位的；省是第二位的，企业的根本目的是盈利，如果收入不能增加的话，至少费用要控制住；好是第三位的，没办法，谁都想精益求精，但是，没有强大的资源保障，质量只好先牺牲了；最后是多，客户的要求源源不断，如何降低客户的期望值，让他们从理想回到现实也是项目经理的分内工作。</p>
<p>验收前，除了做好文档工作，即可交付成果以外，多花时间搞清楚客户的做事情流程是很重要的事情，这些在前面已经有所提及，这里就不再多说。</p>
<p>我对验收最大的体会就是举证问题。即千万不要让客户这么想：你必须有证据证明你的系统是没问题的。这样你就没戏了，微软那么多天才，做了XP还天天打补丁，要你的程序没问题，既不可能，你也没办法拿出证据。你要让客户明白，所谓验收，就是我按照测试文档的测试用例跑一遍，结果和预期结果一致就应该算通过了，而且还容许有一些小错误留在验收后改正，他可以对测试用例提意见。所以，验收前双方要确认测试计划和测试用例。如果他认为系统不符合要求，那么他应该举证，证明这个系统和最初设计相背离的。所以，参考法律概念，千万不要举证倒置。另外，认为系统完美了才能验收的想法也是错误的，软件开发合同里一定要注明验收以后维护期的费用问题，否则，客户担心一旦验收就得不到你们的支持，自然不配合验收，那么，你这个项目经理就很难交功课了。</p>
<p>最后，我想谈谈如何评价项目经理的绩效的问题，我认为，项目经理有以下几个档次：</p>
<ul>
<li>最差的项目经理：项目过程中总是出现意外，然后自己又解决不了，结果成为烈士；</li>
<li>二流的项目经理：项目也经常出现意外，但是他一马当先，奋勇向前，解决了一个又一个问题，最后，勉强算把项目结束了，获得了领导的一致好评；</li>
<li>一流的项目经理：平时很少见他做具体的事情，整天找人聊天，然后就是写报告、做计划，最后项目顺利结束，整个过程平淡无奇； 项目管理培训</li>
</ul>
<p>项目管理到底是一门科学还是一门艺术呢？所谓科学就是经过反复论证，输入和输出有必然规律的东西，种瓜得瓜；而艺术就是思想火花的闪耀，主要靠灵感。项目管理这个东西，据一个前辈说，在国外是科学，80%是有规律可循的；在国内是艺术，主要靠个人魅力、感染能力等东西。看明白了PMBOK，学会了一些做事情的方式，只是搞懂了那个20%的科学的东西，还有80%的空间，属于见仁见智的领域了。所以，加强很多方面的个人能力，如练就出色沟通能力、提升自己的个人魅力对于项目经理来说是多么重要啊，无论是对内还是对外。作为一个一流的专业人士，在顺利让客户签字的同时，如何让自己的领导知道你的价值，这也是体现自己能力的一种途径。</p>
]]></content:encoded>
    </item>
    <item>
      <title>项目管理经验1</title>
      <link>https://ujava.cn/manage/project1.html</link>
      <guid>https://ujava.cn/manage/project1.html</guid>
      <source url="https://ujava.cn/rss.xml">项目管理经验1</source>
      <description>img_2.pngimg_2.png 一、项目，尤其是涉及到用户日常工作的项目，一定是一个心路历程。 每个项目参与者和被影响者的心态，价值观以及情绪的变化比技术上的变化重要的多，对项目成败的影响也往往更大。因为事情终归是要人去做的，专家可以一夜之间解决所有技术问题，但是人的问题只能一点一滴逐步解决。 所以从项目开始到结束的过程中需要保持关注关键用户以及...</description>
      <pubDate>Mon, 19 Aug 2024 14:44:39 GMT</pubDate>
      <content:encoded><![CDATA[<figure><figcaption>img_2.png</figcaption></figure>
<h2>一、项目，尤其是涉及到用户日常工作的项目，一定是一个心路历程。</h2>
<p>每个项目参与者和被影响者的心态，价值观以及情绪的变化比技术上的变化重要的多，对项目成败的影响也往往更大。因为事情终归是要人去做的，专家可以一夜之间解决所有技术问题，但是人的问题只能一点一滴逐步解决。<br>
所以从项目开始到结束的过程中需要保持关注关键用户以及最终用户对项目和任务的看法，了解他们的心路变化，并且在需要的时候做适当应对或者项目修正。</p>
<h2>二、期望所有人都有共同的价值观和奉献精神是不可能的</h2>
<p>因此在项目开始前就需要得到<strong>关键用户</strong>和<strong>项目组成员直接主管</strong>的支持与共识，并且得到一定程度上的授权。同时，努力让用户清楚这个项目究竟会带来哪些改变？为什么要改变？有什么好处或者有什么坏处？能够学到什么？让参与者有真正的参与感，而不仅仅是被动的接受者。</p>
<h2>三、细化项目任务</h2>
<p>项目经理需要把每个目标每个任务都细化。尽管项目经理不一定完全懂得项目中所涉及的全部技术问题，但是他一定要能够联系到可用的资源，同时通过询问和调研将任务细化，然后再分配到每个人员身上去。这样，每个人要做的事情都很清晰（指的是每个阶段内的事情），每个细小的目标都会觉得很容易实现，并且不用担心自己没有涉及到的其他任务，因为我很清楚会有别人去做，而且他可以被信任。如果项目经理总是在High Level地讲问题，没有足够的细化，一方面会造成做事的人觉得任务无比艰巨，渐渐失去信心；另一方面会由于责任不清造成部门间的推诿和指责。</p>
<h2>四、项目还是控制在自己手里更好</h2>
<p>除非顾问公司的能力、经验和责任心都是可以完全信赖的，项目还是控制在自己手里更好。再强的项目经验和软件技术都没有对公司业务的了解更重要。掌控在手里，顾问公司也是资源。被顾问公司主导，想到使用这个资源的时候就得吵架。</p>
<h2>五、遵守项目规则</h2>
<p>项目开始时激情澎湃地定下的规矩，一定要遵守并且执行下去。不了了之，或者随意更改都将影响人的心态。这些规矩其实没有绝对的好与坏，但是坚持一定比随意得到的结果更好。</p>
<h2>六、面对面的沟通是无法替代的</h2>
<p>即便是通讯手段如此发达的时代，也一定不要忽略面对面沟通的重要，因为只有在面对面的时候我们才能真实地感受到对方的情绪、情感以及语言背后的内容。很多时候在电子邮件、微信甚至电话中的表达都是经过修饰的，或者是被剥离感情的。</p>
<h2>七、项目进度公示</h2>
<p>所有项目涉及到的部门，就算不是核心部门。也一定要让他们了解项目的进度，尤其是将要对他们产生的影响。人都不喜欢被招之即来挥之即去。</p>
<h2>八、重视数据</h2>
<p>无论任何信息系统，数据都是最重要，最核心的，而不是流程。</p>
<p>每个系统都有n多的公司在使用，即便是流程的定制也不离其宗。但是你的数据只对你自己有用，而且是独一无二的。数据一定要被重视，给出足够的时间提炼和整理。输入的是垃圾，输出的也一定是垃圾，流程和系统再好也没用。</p>
<h2>九、增加员工参与项目的积极性</h2>
<p>平时就要经常进行跨部门的合作，让大家习惯一起达成目标，而不是相互扯皮（这个无法避免，只能适当消除，但是很多时候部门之间的敌对程度甚至超过了竞争对手）。而且要奖励参加项目的人员，并且尽量让参加项目的人从日常工作中脱离出来。这一点大公司有着先天的优势，因为它储备的人力资源相对较多。参加项目的人学到新技能和知识，顶替他工作的人也学到新技能担负起新任务。所以员工都期望参加项目，而不是拒绝项目。</p>
]]></content:encoded>
    </item>
    <item>
      <title>战术管理和战略管理</title>
      <link>https://ujava.cn/synthesis/tacticalstrategicmanagement.html</link>
      <guid>https://ujava.cn/synthesis/tacticalstrategicmanagement.html</guid>
      <source url="https://ujava.cn/rss.xml">战术管理和战略管理</source>
      <description>战略研究的基础知识 战略研究的基础知识主要涵盖以下几个方面： 战略定义：战略是使用战斗以达到战争目的的理论，它协调个别战斗之间的关系，为实现战争目的而服务。战略关键词包括分配（资源有限的，优先级很重要）、发展（随着时间局势会发生变化，可分为战时和战后）和使用（运用政治、经济、心理、军事权力）。 战略层面：战略可以分为三个层面：总体战略、分类战略和运作（...</description>
      <category>设计高频</category>
      <pubDate>Sat, 18 May 2024 14:49:14 GMT</pubDate>
      <content:encoded><![CDATA[<p><strong>战略研究的基础知识</strong></p>
<p>战略研究的基础知识主要涵盖以下几个方面：</p>
<ul>
<li>战略定义：战略是使用战斗以达到战争目的的理论，它协调个别战斗之间的关系，为实现战争目的而服务。战略关键词包括分配（资源有限的，优先级很重要）、发展（随着时间局势会发生变化，可分为战时和战后）和使用（运用政治、经济、心理、军事权力）。</li>
<li>战略层面：战略可以分为三个层面：总体战略、分类战略和运作（可执行）战略。总体战略居高临下，通过分类战略达到运作战略。</li>
<li>战略研究方法：战略研究方法包括有系统地应用一系列科学的方法手段，以解决分析研究中面临的公正、客观和科学性的要求。这包括信息采集方法（收集有关战争与冲突方面的各种军事、政治、经济和文化的信息），制定研究框架和分析模型（确定研究领域，构造研究模型和参数，明确分析的重点和难点），以及推理判断法、综合评价法和情境模拟法等。</li>
<li>战略研究目的：战略研究的目的是揭示战争规律和战争指导规律，指导制定准备与实施战争的方针和策略，为夺取战争的胜利服务。</li>
<li>战略研究类型：按理论层次，战略研究可以分为战略基础理论研究和战略应用理论研究；按社会历史时期，可以分为古代战略研究、近代战略研究、现代战略研究；按作战性质，可以分为进攻战略研究和防御战略研究；按军种、兵种，可以分为陆军战略研究、海军战略研究、空军战略研究和战略导弹部队战略研究等。</li>
<li>战略研究历史：战略研究源远流长，中国古代战略称为谋略、韬略、方略或兵略，研究活动及方法主要体现在兵学著述或文史典籍中。西方的古希腊、古罗马时期，战略研究也已开始。随着时间的推移，战略研究不断发展，形成了丰富的战略理论体系。</li>
</ul>
<p>综上所述，战略研究的基础知识涉及战略的定义、层面、研究方法、目的、类型和历史等方面，是军事学术研究的重要组成部分。</p>
<p><strong>战术管理和战略管理的区别</strong></p>
<p>战术管理和战略管理在企业管理中分别扮演着不同的角色，它们之间的主要区别体现在以下几个方面：</p>
<ul>
<li>范围和时间：战略管理通常涉及较长的时间范围，它着眼于企业的长期目标、预算和资源分配等全局性问题。而战术管理则更加关注短期内的行动计划，为实现长期战略目标而制定的具体、短期的行为或计划，通常在几天或几周内完成。</li>
<li>目标和目的：战略管理的目标和目的是为了实现企业的全局性、长期性目标，如企业的长期发展、市场竞争的胜利等。而战术管理则是为了实现这些战略目标而制定的具体行动计划，如市场推广计划、产品推广策略等。</li>
<li>决策层次：战略管理通常是由高层领导或管理层制定和决策的，需要全面考虑企业的各个方面和长远发展。而战术管理则是中低层员工根据战略计划制定的具体实施计划，更注重实际操作和执行。</li>
<li>灵活性和稳定性：战略管理通常需要在较长时期内保持稳定，以利于贯彻执行，但也需要根据外部环境的变化进行适当调整。而战术管理则更加注重灵活性和快速反应能力，以便在实际执行中根据情况进行快速调整和优化。</li>
<li>综合性和细节性：战略管理需要考虑企业的全局性和多样性，包括市场、竞争对手、技术、经济等各个方面的因素。而战术管理则需要根据这些不同的因素和影响制定具体的行动计划，关注细节和执行力。</li>
<li>总的来说，战略管理和战术管理在企业管理中都是非常重要的，它们相互依存、相互支持。战略管理为战术管理提供了方向和目标，而战术管理则是实现战略目标的具体手段和方法。只有战略和战术相结合，企业才能在激烈的市场竞争中取得优势。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>广域网</title>
      <link>https://ujava.cn/synthesis/wan.html</link>
      <guid>https://ujava.cn/synthesis/wan.html</guid>
      <source url="https://ujava.cn/rss.xml">广域网</source>
      <description>广域网（WAN）的重要组成部分确实是通信子网，它一般由公共网络系统充当。以下是一些属于广域网的例子： 公用电话交换网（PSTN）：传统的电话网络，用于语音和数据通信。 数字数据网（DDN）：一种基于数字传输技术的数据通信网，主要用于向用户提供专用的中高速数字数据通信业务。 分组交换网（X.25）：一种面向连接的分组交换和传输网络，它提供了可靠的端到端的...</description>
      <category>设计高频</category>
      <pubDate>Sat, 18 May 2024 14:49:14 GMT</pubDate>
      <content:encoded><![CDATA[<p>广域网（WAN）的重要组成部分确实是通信子网，它一般由公共网络系统充当。以下是一些属于广域网的例子：</p>
<ul>
<li>公用电话交换网（PSTN）：传统的电话网络，用于语音和数据通信。</li>
<li>数字数据网（DDN）：一种基于数字传输技术的数据通信网，主要用于向用户提供专用的中高速数字数据通信业务。</li>
<li>分组交换网（X.25）：一种面向连接的分组交换和传输网络，它提供了可靠的端到端的数据传输服务。</li>
</ul>
<p>然而，需要注意的是，FDDI（光纤分布式数据接口）网络并不属于广域网的范畴。FDDI主要用于在局域网（LAN）环境中提供高速数据传输。</p>
<p>在广域网中，通信子网由一些专用的通信处理机（即节点交换机）及其运行的软件、集中器等设备和连接这些节点的通信链路组成。这些设备和链路共同负责为用户提供数据的传输、转接、加工和转换等通信处理工作。</p>
]]></content:encoded>
    </item>
    <item>
      <title>大数据</title>
      <link>https://ujava.cn/synthesis/bigdata.html</link>
      <guid>https://ujava.cn/synthesis/bigdata.html</guid>
      <source url="https://ujava.cn/rss.xml">大数据</source>
      <description>大数据的关键技术有哪些列举，说明大数据技术目前有哪些应用。 大数据的关键技术主要包括以下几个方面： 大数据采集技术：该技术从众多数据源实时或及时地获取各类结构化、半结构化及非结构化数据，是大数据知识服务模型的基础。其关键在于突破高速、高可靠、高速数据采集及大数据整合技术。 大数据预处理技术：主要完成接收数据的分析、提取、清洗等操作，帮助实现快速的数据分...</description>
      <category>设计高频</category>
      <pubDate>Sat, 18 May 2024 13:53:33 GMT</pubDate>
      <content:encoded><![CDATA[<p><strong>大数据的关键技术有哪些列举，说明大数据技术目前有哪些应用。</strong></p>
<p>大数据的关键技术主要包括以下几个方面：</p>
<ul>
<li>大数据采集技术：该技术从众多数据源实时或及时地获取各类结构化、半结构化及非结构化数据，是大数据知识服务模型的基础。其关键在于突破高速、高可靠、高速数据采集及大数据整合技术。</li>
<li>大数据预处理技术：主要完成接收数据的分析、提取、清洗等操作，帮助实现快速的数据分析处理。其目的是将多种数据类型转化为单一配置或便于处理的格式，以确保分析效率。</li>
<li>数据分析与挖掘：基于商业目的，旨在通过有目的的收集、整理、加工数据来提取有价值的信息和洞察。该过程采用机器学习、统计分析等技术。</li>
<li>大数据存储和管理：利用内存来存储并管理收集的数据，并对之进行复杂的结构化、半结构化和非结构化处理。其目的是支持关键问题如可靠性、高效传输。</li>
<li>大数据可视化技术：为用户提供清晰直观的数据表现，将复杂数据关系以图表、地图、仪表盘等形式呈现，帮助用户更好地理解与利用分析结果。</li>
<li>人工智能技术：分为三个层级：弱人工智能用于数据计算，采用AI的剪枝理论优化；强人工智能应对受限环境，如传感环境信息、听得懂互动功能；超人工智能实现深度认知，如自认语言理解与知识系统图谱。</li>
<li>数据挖掘技术：从众多数据中搜集有价值的信息与知识，利用挖掘算法。</li>
<li>无线通信技术：通过挖掘无线大数据规律，实现比普适模型更符合真实通信环境的模型，助力系统决策。</li>
<li>数据处理技术：涉及分布式的存储和计算技术，既与Distributed存储形式相关，也与业务数据的冷、热数据有关。主要的技术模型有MapReduce、DAG、BSP等。</li>
</ul>
<p>至于大数据技术的应用，已经广泛渗透到各行各业中，例如：</p>
<ul>
<li>金融行业：银行零售经营新体系通过API、智能感知、挖掘建模等大数据应用技术，提升数据驱动运营能力。</li>
<li>媒体行业：媒体融合发展需要以新技术新应用来引领和推动，成系统和规模的大数据应用技术成为报业集团系统性转型的核心突破点。</li>
<li>数据记录：包括音乐、照片、视频、监控视频等音视频资料，以及互联网上的海量数据，这些数据正在以前所未有的数量被所有互联网用户共享。</li>
<li>移动互联网：移动设备的传感器收集了大量用户点击行为的数据，这些数据由某些公司拥有，并产生大量的用户行为数据。</li>
<li>电子地图：如高德、百度、谷歌地图等，它们产生大量数据流的数据，数据是不同于传统数据，数据流图表示一个行为，一种习惯，流数据频率分析后将会产生巨大的商业价值。</li>
<li>搜索引擎：传统门户网站转向搜索引擎后，用户的搜索行为和质疑行为收集了大量的数据。</li>
</ul>
<p>总的来说，大数据技术以其独特的技术优势，正在为各行各业提供新的发展机遇。</p>
]]></content:encoded>
    </item>
    <item>
      <title>数字孪生</title>
      <link>https://ujava.cn/synthesis/digitaltwin.html</link>
      <guid>https://ujava.cn/synthesis/digitaltwin.html</guid>
      <source url="https://ujava.cn/rss.xml">数字孪生</source>
      <description>数字孪生是指充分利用物理模型、传感器、运行历史等数据，集成多学科、多尺度的仿真过程，它作为虚拟空间中对实体产品的镜像，反映了相对应物理实体产品的全生命周期过程。 为了便于数字孪生的理解，庄存波等提出了数字孪生体的概念，认为数字孪生是采用信息技术对物理实体的组成、特征、功能和性能进行数字化定义和建模的过程。 数字孪生体是指在计算机虚拟空间存在的与物理实体...</description>
      <category>设计高频</category>
      <pubDate>Sat, 18 May 2024 13:53:33 GMT</pubDate>
      <content:encoded><![CDATA[<p>数字孪生是指充分利用物理模型、传感器、运行历史等数据，集成多学科、多尺度的仿真过程，它作为虚拟空间中对实体产品的镜像，反映了相对应物理实体产品的全生命周期过程。</p>
<p>为了便于数字孪生的理解，庄存波等提出了数字孪生体的概念，认为数字孪生是采用信息技术对物理实体的组成、特征、功能和性能进行数字化定义和建模的过程。</p>
<p>数字孪生体是指在计算机虚拟空间存在的与物理实体完全等价的信息模型，可以基于数字孪生体对物理实体进行仿真分析和优化。</p>
<p>数字孪生是技术、过程、方法，数字孪体是对象、模型和数据。</p>
<p>数字孪生的三个组成部分：物理空间的实体产品、虚拟空间的虚拟产品、物理空间和虚拟空间之间的数据和信息交互接口。</p>
<p>数字孪生主要是要创建和物理实体等价的虚拟体或数字模型，虚拟体能够对物理实体进行仿真分析，能够根据物理实体运行的实时反馈信息对物理实体的运行状态进行监控，能够依据采集的物理实体的运行数据完善虚拟体的仿真分析算法，从而对物理实体的后续运行和改进提供更加精确的决策。</p>
<p>数字孪生体用于解决传统机理模型无法解决的非线性、不确定性问题，数字孪生技术可以与机器学习、深度学习构成一个不断进化的系统。有两种数字优化，一种模型驱动（Model-Driven），一种数据驱动（Data-Driven），即我们可以将机理模型与/或强化学习构建一个适合工业应用的优化方法包。</p>
<p><strong>数字孪生与传统建模仿真的区别：</strong></p>
<p>数字孪生是动态的，在数字对象与物理对象之间必须能够实现上下行的数据交互，这样才能让这个数字孪生运行具有持续改善的工业应用价值。</p>
<p>传统建模仿真和数字孪生存在不同的关注点，前者关注建模的保真度，也就是可否准确荒野物理对象特性和状态，后者关注动态中的变化关系。</p>
<p><strong>数字孪生技术如何与物联网相结合，以及这种相结合如何增强系统监控和维护能力：</strong></p>
<p>数字孪生技术与物联网的结合主要通过以下方式实现，并极大地增强了系统监控和维护能力：</p>
<ul>
<li>数据集成与模型更新：物联网通过各种传感器和设备获取实时数据，如环境参数、设备状态、生产数据等。这些数据被输入到数字孪生模型中，作为模型运行的输入参数。随着物联网设备实时采集的数据不断更新，数字孪生模型能够准确反映物理实体的当前状态和性能。</li>
<li>建模过程：在数字孪生技术的应用中，首先需要对物理实体进行建模。这包括物体的几何形状、结构特性、材料属性等方面的建模，并将其转化为数字孪生模型中的参数。同时，根据物理实体的工作原理和行为规律，将其对应的物理模型转化为数字孪生模型中的动力学模型或算法模型。</li>
</ul>
<p>这种结合增强了系统监控和维护能力的方式体现在以下几个方面：</p>
<ul>
<li>实时监测和追踪：通过将数字孪生与物联网设备结合，可以实现对物理实体的实时监测和追踪。这有助于及时发现潜在问题，减少故障停机时间，提高系统的可用性和可靠性。</li>
<li>预防性维护：数字孪生技术可以帮助实现设备的预防性维护。通过实时监测和分析设备数字模型的状态和性能数据，系统能够预测设备的潜在故障，并在故障发生前进行干预，从而避免设备停机带来的损失。这种预防性维护模式不仅降低了设备的维修成本，还提高了设备的使用寿命。</li>
<li>远程维护：传统的设备维护通常需要维修人员亲自到现场进行检修，而数字孪生技术使得远程维护成为可能。维修人员只需通过数字模型对设备进行诊断和操作，即可实现设备的远程修复，大大提高了维护的效率和便捷性。</li>
<li>智能化管理：数字孪生技术还可以实现设备的智能化管理。通过对设备数字模型的实时监测和分析，系统能够自动生成设备的运行报告、维护计划等信息，为管理人员提供决策支持。同时，系统能够及时发现设备的潜在安全隐患，并采取相应的措施进行防范。</li>
</ul>
<p>总之，数字孪生技术与物联网的结合为系统监控和维护带来了革命性的变化，提高了系统的可用性、可靠性和维护效率，降低了维护成本。这种结合不仅适用于工业生产领域，还可以应用于智慧城市、健康医疗、零售业等多个领域。</p>
]]></content:encoded>
    </item>
    <item>
      <title>智慧水利</title>
      <link>https://ujava.cn/synthesis/smartwater.html</link>
      <guid>https://ujava.cn/synthesis/smartwater.html</guid>
      <source url="https://ujava.cn/rss.xml">智慧水利</source>
      <description>随着物联网、云计算、大数据等信息技术在水利行业的广泛应用,实现水利设施和系统的智能化、信息化、自动化已成为发展方向。作为智慧水利解决方案的关键组成部分,水利现场远程监控终端发挥着重要作用。 img_219.png 一、智慧水利解决方案组成 智慧水利解决方案主要由传感测量、现场数据采集、数据传输、云平台分析等子系统组成。其中,现场远程监控终端负责将各类水...</description>
      <category>设计高频</category>
      <pubDate>Sat, 18 May 2024 11:54:56 GMT</pubDate>
      <content:encoded><![CDATA[<p>随着物联网、云计算、大数据等信息技术在水利行业的广泛应用,实现水利设施和系统的智能化、信息化、自动化已成为发展方向。作为智慧水利解决方案的关键组成部分,水利现场远程监控终端发挥着重要作用。<br>
</p>
<p><strong>一、智慧水利解决方案组成</strong></p>
<p>智慧水利解决方案主要由传感测量、现场数据采集、数据传输、云平台分析等子系统组成。其中,现场远程监控终端负责将各类水文、水质、运行参数数据采集汇总后有线或无线传输到远程监控中心,是连接现场与应用的关键设备。</p>
<p><strong>二、远程监控终端选型</strong></p>
<p>目前常用的水利现场远程监控终端包括:</p>
<ol>
<li>
<p>DTU系列数传数据终端:具有串口、以太网、模拟量输入等接口,可连接多种水文水质检测仪表,实现数据汇聚。</p>
</li>
<li>
<p>SG500系列工业网关:提供MODBUS、OPC等协议访问功能,连接PLC、RTU、传感器等,构建现场自动化。<br>
</p>
</li>
</ol>
<p><strong>三、典型应用案例</strong></p>
<p>某江河流域建立智慧水利管理系统,系统组态如下:</p>
<ol>
<li>
<p>在水源地、水库等设置水质水文检测仪表,通过DTU200终端采集数据。</p>
</li>
<li>
<p>在水库闸门、抽水站配置SG500工业网关,实现对现场设备的智能化控制。</p>
</li>
<li>
<p>通过4G公网上传各类监测数据到云平台和水利调度中心。</p>
</li>
<li>
<p>云平台对数据进行存储分析,并下发控制指令给现场网关。</p>
</li>
<li>
<p>水利调度中心利用系统实现水情监测、水资源调度、设备优化运行等。<br>
</p>
</li>
</ol>
<p>该方案充分利用了现场终端的优势,实现了对水利现场的精确采集控制,大幅提升了流域水资源管理和调度的智能化水平,显示了数字化水利建设的巨大潜力。</p>
<p>智慧水利目前主要由无人值守远程智能控制系统、雨情自动遥测系统、自动水位站监测系统和水利设施安防报警系统组成，可根据客户需求增加其他功能或定制开发。<br>
</p>
<h2><strong>四、无人值守远程控制系统</strong></h2>
<p>系统组成：该系统主要由水利设施环境（水位、流速流量、降雨量、温湿度、风速风向等）监测预警系统、山洪预警系统（可扩展）、远程视频监控系统、远程开关闸泵系统、太阳能供电系统（无市电供应时）、水利设施安防预警系统组成。</p>
<p>功能实现：使用无人值守远程智能控制系统后，我们可以在远离现场的控制室里，通过电脑或手机 APP 既可以对现场的水文信息（包括温湿度、风向风速、降雨量、水位流速流量等）实时掌握，又可以实时显示现场的视频监控图像，为合理调度水资源提供第一手数据资料。同时可以对水利设施进行远程精准控制，通过平台软件或手机 APP 就能对现场的设备进行开启、关闭和暂停等操作，极大提高了水利的信息化建设和工作效率，使水利设施的管理更便捷、高效、人性化。<br>
</p>
<p><strong>硬件介绍</strong></p>
<p><strong>(一)</strong>&nbsp;<strong>智能控制器</strong></p>
<figure><figcaption>img_224.png</figcaption></figure>
<p><strong>Ø</strong>&nbsp;<strong>智能控制器实现功能</strong></p>
<p>l 可远程或现场精准控制闸泵的启停及升降；可远程数据采集</p>
<p><strong>Ø</strong>&nbsp;<strong>智能控制器技术参数</strong></p>
<p>l 支持现场校准；支持全网通4G/5G通讯；支持本地WEB升级程序；支持远程升级程序；</p>
<p>l 超低功耗：DC9-36V供电，电流≤500mA；标准RS232通讯接口；RS485接口：最大设备节点255个，防尘防水防雷击设计；4G/5G传输；</p>
<p>l 以太网接口：10MB/100MB自适应；</p>
<p>l 智能控制器接口：可支持2-8路开关量输出；支持多种编码器的接入；支持各种水文气象传感设备及供电信息等数据的接入；具有视频监控流媒体传输限流自控功能。</p>
<p><strong>(一)</strong>&nbsp;<strong>智能控制柜</strong><br>
</p>
<p><strong>Ø</strong>&nbsp;<strong>实现功能</strong></p>
<p>l 各项数据、视频图像实时显示、分析、保存、查询、打印</p>
<p>l 各设备运行状态监测</p>
<p>l 现场非法入侵报警</p>
<p>l 故障报警：太阳能故障、蓄电池电压低、过载保护等</p>
<p>l 水位报警</p>
<p>l 闸门开启故障及限位报警</p>
<p>l 远程自动控制、监测</p>
<p>l 权限登录和操作</p>
<p>l 可扩展性‍‍‍‍</p>
<p><strong>软件介绍</strong></p>
<figure><figcaption>img_226.png</figcaption></figure>
<figure><figcaption>img_227.png</figcaption></figure>
<figure><figcaption>img_228.png</figcaption></figure>
<p><strong>平台软件（含手机APP)功能</strong></p>
<p>（1）基于GIS地图开发，界面更直观、易操作；</p>
<p>（2）含有雨情和水位遥测报警、山洪预警等多功能模块并能根据要求定制开发；</p>
<p>（3）软件可同时在线实时显示四个监控画面，也可单独画面放大显示；可在线实时显示节制闸和泵站状态数据等信息，并能分析、保存、查询、打印等；</p>
<p>（3）通过后台工作站或手机APP可远程对节制闸开闸、关闸；远程对泵站进行开泵、关泵；并根据所需调节开关闸的高度及泵站电动阀的开度；实时显示市电或太阳能的电压、电流，负载电流等；各设备运行状态监测；</p>
<p>（4）现场非法侵入报警；故障报警：远程自动控制、监测；权限登录和操作；</p>
<p>（5）数据库选用Mysql关系型数据库，实现存储海量历史数据；可扩展性；</p>
<h2><strong>五、雨情自动遥测系统</strong></h2>
<p><strong>系统概述</strong></p>
<p>雨情自动遥测系统是基于GIS地图开发并能够实时在线显示、统计、上传降雨量的自动化遥测平台，可进行雨情统计及浏览、实时监控、雨情报警、雨情短信自动发送等功能，广泛应用于防汛、气象、城市排涝等。</p>
<figure><figcaption>img_229.png</figcaption></figure>
<p><strong>硬件介绍</strong></p>
<figure><figcaption>img_230.png</figcaption></figure>
<p>1．可外接雨量传感器；</p>
<p>2．4G、CDMA任意两种信道相连的接口；</p>
<p>3．具有定时自报和响应召测兼容的工作体制；</p>
<p>4．具备主备信道切换、发送确认、自动补发功能；</p>
<p>5．具备电源检测与管理、报警功能；</p>
<p>6．具备防盗开关信号接入与检测功能；</p>
<p>7．具备数据保护不丢失功能；</p>
<p>8．具备自检自诊断功能，死机自动复位；</p>
<p>9．具备自动同步时钟功能。</p>
<p><strong>软件界面</strong></p>
<figure><figcaption>img_231.png</figcaption></figure>
<figure><figcaption>img_232.png</figcaption></figure>
<p><strong>案例展示</strong></p>
<figure><figcaption>img_233.png</figcaption></figure>
<h2><strong>六、自动水位站监测系统</strong></h2>
<p>该系统应用雷达或压力式水位传感器感知水位变化，设备采用太阳能供电，4G/5G无线通讯方式传输水位数据，具有水位实时采集、自动记录上传、站点档案查看、超限报警、低电量报警等功能；适用于水利或城市管理部门远程监测流域的实时水位、天气等数据，同时支持远程视频监控，为保障流域内的适度蓄水和安全度汛提供了准确、及时的现场信息，实现了河流的信息化管理，在保护人民生命、财产安全方面发挥了重大作用。</p>
<figure><figcaption>img_234.png</figcaption></figure>
<p><strong>系统功能</strong></p>
<p><strong>1)</strong>&nbsp;<strong>GIS地图展示</strong></p>
<p>直观显示各河流水位监测站分布位置、当前水位以及设备运行状态。</p>
<p><strong>2)</strong>&nbsp;<strong>水位实时数据</strong></p>
<p>显示各河流水位测点的实时水位和电池电压，并提供360度现场监控图像，实时展现水位动态曲线。</p>
<p><strong>3)</strong>&nbsp;<strong>报警管理</strong></p>
<p>当河流或水库水位高于设定的警戒值时，系统发出报警，并向相关责任人发送手机短信或手机APP预警等多种形式给予提示报警，责任人根据情况可及时采取应对措施并上传预警处置记录。</p>
<p><strong>4)</strong>&nbsp;<strong>天气预报</strong></p>
<p>根据具体城市定位，显示卫星云图、雷达图、分时天气预报及七日天气预报。</p>
<p><strong>软件界面</strong></p>
<figure><figcaption>img_235.png</figcaption></figure>
<figure><figcaption>img_236.png</figcaption></figure>
<p><strong>案例展示</strong></p>
<figure><figcaption>img_237.png</figcaption></figure>
<h2>四、<strong>水利设施安防报警系统</strong></h2>
<p>水利设施多建设在河道和干渠上，位置偏远，设备被破坏、偷盗的现象时有发生，已严重影响水利设施的正常运行和使用，经济损失巨大。</p>
<p>旭瑞智能通过不断改进和完善系统性能，已较大程度的提高了设施的安全防护级别。主要措施由五大系统组成，分别是：</p>
<p>1、自动语音警告系统</p>
<p>2、远程人工喊话系统</p>
<p>3、门禁报警系统</p>
<p>4、智能分析监控系统</p>
<p>5、存储设备定位追回系统</p>
<p><strong>系统功能</strong></p>
<p><strong>(1)</strong>&nbsp;<strong>自动语音警告系统</strong></p>
<p>当现场有人非法入侵时，语音警告系统自动开启，并循环播放提前录入的语音警告，直至入侵者离开。</p>
<p>语音警告可实现循环播放录制的语音，配置高保真音箱。可插U盘，可选择语音。</p>
<figure><figcaption>img_238.png</figcaption></figure>
<p><strong>(2)</strong>&nbsp;<strong>远程人工喊话系统</strong></p>
<p>当自动语音警告系统连续开启超过2分钟（时间可调）时，软件平台会弹出报警信息提醒，管理人员可通过电脑或手机对现场非法行为进行远程喊话，现场加装可支持双向语音对讲的呼叫装置。</p>
<figure><figcaption>img_239.png</figcaption></figure>
<p><strong>(3)</strong>&nbsp;<strong>门禁报警系统</strong></p>
<p>当泵房或闸室的门禁系统处于布防状态，门被打开时，通过安装的门磁探测器会立即发出信号，并发送报警信息给声光报警器，同时通过4G DTU给平台发送报警信息。</p>
<figure><figcaption>img_240.png</figcaption></figure>
<p><strong>(4)</strong>&nbsp;<strong>智能分析监控系统</strong></p>
<p>在现场安装具有AI智能分析功能的摄像机，当有人非法入侵时，可实现对入侵人脸进行抓拍、跟踪，能够在连续跟踪进程中保证抓拍到正面人脸，记录质量最高的面部图像并将录像上传。支持镜头遮挡、视频丢失等的报警功能。</p>
<figure><figcaption>img_241.png</figcaption></figure>
<p><strong>(5)</strong>&nbsp;<strong>存储设备定位追回系统</strong></p>
<p>对现场的存储设备加装定位模块，具有电子围栏,轨迹回放,轨迹跟踪等功能。内置7800mAH电池，无外部供电时仅可实现55天正常工作。</p>
<p>防拆报警：可实现拆除时发送报警信息。</p>
<p>位移报警：可以实现设备移动时发送报警信息。</p>
<p>低电压报警：可实现电压低于5%时发送报警信息。</p>
<p>GPS+北斗定位：(定位精度：2.5m，高灵敏度：-165dBm），4G/5G通讯。</p>
<figure><figcaption>img_242.png</figcaption></figure>
]]></content:encoded>
    </item>
    <item>
      <title>优化算法</title>
      <link>https://ujava.cn/base/optialgorithm.html</link>
      <guid>https://ujava.cn/base/optialgorithm.html</guid>
      <source url="https://ujava.cn/rss.xml">优化算法</source>
      <description>最优化方法是一种数学方法，它是研究在给定约束之下如何寻求某些因素(的量)，以使某一(或某些)指标达到最优的一些学科的总称。在学习机器学习的过程中我们发现，大部分的机器学习算法的本质都是建立优化模型，通过最优化方法对目标函数（或损失函数）进行优化，从而训练出最好的模型。常见的最优化方法有梯度下降法、牛顿法和拟牛顿法、共轭梯度法、拉格朗日数乘法等等。 1....</description>
      <category>设计基础</category>
      <pubDate>Sat, 27 Apr 2024 15:25:14 GMT</pubDate>
      <content:encoded><![CDATA[<p>最优化方法是一种数学方法，它是研究在给定约束之下如何寻求某些因素(的量)，以使某一(或某些)指标达到最优的一些学科的总称。在学习机器学习的过程中我们发现，大部分的机器学习算法的本质都是建立优化模型，通过最优化方法对目标函数（或损失函数）进行优化，从而训练出最好的模型。常见的最优化方法有梯度下降法、牛顿法和拟牛顿法、共轭梯度法、拉格朗日数乘法等等。</p>
<h3>1. 梯度下降法（Gradient Descent）</h3>
<p>梯度下降法是最早最简单，也是最为常用的最优化方法。梯度下降法实现简单，当目标函数是凸函数时，梯度下降法的解是全局解。一般情况下，其解不保证是全局最优解，梯度下降法的速度也未必是最快的。**梯度下降法的优化思想是用当前位置负梯度方向作为搜索方向，因为该方向为当前位置的最快下降方向，所以也被称为是”最速下降法“。最速下降法越接近目标值，步长越小，前进越慢。**梯度下降法的搜索迭代示意图如下图所示：<br>
</p>
<p><strong>梯度下降法的缺点：</strong></p>
<p><strong>（1）靠近极小值时收敛速度减慢，如下图所示；</strong></p>
<p><strong>（2）直线搜索时可能会产生一些问题；</strong></p>
<p><strong>（3）可能会“之字形”地下降。</strong><br>
</p>
<p>从上图可以看出，梯度下降法在接近最优解的区域收敛速度明显变慢，利用梯度下降法求解需要很多次的迭代。</p>
<p>在机器学习中，基于基本的梯度下降法发展了两种梯度下降方法，分别为随机梯度下降法和批量梯度下降法。</p>
<p>比如对一个线性回归（Linear Logistics）模型，假设下面的h(x)是要拟合的函数，J(theta)为损失函数，theta是参数，要迭代求解的值，theta求解出来了那最终要拟合的函数h(theta)就出来了。其中m是训练集的样本个数，n是特征的个数。<br>
</p>
<figure><figcaption>img_3.png</figcaption></figure>
<p><strong>1）批量梯度下降法（Batch Gradient Descent，BGD）</strong></p>
<p>（1）将J(theta)对theta求偏导，得到每个theta对应的的梯度：<br>
</p>
<p>（2）由于是要最小化风险函数，所以按每个参数theta的梯度负方向，来更新每个theta：<br>
</p>
<p>（3）从上面公式可以注意到，它得到的是一个全局最优解，但是每迭代一步，都要用到训练集所有的数据，如果m很大，那么可想而知这种方法的迭代速度会相当的慢。所以，这就引入了另外一种方法——随机梯度下降。</p>
<p>对于批量梯度下降法，样本个数m，x为n维向量，一次迭代需要把m个样本全部带入计算，迭代一次计算量为m*n2。</p>
<p><strong>2）随机梯度下降（Stochastic Gradient Descent，SGD）</strong></p>
<p>（1）上面的风险函数可以写成如下这种形式，损失函数对应的是训练集中每个样本的粒度，而上面批量梯度下降对应的是所有的训练样本：<br>
</p>
<p>（2）每个样本的损失函数，对theta求偏导得到对应梯度，来更新theta：<br>
</p>
<p>（3）随机梯度下降是通过每个样本来迭代更新一次，如果样本量很大的情况（例如几十万），那么可能只用其中几万条或者几千条的样本，就已经将theta迭代到最优解了，对比上面的批量梯度下降，迭代一次需要用到十几万训练样本，一次迭代不可能最优，如果迭代10次的话就需要遍历训练样本10次。但是，SGD伴随的一个问题是噪音较BGD要多，使得SGD并不是每次迭代都向着整体最优化方向。</p>
<p>随机梯度下降每次迭代只使用一个样本，迭代一次计算量为n2，当样本个数m很大的时候，随机梯度下降迭代一次的速度要远高于批量梯度下降方法。<strong>两者的关系可以这样理解：随机梯度下降方法以损失很小的一部分精确度和增加一定数量的迭代次数为代价，换取了总体的优化效率的提升。增加的迭代次数远远小于样本的数量。</strong></p>
<p><strong>对批量梯度下降法和随机梯度下降法的总结：</strong></p>
<p>**批量梯度下降</p>
]]></content:encoded>
    </item>
    <item>
      <title>线性规划</title>
      <link>https://ujava.cn/synthesis/linear.html</link>
      <guid>https://ujava.cn/synthesis/linear.html</guid>
      <source url="https://ujava.cn/rss.xml">线性规划</source>
      <description>1、线性规划 1.1 线性规划的定义 线性规划的标准形式： img_175.png 其中的 c 和 x 均为 n 维列向量，A、 Aeq 为适当维数的矩阵，b 、beq 为适当维数的列向量。 例如：x1 和 x2 称为决策变量，整个式子分为了目标函数和约束条件 img_176.png 总之， 线性规划问题是在一组线性约束条件的限制下， 求一线性目标函数...</description>
      <category>设计高频</category>
      <pubDate>Sat, 27 Apr 2024 14:45:18 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1.1 线性规划的定义</h2>
<p>线性规划的标准形式：<br>
</p>
<p>其中的 c 和 x 均为 n 维列向量，A、 Aeq 为适当维数的矩阵，b 、beq 为适当维数的列向量。</p>
<p>例如：x1 和 x2 称为决策变量，整个式子分为了目标函数和约束条件<br>
</p>
<p>总之， 线性规划问题是在一组<strong>线性约束条件</strong>的限制下， 求一线性目标函数最大或最小的问题。</p>
<h2>1.2 线性规划的解</h2>
<p>线性规划问题的标准数学形式：<br>
</p>
<p>满足（4）并使（3）达到最大值的可行解称为最优解；可行解构成的域称为可行域。</p>
<h3>1.2.1 图解法</h3>
<p>1.1 中例子的约束条件 x1 和 x2 可用域如下，显然，对于目标函数来说，x1 和 x2<br>
越大，目标函数值越大，最优解为<img src="https://gitee.com/sgkurisu/pic-go/raw/master/picture2/20210804193538.png" alt="image-20210804193538356" loading="lazy"><br>
，最优目标值为 z* = 26。<br>
</p>
<p>有如下结论：</p>
<ol>
<li>可行域可出现多种情况，既可能有界，也可能无界。</li>
<li>可行域非空时，既可存在有限最优解，也可不存在最优解。</li>
<li>若存在最优解，则必可找到具有可行域的“顶点” 。</li>
</ol>
<h3>1.2.2 MATLAB 解法</h3>
<p>MATLAB 线性规划标准形式为<br>
</p>
<p>线性规划的函数为 linprog ，注意，linprog 求解的为线性规划最小值 min，若想求线性规划最大值，则需要对向量 c 取符号</p>
<div class="language-matlab line-numbers-mode" data-highlighter="shiki" data-ext="matlab" data-title="matlab" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[x,fval] = linprog(c,A,b,Aeq,beq,LB,UB,X0,OPTIONS)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>fval 返回目标函数的值， LB 和 UB 分别是变量 x 的下界和上界，x0 是 x 的初始值，</p>
<blockquote>
<p>例 1<br>
</p>
</blockquote>
<p>m 文件：注意 linprog 中 c 取了负号<br>
</p>
<blockquote>
<p>例 2<br>
</p>
</blockquote>
<p>m 文件：<br>
</p>
<h2>1.3 可转换为线性规划的问题</h2>
<figure><figcaption>img_184.png</figcaption></figure>
<p>可取<br>
</p>
<figure><figcaption>img_186.png</figcaption></figure>
<p>那么问题转化为<br>
</p>
<blockquote>
<p>例 3<br>
</p>
</blockquote>
<p>其中 </p>
<p>对于以上问题，取  ，那么问题变为线性规划问题<br>
</p>
<h2>1.4 运输问题</h2>
<p>某产品有 m 个产地，n 个销地，各地产量为 a1，a2 ... am，各地需求量为 b1，b2 ... bn，从 i 到 j 的<strong>单价</strong>运费为<br>
cij，问如何调度才可使总运费最省？</p>
<p>解：</p>
<p>引入 xij，其取值为由 i 产地运往 j 销地的该商品数量，有<br>
</p>
<p>对于产销平衡问题，有以下关系：<br>
</p>
<h2>1.5 指派问题</h2>
<p>n 个人干 n 项工作，若第 i 个人去干第 j 项工作，需要花费 cij 时间，给定矩阵 C = (cij) 问如何分配才可使花费总时间最短？</p>
<p>解：</p>
<p>引入变量 xij，用来表示第 i 个人是否做第 j 项工作，xij = 1 表示做，xij = 0 表示不做，那么可得到如下数学模型：<br>
</p>
<figure><figcaption>img_195.png</figcaption></figure>
<p>同理，xij 也可使用矩阵来表示，每行每列仅有一个为 1，其余为 0，因此这为 0-1 规划问题，针对指派问题，可将约束条件写为 xij &gt;= 0<br>
，m = n = n，ai = bi = 1 ，因此可发现，这个问题进一步简化为了运输问题。<br>
</p>
<figure><figcaption>img_197.png</figcaption></figure>
<h3>1.5.1 指派问题的匈牙利算法</h3>
<p>对系数矩阵 C 行或列进行线性变换，得到新的矩阵 B，矩阵 B 和 C 具有相同的最优指派。</p>
<blockquote>
<p>例 4</p>
</blockquote>
<p>指派问题的系数矩阵为<br>
</p>
<p>对其进行行列变换得到：<br>
</p>
<p>可发现，最优指派为 x12 = 1, x21 = 1, x33 = 1, x44 = 1<br>
</p>
<blockquote>
<p>例 5</p>
</blockquote>
<p>对于较为复杂的指派问题<br>
</p>
<p>对其进行线性变换，有<br>
</p>
<p>对于第 3 行和第 5 行，都只在第 1 个元素的位置为 0，那么这时无法得到最优指派，只能继续进行线性变换，有<br>
</p>
<p>这时，可发现，最优指派为 x12 = 1, x24 = 1, x31 = 1, x43 = 1, x55 = 1<br>
</p>
<h2>1.6 对偶理论与灵敏度分析</h2>
<h3>1.6.1 原始问题和对偶问题</h3>
<figure><figcaption>img_205.png</figcaption></figure>
<p>称（P）为原始问题， （D）为它的对偶问题。 注意变换时 c 和 b 的位置。</p>
<p>对于如下线性规划问题：<br>
</p>
<p>可改写为<br>
</p>
<p>那么对偶问题为<br>
</p>
<p>令 y = y1 - y2 ，又可写成<br>
</p>
<p>可将原始问题转化为对偶问题进行求解，在求出最优解后，再根据性质反求出原始问题的最优解。</p>
<h3>4.2 灵敏度分析</h3>
<p>灵敏度分析就是系数、常数等发生变化时， 已求得的线性规划问题的最优解会有什么变化；或者这些系数在什么范围内变化时，<br>
线性规划问题的最优解或最优解不变。也可理解为鲁棒性。</p>
<h2>1.7 投资的收益和风险</h2>
<p>以一个题目为例对本知识点进行总结。</p>
<h3>1.7.1 问题描述</h3>
<p>市场上有 n 种资产 si(i = 1, 2, ..., n)，目前资金总数为 M，资产 si 的收益率为 ri，亏损率为 qi，交易费率为 pi，在不超过金额 ui<br>
时，交易费按 ui 计算，假设银行存款利率为 r0。r0 = 5%</p>
<p>n = 4 时<br>
</p>
<p>目标是使净收益尽可能大，总风险尽可能小。</p>
<h3>1.7.2 符号规定</h3>
<p>定义 xi 为投资 si 的资金，a 为投资风险度，Q 为总体收益。</p>
<p>基本假设：</p>
<ol>
<li>投资数额 M 相当大，为了便于计算，假设 M = 1</li>
<li>投资越分散，总的风险越小</li>
<li>总体风险用所投资的所有项目中最大的一个风险来度量</li>
<li>n 种资产之间是相互独立的</li>
<li>ri，pi，qi，r0 为定值，不受外界影响</li>
</ol>
<h3>1.7.3 建模与分析</h3>
<p>模型为：目标函数第一个为收益，第二个为风险</p>
<figure><figcaption>img_211.png</figcaption></figure>
<h3>1.7.4 模型简化</h3>
<blockquote>
<p>固定风险水平，优化收益</p>
</blockquote>
<p>在实际中，由于承受风险能力不同，因此规定一个风险界限 a，使得  ，那么模型变为</p>
<p>模型一：<br>
</p>
<blockquote>
<p>固定盈利水平，极小化风险</p>
</blockquote>
<p>若希望总盈利到达 k 以上，则目标函数变为了极小化风险</p>
<p>模型二：<br>
</p>
<blockquote>
<p>权衡资产风险和预期收益</p>
</blockquote>
<p>对风险和收益进行权衡，设置权重 s (0 &lt; s &lt; 1)，s 称为投资偏好系数</p>
<p>模型三：</p>
<figure><figcaption>img_215.png</figcaption></figure>
<h3>1.7.5 模型的求解</h3>
<p>以上模型的求解可使用 MATLAB 解法进行解决，以模型一为例<br>
<br>
</p>
<p>从 a = 0 开始，以步长 0.001 循环搜索，MATLAB 代码如下：<br>
</p>
<h3>1.7.6 结果分析</h3>
<ol>
<li>风险大，收益也大。</li>
<li>当投资越分散时，投资者承担的风险越小，冒险的投资者会出现集中投资的情况，保守的投资者则尽量分散投资。</li>
<li>（根据 MATLAB 图形进行说明）在 a = 0.006<br>
附近有转折点，在这一点左边，风险增加很少时，利润增长很快。在这一点右边，风险增加很大时，利润增长很缓慢，所以对于风险和收益没有特殊偏好的投资者来说，应该选择曲线的拐点作为最优投资组合，大约<br>
a = 0.6%，Q = 20%，（然后计算投入各个资产的资金数量）x0 = 0, x1 = 0.24, x2 = 0.4, x3 = 0.1091, x4 = 0.2212.</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>组件ERP</title>
      <link>https://ujava.cn/assembly/erp.html</link>
      <guid>https://ujava.cn/assembly/erp.html</guid>
      <source url="https://ujava.cn/rss.xml">组件ERP</source>
      <description>一、ERP是什么？ ERP是企业资源计划（Enterpise Resource Planning）的简称，蕴含现代企业管理理念，其核心是在制造资源计划基础上进一步发展而成的面向供应链的管理思想。 二、ERP的宗旨是什么？ ERP的主要宗旨是将企业的各方面资源（人力、资金、信息、物料、设备、时间、方法等）进行科学地计划、管理和控制。为企业加强资产管理、提...</description>
      <category>设计高频</category>
      <pubDate>Sat, 27 Apr 2024 14:03:48 GMT</pubDate>
      <content:encoded><![CDATA[<h2>一、ERP是什么？</h2>
<p>ERP是企业资源计划（Enterpise Resource Planning）的简称，蕴含现代企业管理理念，其核心是在制造资源计划基础上进一步发展而成的面向供应链的管理思想。</p>
<h2>二、ERP的宗旨是什么？</h2>
<p>ERP的主要宗旨是将企业的各方面资源（人力、资金、信息、物料、设备、时间、方法等）进行科学地计划、管理和控制。为企业加强资产管理、提高资金运营水平、建立高效率供应链、规范管理流、提高精益化管理水平、提高客户</p>
<p>服务水平，为实现设备全生命周期管理奠定基础。</p>
<h2>三、ERP蕴含的先进理念是什么？</h2>
<p>ERP应用当前国际上最为先进的企业管理模式和理念，主要宗旨是：将企业各方面包括人、财、物、产、供销等在内的资源充分调配和平衡，使企业在激烈的市场竞争中有效</p>
<p>调动各方资源、充分发挥各方能力，从而取得最好的经济效益。</p>
<h2>四、ERP包括以下五个模块</h2>
<p>（1）项目管理模块（PS）</p>
<p>项目是指把各种系统、方法和人员结合在一起，在规定的时间、预算、质量和目标范围内完成的各项工作。有效的项目管理是指：在规定用来实现具体目标和指标的时间内，对组织机构中的资源进行计划、引导和控制工作。</p>
<p>SAP的项目管理PS是SAP ECC的一个集成解决方案，它具有基础管理、项目结构管理、规划管理、预算管理、项目实现、信息系统等功能，它与其它MM、PM、FICO模块有高度的集成性。</p>
<p>MM模块是解决项目物资和服务采购过程的管理，PM模块解决项目竣工后移交生产设备的管理，FICO模块是实现项目成本核算和结算等，通过PS的集成性可以实现项目的立项申请、计划、执行、结算和决算管理和控制。</p>
<p>（2） 人资管理模块（HR）</p>
<p>主要由组织管理、职务岗位管理、人事管理、档案、合同管理、时间管理、工资核算、薪酬和福利管理、培训管理、招聘管理、绩效管理、人才保留、继任计划管理、职业发展管理等功能组成。</p>
<p>（3） 物资管理模块（MM）</p>
<p>是指基于物料（含服务）的物流管理操作。主要由物料主数据管理、计划管理、供应商管理、采购管理、库存管理、仓储管理以及票据管理（发票校验）等功能组成。</p>
<p>（4） 财务管理模块（FI）</p>
<p>是指必须能够按照有关规定向股东、债权人、以及社会公众披露并提供所需的信息。主要由总分类账、应收帐、固定资产、法定合并报表以及特殊目的的分类账等会计功能组成。</p>
<p>（5）设备管理模块（PM）</p>
<p>作为SAP集成系统中的一个功能子模块，涵盖了一个工厂系统的所有维护任务。</p>
]]></content:encoded>
    </item>
    <item>
      <title>运筹学</title>
      <link>https://ujava.cn/synthesis/operational.html</link>
      <guid>https://ujava.cn/synthesis/operational.html</guid>
      <source url="https://ujava.cn/rss.xml">运筹学</source>
      <description>第一章 1.运筹学（operations Research，简称OR）是一门研究如何有效的组织管理人机系统的科学。 2.运筹学的目的是通过定量分析为决策和揭露新问题提供数量根据 3.运筹学利用计划方法和有关学科的要求把复杂功能关系表示成数学模型，其目的是通过定量分析为决策和揭露新问题提供数量根据 4.运筹学应用分析的经验和数量的方法，对各种可供选择的方...</description>
      <category>设计高频</category>
      <pubDate>Sat, 27 Apr 2024 13:52:48 GMT</pubDate>
      <content:encoded><![CDATA[
<h3>1.运筹学（operations Research，简称OR）是一门研究如何有效的组织管理人机系统的科学。</h3>
<h3>2.运筹学的目的是通过定量分析为决策和揭露新问题提供数量根据</h3>
<h3>3.运筹学利用计划方法和有关学科的要求把复杂功能关系表示成数学模型，其目的是通过定量分析为决策和揭露新问题提供数量根据</h3>
<h3>4.运筹学应用分析的经验和数量的方法，对各种可供选择的方案进行比较评价，为制定最优的管理决策提供数量上的依据。</h3>
<h3>5.对于管理领域，运筹学也是对管理决策工作进行决策的计量方法。</h3>
<h3>6.在当今信息时代，运筹学和计算机方法的分界线将会消失，并将脱离各自原来的领域，组合成更通用广泛的管理科学的形式</h3>
<h3>7.根据决策人员的主观经验或知识而制定的决策，称之为定性决策</h3>
<h3>8.必须运用定性和定量两种方法才能制定的决策，称之为混合性决策</h3>
<h3>9.借助于某种正规的计量方法而做出的决策，称之为定量决策</h3>
<h1>第二章</h1>
<h3>1.作为运筹学应用者，接受管理部门的要求，去收集和阐明数据，建立和试验数学模型，预言未来作业，然后制定方案，并推荐给经理部门。</h3>
<h3>2.问题域的环境有内部环境和外部环境。</h3>
<h3>对企业来说，</h3>
<ul>
<li>内部环境一般指问题域内部的人、财、物之间的交互活动。</li>
<li>外部环境一般指问题域界面与外界的人、财、物之间的交互活动</li>
</ul>
<h3>3.SWOT分析和决策不属于应用运筹学进行决策过程</h3>
<h3>4.运筹学科学方法论的六个步骤</h3>
<h3>①观察待决策问题所处的环境</h3>
<h3>②分析和定义待决策的问题</h3>
<h3>③拟定模型</h3>
<h3>④选择输入资料</h3>
<h3>⑤提出解并验证它的合理性</h3>
<h3>⑥实施最优解</h3>
<h3>5.应用运筹学方法进行决策过程中，一旦建立成适当的模型，就要准备收集哪个模型所需要的数据</h3>
<h3>6.预测是决策基础。企业预测的目的就是为企业决策提供适当的数据或资料</h3>
<h3>7.预测就是对未来的不确定的事件进行估计或预判</h3>
<h3>8.不属于微观经济学的内容是国民收入增长率</h3>
<h3>9.对科学发展趋势和发明、科学发展、产品发展与社会生活的关系等预测属于科学预测</h3>
<h3>10.社会预测</h3>
<ul>
<li>人口增长预测属于社会预测</li>
<li>社会购买心里的预测属于社会预测</li>
</ul>
<h3>11.定性预测有两种方法</h3>
<ul>
<li>专家小组法（面对面讨论，容易被权威影响、适用于短期预测）</li>
<li>特尔斐法（专家群、匿名获取意见、多次信息反馈、适用于长期预测）</li>
</ul>
<h3>12.军事预测是研究与战争、军事有关的问题</h3>
<h3>13.按内容划分，预测方法中包含经济预测</h3>
<h3>14.按内容划分的预测方法</h3>
<ul>
<li>经济预测</li>
<li>社会预测</li>
<li>科学预测</li>
<li>军事预测</li>
</ul>
<h3>15.定性预测又称之为直观预测，是指利用直观材料，依靠个人经验的主观经验的主管判断和分析能力，对未来的发展进行预测</h3>
<h3>16.科技预测年限范围</h3>
<ul>
<li>短期的年限是5~10年</li>
<li>中期的年限是10~30年</li>
<li>长期的年限是30~50年</li>
</ul>
<h3>17.外推法包含时间序列分析法</h3>
<h3>18.凡利用历史数据来推算事物发展趋势的叫外推法，常用的有时间序列分析法</h3>
<h3>19.凡利用事物内部因素发展的因果关系来预测事物发展趋势的叫因果法，常用的有回归分析法、经济计量法、投入产出分析法等</h3>
<h3>20.根据历史数据和资料，应用数理统计方法来预测事物的未来，或者利用事物发展的因果关系来预测事物的未来，属于定量预测</h3>
<h3>21.经济预测分为两种</h3>
<ul>
<li>宏观经济预测：国民经济范围（国民收入增长率）</li>
<li>微观经济预测：单个实体经济（市场需求、市场占有率、产品的销售额）</li>
</ul>
<h3>22.一般而论，1~3年内的经济预测为中期预测</h3>
<h3>23.经济预测的年限范围</h3>
<ul>
<li>短期（近期）预测是1年内</li>
<li>中期预测是1~3年内</li>
<li>长期预测是3~5年内</li>
</ul>
<h3>24.描述国民经济大系统以及相关经济变量的社会综合值的预测属于宏观经济预测</h3>
<h3>25.技术预测包括：新技术发明可能应用的领域范围和速度、新设备、新工艺、新材料的特点、性能及作用等</h3>
<h3>26.预测的方法</h3>
<ul>
<li>定性预测</li>
<li>定量预测</li>
</ul>
<h3><a class="header-anchor" href="#_27-滑动平均预测法"><span>27.</span></a><a href="https://www.cnblogs.com/saoge/p/16079225.html" target="_blank" rel="noopener noreferrer">滑动平均预测法</a></h3>
<h3>28.带权滑动平均数</h3>
<h3>29.指数平滑预测法</h3>
<h3>30.平滑公式:8月份预测值 = 7月份实际值*平滑系数+(1-平滑系数)*7月份预测值<img src="https://img2023.cnblogs.com/blog/2135082/202303/2135082-20230314215503642-1522481382.png" alt="" loading="lazy"></h3>
<h3>31.若是商品看涨或看跌滑动系数大于1较为合理</h3>
<h3>32.回归模型预测法(回归分析法)</h3>
<h3>33.直线方程:y=a+bx</h3>
<h3>34.回归分析法就是依据事物发展的内部因素变化的因果关系来预测事物未来的发展趋势</h3>
<h3>35.相关关系是由于变量之间的因果关系存在着其他因素的干扰与影响,使变量间的关系出现不确定性</h3>
<h3>36.一元线性回归:只有一个X,表达式:y=a+bx</h3>
<figure><figcaption>img_148.png</figcaption></figure>
<h3>37.多元线性回归:多个X</h3>
<h3>38.最小二乘法:寻求使误差平方总和为最小的配合趋势线的方法</h3>
<figure><figcaption>img_149.png</figcaption></figure>
<h3>39.回归模型建立后,还需要经过相关检验,才能应用与预测</h3>
<h3>40.可以根据已知数据计算出相关系数R,根据R的大小来判定Y与X的相关程度</h3>
<h3>41.R的取值范围是[-1,1],即-1&lt;=R&lt;=1</h3>
<figure><figcaption>img_150.png</figcaption></figure>
<h3>42.置信区间:这个值和实际值达到概率的95%</h3>
<figure><figcaption>img_151.png</figcaption></figure>
<h3>43.季节性变动的预测</h3>
<figure><figcaption>img_152.png</figcaption></figure>
<h3>44.调整成本采用指数平滑法进行预测,依然选用较小的a</h3>
<h1>第三章</h1>
<h3>1.在不同环境下的决策</h3>
<ul>
<li>确定条件的决策:只存在一种状态</li>
<li>不确定条件下的决策:存在一个以上的状态,不完全了解概率</li>
<li>风险条件下的决策:根据概率值,有概率就有风险</li>
</ul>
<h3>2.决策的分类</h3>
<ul>
<li>计划性决策:制定计划时做的决策</li>
<li>控制性决策:实施计划时做的决策</li>
<li>常规性决策:重复性决策(吃饭)</li>
<li>特殊性决策:无先例的新问题(报专业)</li>
</ul>
<h3>3.西蒙在&lt;管理决策新科学&gt;,管理的关键在于决策</h3>
<h3>4.广义的决策的四个程序</h3>
<ul>
<li>明确决策的目的</li>
<li>寻找可行的方案</li>
<li>在诸多可行方案中进行抉择</li>
<li>对选定的方案实施后的结果进行总结评价<br>
</li>
</ul>
<h3>5.决策的概念:明确目标问题,并拟定多个可行方案,在选中最佳方案的全过程</h3>
<h3>6.最大最大决策标准:乐观-&gt;先大后大(max{a,b,c})</h3>
<h3>7.最大最小决策标准:悲观-&gt;先小后大(先min后max)</h3>
<figure><figcaption>img_154.png</figcaption></figure>
<h3>8.现实主义决策标准:</h3>
<ul>
<li>折中主义决策标准</li>
<li>最佳概率定为a,最差概率定义为(1-a)</li>
<li>a=折中系数</li>
<li>范围(0&lt;a&lt;1)</li>
<li>公式</li>
<li>先算CV在max</li>
</ul>
<h3>9.最小最大遗憾值决策标准</h3>
<ul>
<li>遗憾值 = 后悔值</li>
<li>画图:收益值改为遗憾值</li>
<li>用该列最大值-其他值=遗憾值</li>
<li>最后max所有遗憾值行,后在min结果遗憾值<br>
</li>
</ul>
<h3>10.最大期望收益值标准:</h3>
<ul>
<li>用概率作为其权重,计算加权平均数-期望收益</li>
<li>公式:收益1 * 概率1 + 收益2 * 概率2 + 收益3 * 概率3 = 期望收益</li>
<li>根据公式计算期望值收益后,在进行max期望收益</li>
<li>收益 = 售价 * 售出数量 - 成本 * 生产数量<br>
</li>
</ul>
<h3>11.最小期望损失值标准</h3>
<h3>12.决策树</h3>
<ul>
<li>不仅可以解决但阶段决策问题,而且可以应用于复杂的多阶段决策</li>
<li>方块结点 -&gt; 决策结点 -&gt; 决策两个节点的线叫方案枝</li>
<li>圆圈结点 -&gt; 状态结点 -&gt;两个节点的线叫状态枝</li>
</ul>
<h3>13.总结</h3>
<figure><figcaption>img_158.png</figcaption></figure>
<h3>14.案例</h3>
<figure><figcaption>img_159.png</figcaption></figure>
<h1>第四章</h1>
<h3>1.库存管理的对象</h3>
<ul>
<li>原材料,半成品</li>
<li>在制品</li>
<li>成品</li>
</ul>
<h3>2.库存管理的意义</h3>
<ul>
<li>保证企业按计划实现均衡生产,不能因缺少原材料或卡物质而停工停产</li>
<li>使库存管理的总费用达到最低</li>
</ul>
<h3>3.存货台套法:以存货台套作为存货管理的单位,在一个存货台套中可以包括有关的各种单项存货,是一种单位</h3>
<h3>4.ABC分析法:按照年度需用价值</h3>
<ul>
<li>A类:(特殊物品,数量少,但很重要,很值钱)数量10% 年度需用价值70%</li>
<li>B类:(数量30%,年度需用价值20%)</li>
<li>C类:(数量60%,年度需用价值10%)不值钱,但数量多</li>
</ul>
<h4>5.原材料库库存费用模型构造: 库存费用 = 订货费 +保管费</h4>
<ul>
<li>保管费用:折旧和管理</li>
<li>订货费用:订货需要的费用(采购人员的工作,差旅费)</li>
<li>基本都是按年算的,订货费用都是固定的</li>
<li>订货费 = 每年订货次数 * 每次订货费用</li>
<li>保管费 = 全年需求量 / 每年订货次数 * 每次原材料保管费</li>
<li>运费不算订货费,算进厂价</li>
</ul>
<h3>6.半成品和成品库:库存费用 = 工装调整费 + 保管费</h3>
<ul>
<li>工装调整费:(设备调整和检验所需费用)</li>
</ul>
<h3>7.年需求量固定的情况下</h3>
<ul>
<li>订货次数越多,订货费用越多,订货量越少,保管费用越低</li>
<li>订货次数越少,订货费用越少,订货量越多,保管费用越高</li>
</ul>
<h3>8.平均库存概念</h3>
<ul>
<li>平均库存量等于订货批量大小的一半</li>
<li>平均库存 = 订货量 / 2</li>
</ul>
<h3>9.订货费用 = 年需要量 / 订货量 * 一次订货费</h3>
<h3>10.保管费用 = 平均存货量 * 每一库存台套的年保管费用 =最佳订货量 / 2 * 单价 * 保管费用率</h3>
<ul>
<li>平均存货量 = 最佳订货量 / 2</li>
<li>每一库存台套的年保管费用 = 单价 * 保管费用率</li>
<li>平均库存量就是平均存货量<br>
</li>
</ul>
<h3>11.经济订货量(EOQ)是使总存货费用达到最低的某个存货台套的最佳订货批量,使全年保管费用和订货费用的总和达到最小值</h3>
<h3>12.当订货费用 = 保管费用 时达到最小</h3>
<h3>13.最佳订货量 = 2订需/存 开根号</h3>
<h3>14.最佳订货次数 = 年需要量 / 最佳订货量</h3>
<h3>15.最佳订货间隔期 = 最佳订货次数 / 365</h3>
<h3>16.平均存货量 = 最佳订货量 / 2</h3>
<h3>17.平均存货额 = 最佳订货量 / 2 * 单价 = 平均存货量 * 单价</h3>
<figure><figcaption>img_161.png</figcaption></figure>
<h3>18.订货时间的确定</h3>
<ul>
<li>前置时间 = &gt; 订货提前期</li>
<li>再订货点 :再订货的时间或订货的数量</li>
<li>缺货是指仓库中已没有某项存货可以满足生产需求或销量需要时的状况</li>
</ul>
<h3>19.确定库存模型的前提是:使用量和提前时间都是恒定的</h3>
<h3>20.避免缺货</h3>
<ul>
<li>增加订货库存</li>
<li>订货催运</li>
<li>提高前置时间</li>
<li>安全库存量=&gt;库存预警:防止缺货的额外库存</li>
</ul>
<h3>21.大批量采购</h3>
<ul>
<li>优点:订货费低,降低了订货费用</li>
<li>缺点:保管费用高</li>
</ul>
<h1>第五章</h1>
<h3>1.图解法</h3>
<ul>
<li>先设置x1,x2,f公式,和2个不等式,x1&gt;=0,x2&gt;= 0</li>
<li>根据两个不等式画图,一个不等式一条线,x1和x2分别等于0 带入不等式得到两个点</li>
<li>解二元一次方程,带入法或加减消除法</li>
<li>算出图中的交叉点的两个值</li>
<li>再将三个点的值分别带入f 公式算出值</li>
<li>最后max算出的三个点值</li>
</ul>
<h3>2.现性规则是一种合理利用资源'合理调配资源的应用数学方法</h3>
<h3>3.线性规划的基本特点是模型中的线性函数</h3>
<h3>4.线性规划模型结构</h3>
<ul>
<li>变量是指实际系统或决策问题中有待确认的未知因素</li>
<li>目标函数是决策者对决策问题目标的数学描述,是一个极值问题,即极大值或极小值</li>
<li>约束条件是指实现目标的限制因素</li>
<li>线性规划的变量为非负值</li>
</ul>
<h3>5.线性规划的基本特点是模型的数学表达式是线性函数</h3>
<h3>6.线性规划的解法有图解法和单纯形法两种</h3>
<ul>
<li>图解法:适用于解2~3个变量的线性规划问题,满足约束条件的解称之为可行解 (图形的阴影部分)</li>
<li>可行解区就是全部可行解所分布的区域,又称凸集(图形的阴影部分)</li>
<li>可行解区域内满足目标函数的解称之为最优解</li>
</ul>
<h3>7.线性规划的基本原理:如果线性规划问题有最优解,最优解必在可行解区边缘折线的凸交点上</h3>
<h3>8.单纯形法</h3>
<ul>
<li>引入辅助变量(松弛变量)k1和k2,将约束条件的不等式转变成等式</li>
<li>约束条件的大于等于,则引进剩余变量和人工变量</li>
<li>k1和k2是多用的原材料(基变量),约束方程组的通解</li>
<li>非基变量x1和x2一个具体的值,九可以获得到一个特解(特解有多个)</li>
<li>所有非基变量都等于0的特解称之为基解</li>
<li>当基解满足非负的要求时,叫可行基解</li>
<li>一个线性规划问题,若有最优解,那么最优解必然是一个基变量组的可行基解</li>
<li>一个基变量组有一个通解,一个基解,无数个特解(总结:只有特解是多个,其他只有一个)</li>
<li>先写不等式解出后,要画图</li>
</ul>
<h3>9.线性规划模型的标准形式中约束条件为等式方程组</h3>
<h3>10.线性规划模型因素</h3>
<ul>
<li>决策问题目标-&gt;目标函数</li>
<li>限制因素-&gt;约束条件</li>
<li>未知因素-&gt;变量</li>
<li>基本特性-&gt;线性函数</li>
</ul>
<h3>11.单渠道随机排队法:由一个单服务台,随机到达和随即服务时间的情况形成</h3>
<h1>第六章</h1>
<h3>1.求得一个最初的运输方案</h3>
<ul>
<li>西北角法(阶石法)-求最初运输方案</li>
</ul>
<h3>2.初始运输方案数字格的数目应为:(m + n - 1)</h3>
<h3>3.寻求改进方案</h3>
<ul>
<li>闭合回路法-&gt;改进路线</li>
</ul>
<h3>4.建立改进方案</h3>
<ul>
<li>在所有空格中,挑选绝对值最大的负改进指数所在的空格作为调整格</li>
<li>在调整路线中,选中负号格的最小运量作为调整运量</li>
</ul>
<h3>5.最优方案可以继续改进,改进之后运输费用已经不能进一步降低</h3>
<h3>6.当所有空格的改进指数都大于或等于0时,就得到了最优方案</h3>
<h3>7.运输问题必然有最优方案,但最优方案不一定是唯一.</h3>
<h3>8.修正分配法(位势法)</h3>
<ul>
<li>先求每一个空格的改进指数</li>
<li>再寻求最优改进指数的改进路线</li>
<li>没有讲,主要用于电脑的</li>
</ul>
<h3>9.修正分配法与闭合回路法的关系</h3>
<ul>
<li>闭合回路法是修正分配法的基础</li>
<li>修正分配法更简便</li>
<li>两种方法的结果是相同的</li>
</ul>
<h3>10.运输问题属于线性规划问题.</h3>
<h3>11.产销不均衡,我们可以通过虚设一个产地或销地解决</h3>
<h3>12.可求解运输问题的最简便方法是表上作业法.</h3>
<h3>13.运输问题的解是指满足要求的各供应点到各需求点的运量.</h3>
<h3>14.平衡运输问题的所有产地的总产量和所有销地的总需求量相等.</h3>
<h3>15.表上作业法是指首先把产销平衡表和运价表压缩在一张表格里,然后求出一个初始调运方案,再加以判断和调整,直至求得最优方案的方法</h3>
<h3>16.表上作业法的基础是单纯形法</h3>
<h3>17.对于供需平衡的运输问题和供需不平衡的运输问题,其结构模型是不同的,所以要分别对待</h3>
<ul>
<li>供需平衡</li>
<li>供大于需</li>
<li>供小于需</li>
</ul>
<h3>18.当存在最优解时,其中数字格有m+n-1个</h3>
<h3>19.改进指数(位势差)就是指循着改进路线,当货物的运输量作为一个单位的变化时,会引起总运输费用的改变量</h3>
<h3>20.闭合回路法需要先对各个空格寻求一条闭合的改进路线</h3>
<h3>22.都是负数,运量最小,绝对值最大</h3>
<h3>23.退化现象:数字格子&lt;m+n-1</h3>
<figure><figcaption>img_163.png</figcaption></figure>
<h1>第七章</h1>
<h3>1.网络图的分类</h3>
<ul>
<li>线路</li>
<li>结点</li>
<li>箭线</li>
<li>虚活动</li>
</ul>
<h3>2.网络计划技术是综合运用计划评核术和关键路线法的一种比较先进的计划管理方法</h3>
<ul>
<li>计划评核术是对计划项目进行核算'评价,然后选定最优计划方案的技术</li>
<li>关键路线法是再计划项目的各项错综复杂的工作中,抓住其中的关键路线(路长最大的线路)进行计划安排的一种方法</li>
</ul>
<h3>3.网络图分两种</h3>
<ul>
<li>结点式网络图以结点代表活动,以箭线代表个活动的先后承接关系(开始和完成)</li>
<li>箭线式网络图以箭线代表活动(作业),以结点代表活动的开始和完成</li>
</ul>
<h3>4.箭线式网络图</h3>
<ul>
<li>线路:起点沿着箭线方向到终点的线</li>
<li>结点:活动的开始或完成,两个活动之间的交接点,不消耗资源,不占用时间</li>
<li>箭线(活动:消耗资源,占用时间)</li>
<li>虚活动:可有可无,不消耗资源,不占用时间</li>
<li>路长:线路的长度</li>
<li>关键线路:总作业时间最长(路长最大的线路)</li>
</ul>
<h3>5.活动明细表</h3>
<ul>
<li>箭线(活动)</li>
<li>编号必须是奇数</li>
<li>如果有两个以上紧前活动,就可以加虚活动</li>
<li>关键线路:双横线,不等减少工期</li>
</ul>
<h3>6.某工程 各道工具已确定,为使其达到"成本最低和工期合理"的要求,进行优化时应采用网络计划技术.</h3>
<h3>7.网络计划技术是解决组织生产和进行计划管理的科学方法</h3>
<h3>8.网络计划技术的基础是网络图</h3>
<h3>9.作业时间(T)就是在一定的生产技术条件下,完成一项活动或一道工序所需的时间</h3>
<h3>10.确定作业时间两种方法</h3>
<ul>
<li>单一时间估计法:在估计各项活动的作业时,只确定一个时间值</li>
<li>三种时间估计法
<ul>
<li>最乐观时间 -&gt; 最短时间</li>
<li>最保守时间 -&gt; 最长时间</li>
<li>最可能时间 -&gt; 可能性最大时间</li>
<li><figcaption>img_164.png</figcaption></li>
</ul>
</li>
</ul>
<h3>11.图上计算法:网络时间的计算方法</h3>
<h3>12.结点最迟完成时间</h3>
<h3>13.因为不占用时间,所以一个结点的最迟完成时间和最迟开始时间是同一个时间</h3>
<h3>14.最早时间:(早大晚小)</h3>
<h3>15.最晚时间:(早大晚小)</h3>
<h3>16.结点的时间</h3>
<ul>
<li>最早开始</li>
<li>最晚开始</li>
<li>最早完成</li>
<li>最晚完成</li>
</ul>
<h3>17.活动最早开始时间是箭尾结点的最早完成时间</h3>
<h3>18.活动最迟完成时间是箭头结点的最晚完成时间</h3>
<h3>19.最迟开始时间等于他的最迟完成时间减去所需作业时间</h3>
<h3>20.表格技计算法</h3>
<h3>21.时差为0的点就是关键结点,关键结点从起点到终点合起来就是关键线路</h3>
<h3>22.总时差:后大 - 前小 - 作业时间</h3>
<h3>23.专用时差:后小 - 前大 - 作业时间</h3>
<figure><figcaption>img_167.png</figcaption></figure>
<h3>24.局部时差:只耽误一边</h3>
<h3>25.两个关键结点之间的几个活动连续相接的连线称为线段</h3>
<h3>26.线段时差等于线段中各个活动总时差的最长者</h3>
<figure><figcaption>img_168.png</figcaption></figure>
<h3>27.线路时差等于各个线段时差之和</h3>
<h3>28.时间优化目的</h3>
<ul>
<li>周期最短</li>
<li>成本最低</li>
</ul>
<h3>29.网络计划优化的内容有已下三个</h3>
<ul>
<li>时间优化</li>
<li>时间与资源优化</li>
<li>时间与成本优化</li>
<li>没有单纯的资源优化或成本优化</li>
</ul>
<h3>30.缩短工程周期的方法主要有</h3>
<ul>
<li>技术革新</li>
<li>做好管理工作</li>
<li>采用标准件,通用件</li>
<li>组织平行作业</li>
<li>组织交叉作业</li>
<li>多班制</li>
</ul>
<h3>31.时间与成本优化</h3>
<ul>
<li>费用
<ul>
<li>直接费用:材料,直接工人工资,折旧费</li>
<li>间接费用:管理员工资</li>
</ul>
</li>
<li>时间
<ul>
<li>正常时间
<ul>
<li>极限费用是完成活动的最低费用</li>
</ul>
</li>
<li>极限时间:加班
<ul>
<li>极限时间是完成活动的最短时间</li>
</ul>
</li>
<li>极限费用:加班费</li>
<li>费用增长与作业时间缩短之间的比率</li>
</ul>
</li>
</ul>
<h1>第八章</h1>
<h3>1.图的基本概念</h3>
<ul>
<li>图的基本要素是:点以及点之间的一些连线</li>
<li>通常用点表示我们所能要研究的对象</li>
<li>用线表示对象之间的某种特定关系</li>
<li>有向线:箭头的线叫</li>
<li>杈:线旁边表上数</li>
</ul>
<h3>2.连通图是网络图中所有的点相互连通(城市道路,下水道)</h3>
<h3>3.最小枝杈树问题</h3>
<ul>
<li>长度最短的连通图
<ul>
<li>(从起点出发到所有点,全部支线的总长度最小)</li>
</ul>
</li>
<li>解决方案
<ul>
<li>普赖姆法</li>
<li>克鲁斯咯尔法</li>
</ul>
</li>
</ul>
<h3>4.特殊的图:连通,但不含圈,称之为树(树的树线等于点数减一)</h3>
<h3>5.任何不连通图都不是树</h3>
<h3>6.最短连通图</h3>
<h3>7.最短路线问题</h3>
<ul>
<li>寻找从入口到出口所需的最少时间,最短时间或最少费用的路径问题,称做网络的路线问题</li>
</ul>
<h3>8.最大流量问题</h3>
<ul>
<li>当物体,能量或信息作为流量流过网络时,怎样使流过网络的流量最大</li>
<li>或者使流过的流量的费用或时间最小</li>
<li>设计这样的流量模型问题,叫做网络的流量问题</li>
<li>最大流量问题是企图找出在一定时期内,能在起点进入,并通过这个网络,在终点输出的最大流量</li>
<li>找到完全不同的路线,则最大流量(大于或等于)至少是这几条路线流量之和</li>
<li>起点相邻的结点流量之和,就是最多的流量(小于或等于)</li>
</ul>
<h1>第九章</h1>
<h3>1.马尔柯夫分析的数学原理</h3>
<ul>
<li>概率向量:任意一个向量,如果它内部的各个元素为非负数,且总和等于1,则此向量称为概率向量</li>
<li>一个方阵中,如果其各行都是概率向量,则此方阵称之为概率矩阵或概率方阵</li>
<li>只要有负数就不是概率向量,如果没有负数,每行累加起来都等于1</li>
</ul>
<h3>3.20世纪初马尔可夫发现未来的发展或演变,往往受现状所支配</h3>
<h3>4.转换概率:一种状况转另一种状况,依据紧接的前项情况推算出来,这个过程又叫马尔柯夫过程(就是某个销售者保持/获得/失去的消费者的概率)</h3>
<h3>5.马尔柯夫锁链:一连串的马尔柯夫转换过程的整体</h3>
<h3>6.马尔柯夫分析:分析/观察/预测锁链或过程的未来变动的趋向</h3>
<h3>7.转换概率和市场份额和概率矩阵算题</h3>
<h3>8.确定平衡条件:经过概率矩阵算出来的市场份额和上一次的市场份额相同</h3>
<h1>第十章</h1>
<h3>1.盈亏平衡问题概述:企业的盈亏主要取决于企业产品的销售收入和产品的成本费用</h3>
<h3>2.利润 = 销售额 - 成本</h3>
<h3>3.销售额 = 单价 * 销量</h3>
<h3>4.成本 = 固定成本 + 可变成本</h3>
<h3>5.盈亏平衡分析是一种管理决策工具,它用来说明在一定销售量水平上总销售额与总成本之间的关系</h3>
<h3>6.盈亏平衡点就是企业经营达到了一个点时,总销售额和总成本完全相等(产量 = 销量),利润为0</h3>
<h3>7.产品的成本结构:根据成本费用与产品产量的关系分为固定费用(固定成本)和变动费用(可变成本)</h3>
<ul>
<li>固定成本:在一定时期内不随企业产量的增减而变化(车间费用和企业管理费等)</li>
<li>可变成本:随着企业产品产量的增减而变化,一般随着产量的增加,费用总额也成比例的增加(水电费,原材料等)</li>
<li>成本 = 固定成本 + 可变成本</li>
</ul>
<h3>8.单位可变成本是不变的</h3>
<h3>9.半变动费用:燃料动力费</h3>
<h3>10.计划性能法:预付成本和计划成本</h3>
<ul>
<li>计划成本:达到预期目标所需的费用(广告费),随着产量的变化成阶梯变化</li>
<li>预付成本:提供的生产能力(设备等),过去发生的行为结果,不受短期管制,在数量变化的过程中保持不变</li>
</ul>
<h3>11.固定成本 = 计划成本 + 预付成本</h3>
<figure><figcaption>img_172.png</figcaption></figure>
<h3>12.盈亏平衡图中,横轴表示产量,竖轴表示费用</h3>
<figure><figcaption>img_173.png</figcaption></figure>
<h3>13.盈亏平衡点:总销售额 等于 总成本</h3>
<h3>14.公式总结</h3>
<ul>
<li>边际收益 = 单价 - 单位可变成本</li>
<li>盈亏平衡点 = 固定成本 / 边际收益(当盈亏平衡点时,利润 = 0 或 总收入 = 总成本)</li>
<li>边际收益率 = 边际收益 / 价格<br>
</li>
</ul>
<h1>第十一章</h1>
<h3>1.概率:销售天数/总销售天数</h3>
<h3>2.累计概率:上次累计概率 + 当前概率 = 当前累计概率</h3>
<h3>3.概率分布提供了每个可能值的概率,这些概率加起来必须等于1</h3>
<h3>4.累计概率随机数:累计概率 * 100 - 1 = 随机数的最大数 || 最小数 = 上一次累计概率 * 100 || 最后一个格子的最大随机数是99</h3>
<h3>5.随机变量是是具有各种不同数值的一个变量,这些不同数值是在一次随机试验中,作为各种结果之一而出现的</h3>
<h3>6.如果一个随机变量允许在某个给定的范围内具有有限个数的数值,它就是一个离散的随机变量</h3>
<h3>7.如果一个随机变量允许在某个给定的范围具有任何个数的数值,它就是一个连续的随机变量</h3>
<h3>8.每一个随机变量的数值和相关的某个范围内累计频率序列数相应,这个累计频率数,称之为随机数</h3>
<h3>9.蒙特卡洛法是一个模拟技术,他用一系列的随机数创造发分布函数</h3>
<h3>10.如果构成模型的关系相当简单,那么就有可能用各种数学的方法,来取得我们感兴趣问题的精确数据,这就是分析解(数学解)</h3>
<h3>11.复杂的模型:必须使用模拟的方法来研究</h3>
<h3>12.最常用的模拟方法叫:蒙特卡洛方法 使用随机数进行模拟</h3>
<h3>13.使用模拟的原因</h3>
<ul>
<li>由于难以观察到实际环境,模拟可能是唯一可以利用的方法</li>
<li>对一个系统的实际运用和观察可能破坏性太大</li>
<li>实际观察一个可能太费钱</li>
<li>不可能有足够的时间来广泛地操作该系统</li>
</ul>
<h3>14.模拟地不足之处</h3>
<ul>
<li>模拟是不精确的,它既不是一个最优化过程,也不能得到一个答案</li>
<li>模拟是一种估算答案的时方法,但不能得出答案本身</li>
<li>并非所有的方法都可用模拟的方法来估算,只有包含不确定因素的环境才能适用,而且如果没有随即元素是,所有的模拟的实验都会产生相同的结果</li>
<li>一个良好的模拟模型可能是非常昂贵的</li>
</ul>
<h3>15.使用模拟的原因</h3>
<ul>
<li>由于难以观察到实际环境,模拟可能是唯一可以利用的方法</li>
<li>对一个系统的实际运用和观察可能破坏性太大</li>
<li>实际观察一个系统可能太费钱</li>
<li>不可能有足够的时间来广泛的操作该系统</li>
<li>不可能求出一个数学解(分析解)</li>
</ul>
<h3>16.在排队论中,要求顾客到达人数呈普阿松分布</h3>
<h3>17.服务时间呈负指数分布</h3>
]]></content:encoded>
      <enclosure url="https://img2023.cnblogs.com/blog/2135082/202303/2135082-20230314215503642-1522481382.png" type="image/png"/>
    </item>
    <item>
      <title>组件MatLab</title>
      <link>https://ujava.cn/assembly/matlab.html</link>
      <guid>https://ujava.cn/assembly/matlab.html</guid>
      <source url="https://ujava.cn/rss.xml">组件MatLab</source>
      <description>1、什么叫计算？ （1）算术运算。“计算”体现的是一种数学技能，这是人类的基本技能。 （2）较复杂的运算，即根据已知量算出未知量。 对于复杂的数值计算问题，可以利用计算机进行问题求解，即利用计算机运算速度快、计算精度高的特点，通过重复执行简单的操作，完成复杂的计算。 广义的理解： “计算”体现的是问题求解的方法和手段。 “计算”是科学研究和工程应用的重...</description>
      <category>设计组件</category>
      <pubDate>Sat, 27 Apr 2024 13:33:19 GMT</pubDate>
      <content:encoded><![CDATA[<p>1、什么叫计算？</p>
<p>（1）算术运算。“计算”体现的是一种数学技能，这是人类的基本技能。</p>
<p>（2）较复杂的运算，即根据已知量算出未知量。</p>
<p>对于复杂的数值计算问题，可以利用计算机进行问题求解，即利用计算机<strong>运算速度快、计算精度高的特点</strong>，通过重复执行简单的操作，完成复杂的计算。</p>
<p>广义的理解：</p>
<p>“计算”体现的是问题求解的方法和手段。</p>
<p>“计算”是科学研究和工程应用的重要工具。</p>
<p>2、什么是科学计算？</p>
<p>利用计算机处理数值问题的方法，称为科学计算（ Scientific Computing）。</p>
<p>科学计算方法既有数学理论上的抽象性和严谨性，又有程序设计技术上的实用性和实验性。</p>
<p>3、科学计算与MATLAB语言的关系</p>
<p>科学计算的基本步骤是，先研究数值问题的求解算法，然后在计算机上进行程序实现。<br>
</p>
<p>MATLAB的优势：不需要过多了解各种数值计算方法的具体细节和计算公式，专注于实际问题的分析和设计，大大地提高工作效率和质量，</p>
<p>4、MATLAB语言的主要功能</p>
<p>MATLAB：MATrix LABoratory（矩阵实验室）</p>
<p>数值计算、符号计算、图形绘制、程序流程控制、工具箱等优势。</p>
<p>【例子】求x^2-3x+1=0的根。</p>
<p>方法一：利用MATLAB<strong>多项式求根函数roots</strong>来求根。</p>
<pre><code>p=[1,-3,1];&nbsp;&nbsp; //建立多项式系数向量P  
x=roots(p)

绘图：  
x=-5:0.1:5;&nbsp; //产生x向量-5—5步长为0.1  
y1=x.*x-3*x+1;  
y2=zeros(size(x));&nbsp; //产生一个和X向量同大小的0向量  
plot(x, y1, x, y2); //绘制函数曲线
</code></pre>
<figure><figcaption>img_138.png</figcaption></figure>
<p>方法二 ： 利用**求单变量非线性方程根的函数fzero，**求方程在某个初始点附近的实根。</p>
<pre><code>f=@(x) x*x-3*x+1;&nbsp; //匿名函数定义f（x）  
x1=fzero(f, 0.5)&nbsp;&nbsp;&nbsp; //f(x)=0在x=0.5附近的实根

x2=fzero(f, 2.5)
</code></pre>
<p>方法三：利用**最优化工具箱中的方程求根函数fsolve。</p>
<pre><code>f=@(x) x*x-3*x+1;  
x1=fsolve(f, 0.5, **optimset('Display', 'off')**)&nbsp; //optimset用于设置优化参数 &nbsp;Display', 'off不显示迭代的中间结果

x2=fsolve(f, 2.5, optimset('Display', 'off'))
</code></pre>
<p>方法四：利用**solve函数求方程的符号解，**即求得的解是一个表达式。</p>
<pre><code>syms x&nbsp;&nbsp; //定义符号变量x  
x=solve(x^2-3*x+1)&nbsp;&nbsp; //求根

x=eval(x)&nbsp; //将符号解转换为数值解
</code></pre>
<p>MATLAB系统环境</p>
<p>需要掌握：</p>
<ol>
<li>
<p>MATLAB系统环境熟知</p>
</li>
<li>
<p>MATLAB系统数值数据掌握</p>
</li>
<li>
<p>MATLAB矩阵表示及引用</p>
</li>
<li>
<p>MATLAB语言的基本运算</p>
</li>
<li>
<p>MATLAB操作界面的组成</p>
</li>
</ol>
<figure><figcaption>img_139.png</figcaption></figure>
<p>（1）MATLAB主窗口</p>
<p>功能区（3个）、快速访问工具栏、当前文件夹工具栏</p>
<p>（2）命令行窗口</p>
<p>命令行窗口用于输入命令并显示命令的执行结果。</p>
<blockquote>
<blockquote>
<p>命令提示符，可以接受并执行Matlab命令。<br>
</p>
</blockquote>
</blockquote>
<p>（3）当前文件夹窗口</p>
<p>运行时的工作文件夹。方便使用和建立。</p>
<p>如何设置当前文件夹呢？</p>
<p>（1）在当前文件夹工具栏或当前文件夹窗口中选择某文件夹为当前文件夹</p>
<p>（2）使用cd命令</p>
<p>注意：一定要先建立文件夹，再将这个文件夹设为当前文件夹。<br>
</p>
<p>（4）工作区窗口</p>
<p>工作区：也称工作空间，matlab用于存储各种变量和结果的内存空间。</p>
<p>工作区窗口：用于变量的显示与操作。也可以对变量进行编辑保存和删除等操作。<br>
</p>
<ol start="2">
<li>MATLAB的搜索路径<br>
</li>
</ol>
<p>命令对象操作举例：</p>
<pre><code>&gt;&gt; clear&nbsp; //清除工作区的全部变量

&gt;&gt; x=sin(1)&nbsp; //调用sin函数

x = 0.8415

&gt;&gt; sin=[1,2,3,4,5] &nbsp;//sin变量，包换5个元素

sin = 1&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp; 5

&gt;&gt; x=sin(1) &nbsp;&nbsp;//结果唯一，为引用sin变量的第一个元素

x = 1
</code></pre>
<p><strong>变量名优先哦</strong></p>
<p>如果这时要调用sin函数，该如何操作？</p>
<p>可以在MATLAB工作区窗口删除定义的sin变量，那么再用sin就代表内部函数了。</p>
<p><strong>Tip：在定义变量的时候，一般不使用已有特点含义的词，例如内部函数名。</strong></p>
<p>如何设置文件的搜索路径呢？——直接搜索到用户工作夹下的文件了</p>
<p>（1）用path命令设置文件搜索路径。例如：</p>
<pre><code>&gt;&gt; path(path,'e:\work')”
</code></pre>
<p>（2）用对话框设置文件搜索路径。</p>
<p>主页选项卡，环境命令组中的设置路径命令按钮。<br>
</p>
<p>常见问题：</p>
<p>1、如果在当前文件夹和搜索路径文件夹下建立了一个同名的M 文件，那么在命令行窗口输入文件名时，执行哪个文件？</p>
<p>问题根据MATLAB的搜索路径，程序文件的搜索<strong>顺序是首先在当前文件夹中搜索，然后再在文件搜索路径中的文件夹中搜索，<strong>所以执行的是</strong>当前文件夹下的M文件。</strong></p>
<p>2、如果用户建立的文件既没有保存在当前文件夹下，也没有保存在文件搜索路径中，那么在命令行窗口输入文件名时，会出现什么信息？</p>
<p>同样根据MATLAB的搜索路径，如果用户建立的文件既没有保存在当前文件夹下，也没有保存在文件搜索路径中，<strong>那么MATLAB就找不到这个文件，系统会给出错误提示信息。</strong></p>
]]></content:encoded>
    </item>
    <item>
      <title>Java Arrays类</title>
      <link>https://ujava.cn/java/arrays.html</link>
      <guid>https://ujava.cn/java/arrays.html</guid>
      <source url="https://ujava.cn/rss.xml">Java Arrays类</source>
      <description>在 Java 中，java.util.Arrays类提供的多种数组操作功能，可以有效地执行各种数组相关的操作，使得数组处理变得简单和高效。 打印数组 Arrays.toString(arr)，不过是简单的一个调用，却让你的数组输出从一串地址，变成了清晰可辨的字符。 复制数组 要复制一个新的数组么？copyOf 和 copyOfRange 给你全方位的选...</description>
      <category>Java</category>
      <pubDate>Sat, 27 Apr 2024 01:32:45 GMT</pubDate>
      <content:encoded><![CDATA[<p>在 Java 中，<code>java.util.Arrays</code>类提供的多种数组操作功能，可以有效地执行各种数组相关的操作，使得数组处理变得简单和高效。</p>
<h2>打印数组</h2>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] arr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"a"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "b"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "c"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "d"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(arr));</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> // 输出 [a, b, c, d]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Arrays.toString(arr)</code>，不过是简单的一个调用，却让你的数组输出从一串地址，变成了清晰可辨的字符。</p>
<h2>复制数组</h2>
<p>要复制一个新的数组么？<code>copyOf</code>&nbsp;和&nbsp;<code>copyOfRange</code>&nbsp;给你全方位的选择：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] arr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"a"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "b"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "c"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "d"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] copyOf2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">copyOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(arr, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> // [a, b]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(copyOf2));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] copyOfRange </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">copyOfRange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(arr, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> // [b, c]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(copyOfRange));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] copyOf10 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">copyOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(arr, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> // [a, b, c, d, null, null, null, null, null, null]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(copyOf10));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这&nbsp;<code>copyOf</code>，<code>copyOfRange</code>，无异于为数组之尺，想要复制前 N 个元素，使用&nbsp;<code>copyOf</code>，想要取其中一段，使用&nbsp;<code>copyOfRange</code>。</p>
<blockquote>
<p>注意：若范围大于原数组，多出位置以 null 填充。</p>
</blockquote>
<h2>填充数组</h2>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] arr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">fill</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(arr, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"java"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(arr));</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> // [java, java, java, java, java]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如若数组空空如也，可用&nbsp;<code>Arrays.fill(arr, "str")</code>&nbsp;将它填满。每一个元素，都被赋予相同的值。</p>
<p>也可以使用&nbsp;<code>Arrays.setAll</code>&nbsp;填充，它允许传入一个函数，生成填充值。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 生成 100以内的 随机数</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">IntFunction</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> intFunction </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> i </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Random</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">nextInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] intArr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(intArr, intFunction);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(intArr));</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// output:[29, 17, 18, 11, 85]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>数组比较</h2>
<p>数据比较有两种方式，一是使用&nbsp;<code>Arrays.equals</code>，二是使用&nbsp;<code>Arrays.hashCode</code>。</p>
<h3>Arrays.equals</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] arr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"a"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "b"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "c"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "d"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] arr1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] {arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"a"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "b"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "c"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "d"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] arr2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] {arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> arr}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(arr1, arr2));</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">     // false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">deepEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(arr1, arr2));</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> // tue</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是一维数组比较，直接&nbsp;<code>Arrays.equals</code>&nbsp;比较没有问题。如果是多维数组，<code>Arrays.equals</code>&nbsp;并不会比较子数组中的元素值，此时需要使用<code>deepEquals</code>&nbsp;比较。</p>
<h3>Arrays.hashCode</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] arr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"a"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "b"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "c"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "d"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] arr2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] {arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> arr}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(arr2));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">deepHashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(arr2));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">arr[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(arr2));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">deepHashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(arr2));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>元素可能会变，如何捕捉这一瞬间的改变？<code>hashCode()</code>，<code>deepHashCode()</code>，便是这捕风捉影的法宝。<code>hashCode</code>&nbsp;方法会根据数组元素值计算出一个数字，如果元素值发生改变，则数字改变。但是同样对于多维数字，在计算数字时不会计算子数组中的元素，这种情况应该使用&nbsp;<code>deepHashCode</code>判断。</p>
<p>输出：</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-2117384671</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">125140001</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">-2117384671</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">32668737</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>数组排序</h2>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 生成 100以内的 随机数</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">IntFunction</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> intFunction </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> i </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Random</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">nextInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] intArr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">setAll</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(intArr, intFunction);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(intArr));</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// output: [18, 31, 86, 59, 43]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(intArr);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(intArr));</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// output: [18, 31, 43, 59, 86]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Arrays.sort</code>&nbsp;方法可以将元素排序。而&nbsp;<code>parallelSort()</code>可以并发排序，但是在数据量比较小的情况下，<code>Arrays.sort</code>&nbsp;可能效率更高。</p>
<h2>二分查找</h2>
<p>二分搜索可以快速找到数组中的指定元素的利器。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] intArr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 9</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> index </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">binarySearch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(intArr, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"index:"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">index);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(intArr[index]);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote>
<p>注意事项：使用&nbsp;<code>binarySearch()</code>&nbsp;前确保数组是排序过的，否则结果将不可预知。</p>
</blockquote>
<h2>数组转 Stream</h2>
<p>Java 8 引入的 Stream API 让数组操作更加现代化，可以链式操作。使用&nbsp;<code>Arrays.stream</code>&nbsp;可以让数组共享这一便利。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] intArr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 9</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(intArr).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> // 10</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ToIntFunction</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> toIntFunction </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> i </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(intArr).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mapToInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(toIntFunction).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 45</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>数组转换</h2>
<p>如果你想把数组转成 List 怎么办？<code>Arrays.asList()</code>&nbsp;就是你需要的。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] arr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"a"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "b"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "c"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "d"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">asList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(arr);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(list);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> // 输出 [a, b, c, d]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// list.add("e"); 报错</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项：<code>asList()</code>&nbsp;返回的列表<strong>不支持增删操作</strong>，它和原始数组是共享数据的。</p>
<h2>并行前缀计算</h2>
<p>使用&nbsp;<code>parallelPrefix</code>&nbsp;函数并行地累积给定数组中的每个元素。对于大型数组，并行前缀计算通常比顺序循环更有效。</p>
<p>示例：每一个元素转换成当前以及之前所有元素的和。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">[] intArr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[] {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 9</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">parallelPrefix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(intArr, (left, right) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> left </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> right);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(intArr));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：<code>[0, 1, 3, 6, 10, 15, 21, 28, 36, 45]</code></p>
]]></content:encoded>
    </item>
    <item>
      <title>Java CollectionUtils类</title>
      <link>https://ujava.cn/java/collectionutils.html</link>
      <guid>https://ujava.cn/java/collectionutils.html</guid>
      <source url="https://ujava.cn/rss.xml">Java CollectionUtils类</source>
      <category>Java</category>
      <pubDate>Sat, 27 Apr 2024 01:32:45 GMT</pubDate>
    </item>
    <item>
      <title>Interceptor、Filter、AOP区别</title>
      <link>https://ujava.cn/synthesis/interceptorfilter.html</link>
      <guid>https://ujava.cn/synthesis/interceptorfilter.html</guid>
      <source url="https://ujava.cn/rss.xml">Interceptor、Filter、AOP区别</source>
      <description>Filter过滤器 过滤器拦截web访问url地址。 严格意义上讲，filter只是适用于web中，依赖于Servlet容器，利用Java的回调机制进行实现。 Filter过滤器：和框架无关，可以控制最初的http请求，但是更细一点的类和方法控制不了。 过滤器可以拦截到方法的请求和响应(ServletRequest request, ServletRe...</description>
      <category>设计高频</category>
      <pubDate>Thu, 25 Apr 2024 03:33:51 GMT</pubDate>
      <content:encoded><![CDATA[<h2>Filter过滤器</h2>
<blockquote>
<ul>
<li><strong>过滤器拦截web访问url地址</strong>。 严格意义上讲，filter只是适用于web中，依赖于Servlet容器，利用<strong>Java的回调机制</strong>进行实现。</li>
<li>Filter<strong>过滤器</strong>：和框架无关，可以控制最初的http请求，但是更细一点的类和方法控制不了。</li>
<li><strong>过滤器可以拦截到方法的请求和响应(ServletRequest request, ServletResponse response)</strong>，并对请求响应做出像响应的过滤操作，</li>
<li>比如<strong>设置字符编码，鉴权操作</strong>等</li>
</ul>
</blockquote>
<h2>Interceptor拦截器</h2>
<blockquote>
<ul>
<li><strong>拦截器拦截以 .action结尾的url，拦截Action的访问</strong>。 Interfactor是基于<strong>Java的反射机制</strong>（APO思想）进行实现，不依赖Servlet容器。</li>
<li><strong>拦截器可以在方法执行之前(preHandle)和方法执行之后(afterCompletion)进行操作，回调操作(postHandle)</strong>，<strong>可以获取执行的方法的名称</strong>，请求(HttpServletRequest)</li>
<li>Interceptor：<strong>可以控制请求的控制器和方法</strong>，但<strong>控制不了请求方法里的参数(只能获取参数的名称，不能获取到参数的值)</strong></li>
<li>**（**用于处理页面提交的请求响应并进行处理，例如做国际化，做主题更换，过滤等）。</li>
</ul>
</blockquote>
<h2>Spring AOP拦截器</h2>
<blockquote>
<ul>
<li>
<p><strong>只能拦截Spring管理Bean的访问（业务层Service）</strong>。 具体AOP详情参照&nbsp;<a href="https://blog.csdn.net/fly910905/article/details/84025425" target="_blank" rel="noopener noreferrer">Spring AOP：原理、 通知、连接点、切点、切面、表达式</a></p>
</li>
<li>
<p>实际开发中，AOP常和事务结合：<a href="https://blog.csdn.net/fly910905/article/details/83547744" target="_blank" rel="noopener noreferrer">Spring的事务管理:声明式事务管理(切面)</a></p>
</li>
<li>
<p><strong>AOP操作可以对操作进行横向的拦截</strong>，最大的优势在于他可<strong>以获取执行方法的参数( ProceedingJoinPoint.getArgs() )</strong>，对方法进行统一的处理。</p>
</li>
<li>
<p>Aspect : 可以自定义切入的点，有方法的参数，<strong>但是拿不到http请求，可以通过其他方式如RequestContextHolder</strong>获得(</p>
<div class="language-cobol line-numbers-mode" data-highlighter="shiki" data-ext="cobol" data-title="cobol" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">ServletRequestAttributes servletRequestAttributes= (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>)。</p>
</li>
<li>
<p>常见<strong>使用日志，事务，请求参数安全验证</strong>等</p>
</li>
</ul>
</blockquote>
<h3>Spring对AOP的支持</h3>
<p>Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。</p>
<blockquote>
<p>Spring创建代理的规则为：<br>
1、默认使用Java动态代理来创建AOP代理，这样就可以为任何接口实例创建代理了<br>
2、当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理，也可强制使用CGLIB</p>
</blockquote>
<p>AOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：</p>
<blockquote>
<p>1、定义普通业务组件<br>
2、定义切入点，一个切入点可能横切多个业务组件<br>
3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作</p>
</blockquote>
<ul>
<li>所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，</li>
<li>即：代理对象的方法=增强处理+被代理对象的方法。</li>
</ul>
<h2>Filter与Interceptor联系与区别</h2>
<blockquote>
<ul>
<li>拦截器是基于java的反射机制，使用代理模式，而过滤器是基于函数回调。</li>
<li>拦截器不依赖servlet容器，过滤器依赖于servlet容器。</li>
<li>拦截器只能对action起作用，而过滤器可以对几乎所有的请求起作用（可以保护资源）。</li>
<li>拦截器可以访问action上下文，堆栈里面的对象，而过滤器不可以。</li>
<li>执行顺序：过滤前-拦截前-Action处理-拦截后-过滤后。</li>
</ul>
</blockquote>
<p>从上面对拦截器与过滤器的描述来看，它俩是非常相似的，都能对客户端发来的请求进行处理，它们的区别如下：</p>
<ul>
<li><strong>作用域不同</strong>
<ul>
<li>过滤器依赖于servlet容器，只能在 servlet容器，web环境下使用</li>
<li>拦截器依赖于spring容器，可以在spring容器中调用，不管此时Spring处于什么环境</li>
</ul>
</li>
<li><strong>细粒度的不同</strong>
<ul>
<li>过滤器的控制比较粗，只能在请求进来时进行处理，对请求和响应进行包装</li>
<li>拦截器提供更精细的控制，可以在controller对请求处理之前或之后被调用，也可以在渲染视图呈现给用户之后调用</li>
</ul>
</li>
<li><strong>中断链执行的难易程度不同</strong>
<ul>
<li>拦截器可以&nbsp;<code>preHandle</code>方法内返回 false 进行中断</li>
<li>过滤器就比较复杂，需要处理请求和响应对象来引发中断，需要额外的动作，比如将用户重定向到错误页面</li>
</ul>
</li>
</ul>
<h3>小结</h3>
<p>简单总结一下，拦截器相比过滤器有更细粒度的控制，依赖于Spring容器，可以在请求之前或之后启动，过滤器主要依赖于servlet，过滤器能做的，拦截器基本上都能做。</p>
<h2>Filter、Interceptor、aop拦截方向和抛出异常方向图</h2>
<figure><figcaption>img_147.png</figcaption></figure>
]]></content:encoded>
    </item>
    <item>
      <title>Future和CompletableFuture的区别</title>
      <link>https://ujava.cn/java/future.html</link>
      <guid>https://ujava.cn/java/future.html</guid>
      <source url="https://ujava.cn/rss.xml">Future和CompletableFuture的区别</source>
      <description>1.Future 在执行多个任务的时候，使用Java标准库提供的线程池是非常方便的。我们提交的任务只需要实现Runnable接口，就可以让线程池去执行： Runnable接口有个问题，它的方法没有返回值。如果任务需要一个返回结果，那么只能保存到变量，还要提供额外的方法读取，非常不便。所以，Java标准库还提供了一个Callable接口，和Runnabl...</description>
      <category>Java</category>
      <pubDate>Thu, 25 Apr 2024 01:39:12 GMT</pubDate>
      <content:encoded><![CDATA[
<p>在执行多个任务的时候，使用Java标准库提供的线程池是非常方便的。我们提交的任务只需要实现<code>Runnable</code>接口，就可以让线程池去执行：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Task</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> longTimeCalculation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(); </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Runnable</code>接口有个问题，它的方法没有返回值。如果任务需要一个返回结果，那么只能保存到变量，还要提供额外的方法读取，非常不便。所以，Java标准库还提供了一个<code>Callable</code>接口，和<code>Runnable</code>接口比，它多了一个返回值：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Task</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Callable</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> longTimeCalculation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(); </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且<code>Callable</code>接口是一个泛型接口，可以返回指定类型的结果。</p>
<p>现在的问题是，如何获得异步执行的结果？</p>
<p>如果仔细看<code>ExecutorService.submit()</code>方法，可以看到，它返回了一个<code>Future</code>类型，一个<code>Future</code>类型的实例代表一个未来能获取结果的对象：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ExecutorService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> executor </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Executors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">newFixedThreadPool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 定义任务:</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Callable</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> task </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Task</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 提交任务并获得Future:</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Future</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> future </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">submit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(task);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 从Future获取异步执行返回的结果:</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> // 可能阻塞</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们提交一个<code>Callable</code>任务后，我们会同时获得一个<code>Future</code>对象，然后，我们在主线程某个时刻调用<code>Future</code>对象的<code>get()</code>方法，就可以获得异步执行的结果。在调用<code>get()</code>时，如果异步任务已经完成，我们就直接获得结果。如果异步任务还没有完成，那么<code>get()</code>会阻塞，直到任务完成后才返回结果。</p>
<p>一个<code>Future&lt;V&gt;</code>接口表示一个未来可能会返回的结果，它定义的方法有：</p>
<ul>
<li><code>get()</code>：获取结果（可能会等待）</li>
<li><code>get(long timeout, TimeUnit unit)</code>：获取结果，但只等待指定的时间；</li>
<li><code>cancel(boolean mayInterruptIfRunning)</code>：取消当前任务；</li>
<li><code>isDone()</code>：判断任务是否已完成。</li>
</ul>
<h3>小结</h3>
<p>对线程池提交一个<code>Callable</code>任务，可以获得一个<code>Future</code>对象；</p>
<p>可以用<code>Future</code>在将来某个时刻获取结果。</p>
<h1>2.CompletableFuture</h1>
<p>使用<code>Future</code>获得异步执行结果时，要么调用阻塞方法<code>get()</code>，要么轮询看<code>isDone()</code>是否为<code>true</code>，这两种方法都不是很好，因为主线程也会*等待。</p>
<p>从Java 8开始引入了<code>CompletableFuture</code>，它针对<code>Future</code>做了改进，可以传入回调对象，当异步任务完成或者发生异常时，自动调用回调对象的回调方法。</p>
<p>我们以获取股票价格为例，看看如何使用<code>CompletableFuture</code>：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.util.concurrent.CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 创建异步执行任务:</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Double</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">cf</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">supplyAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(Main</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">fetchPrice);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 如果执行成功:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        cf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">thenAccept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((result) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"price: "</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> result);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        });</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 如果执行异常:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        cf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">exceptionally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((e) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        });</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Double</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> fetchPrice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">random</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0.3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> RuntimeException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"fetch price failed!"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">random</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>price: 7.468336731107743</p>
<p>创建一个<code>CompletableFuture</code>是通过<code>CompletableFuture.supplyAsync()</code>实现的，它需要一个实现了<code>Supplier</code>接口的对象：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Supplier</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">T</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    T</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们用lambda语法简化了一下，直接传入<code>Main::fetchPrice</code>，因为<code>Main.fetchPrice()</code>静态方法的签名符合<code>Supplier</code>接口的定义（除了方法名外）。</p>
<p>紧接着，<code>CompletableFuture</code>已经被提交给默认的线程池执行了，我们需要定义的是<code>CompletableFuture</code>完成时和异常时需要回调的实例。完成时，<code>CompletableFuture</code>会调用<code>Consumer</code>对象：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Consumer</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">T</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> accept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">T</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异常时，<code>CompletableFuture</code>会调用<code>Function</code>对象：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Function</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">T</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> R</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    R</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> apply</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">T</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们都用lambda语法简化了代码。</p>
<p>可见<code>CompletableFuture</code>的优点是：</p>
<ul>
<li>异步任务结束时，会自动回调某个对象的方法；</li>
<li>异步任务出错时，会自动回调某个对象的方法；</li>
<li>主线程设置好回调后，不再关心异步任务的执行。</li>
</ul>
<p>如果只是实现了异步回调机制，我们还看不出<code>CompletableFuture</code>相比<code>Future</code>的优势。<code>CompletableFuture</code>更强大的功能是，多个<code>CompletableFuture</code>可以串行执行，例如，定义两个<code>CompletableFuture</code>，第一个<code>CompletableFuture</code>根据证券名称查询证券代码，第二个<code>CompletableFuture</code>根据证券代码查询证券价格，这两个<code>CompletableFuture</code>实现串行操作如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.util.concurrent.CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 第一个任务:</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">cfQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">supplyAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> queryCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"中国石油"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        });</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // cfQuery成功后继续执行下一个任务:</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Double</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">cfFetch</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> cfQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">thenApplyAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((code) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> fetchPrice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(code);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        });</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // cfFetch成功后打印结果:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        cfFetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">thenAccept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((result) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"price: "</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> result);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        });</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> queryCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "601857"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Double</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> fetchPrice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> code</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">random</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>price: 21.019102834733275</p>
<p>除了串行执行外，多个<code>CompletableFuture</code>还可以并行执行。例如，我们考虑这样的场景：</p>
<p>同时从新浪和网易查询证券代码，只要任意一个返回结果，就进行下一步查询价格，查询价格也同时从新浪和网易查询，只要任意一个返回结果，就完成操作：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 两个CompletableFuture执行异步查询:</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">cfQueryFromSina</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">supplyAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> queryCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"中国石油"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"https://finance.sina.com.cn/code/"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        });</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">cfQueryFrom163</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">supplyAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> queryCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"中国石油"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"https://money.163.com/code/"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 用anyOf合并为一个新的CompletableFuture:</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">cfQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">anyOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(cfQueryFromSina, cfQueryFrom163);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 两个CompletableFuture执行异步查询:</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Double</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">cfFetchFromSina</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> cfQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">thenApplyAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((code) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> fetchPrice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((String) code, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"https://finance.sina.com.cn/price/"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        });</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Double</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">cfFetchFrom163</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> cfQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">thenApplyAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((code) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> fetchPrice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((String) code, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"https://money.163.com/price/"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 用anyOf合并为一个新的CompletableFuture:</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">cfFetch</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">anyOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(cfFetchFromSina, cfFetchFrom163);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 最终结果:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        cfFetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">thenAccept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((result) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"price: "</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> result);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        });</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> queryCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"query code from "</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> url </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "..."</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">random</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "601857"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Double</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> fetchPrice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> code</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"query price from "</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> url </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "..."</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">((</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">random</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Math</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">random</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">query code from https</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//money.163.com/code/...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">query code from https</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//finance.sina.com.cn/code/...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">query price from https</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//finance.sina.com.cn/price/...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">query price from https</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//money.163.com/price/...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">price</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 6.214906451395034</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述逻辑实现的异步查询规则实际上是：</p>
<div class="language-ascii line-numbers-mode" data-highlighter="shiki" data-ext="ascii" data-title="ascii" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>┌─────────────┐ ┌─────────────┐</span></span>
<span class="line"><span>│ Query Code  │ │ Query Code  │</span></span>
<span class="line"><span>│  from sina  │ │  from 163   │</span></span>
<span class="line"><span>└─────────────┘ └─────────────┘</span></span>
<span class="line"><span>       │               │</span></span>
<span class="line"><span>       └───────┬───────┘</span></span>
<span class="line"><span>               ▼</span></span>
<span class="line"><span>        ┌─────────────┐</span></span>
<span class="line"><span>        │    anyOf    │</span></span>
<span class="line"><span>        └─────────────┘</span></span>
<span class="line"><span>               │</span></span>
<span class="line"><span>       ┌───────┴────────┐</span></span>
<span class="line"><span>       ▼                ▼</span></span>
<span class="line"><span>┌─────────────┐  ┌─────────────┐</span></span>
<span class="line"><span>│ Query Price │  │ Query Price │</span></span>
<span class="line"><span>│  from sina  │  │  from 163   │</span></span>
<span class="line"><span>└─────────────┘  └─────────────┘</span></span>
<span class="line"><span>       │                │</span></span>
<span class="line"><span>       └────────┬───────┘</span></span>
<span class="line"><span>                ▼</span></span>
<span class="line"><span>         ┌─────────────┐</span></span>
<span class="line"><span>         │    anyOf    │</span></span>
<span class="line"><span>         └─────────────┘</span></span>
<span class="line"><span>                │</span></span>
<span class="line"><span>                ▼</span></span>
<span class="line"><span>         ┌─────────────┐</span></span>
<span class="line"><span>         │Display Price│</span></span>
<span class="line"><span>         └─────────────┘</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了<code>anyOf()</code>可以实现“任意个<code>CompletableFuture</code>只要一个成功”，<code>allOf()</code>可以实现“所有<code>CompletableFuture</code>都必须成功”，这些组合操作可以实现非常复杂的异步流程控制。</p>
<p>最后我们注意<code>CompletableFuture</code>的命名规则：</p>
<ul>
<li><code>xxx()</code>：表示该方法将继续在已有的线程中执行；</li>
<li><code>xxxAsync()</code>：表示将异步在线程池中执行。</li>
</ul>
<h3>小结</h3>
<p><code>CompletableFuture</code>可以指定异步处理流程：</p>
<ul>
<li><code>thenAccept()</code>处理正常结果；</li>
<li><code>exceptional()</code>处理异常结果；</li>
<li><code>thenApplyAsync()</code>用于串行化另一个<code>CompletableFuture</code>；</li>
<li><code>anyOf()</code>和<code>allOf()</code>用于并行化多个<code>CompletableFuture</code>。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>MySQL死锁SQL</title>
      <link>https://ujava.cn/synthesis/mysqllocksql.html</link>
      <guid>https://ujava.cn/synthesis/mysqllocksql.html</guid>
      <source url="https://ujava.cn/rss.xml">MySQL死锁SQL</source>
      <description>在MySQL中，死锁通常发生在多个事务相互占用对方需要的资源，导致每个事务都在等待其他事务释放资源时无法向前推进。 解决死锁问题通常需要调整事务的隔离级别、保持事务尽可能短、避免事务中的锁竞争、使用索引来加快查询速度，并确保应用程序能够处理事务回滚。 以下是一个简单的例子，演示如何通过索引来减少死锁的可能性： 假设有两个表 orders 和 inven...</description>
      <category>设计高频</category>
      <pubDate>Wed, 24 Apr 2024 02:36:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>在MySQL中，死锁通常发生在多个事务相互占用对方需要的资源，导致每个事务都在等待其他事务释放资源时无法向前推进。</p>
<p>解决死锁问题通常需要调整事务的隔离级别、保持事务尽可能短、避免事务中的锁竞争、使用索引来加快查询速度，并确保应用程序能够处理事务回滚。</p>
<p>以下是一个简单的例子，演示如何通过索引来减少死锁的可能性：</p>
<p>假设有两个表&nbsp;<code>orders</code>&nbsp;和&nbsp;<code>inventory</code>，以下SQL可能导致死锁：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">-- 事务A</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">BEGIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> orders </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">SET</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> status</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'shipped'</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> order_id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> inventory </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> quantity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> quantity - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> product_id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">COMMIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">-- 事务B</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">BEGIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> inventory </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> quantity </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> quantity - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> product_id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> orders </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">SET</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> status</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'shipped'</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> order_id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">COMMIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了减少死锁的风险，可以确保对于经常出现在一起的操作的字段建立索引：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">-- 对order_id字段在orders表上建立索引</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> orders </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">ADD</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> INDEX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (order_id);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">-- 对product_id字段在inventory表上建立索引</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> inventory </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">ADD</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> INDEX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (product_id);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>索引可以帮助数据库优化查询，并且通常按顺序存储数据，减少了不同事务之间互相锁定对方所需资源的可能性。</p>
<p>此外，确保事务尽可能小，并尽快提交，也有助于减少死锁的发生。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java锁机制</title>
      <link>https://ujava.cn/java/lock.html</link>
      <guid>https://ujava.cn/java/lock.html</guid>
      <source url="https://ujava.cn/rss.xml">Java锁机制</source>
      <description>Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。本文旨在对锁相关源码（本文中的源码来自JDK 8）、使用场景进行举例，为读者介绍主流锁的知识点，以及不同的锁的适用场景。 Java中往往是按照是否含有某一特性来定义锁，我们通过特性将锁进行分组归类，再使用对比的方式进行介绍，帮助大家更快捷的理解相关知识。下面给出本文...</description>
      <category>Java</category>
      <pubDate>Tue, 23 Apr 2024 09:31:40 GMT</pubDate>
      <content:encoded><![CDATA[<p>Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。本文旨在对锁相关源码（本文中的源码来自JDK 8）、使用场景进行举例，为读者介绍主流锁的知识点，以及不同的锁的适用场景。</p>
<p>Java中往往是按照是否含有某一特性来定义锁，我们通过特性将锁进行分组归类，再使用对比的方式进行介绍，帮助大家更快捷的理解相关知识。下面给出本文内容的总体分类目录：<br>
</p>
<h2>1. 乐观锁 VS 悲观锁[</h2>
<p>乐观锁与悲观锁是一种广义上的概念，体现了看待线程同步的不同角度。在Java和数据库中都有此概念对应的实际应用。</p>
<p>先说概念。对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁。</p>
<p>而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</p>
<p>乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。<br>
</p>
<p>根据从上面的概念描述我们可以发现：</p>
<ul>
<li>
<p>悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。</p>
</li>
<li>
<p>乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。</p>
</li>
</ul>
<p>光说概念有些抽象，我们来看下乐观锁和悲观锁的调用方式示例：<br>
</p>
<p>通过调用方式示例，我们可以发现悲观锁基本都是在显式的锁定之后再操作同步资源，而乐观锁则直接去操作同步资源。那么，为何乐观锁能够做到不锁定同步资源也可以正确的实现线程同步呢？我们通过介绍乐观锁的主要实现方式 “CAS” 的技术原理来为大家解惑。</p>
<p>CAS全称 Compare And Swap（比较与交换），是一种无锁算法。在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。java.util.concurrent包中的原子类就是通过CAS来实现了乐观锁。</p>
<p>CAS算法涉及到三个操作数：</p>
<ul>
<li>
<p>需要读写的内存值 V。</p>
</li>
<li>
<p>进行比较的值 A。</p>
</li>
<li>
<p>要写入的新值 B。</p>
</li>
</ul>
<p>当且仅当 V 的值等于 A 时，CAS通过原子方式用新值B来更新V的值（“比较+更新”整体是一个原子操作），否则不会执行任何操作。一般情况下，“更新”是一个不断重试的操作。</p>
<p>之前提到java.util.concurrent包中的原子类，就是通过CAS来实现了乐观锁，那么我们进入原子类AtomicInteger的源码，看一下AtomicInteger的定义：<br>
</p>
<p>根据定义我们可以看出各属性的作用：</p>
<ul>
<li>
<p>unsafe： 获取并操作内存的数据。</p>
</li>
<li>
<p>valueOffset： 存储value在AtomicInteger中的偏移量。</p>
</li>
<li>
<p>value： 存储AtomicInteger的int值，该属性需要借助volatile关键字保证其在线程间是可见的。</p>
</li>
</ul>
<p>接下来，我们查看AtomicInteger的自增函数incrementAndGet()的源码时，发现自增函数底层调用的是unsafe.getAndAddInt()。但是由于JDK本身只有Unsafe.class，只通过class文件中的参数名，并不能很好的了解方法的作用，所以我们通过OpenJDK 8 来查看Unsafe的源码：<br>
</p>
<p>根据OpenJDK 8的源码我们可以看出，getAndAddInt()循环获取给定对象o中的偏移量处的值v，然后判断内存值是否等于v。如果相等则将内存值设置为 v + delta，否则返回false，继续循环进行重试，直到设置成功才能退出循环，并且将旧值返回。整个“比较+更新”操作封装在compareAndSwapInt()中，在JNI里是借助于一个CPU指令完成的，属于原子操作，可以保证多个线程都能够看到同一个变量的修改值。</p>
<p>后续JDK通过CPU的cmpxchg指令，去比较寄存器中的 A 和 内存中的值 V。如果相等，就把要写入的新值 B 存入内存中。如果不相等，就将内存值 V 赋值给寄存器中的值 A。然后通过Java代码中的while循环再次调用cmpxchg指令进行重试，直到设置成功为止。</p>
<p>CAS虽然很高效，但是它也存在三大问题，这里也简单说一下：</p>
<p>1.&nbsp;ABA问题。CAS需要在操作值的时候检查内存值是否发生变化，没有发生变化才会更新内存值。但是如果内存值原来是A，后来变成了B，然后又变成了A，那么CAS进行检查时会发现值没有发生变化，但是实际上是有变化的。ABA问题的解决思路就是在变量前面添加版本号，每次变量更新的时候都把版本号加一，这样变化过程就从“A－B－A”变成了“1A－2B－3A”。</p>
<p>JDK从1.5开始提供了AtomicStampedReference类来解决ABA问题，具体操作封装在compareAndSet()中。compareAndSet()首先检查当前引用和当前标志与预期引用和预期标志是否相等，如果都相等，则以原子方式将引用值和标志的值设置为给定的更新值。</p>
<p>2.&nbsp;循环时间长开销大。CAS操作如果长时间不成功，会导致其一直自旋，给CPU带来非常大的开销。</p>
<p>3.&nbsp;只能保证一个共享变量的原子操作。对一个共享变量执行操作时，CAS能够保证原子操作，但是对多个共享变量操作时，CAS是无法保证操作的原子性的。</p>
<p>Java从1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，可以把多个变量放在一个对象里来进行CAS操作。</p>
<h2>2. 自旋锁 VS 适应性自旋锁</h2>
<p>在介绍自旋锁前，我们需要介绍一些前提知识来帮助大家明白自旋锁的概念。</p>
<p>阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p>
<p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p>
<p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。<br>
</p>
<p>自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX:PreBlockSpin来更改）没有成功获得锁，就应当挂起线程。</p>
<p>自旋锁的实现原理同样也是CAS，AtomicInteger中调用unsafe进行自增操作的源码中的do-while循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。<br>
</p>
<p>自旋锁在JDK1.4.2中引入，使用-XX:+UseSpinning来开启。JDK 6中变为默认开启，并且引入了自适应的自旋锁（适应性自旋锁）。</p>
<p>自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p>
<p>在自旋锁中 另有三种常见的锁形式:TicketLock、CLHlock和MCSlock，本文中仅做名词介绍，不做深入讲解，感兴趣的同学可以自行查阅相关资料。</p>
<h2>3. 无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁</h2>
<p>这四种锁是指锁的状态，专门针对synchronized的。在介绍这四种锁状态之前还需要介绍一些额外的知识。</p>
<p>首先为什么Synchronized能实现线程同步？</p>
<p>在回答这个问题之前我们需要了解两个重要的概念：“Java对象头”、“Monitor”。</p>
<p>Java对象头</p>
<p>synchronized是悲观锁，在操作同步资源之前需要给同步资源先加锁，这把锁就是存在Java对象头里的，而Java对象头又是什么呢？</p>
<p>我们以Hotspot虚拟机为例，Hotspot的对象头主要包括两部分数据：Mark Word（标记字段）、Klass Pointer（类型指针）。</p>
<p>Mark Word：默认存储对象的HashCode，分代年龄和锁标志位信息。这些信息都是与对象自身定义无关的数据，所以Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间Mark Word里存储的数据会随着锁标志位的变化而变化。</p>
<p>Klass Point：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>
<p>Monitor</p>
<p>Monitor可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个Java对象就有一把看不见的锁，称为内部锁或者Monitor锁。</p>
<p>Monitor是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。</p>
<p>现在话题回到synchronized，synchronized通过Monitor来实现线程同步，Monitor是依赖于底层的操作系统的Mutex Lock（互斥锁）来实现的线程同步。</p>
<p>如同我们在自旋锁中提到的“阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长”。这种方式就是synchronized最初实现同步的方式，这就是JDK 6之前synchronized效率低的原因。这种依赖于操作系统Mutex Lock所实现的锁我们称之为“重量级锁”，JDK 6中为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”。</p>
<p>所以目前锁一共有4种状态，级别从低到高依次是：无锁、偏向锁、轻量级锁和重量级锁。锁状态只能升级不能降级。</p>
<p>通过上面的介绍，我们对synchronized的加锁机制以及相关知识有了一个了解，那么下面我们给出四种锁状态对应的的Mark Word内容，然后再分别讲解四种锁状态的思路以及特点：<br>
</p>
<p>无锁</p>
<p>无锁没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。</p>
<p>无锁的特点就是修改操作在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。如果有多个线程修改同一个值，必定会有一个线程能修改成功，而其他修改失败的线程会不断重试直到修改成功。上面我们介绍的CAS原理及应用即是无锁的实现。无锁无法全面代替有锁，但无锁在某些场合下的性能是非常高的。</p>
<p>偏向锁</p>
<p>偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。</p>
<p>在大多数情况下，锁总是由同一线程多次获得，不存在多线程竞争，所以出现了偏向锁。其目标就是在只有一个线程执行同步代码块时能够提高性能。</p>
<p>当一个线程访问同步代码块并获取锁时，会在Mark Word里存储锁偏向的线程ID。在线程进入和退出同步块时不再通过CAS操作来加锁和解锁，而是检测Mark Word里是否存储着指向当前线程的偏向锁。引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令即可。</p>
<p>偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态。撤销偏向锁后恢复到无锁（标志位为“01”）或轻量级锁（标志位为“00”）的状态。</p>
<p>偏向锁在JDK 6及以后的JVM里是默认启用的。可以通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking=false，关闭之后程序默认会进入轻量级锁状态。</p>
<p>轻量级锁</p>
<p>是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。</p>
<p>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，然后拷贝对象头中的Mark Word复制到锁记录中。</p>
<p>拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock Record里的owner指针指向对象的Mark Word。</p>
<p>如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，表示此对象处于轻量级锁定状态。</p>
<p>如果轻量级锁的更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行，否则说明多个线程竞争锁。</p>
<p>若当前只有一个等待线程，则该线程通过自旋进行等待。但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。</p>
<p>重量级锁</p>
<p>升级为重量级锁时，锁标志的状态值变为“10”，此时Mark Word中存储的是指向重量级锁的指针，此时等待锁的线程都会进入阻塞状态。</p>
<p>整体的锁状态升级流程如下：<br>
</p>
<p>综上，偏向锁通过对比Mark Word解决加锁问题，避免执行CAS操作。而轻量级锁是通过用CAS操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞。</p>
<h2>4. 公平锁 VS 非公平锁</h2>
<p>公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。</p>
<p>非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</p>
<p>直接用语言描述可能有点抽象，这里作者用从别处看到的一个例子来讲述一下公平锁和非公平锁。<br>
</p>
<p>如上图所示，假设有一口水井，有管理员看守，管理员有一把锁，只有拿到锁的人才能够打水，打完水要把锁还给管理员。每个过来打水的人都要管理员的允许并拿到锁之后才能去打水，如果前面有人正在打水，那么这个想要打水的人就必须排队。管理员会查看下一个要去打水的人是不是队伍里排最前面的人，如果是的话，才会给你锁让你去打水；如果你不是排第一的人，就必须去队尾排队，这就是公平锁。</p>
<p>但是对于非公平锁，管理员对打水的人没有要求。即使等待队伍里有排队等待的人，但如果在上一个人刚打完水把锁还给管理员而且管理员还没有允许等待队伍里下一个人去打水时，刚好来了一个插队的人，这个插队的人是可以直接从管理员那里拿到锁去打水，不需要排队，原本排队等待的人只能继续等待。如下图所示：<br>
</p>
<p>接下来我们通过ReentrantLock的源码来讲解公平锁和非公平锁。<br>
</p>
<p>根据代码可知，ReentrantLock里面有一个内部类Sync，Sync继承AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在Sync中实现的。它有公平锁FairSync和非公平锁NonfairSync两个子类。ReentrantLock默认使用非公平锁，也可以通过构造器来显示的指定使用公平锁。</p>
<p>下面我们来看一下公平锁与非公平锁的加锁方法的源码:<br>
</p>
<p>通过上图中的源代码对比，我们可以明显的看出公平锁与非公平锁的lock()方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件：hasQueuedPredecessors()。<br>
</p>
<p>再进入hasQueuedPredecessors()，可以看到该方法主要做一件事情：主要是判断当前线程是否位于同步队列中的第一个。如果是则返回true，否则返回false。</p>
<p>综上，公平锁就是通过同步队列来实现多个线程按照申请锁的顺序来获取锁，从而实现公平的特性。非公平锁加锁时不考虑排队等待问题，直接尝试获取锁，所以存在后申请却先获得锁的情况。</p>
<h2>5. 可重入锁 VS 非可重入锁</h2>
<p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。下面用示例代码来进行分析：<br>
</p>
<p>在上面的代码中，类中的两个方法都是被内置锁synchronized修饰的，doSomething()方法中调用doOthers()方法。因为内置锁是可重入的，所以同一个线程在调用doOthers()时可以直接获得当前对象的锁，进入doOthers()进行操作。</p>
<p>如果是一个不可重入锁，那么当前线程在调用doOthers()之前需要将执行doSomething()时获取当前对象的锁释放掉，实际上该对象锁已被当前线程所持有，且无法释放。所以此时会出现死锁。</p>
<p>而为什么可重入锁就可以在嵌套调用时可以自动获得锁呢？我们通过图示和源码来分别解析一下。</p>
<p>还是打水的例子，有多个人在排队打水，此时管理员允许锁和同一个人的多个水桶绑定。这个人用多个水桶打水时，第一个水桶和锁绑定并打完水之后，第二个水桶也可以直接和锁绑定并开始打水，所有的水桶都打完水之后打水人才会将锁还给管理员。这个人的所有打水流程都能够成功执行，后续等待的人也能够打到水。这就是可重入锁。<br>
</p>
<p>但如果是非可重入锁的话，此时管理员只允许锁和同一个人的一个水桶绑定。第一个水桶和锁绑定打完水之后并不会释放锁，导致第二个水桶不能和锁绑定也无法打水。当前线程出现死锁，整个等待队列中的所有线程都无法被唤醒。<br>
</p>
<p>之前我们说过ReentrantLock和synchronized都是重入锁，那么我们通过重入锁ReentrantLock以及非可重入锁NonReentrantLock的源码来对比分析一下为什么非可重入锁在重复调用同步资源时会出现死锁。</p>
<p>首先ReentrantLock和NonReentrantLock都继承父类AQS，其父类AQS中维护了一个同步状态status来计数重入次数，status初始值为0。</p>
<p>当线程尝试获取锁时，可重入锁先尝试获取并更新status值，如果status == 0表示没有其他线程在执行同步代码，则把status置为1，当前线程开始执行。如果status != 0，则判断当前线程是否是获取到这个锁的线程，如果是的话执行status+1，且当前线程可以再次获取锁。而非可重入锁是直接去获取并尝试更新当前status的值，如果status != 0的话会导致其获取锁失败，当前线程阻塞。</p>
<p>释放锁时，可重入锁同样先获取当前status的值，在当前线程是持有锁的线程的前提下。如果status-1 == 0，则表示当前线程所有重复获取锁的操作都已经执行完毕，然后该线程才会真正释放锁。而非可重入锁则是在确定当前线程是持有锁的线程之后，直接将status置为0，将锁释放。<br>
</p>
<h2>6. 独享锁 VS 共享锁</h2>
<p>独享锁和共享锁同样是一种概念。我们先介绍一下具体的概念，然后通过ReentrantLock和ReentrantReadWriteLock的源码来介绍独享锁和共享锁。</p>
<p>独享锁也叫排他锁，是指该锁一次只能被一个线程所持有。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。JDK中的synchronized和JUC中Lock的实现类就是互斥锁。</p>
<p>共享锁是指该锁可被多个线程所持有。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。</p>
<p>独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享。</p>
<p>下图为ReentrantReadWriteLock的部分源码：<br>
</p>
<p>我们看到ReentrantReadWriteLock有两把锁：ReadLock和WriteLock，由词知意，一个读锁一个写锁，合称“读写锁”。再进一步观察可以发现ReadLock和WriteLock是靠内部类Sync实现的锁。Sync是AQS的一个子类，这种结构在CountDownLatch、ReentrantLock、Semaphore里面也都存在。</p>
<p>在ReentrantReadWriteLock里面，读锁和写锁的锁主体都是Sync，但读锁和写锁的加锁方式不一样。读锁是共享锁，写锁是独享锁。读锁的共享锁可保证并发读非常高效，而读写、写读、写写的过程互斥，因为读锁和写锁是分离的。所以ReentrantReadWriteLock的并发性相比一般的互斥锁有了很大提升。</p>
<p>那读锁和写锁的具体加锁方式有什么区别呢？在了解源码之前我们需要回顾一下其他知识。</p>
<p>在最开始提及AQS的时候我们也提到了state字段（int类型，32位），该字段用来描述有多少线程获持有锁。</p>
<p>在独享锁中这个值通常是0或者1（如果是重入锁的话state值就是重入的次数），在共享锁中state就是持有锁的数量。但是在ReentrantReadWriteLock中有读、写两把锁，所以需要在一个整型变量state上分别描述读锁和写锁的数量（或者也可以叫状态）。于是将state变量“按位切割”切分成了两个部分，高16位表示读锁状态（读锁个数），低16位表示写锁状态（写锁个数）。如下图所示：<br>
</p>
<p>了解了概念之后我们再来看代码，先看写锁的加锁源码：<br>
</p>
<ul>
<li>
<p>这段代码首先取到当前锁的个数c，然后再通过c来获取写锁的个数w。因为写锁是低16位，所以取低16位的最大值与当前的c做与运算（&nbsp;int w = exclusiveCount(c);&nbsp;），高16位和0与运算后是0，剩下的就是低位运算的值，同时也是持有写锁的线程数目。</p>
</li>
<li>
<p>在取到写锁线程的数目后，首先判断是否已经有线程持有了锁。如果已经有线程持有了锁（c!=0），则查看当前写锁线程的数目，如果写线程数为0（即此时存在读锁）或者持有锁的线程不是当前线程就返回失败（涉及到公平锁和非公平锁的实现）。</p>
</li>
<li>
<p>如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。</p>
</li>
<li>
<p>如果当且写线程数为0（那么读线程也应该为0，因为上面已经处理c!=0的情况），并且当前线程需要阻塞那么就返回失败；如果通过CAS增加写线程数失败也返回失败。</p>
</li>
<li>
<p>如果c=0，w=0或者c&gt;0，w&gt;0（重入），则设置当前线程或锁的拥有者，返回成功！</p>
</li>
</ul>
<p>tryAcquire()除了重入条件（当前线程为获取了写锁的线程）之外，增加了一个读锁是否存在的判断。如果存在读锁，则写锁不能被获取，原因在于：必须确保写锁的操作对读锁可见，如果允许读锁在已被获取的情况下对写锁的获取，那么正在运行的其他读线程就无法感知到当前写线程的操作。</p>
<p>因此，只有等待其他读线程都释放了读锁，写锁才能被当前线程获取，而写锁一旦被获取，则其他读写线程的后续访问均被阻塞。写锁的释放与ReentrantLock的释放过程基本类似，每次释放均减少写状态，当写状态为0时表示写锁已被释放，然后等待的读写线程才能够继续访问读写锁，同时前次写线程的修改对后续的读写线程可见。</p>
<p>接着是读锁的代码：<br>
</p>
<p>可以看到在tryAcquireShared(int unused)方法中，如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态。如果当前线程获取了写锁或者写锁未被获取，则当前线程（线程安全，依靠CAS保证）增加读状态，成功获取读锁。读锁的每次释放（线程安全的，可能有多个读线程同时释放读锁）均减少读状态，减少的值是“1&lt;&lt;16”。所以读写锁才能实现读读的过程共享，而读写、写读、写写的过程互斥。</p>
<p>此时，我们再回头看一下互斥锁ReentrantLock中公平锁和非公平锁的加锁源码：<br>
</p>
<p>我们发现在ReentrantLock虽然有公平锁和非公平锁两种，但是它们添加的都是独享锁。根据源码所示，当某一个线程调用lock方法获取锁时，如果同步资源没有被其他线程锁住，那么当前线程在使用CAS更新state成功后就会成功抢占该资源。而如果公共资源被占用且不是被当前线程占用，那么就会加锁失败。所以可以确定ReentrantLock无论读操作还是写操作，添加的锁都是都是独享锁。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java原子类</title>
      <link>https://ujava.cn/java/atomic.html</link>
      <guid>https://ujava.cn/java/atomic.html</guid>
      <source url="https://ujava.cn/rss.xml">Java原子类</source>
      <description>一、原子类简介 1 什么是原子类 Java中提供了一些原子类，原子类包装了一个变量，并且提供了一系列对变量进行原子性操作的方法。原子性的意思是对于一组操作，要么全部执行成功，要么全部执行失败，不能只有其中某几个执行成功。在多线程的情况下能够保证操作 不会被中断，从而能保证并发安全 2. 与锁的区别 原子类作用和锁挺像，都可以保证并发情况下的线程安全。但...</description>
      <category>Java</category>
      <pubDate>Tue, 23 Apr 2024 07:07:33 GMT</pubDate>
      <content:encoded><![CDATA[<h2>一、原子类简介</h2>
<h3>1 什么是原子类</h3>
<p>Java中提供了一些原子类，原子类包装了一个变量，并且提供了一系列对变量进行原子性操作的方法。原子性的意思是对于一组操作，要么全部执行成功，要么全部执行失败，不能只有其中某几个执行成功。在多线程的情况下能够保证操作&nbsp;<code>不会被中断</code>，从而能保证并发安全</p>
<h3>2. 与锁的区别</h3>
<p>原子类作用和锁挺像，都可以保证并发情况下的<code>线程安全</code>。但是原子类比锁更<code>具有优势</code>：</p>
<ul>
<li>
<p>粒度更细：</p>
<p>原子变量可以把多线程竞争范围缩小到变量级别，这是我们可以获得的最细粒度的情况，通常锁的粒度都要比原子变量的粒度大</p>
</li>
<li>
<p>效率更高：</p>
<p>通常，使用原子类的效率会比使用锁的效率更高，除了高度竞争的情况</p>
</li>
</ul>
<h3>3. 原子类的底层实现</h3>
<p>目前Java中提供的原子类大部分底层使用了CAS锁（CompareAndSet自旋锁），如AtomicInteger、AtomicLong等；也有使用了分段锁+CAS锁的原子类，如LongAdder等。</p>
<h3>4. 原子类种类</h3>
<p>在JDK中J.U.C包下提供了种类丰富的原子类，以下所示：</p>
<p>|类型|具体类型|<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>组件Hystrix</title>
      <link>https://ujava.cn/assembly/hystrix.html</link>
      <guid>https://ujava.cn/assembly/hystrix.html</guid>
      <source url="https://ujava.cn/rss.xml">组件Hystrix</source>
      <description>为什么需要容错限流 复杂分布式系统通常有很多依赖，如果一个应用不能对来自依赖 故障进行隔离，那么应用本身就处在被拖垮的风险中。在一个高流量的网站中，某个单一后端一旦发生延迟，将会在数秒内导致 所有应用资源被耗尽（一个臭鸡蛋影响一篮筐）。 如秒杀、抢购、双十一等场景，在某一时间点会有爆发式的网络流量涌入，如果没有好的网络流量限制，任由流量压到后台服务实例...</description>
      <category>设计组件</category>
      <pubDate>Tue, 23 Apr 2024 01:46:32 GMT</pubDate>
      <content:encoded><![CDATA[<h2>为什么需要容错限流</h2>
<ul>
<li>复杂分布式系统通常有很多依赖，如果一个应用不能对来自依赖 故障进行隔离，那么应用本身就处在被拖垮的风险中。在一个高流量的网站中，某个单一后端一旦发生延迟，将会在数秒内导致 所有应用资源被耗尽（一个臭鸡蛋影响一篮筐）。</li>
<li>如秒杀、抢购、双十一等场景，在某一时间点会有爆发式的网络流量涌入，如果没有好的网络流量限制，任由流量压到后台服务实例，很有可能造成资源耗尽，服务无法响应，甚至严重的导致应用崩溃。</li>
</ul>
<h2>Hystrix是什么</h2>
<p>Hystrix 能使你的系统在出现依赖服务失效的时候，通过隔离系统所依赖的服务，防止服务级联失败，同时提供失败回退机制，更优雅地应对失效，并使你的系统能更快地从异常中恢复。</p>
<h2>Hystrix能做什么</h2>
<ul>
<li>在通过第三方客户端访问（通常是通过网络）依赖服务出现高延迟或者失败时，为系统提供保护和控制</li>
<li>在分布式系统中防止级联失败</li>
<li>快速失败（Fail fast）同时能快速恢复</li>
<li>提供失败回退（Fallback）和优雅的服务降级机制</li>
<li>提供近似实时的监控、报警和运维控制手段</li>
</ul>
<h2>Hystrix设计原则</h2>
<ul>
<li>防止单个依赖耗尽容器（例如 Tomcat）内所有用户线程</li>
<li>降低系统负载，对无法及时处理的请求快速失败（fail fast）而不是排队</li>
<li>提供失败回退，以在必要时让失效对用户透明化</li>
<li>使用隔离机制（例如『舱壁』/『泳道』模式，熔断器模式等）降低依赖服务对整个系统的影响</li>
<li>针对系统服务的度量、监控和报警，提供优化以满足近似实时性的要求</li>
<li>在 Hystrix 绝大部分需要动态调整配置并快速部署到所有应用方面，提供优化以满足快速恢复的要求</li>
<li>能保护应用不受依赖服务的整个执行过程中失败的影响，而不仅仅是网络请求</li>
</ul>
<h2>Hystrix设计思想来源</h2>
<h3>舱壁隔离模式</h3>
<p>货船为了进行防止漏水和火灾的扩散,会将货仓分隔为多个，当发生灾害时，将所在货仓进行隔离就可以降低整艘船的风险。<br>
</p>
<h3>断路器模式</h3>
<p>熔断器就像家里的保险丝，当电流过载了就会跳闸，不过Hystrix的熔断机制相对复杂一些。<br>
</p>
<p>熔断器开关由关闭到打开的状态转换是通过当前服务健康状况和设定阈值比较决定的.</p>
<ul>
<li>当熔断器开关关闭时，请求被允许通过熔断器。如果当前健康状况高于设定阈值，开关继续保持关闭。如果当前健康状况低于设定阈值，开关则切换为打开状态。</li>
<li>当熔断器开关打开时，请求被禁止通过。</li>
<li>当熔断器开关处于打开状态，经过一段时间后，熔断器会自动进入半开状态，这时熔断器只允许一个请求通过。当该请求调用成功时，熔断器恢复到关闭状态。若该请求失败，熔断器继续保持打开状态， 接下来的请求被禁止通过。</li>
</ul>
<h2>Hystrix工作流程</h2>
<h3>官网原图</h3>
<figure><figcaption>img_130.png</figcaption></figure>
<h3>中文版</h3>
<figure><figcaption>img_131.png</figcaption></figure>
<h3>流程说明</h3>
<ol>
<li>每次调用创建一个新的HystrixCommand,把依赖调用封装在run()方法中.</li>
<li>执行execute()/queue做同步或异步调用.</li>
<li>当前调用是否已被缓存，是则直接返回结果，否则进入步骤 4</li>
<li>判断熔断器(circuit-breaker)是否打开,如果打开跳到步骤 8,进行降级策略,如果关闭进入步骤 5</li>
<li>判断线程池/队列/信号量是否跑满，如果跑满进入降级步骤8,否则继续后续步骤 6</li>
<li>调用HystrixCommand的run方法.运行依赖逻辑</li>
</ol>
<ul>
<li>6.1. 调用是否出现异常，否：继续，是进入步骤8，</li>
<li>6.2. 调用是否超时，否：返回调用结果，是进入步骤8</li>
</ul>
<ol start="7">
<li>搜集5、6步骤所有的运行状态(成功, 失败, 拒绝,超时)上报给熔断器，用于统计从而判断熔断器状态</li>
<li>getFallback()降级逻辑.四种触发getFallback调用情况（图中步骤8的箭头来源）：<br>
返回执行成功结果</li>
</ol>
<h2>两种资源隔离模式</h2>
<h3>线程池隔离模式</h3>
<p>使用一个线程池来存储当前的请求，线程池对请求作处理，设置任务返回处理超时时间，堆积的请求堆积入线程池队列。这种方式需要为每个依赖的服务申请线程池，有一定的资源消耗，好处是可以应对突发流量（流量洪峰来临时，处理不完可将数据存储到线程池队里慢慢处理）。</p>
<h3>信号量隔离模式</h3>
<p>使用一个原子计数器（或信号量）来记录当前有多少个线程在运行，请求来先判断计数器的数值，若超过设置的最大线程个数则丢弃改类型的新请求，若不超过则执行计数操作请求来计数器+1，请求返回计数器-1。这种方式是严格的控制线程且立即返回模式，无法应对突发流量（流量洪峰来临时，处理的线程超过数量，其他的请求会直接返回，不继续去请求依赖的服务）。</p>
<h3>线程池隔离模式 VS 信号量隔离模式</h3>
<figure><figcaption>img_132.png</figcaption></figure>
<h2>Hystrix主要配置项</h2>
<p><br>
</p>
<h2>快速上手</h2>
<h3>pom.xml</h3>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;spring-boot-starter-web&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;com.netflix.hystrix&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;hystrix-core&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;1.5.12&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;com.netflix.hystrix&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;hystrix-metrics-event-stream&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;1.5.12&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;com.netflix.hystrix&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;hystrix-javanica&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;1.5.12&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>HystrixConfig</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Configuration</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HystrixConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">     * 声明一个HystrixCommandAspect代理类，现拦截HystrixCommand的功能</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">     */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Bean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HystrixCommandAspect</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> hystrixCommandAspect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HystrixCommandAspect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>HelloService</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Service</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HelloService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">HystrixCommand</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">fallbackMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "helloError"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">            commandProperties</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">HystrixProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "execution.isolation.strategy"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "THREAD"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">HystrixProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "execution.isolation.thread.timeoutInMilliseconds"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "1000"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">HystrixProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "circuitBreaker.enabled"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "true"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">HystrixProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "circuitBreaker.requestVolumeThreshold"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "2"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">            threadPoolProperties</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">HystrixProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "coreSize"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "5"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">HystrixProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "maximumSize"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "5"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">                    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">HystrixProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "maxQueueSize"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "10"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">            })</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> sayHello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">( </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">15000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> );</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "Hello "</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> " !"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> helloError</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "服务器繁忙，请稍后访问~"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>启动类</h3>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">RestController</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HystrixSimpleApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HelloService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> helloService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">( </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HystrixSimpleApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, args );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">GetMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/hi"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> hi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> helloService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sayHello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">( name );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>测试</h3>
<p>访问 http://localhost:80809/hi?name=zhangsan</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -X</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> GET</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'name=zhangsan'</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> http://localhost:8080/hi</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>返回</p>
<div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">服务器繁忙，请稍后访问~</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>组件Eureka</title>
      <link>https://ujava.cn/assembly/eureka.html</link>
      <guid>https://ujava.cn/assembly/eureka.html</guid>
      <source url="https://ujava.cn/rss.xml">组件Eureka</source>
      <description>1. Eureka是什么 Eureka是一个基于REST的服务，主要用于AWS云中的定位服务，以实现中间层服务器的负载平衡和故障转移 在 Spring Cloud 微服务架构中通常用作注册中心 我们称这个服务为 Eureka Server，还有一个与之交互的客户端称之为 Eureka Client 2. Eureka高级架构 img_114.pngim...</description>
      <category>设计组件</category>
      <pubDate>Tue, 23 Apr 2024 01:11:56 GMT</pubDate>
      <content:encoded><![CDATA[<h2>1.&nbsp; Eureka是什么</h2>
<p>Eureka是一个基于REST的服务，主要用于AWS云中的定位服务，以实现中间层服务器的负载平衡和故障转移</p>
<p>在 Spring Cloud&nbsp;<strong>微服务</strong>架构中通常用作<strong>注册中心</strong></p>
<p>我们称这个服务为 Eureka Server，还有一个与之交互的客户端称之为 Eureka Client</p>
<h2>2.&nbsp; Eureka高级架构</h2>
<figure><figcaption>img_114.png</figcaption></figure>
<p>如上图所示，其中</p>
<p>Application Server 表示服务提供方</p>
<p>Application Client&nbsp; 表示服务消费方</p>
<p>Make Remote Call 表示远程调用</p>
<p>服务在Eureka上注册，然后每隔30秒发送心跳来更新它们的租约。如果客户端不能多次续订租约，那么它将在大约90秒内从服务器注册表中剔除。注册信息和更新被复制到集群中的所有eureka节点。来自任何区域的客户端都可以查找注册表信息（每30秒发生一次）来定位它们的服务（可能在任何区域）并进行远程调用。</p>
<p>（PS：Eureka Client需要每30秒给Eureka Server发一次心跳，同时更新Server上最新的注册信息到本地，如果Server多次没有收到来自客户端的心跳，那么在90秒内会被Server上剔除）</p>
<h2>3.&nbsp; Eureka 客户端与服务器之间的通信</h2>
<p>服务发现有两种模式：一种是客户端发现模式，一种是服务端发现模式。Eureka采用的是客户端发现模式。</p>
<p>3.1.&nbsp;&nbsp;Register（注册）</p>
<p>Eureka客户端将关于运行实例的信息注册到Eureka服务器。注册发生在第一次心跳。</p>
<p>3.2.&nbsp; Renew（更新 / 续借）</p>
<p>Eureka客户端需要更新最新注册信息（续借），通过每30秒发送一次心跳。更新通知是为了告诉Eureka服务器实例仍然存活。如果服务器在90秒内没有看到更新，它会将实例从注册表中删除。建议不要更改更新间隔，因为服务器使用该信息来确定客户机与服务器之间的通信是否存在广泛传播的问题。</p>
<p>3.3.&nbsp;&nbsp;Fetch Registry（抓取注册信息）</p>
<p>Eureka客户端从服务器获取注册表信息并在本地缓存。之后，客户端使用这些信息来查找其他服务。通过在上一个获取周期和当前获取周期之间获取增量更新，这些信息会定期更新(每30秒更新一次)。获取的时候可能返回相同的实例。Eureka客户端自动处理重复信息。</p>
<p>3.4.&nbsp; Cancel（取消）</p>
<p>Eureka客户端在关机时向Eureka服务器发送一个取消请求。这将从服务器的实例注册表中删除实例，从而有效地将实例从流量中取出。</p>
<h2>4.&nbsp; Eureka自我保护模式</h2>
<p>如果 Eureka 服务器检测到超过预期数量的注册客户端以一种不优雅的方式终止了连接，并且同时正在等待被驱逐，那么它们将进入自我保护模式。这样做是为了确保灾难性网络事件不会擦除eureka注册表数据，并将其向下传播到所有客户端。</p>
<p>任何客户端，如果连续3次心跳更新失败，那么它将被视为非正常终止，病句将被剔除。当超过当前注册实例15%的客户端都处于这种状态，那么自我保护将被开启。</p>
<p>当自我保护开启以后，eureka服务器将停止剔除所有实例，直到：</p>
<ol>
<li>它看到的心跳续借的数量回到了预期的阈值之上，或者</li>
<li>自我保护被禁用</li>
</ol>
<p>默认情况下，自我保护是启用的，并且，默认的阈值是要大于当前注册数量的15%</p>
<h2>5.&nbsp; Eureka&nbsp; VS&nbsp; Zookeeper</h2>
<p>5.1.&nbsp; Eureka保证AP</p>
<p>Eureka服务器节点之间是对等的，只要有一个节点在，就可以正常提供服务。</p>
<p>Eureka客户端的所有操作可能需要一段时间才能在Eureka服务器中反映出来，随后在其他Eureka客户端中反映出来。也就是说，客户端获取到的注册信息可能不是最新的，它并不保证强一致性</p>
<p>5.2.&nbsp; Zookeeper保证CP</p>
<p>Zookeeper集群中有一个Leader，多个Follower。Leader负责写，Follower负责读，ZK客户端连接到任何一个节点都是一样的，写操作完成以后要同步给所有Follower以后才会返回。如果Leader挂了，那么重新选出新的Leader，在此期间服务不可用。</p>
<p>5.3.&nbsp; 为什么用Eureka</p>
<p>分布式系统大都可以归结为两个问题：数据一致性和防止单点故障。而作为注册中心的话，即使在一段时间内不一致，也不会有太大影响，所以在A和C之间选择A是比较适合该场景的。</p>
]]></content:encoded>
    </item>
    <item>
      <title>组件MQ</title>
      <link>https://ujava.cn/assembly/mq.html</link>
      <guid>https://ujava.cn/assembly/mq.html</guid>
      <source url="https://ujava.cn/rss.xml">组件MQ</source>
      <description>想必你在面试或者工作的过程中，被问过以下问题： （1）为什么你们项目要用消息队列？ （2）用了消息队列后有什么好处？ （3）消息队列有 ActiveMQ、ZeroMQ、MetaMQ、RabbitMQ、RocketMQ、Kafka等，你是怎么选型的？ （4）你能对比下 RabbitMQ、RocketMQ、Kafka 吗？ 如果你只会回答 ”我只会用这个消...</description>
      <category>设计组件</category>
      <pubDate>Tue, 16 Apr 2024 08:43:59 GMT</pubDate>
      <content:encoded><![CDATA[<p>想必你在面试或者工作的过程中，被问过以下问题：</p>
<ul>
<li>（1）为什么你们项目要用消息队列？</li>
<li>（2）用了消息队列后有什么好处？</li>
<li>（3）消息队列有 ActiveMQ、ZeroMQ、MetaMQ、RabbitMQ、RocketMQ、Kafka等，你是怎么选型的？</li>
<li>（4）你能对比下 RabbitMQ、RocketMQ、Kafka 吗？</li>
</ul>
<p>如果你只会回答 ”我只会用这个消息队列“、”公司用的是这个消息队列“ 等等，可以肯定的告诉你将会被 pass 掉。</p>
<p>技术选型是开发工作前最重要的，也是最体现技术的环节。</p>
<p>目前主流的消息队列分别为 Kafka、RabbitMQ、RocketMQ 和 ActiveMQ。</p>
<p>这篇文章重点介绍这四种消息队列的概述、对比和选型，不深入研究每种队列内部的实现原理。</p>
<figure><figcaption>img_7.png</figcaption></figure>
<h2>消息队列是什么？</h2>
<p>消息队列是在消息的传输过程中保存消息的容器，简单点理解就是传递消息的队列，具备先进先出的特点，一般用于异步、解耦、流量削锋等问题，实现高性能、高可用、高扩展的架构。一个消息队列可以被一个或多个消费者消费，一般包含以下元素：</p>
<ul>
<li>Producer：消息生产者，负责产生和发送消息到 Broker。</li>
<li>Broker：消息处理中心，负责消息存储、确认、重试等，一般其中会包含多个 Queue。</li>
<li>Consumer：消息消费者，负责从 Broker 中获取消息，并进行相应处理。</li>
</ul>
<h2>消息队列应用场景</h2>
<p>常见的消息队列使用场景有 6 个：</p>
<ul>
<li>应用解耦：消息队列减少了服务之间的耦合性，不同的服务可以通过消息队列进行通信，而不用关心彼此的实现细节。</li>
<li>异步处理：消息队列本身是异步的，它允许接收者在消息发送很长时间后再取回消息。</li>
<li>流量削锋：当上下游系统处理能力存在差距的时候，利用消息队列做一个通用的”载体”，在下游有能力处理的时候，再进行分发与处理。</li>
<li>日志处理：将消息队列用在日志处理中，比如 Kafka 的应用，解决大量日志传输的问题。</li>
<li>消息通讯：消息队列一般都内置了高效的通信机制，因此也可以用在纯消息通讯，比如实现聊天室等。</li>
<li>消息广播：如果没有消息队列，每当一个新业务方接入，都要接入一次新接口。有了消息队列，我们只需要关心消息是否送达了队列，至于谁订阅，是下游的事，无疑极大地减少了开发和联调的工作量。<br>
比较核心的有 3 个：解耦、异步、削峰，下面着重讲下：</li>
</ul>
<p>解耦</p>
<p>假设在没有消息队列的情况下，现在有上游服务 A 用来发布消息，下游服务 B、C 用来接收服务 A 的消息。但随着业务需要，现在有服务<br>
D、E、F 需要接收服务 A 的消息，那么就出现问题了，每次新加入服务都要改一次代码，可想而知这是极大的工作量。</p>
<figure><figcaption>img_8.png</figcaption></figure>
<p>如果引入消息队列，那就好办了，只需要下游服务自己订阅消息队列，而无需改动服务 A 的代码。</p>
<figure><figcaption>img_9.png</figcaption></figure>
<p>异步</p>
<p>先来看没有消息队列的场景下。</p>
<p>服务 A 的某个接口接收到请求，分别需要在服务A、服务B、服务C、服务D进行写库。假设用户发起请求到服务 A 耗时 10ms，自己写库需要<br>
50ms，在服务 B 写库需要 250ms，在服务 C 写库需要 300ms，在服务 D 写库需要400ms，在没有消息队列的情况下，也就是同步操作，总耗时会是<br>
10 + 50ms + 250ms + 300ms + 400ms = 1.01s。用户发送个请求，结果感觉有点卡顿，响应的非常慢，任谁都是很难忍受的。</p>
<figure><figcaption>img_10.png</figcaption></figure>
<p>如果使用了消息队列，那么服务 A 只需要把对服务A、B、C、D 进行写库的操作分别放进四个消息队列，假如用户发起请求到服务器耗时是10ms，发送消息到四个消息队列的耗时是10ms，那么总耗时就是<br>
20 ms 。用户点击了按钮后立马返回，没有卡顿现象，体验效果就会有极大的提升了。</p>
<figure><figcaption>img_11.png</figcaption></figure>
<p>一般接口同步处理时间很长，不能通过水平扩容来解决，且业务场景允许异步，就可以使用异步解决，比如文件上传下载受限于用户的网络带宽因素，扩容也无用，以及上述同步操作耗时长等情况，都可以先放进消息队列，等服务再进行拉取消费。</p>
<p>削峰</p>
<p>在淘宝双十一活动日，特别是 0<br>
点的秒杀活动高峰期时，接口流量会飙升，远远高于平时，就像一个山峰，没有做好处理的话，在高峰期数据库就可能被流量打死，从而导致整个服务奔溃。如果为了在高峰期能顶住流量而常备高流量设备，会有极大的成本浪费。如果是在要高峰期前进行临时服务扩容，很可能会出现许多扩容问题，没有那么简单。</p>
<p>使用消息队列的话，就可以将高峰期过多的流量请求放进消息队列，等高峰期过后，服务再慢慢进行处理，就不会出现峰值流量了，而是一个相对平稳的状态。</p>
<p>举个例子：</p>
<ul>
<li>大量的用户在中午高峰期的时候，每秒有 4k 个请求，那么每秒就有 4k 个请求放到 MQ 里。</li>
<li>服务A 每秒只能处理 2k 个请求，因为 Mysql 每秒最多处理 2k 个请求。</li>
<li>服务A 就每秒从 MQ 拉取 2k 个请求进行处理，不会超过自己每秒能处理的最大请求量，所以高峰期服务 A 就不会挂掉。</li>
<li>对于MQ，每秒 4k 个请求进来，但是却只有 2k 个请求出去，导致在高峰期 1h 内可能有几十万的请求积压在 MQ<br>
中。这个短暂的高峰期请求积压是可以接受的，因为过了这个时间点，每秒就 100 个请求进 MQ，但这时服务 A 还是会按照每秒 2k 的速度处理<br>
MQ 积压的请求。</li>
<li>所以，高峰期一过，服务 A 就会快速的将 MQ 积压的消息处理掉。</li>
</ul>
<figure><figcaption>img_12.png</figcaption></figure>
<h2>消息队列模型</h2>
<p>点对点模式：多个生产者可以向同一个消息队列发送消息，一个消息只能被一个消费者消费，在被消费成功后，这条消息会被移除。如果消费者处理消息失败了，那么这条消息会重新被消费。</p>
<figure><figcaption>img_13.png</figcaption></figure>
<p>发布/订阅模式：单个消息可以被多个订阅者并发的获取和处理。多个生产者可以将多个消息写到同一个 Topic 中，被同一个消费者消费。</p>
<figure><figcaption>img_14.png</figcaption></figure>
<h2>消息队列对比</h2>
<p>消息队列有 ActiveMQ、ZeroMQ、RabbitMQ、RocketMQ、Kafka，其中 ZeroMQ 太过轻量，主要用于学习，实际是不会应用到生产，所以主要对比<br>
Kafka、RocketMQ、RabbitMQ、ActiveMQ 这四种 MQ。</p>
<p>| 特性     | Kafka                                                        | RocketMQ                                                  | RabbitMQ                                              | ActiveMQ                      |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>组件Dubbo</title>
      <link>https://ujava.cn/assembly/dubbo.html</link>
      <guid>https://ujava.cn/assembly/dubbo.html</guid>
      <source url="https://ujava.cn/rss.xml">组件Dubbo</source>
      <description>1、Dubbo的基本介绍 Dubbo 是阿里巴巴公司开源的一个高性能、轻量级的 Java RPC 框架。 它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。 1.1、基本概念 img_15.pngimg_15.png 服务提供者**（Provider）**：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册...</description>
      <category>设计组件</category>
      <pubDate>Tue, 16 Apr 2024 01:53:26 GMT</pubDate>
      <content:encoded><![CDATA[<h2>1、Dubbo的基本介绍</h2>
<p>Dubbo 是阿里巴巴公司开源的一个高性能、轻量级的 Java RPC 框架。 它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p>
<h3>1.1、基本概念</h3>
<figure><figcaption>img_15.png</figcaption></figure>
<ul>
<li><strong>服务提供者</strong>**（<strong><strong>Provider</strong></strong>）**：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</li>
<li><strong>服务消费者</strong>**（<strong><strong>Consumer</strong></strong>）**:&nbsp;调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>
<li><strong>注册中心</strong>**（<strong><strong>Registry</strong></strong>）**：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</li>
<li><strong>监控中心</strong>**（<strong><strong>Monitor</strong></strong>）**：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</li>
</ul>
<p>调用关系说明：</p>
<ol>
<li>服务容器负责启动，加载，运行服务提供者。</li>
<li>服务提供者在启动时，向注册中心注册自己提供的服务。</li>
<li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li>
<li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li>
<li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>
</ol>
<h3>1.2、RPC</h3>
<p>RPC（Remote Procedure Call）是一种进程间通信方式。简单地说就是能使应用像调用本地方法一样的调用远程的过程或服务，可以应用在分布式服务、分布式计算、远程服务调用等许多场景。业界有很多开源的优秀 RPC 框架，例如 Dubbo、Thrift、gRPC、Hprose 等等。</p>
<p>RPC 与 HTTP、RMI、Web Service 都能完成远程调用，但是实现方式和侧重点各有不同。</p>
<p>RPC是一种协议规范，可以把HTTP看作是一种RPC的实现，也可以把HTTP作为RPC的传输协议来应用。与HTTP相比，RPC的缺点就是相对复杂，学习成本稍高。</p>
<h4>1.2.1、序列化和反序列化</h4>
<ul>
<li>什么是序列化？序列化就是将数据结构或对象转换成二进制串的过程，也就是编码的过程</li>
<li>什么是反序列化？将在序列化过程中所生成的二进制串转换成数据结构或对象的过程</li>
<li>为什么需要序列化？转换为二进制串才好进行网络传输嘛</li>
<li>为什么需要反序列化？将二进制串转换成对象才好进行后续处理嘛</li>
</ul>
<h2>2、zookeeper（注册中心）</h2>
<p>Zookeeper是一个高性能的，分布式的，开放源码的分布式应用程序协调服务，简称zk。</p>
<h3>2.1、zookeeper 下载</h3>
<p>下载可在官网下载，如 3.4.11 地址参考：<a href="https://archive.apache.org/dist/zookeeper/zookeeper-3.4.11/" target="_blank" rel="noopener noreferrer">https://archive.apache.org/dist/zookeeper/zookeeper-3.4.11/</a></p>
<h3>2.2、zookeper安装使用（window版）</h3>
<p>ZooKeeper服务器是用Java创建的，它运行在JVM之上。需要安装JDK 7或更高版本。</p>
<figure><figcaption>img_16.png</figcaption></figure>
<p>zookeeper 下载后直接解压即可。在bin文件下，直接通过命令行执行 zkServer.cmd 即为启动 zookeeper。</p>
<p>第一次启动时可能会有报错，如下：</p>
<figure><figcaption>img_17.png</figcaption></figure>
<p>此时只需在 conf 目录下将 zoo_sample.cfg 文件复制一份，将名字改为 zoo.cfg 即可。打开&nbsp;zoo.cfg 文件，可以看到内容如下：</p>
<figure><figcaption>img_18.png</figcaption></figure>
<p>可以将 dataDir 路径修改为我们想要保存文件的路径，如：../data，然后建立相应的目录即可。</p>
<p>再次启动 zookeeper，可以看到可正常启动，输出如下：</p>
<figure><figcaption>img_19.png</figcaption></figure>
<p>可以运行 zkCli.cmd 连接到zookeeper的服务器，如下：</p>
<figure><figcaption>img_20.png</figcaption></figure>
<h3>2.3、zookeper安装使用（Linux版）</h3>
<p>ZooKeeper服务器是用Java创建的，它运行在JVM之上。需要安装JDK 7或更高版本。</p>
<figure><figcaption>img_21.png</figcaption></figure>
<p>将下载的ZooKeeper放到/opt/ZooKeeper目录下：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">#打开 opt目录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">cd /opt</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">#创建zooKeeper目录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">mkdir  zooKeeper</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">#将zookeeper安装包移动到 /opt/zooKeeper</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">mv apache-zookeeper-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">bin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">tar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.gz /opt/zookeeper/</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将tar包解压到/opt/zookeeper目录下</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">tar -zxvf apache-zookeeper-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">bin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">tar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.gz</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置zoo.cfg</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">#进入到conf目录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">cd /opt/zooKeeper/apache-zookeeper-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-bin/conf/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">#拷贝</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">cp  </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">zoo_sample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">cfg</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">  zoo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">cfg</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改zoo.cfg</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">#打开目录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">cd /opt/zooKeeper/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">#创建zooKeeper存储目录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">mkdir  zkdata</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">#</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">修改zoo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">cfg</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">vim /opt/zooKeeper/apache-zookeeper-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-bin/conf/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">zoo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">cfg</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改存储目录：dataDir=/opt/zookeeper/zkdata<br>
</p>
<p>启动ZooKeeper</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">cd /opt/zooKeeper/apache-zookeeper-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-bin/bin/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">#启动</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ./</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">zkServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">sh</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  start</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到下图表示ZooKeeper成功启动<br>
</p>
<h4>2.3.1、查看ZooKeeper状态</h4>
<p>查看ZooKeeper状态</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">./</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">zkServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">sh</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> status</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>下图表示zookeeper启动成功。standalone代表zk没有搭建集群，现在是单节点<br>
</p>
<p>下图表示zookeeper没有启动<br>
</p>
<h2>3、提供者消费者示例</h2>
<p>（建议参考&nbsp;3.2、springboot搭建dubbo示例）</p>
<h3>3.1、spring搭建dubbo示例</h3>
<p>基于以下图实现服务 提供者、消费者，即以用户服务作为提供者，订单服务作为消费者。<br>
</p>
<p>分别创建 maven 工程 user-service-provider、order-service-consumer，还需要创建一个专门用于存服务接口的工程 dubbo-interface。</p>
<p>提供者工程 user-service-provider 引入以下依赖：（dubbo依赖会自动引入 spring 的相关依赖），另外需要引入 dubbo-interface 工程。</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- 引入dubbo --&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- https://mvnrepository.com/artifact/com.alibaba/dubbo --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;com.alibaba&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;dubbo&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2.6.2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- 注册中心使用的是zookeeper，引入操作zookeeper的客户端 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!--</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        由于我们使用zookeeper作为注册中心，所以需要操作zookeeper</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        dubbo 2.6以前的版本引入zkclient操作zookeeper</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        dubbo 2.6及以后的版本引入curator操作zookeeper</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        下面两个zk客户端根据dubbo版本2选1即可</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.apache.curator&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;curator-framework&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2.12.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提供者工程添加配置文件 provider.xml，并添加以下配置内容：</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;?</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">xml</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1.0"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> encoding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"UTF-8"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">?&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">beans</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> xmlns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"http://www.springframework.org/schema/beans"</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    xmlns:xsi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"http://www.w3.org/2001/XMLSchema-instance"</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    xmlns:dubbo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"http://code.alibabatech.com/schema/dubbo"</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    xsi:schemaLocation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- 1、指定当前服务/应用的名字（同样的服务名字相同，不要和别的服务同名） --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:application</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"user-service-provider"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- 2、指定注册中心的位置 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- &lt;dubbo:registry address="zookeeper://127.0.0.1:2181"&gt;&lt;/dubbo:registry&gt; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:registry</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"zookeeper"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"127.0.0.1:2181"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- 3、指定通信规则（通信协议？通信端口） --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:protocol</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"dubbo"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"20882"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- 4、暴露服务   ref：指向服务的真正的实现对象 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:service</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> interface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"com.atguigu.gmall.service.UserService"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">        ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"userServiceImpl01"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1000"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1.0.0"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:method</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"getUserAddressList"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1000"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- 服务的实现 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">bean</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"userServiceImpl01"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"com.atguigu.gmall.service.impl.UserServiceImpl"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!--统一设置服务提供方的规则  --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:provider</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1000"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:provider</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:service</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> interface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"com.atguigu.gmall.service.UserService"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">        ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"userServiceImpl02"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1000"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"2.0.0"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:method</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"getUserAddressList"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1000"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">bean</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"userServiceImpl02"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"com.atguigu.gmall.service.impl.UserServiceImpl2"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- 连接监控中心 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:monitor</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"registry"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:monitor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">beans</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>暴露的服务的实现类&nbsp;UserServiceImpl、UserServiceImpl2 代码大概如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserServiceImpl2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">UserAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getUserAddressList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> userId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"UserServiceImpl.....new..."</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        UserAddress</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> address1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> UserAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"北京市昌平区宏福科技园综合楼3层"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"李老师"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"010-56253825"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Y"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        UserAddress</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> address2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> UserAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"深圳市宝安区西部硅谷大厦B座3层（深圳分校）"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"王老师"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"010-56253825"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"N"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Arrays</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">asList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(address1,address2);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动提供者，main 方法如下：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">public class MainApplication {    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    public </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">static</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> void main(String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> args) throws IOException {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        ClassPathXmlApplicationContext ioc </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> new ClassPathXmlApplicationContext(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"provider.xml"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">        ioc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动提供者后可以在管理控制台看到注册的服务：<br>
</p>
<p>在消费者工程引入依赖：</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- 引入dubbo --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;com.alibaba&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;dubbo&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2.6.2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- 注册中心使用的是zookeeper，引入操作zookeeper的客户端端 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.apache.curator&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;curator-framework&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2.12.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费者工程添加配置文件 consumer.xml，并添加以下配置内容：</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;?</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">xml</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1.0"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> encoding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"UTF-8"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">?&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">beans</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> xmlns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"http://www.springframework.org/schema/beans"</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    xmlns:xsi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"http://www.w3.org/2001/XMLSchema-instance"</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    xmlns:dubbo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"http://dubbo.apache.org/schema/dubbo"</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    xmlns:context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"http://www.springframework.org/schema/context"</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">    xsi:schemaLocation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">context:component-scan</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> base-package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"com.atguigu.gmall.service.impl"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">context:component-scan</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:application</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"order-service-consumer"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:registry</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"zookeeper://127.0.0.1:2181"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!--  配置本地存根--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!--声明需要调用的远程服务的接口；生成远程服务代理  --&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        1）、精确优先 (方法级优先，接口级次之，全局配置再次之)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        2）、消费者设置优先(如果级别一样，则消费方优先，提供方次之)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    --&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- timeout="0" 默认是1000ms--&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- retries="":重试次数，不包含第一次调用，0代表不重试--&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- 幂等（设置重试次数）【查询、删除、修改】、非幂等（不能设置重试次数）【新增】 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:reference</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> interface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"com.atguigu.gmall.service.UserService"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">        id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"userService"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"5000"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> retries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"3"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"*"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        &lt;!-- &lt;dubbo:method name="getUserAddressList" timeout="1000"&gt;&lt;/dubbo:method&gt; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:reference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- 配置当前消费者的统一规则：所有的服务都不检查 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:consumer</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> check</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"false"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"5000"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:consumer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:monitor</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"registry"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dubbo:monitor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- &lt;dubbo:monitor address="127.0.0.1:7070"&gt;&lt;/dubbo:monitor&gt; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">beans</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费者建一个实现类，直接使用提供者的方法，如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Service</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> OrderServiceImpl</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> OrderService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Autowired</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    UserService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">UserAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> initOrder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> userId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // TODO Auto-generated method stub</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"用户id："</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">userId);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //1、查询用户的收货地址</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">UserAddress</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">addressList</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getUserAddressList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(userId);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">UserAddress</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> userAddress</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> addressList) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">userAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getUserAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> addressList;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动消费者 main 方法，如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MainApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">SuppressWarnings</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"resource"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        ClassPathXmlApplicationContext</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> applicationContext</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ClassPathXmlApplicationContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"consumer.xml"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        OrderService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> orderService</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> applicationContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getBean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">OrderService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        orderService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">initOrder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"调用完成...."</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到输出：<br>
</p>
<p>由此，消费者调用提供者提供的服务即完成。</p>
<p>（上面的示例没有把 dubbo-interface 工程具体写出来，可以参考下面 3.2）</p>
<h3>3.2、springboot搭建dubbo示例</h3>
<p>创建工程 dubbotest01，在该工程下创建 module：dubbo-interface、dubbo-provider、dubbo-consumer。其中，dubbo-provider 和 dubbo-consumer 创建为 springboot 项目，可用于测试服务调用，dubbo-interface 只需创建为普通 maven 项目即可，只需在里面管理一些公共接口类。dubbo-interface 后面被打成 jar 包，它的作用只是提供接口。<br>
</p>
<h4>3.2.1、搭建dubbo-interface 模块</h4>
<p>在 dubbo-interface 模块中创建接口类&nbsp;HelloService，如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD"> com.example.dubbointerface</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HelloService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">  String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> sayHello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>3.2.2、搭建dubbo-provider模块</h4>
<p>dubbo-provider 中添加依赖，包括dubbo 、zookeeper以及 dubbo-interface 的依赖，如下：</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;spring-boot-starter-web&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!--引入dubbo-interface的依赖--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;com.example&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;dubbo-interface&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;0.0.1-SNAPSHOT&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!--引入dubbo的依赖--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;com.alibaba.spring.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;dubbo-spring-boot-starter&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2.0.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- 引入zookeeper的依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;com.101tec&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;zkclient&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;0.10&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 application.properties 配置文件中配置 dubbo 相关信息</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"># 配置应用启动端口，避免端口冲突</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">port</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">8333</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">dubbo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">dubbo-</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">provider</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">dubbo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">registry</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">zookeeper://</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">192</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">168</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">118</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">131</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2181</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">#可通过以下配置修改默认的20880端口</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">dubbo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">port</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">20883</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现 HelloService 接口，如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> com.alibaba.dubbo.config.annotation.Service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.springframework.stereotype.Component</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Component</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Service</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    //将这个类提供的方法（服务）对外发布，将访问的地址、ip、路径注册到注册中心。（注意，@Service 注解使用的时 Dubbo 提供的而不是 Spring 提供的。）</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HelloServiceImpl</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HelloService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> sayHello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "Hello "</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> name;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给启动类加上&nbsp;<code>@EnableDubboConfiguration</code>&nbsp;注解开启Dubbo 的自动配置。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> com.alibaba.dubbo.spring.boot.annotation.EnableDubboConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.springframework.boot.SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.springframework.boot.autoconfigure.SpringBootApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 开启dubbo的自动配置</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">EnableDubboConfiguration</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> DubboProviderApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">DubboProviderApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, args);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>3.2.3、搭建dubbo-consumer模块</h4>
<p>dubbo-consumer 中添加依赖，包括dubbo 、zookeeper以及 dubbo-interface 的依赖，如下：</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;spring-boot-starter-web&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;com.example&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;dubbo-interface&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;0.0.1-SNAPSHOT&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!--引入dubbo的依赖--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;com.alibaba.spring.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;dubbo-spring-boot-starter&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;2.0.0&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    &lt;!-- 引入zookeeper的依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;com.101tec&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;zkclient&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;0.10&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 application.properties 配置文件中配置 dubbo 相关信息</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"># 配置端口</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">port</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">8330</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">dubbo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">dubbo-consumer</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">dubbo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">registry</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">zookeeper://</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">192</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">168</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">118</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">131</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2181</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">#可通过以下配置修改默认的20880端口</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">dubbo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">protocol</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">port</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">20884</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写一个简单 Controller ，HelloController 来调用远程服务，如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> com.alibaba.dubbo.config.annotation.Reference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> com.example.dubbointerface.HelloService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.springframework.web.bind.annotation.RequestMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.springframework.web.bind.annotation.RestController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">RestController</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HelloController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">   /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">      1.从zookeeper注册中心获取对应服务提供者的访问路径</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">      2.进行远程调用RPC</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">      3.将结果封装为一个代理对象，给变量赋值</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">   */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Reference</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">  //远程注入</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HelloService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> helloService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">RequestMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> hello</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> helloService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sayHello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"world"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">helloService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sayHello</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"SnailClimb"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> hello;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给启动类加上&nbsp;<code>@EnableDubboConfiguration</code>&nbsp;注解开启Dubbo 的自动配置。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> com.alibaba.dubbo.spring.boot.annotation.EnableDubboConfiguration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.springframework.boot.SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.springframework.boot.autoconfigure.SpringBootApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.springframework.context.annotation.ImportResource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">EnableDubboConfiguration</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> DubboConsumerApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        SpringApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">DubboConsumerApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, args);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动 zookeeper，启动 provider 和 consumer 服务，调用 consumer 服务的 HelloController 类，即访问&nbsp;<a href="http://localhost:8330/hello%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E8%BE%93%E5%87%BA%E5%A6%82%E4%B8%8B%EF%BC%9A" target="_blank" rel="noopener noreferrer">http://localhost:8330/hello，可以看到输出如下：</a><br>
</p>
<p>由此，使用SpringBoot+Dubbo 搭建分布式服务成功。</p>
<h2>4、zookeeper管理控制台（dubbo-admin）</h2>
<p>dubbo-admin 管理平台，是图形化的服务管理页面。该平台从注册中心中获取到所有的提供者 / 消费者，可进行配置管理 路由规则、动态配置、服务降级、访问控制、权重调整、负载均衡等管理功能。</p>
<h3>4.1、dubbo-admin的安装使用</h3>
<h4>4.1.1、dubbo-admin下载打包</h4>
<p>dubbo-admin 是一个前后端分离的项目，前端使用vue，后端使用springboot。</p>
<p>dubbo-admin下载地址 ：<a href="https://github.com/apache/dubbo-admin" target="_blank" rel="noopener noreferrer">https://github.com/apache/dubbo-admin</a></p>
<p>下载解压后进入 dubbo-admin-server\src\main\resources 目录，找到&nbsp;<strong>application.properties</strong>&nbsp;配置文件进行配置修改，将 zookeeper 地址修改为正确地址，如：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"># centers </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">in</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> dubbo2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> you want </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">to</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> parameters, please </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> them </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> the </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">url</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">admin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">address</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">zookeeper://</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">192</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">168</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">118</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">131</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2181</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">admin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-center</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">zookeeper://</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">192</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">168</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">118</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">131</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2181</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">admin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">metadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">report</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">address</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">zookeeper://</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">192</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">168</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">118</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">131</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2181</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 dubbo-admin-develop 根目录执行打包命令：mvn clean package -Dmaven.test.skip=true，看到 build success 即打包成功。<br>
</p>
<ol>
<li>或者先在&nbsp;dubbo-admin-server 中打包，使用 mvn package -Dmaven.test.skip=true ，</li>
<li>然后&nbsp;java&nbsp;-jar 启动打包生成的 jar 包，如：java -jar dubbo-admin-server-0.3.0.jar。</li>
<li>然后再去&nbsp;dubbo-admin-ui 里面执行 npm install 等待下载前端的依赖，完毕后启动前端 npm run dev</li>
</ol>
<p>如果 dubbo-admin-server 编译报错，提示 zookeeper server创建失败什么的，可将上面的 admin.registry.address 配置改为：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">admin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">address</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">zookeeper://</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">192</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">168</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">118</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">131</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2181</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">?blockUntilConnectedWait</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">100000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&amp;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">100000</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><h4>4.1.2、启动前后端</h4>
<p>切换到目录打包后的后端 jar 包目录：dubbo-Admin-develop\dubbo-admin-distribution\target，执行以下命令启动后台：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">java -jar .\dubbo-</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">admin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.jar</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>在 dubbo-admin-ui 目录下执行以下命令启动前端：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">npm run dev</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>启动完成后即可通过 localhost:8081 看到后台管理页面了，启动结果如下：（默认登录账户密码都是 root）<br>
</p>
<h3>4.2、dubbo-admin的基本使用</h3>
<p>可以在服务查询中看到已注册的服务，如下：<br>
</p>
<p>点击服务的详情，可以看到该服务的详细信息和该服务的消费者，如下：<br>
<br>
</p>
]]></content:encoded>
    </item>
    <item>
      <title>组件Flink</title>
      <link>https://ujava.cn/assembly/flink.html</link>
      <guid>https://ujava.cn/assembly/flink.html</guid>
      <source url="https://ujava.cn/rss.xml">组件Flink</source>
      <description>Flink前言 Flink和spark的功能很相似，spark能做的flink也能做，flink能做的spark也能做； 1、flink和spark本质的区别 实时计算和离线计算的特点 img_90.png 2、流处理和批处理 流处理和批处理：也可以叫做实时计算和离线计算 流处理 img_91.png 批处理 img_92.png 3、无界流和有界流 ...</description>
      <category>设计组件</category>
      <pubDate>Tue, 16 Apr 2024 01:53:26 GMT</pubDate>
      <content:encoded><![CDATA[<h4>Flink前言</h4>
<blockquote>
<p>Flink和spark的功能很相似，spark能做的flink也能做，flink能做的spark也能做；</p>
</blockquote>
<h5>1、flink和spark本质的区别</h5>
<div class="language-undefined line-numbers-mode" data-highlighter="shiki" data-ext="undefined" data-title="undefined" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>flink：侧重于做实时计算</span></span>
<span class="line"><span>spark：侧重于做离线计算</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>实时计算和离线计算的特点<br>
</li>
</ul>
<h5>2、流处理和批处理</h5>
<blockquote>
<p>流处理和批处理：也可以叫做实时计算和离线计算</p>
</blockquote>
<div class="language-undefined line-numbers-mode" data-highlighter="shiki" data-ext="undefined" data-title="undefined" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>特点</span></span>
<span class="line"><span>流处理：数据大小未知、做一些相对简单的操作、及时响应结果</span></span>
<span class="line"><span>批处理：数据大小固定、可以做复杂的操作、需要一段时间出结果</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>
<p>流处理<br>
</p>
</li>
<li>
<p>批处理<br>
</p>
</li>
</ul>
<h5>3、无界流和有界流</h5>
<blockquote>
<p>从一开始不断地有数据过来</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>组件Flume</title>
      <link>https://ujava.cn/assembly/flume.html</link>
      <guid>https://ujava.cn/assembly/flume.html</guid>
      <source url="https://ujava.cn/rss.xml">组件Flume</source>
      <category>设计组件</category>
      <pubDate>Tue, 16 Apr 2024 01:53:26 GMT</pubDate>
    </item>
    <item>
      <title>组件Hadoop</title>
      <link>https://ujava.cn/assembly/hadoop.html</link>
      <guid>https://ujava.cn/assembly/hadoop.html</guid>
      <source url="https://ujava.cn/rss.xml">组件Hadoop</source>
      <description>1． Hadoop介绍 Hadoop是Apache旗下的一个用java语言实现开源软件框架，是一个开发和运行处理大规模数据的软件平台。允许使用简单的编程模型在大量计算机集群上对大型数据集进行分布式处理。 img_98.png 狭义上说，Hadoop指Apache这款开源框架，它的核心组件有： HDFS（分布式文件系统）：解决海量数据存储 YARN（作业...</description>
      <category>设计组件</category>
      <pubDate>Tue, 16 Apr 2024 01:53:26 GMT</pubDate>
      <content:encoded><![CDATA[<h2>1．&nbsp;Hadoop介绍</h2>
<p>Hadoop是Apache旗下的一个用java语言实现开源软件框架，是一个开发和运行处理大规模数据的软件平台。允许使用简单的编程模型在大量计算机集群上对大型数据集进行分布式处理。<br>
</p>
<p>狭义上说，Hadoop指Apache这款开源框架，它的核心组件有：</p>
<p>HDFS（分布式文件系统）：解决海量数据存储</p>
<p>YARN（作业调度和集群资源管理的框架）：解决资源任务调度</p>
<p>MAPREDUCE（分布式运算编程框架）：解决海量数据计算</p>
<p>广义上来说，Hadoop通常是指一个更广泛的概念——Hadoop生态圈。<br>
</p>
<p>当下的Hadoop已经成长为一个庞大的体系，随着生态系统的成长，新出现的项目越来越多，其中不乏一些非Apache主管的项目，这些项目对HADOOP是很好的补充或者更高层的抽象。比如：</p>
<p>HDFS：分布式文件系统</p>
<p>MAPREDUCE：分布式运算程序开发框架</p>
<p>HIVE：基于HADOOP的分布式数据仓库，提供基于SQL的查询数据操作</p>
<p>HBASE：基于HADOOP的分布式海量数据库</p>
<p>ZOOKEEPER：分布式协调服务基础组件</p>
<p>Mahout：基于mapreduce/spark/flink等分布式运算框架的机器学习算法库</p>
<p>OOZIE：工作流调度框架</p>
<p>Sqoop：数据导入导出工具（比如用于mysql和HDFS之间）</p>
<p>FLUME：日志数据采集框架</p>
<p>IMPALA：基于hive的实时sql查询分析</p>
<h2>2．&nbsp;Hadoop发展简史</h2>
<p>Hadoop是Apache Lucene创始人&nbsp;Doug Cutting创建的。最早起源于Nutch，它是Lucene的子项目。Nutch的设计目标是构建一个大型的全网搜索引擎，包括网页抓取、索引、查询等功能，但随着抓取网页数量的增加，遇到了严重的可扩展性问题：如何解决数十亿网页的存储和索引问题。</p>
<p>2003年Google发表了一篇论文为该问题提供了可行的解决方案。论文中描述的是谷歌的产品架构，该架构称为：谷歌分布式文件系统（GFS）,可以解决他们在网页爬取和索引过程中产生的超大文件的存储需求。</p>
<p>2004年&nbsp;Google发表论文向全世界介绍了谷歌版的MapReduce系统。</p>
<p>同时期，Nutch的开发人员完成了相应的开源实现HDFS和MAPREDUCE，并从Nutch中剥离成为独立项目HADOOP，到2008年1月，HADOOP成为Apache顶级项目，迎来了它的快速发展期。</p>
<p>2006年Google发表了论文是关于BigTable的，这促使了后来的Hbase的发展。</p>
<p>因此，Hadoop及其生态圈的发展离不开Google的贡献。</p>
<h2>3．&nbsp;Hadoop特性优点</h2>
<p>扩容能力（Scalable）：Hadoop是在可用的计算机集群间分配数据并完成计算任务的，这些集群可用方便的扩展到数以千计的节点中。</p>
<p>成本低（Economical）：Hadoop通过普通廉价的机器组成服务器集群来分发以及处理数据，以至于成本很低。</p>
<p>高效率（Efficient）：通过并发数据，Hadoop可以在节点之间动态并行的移动数据，使得速度非常快。</p>
<p>可靠性（Rellable）：能自动维护数据的多份复制，并且在任务失败后能自动地重新部署（redeploy）计算任务。所以Hadoop的按位存储和处理数据的能力值得人们信赖。</p>
<h2>4．&nbsp;Hadoop国内外应用</h2>
<p>不管是国内还是国外，Hadoop最受青睐的行业是互联网领域，可以说互联网公司是hadoop的主要使用力量。</p>
<p>国外来说，Yahoo、Facebook、IBM等公司都大量使用hadoop集群来支撑业务。比如：</p>
<p>Yahoo的Hadoop应用在支持广告系统、用户行为分析、支持Web搜索等。</p>
<p>Facebook主要使用Hadoop存储内部日志与多维数据，并以此作为报告、分析和机器学习的数据源。</p>
<p>国内来说，BAT领头的互联网公司是当仁不让的Hadoop使用者、维护者。比如Ali云梯（14年国内最大Hadoop集群）、百度的日志分析平台、推荐引擎系统等。<br>
</p>
<p>国内其他非互联网领域也有不少hadoop的应用，比如：</p>
<p>金融行业： 个人征信分析</p>
<p>证券行业： 投资模型分析</p>
<p>交通行业： 车辆、路况监控分析</p>
<p>电信行业： 用户上网行为分析</p>
<p>总之：hadoop并不会跟某种具体的行业或者某个具体的业务挂钩，它只是一种用来做海量数据分析处理的工具。</p>
<h2>总结：</h2>
<h2>Hadoop是什么？</h2>
<h5>答：狭义上：是指Apache的一款java语言开发的开源软件，大数据问题处理平台！</h5>
<p>|   |<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>组件Hbase</title>
      <link>https://ujava.cn/assembly/hbase.html</link>
      <guid>https://ujava.cn/assembly/hbase.html</guid>
      <source url="https://ujava.cn/rss.xml">组件Hbase</source>
      <description>简介 Hbase是一种 分布式存储 的数据库，技术上来讲，它更像是分布式存储而不是 分布式数据库，它缺少很多RDBMS系统的特性，比如列类型，辅助索引，触发器，和高级查询语言等待。 Hbase有如下特性: 强读写一致，但是不是“最终一致性”的 数据存储，这使得它非常适合高速的计算聚合 自动分片，通过Region分散在集群中，当行数增长的时候，Regio...</description>
      <category>设计组件</category>
      <pubDate>Tue, 16 Apr 2024 01:53:26 GMT</pubDate>
      <content:encoded><![CDATA[<h4>简介</h4>
<p>Hbase是一种 分布式存储 的数据库，技术上来讲，它更像是分布式存储而不是 分布式数据库，它缺少很多RDBMS系统的特性，比如列类型，辅助索引，触发器，和高级查询语言等待。</p>
<p>Hbase有如下特性:</p>
<ul>
<li>强读写一致，但是不是“最终一致性”的 数据存储，这使得它非常适合高速的计算聚合</li>
<li>自动分片，通过Region分散在集群中，当行数增长的时候，Region也会自动的切分和再分配</li>
<li>自动的故障转移</li>
<li>Hadoop/HDFS集成，和HDFS开箱即用</li>
<li>丰富的“简洁，高效”API，Thrift/REST API，Java API</li>
<li>块缓存，布隆过滤器，可以高效的列查询优化</li>
<li>操作管理，Hbase提供了内置的web界面来操作，还可以监控JMX指标</li>
</ul>
<h5>Hbase的使用场景</h5>
<ul>
<li>首先数据库量要足够多，如果有十亿及百亿行数据，那么Hbase是一个很好的选项，如果只有几百万行甚至不到的数据量，RDBMS是一个很好的选择。因为数据量小的话，真正能工作的机器量少，剩余的机器都处于空闲的状态</li>
<li>不需要辅助索引，静态类型的列，事务等特性</li>
<li>保证硬件资源足够，每个HDFS集群在少于5个节点的时候，都不能表现的很好。因为HDFS默认的复制数量是3，再加上一个NameNode</li>
</ul>
<h4>Hbase架构</h4>
<figure><figcaption>img_87.png</figcaption></figure>
<p>Hbase是三层架构体系。</p>
<ul>
<li>其中Hbase表底层是存储在HDFS上，可以分为多个Region， Region分布在Region Server上</li>
<li>Master负责协调Region和负载</li>
<li>Zookeeper负责记录一些元数据</li>
</ul>
<p>HBase中有两张特殊的表： Root和META， META表负责记录Region的分区信息， Root表负责记录META的分区信息， Root表的位置信息则有Hadoop集群的zookeeper来记录。</p>
<p>那么Hbase检索一条数据的流程应该是这样的:<br>
</p>
<h5>存储结构</h5>
<p>Hbase 是一种专门为半结构化数据和水平扩展性设计的数据库。它把数据存储在表中，表按“行健(rowkey)，列簇，列限定符和时间版本”的四维坐标系来组织。Hbase 是无模式数据库，只需要提前定义列簇，并不需要指定列限定符。同时它也是无类型数据库，所有数据都是按二进制字节方式存储的，对 Hbase 的操作和访问有 5 个基本方式，即 Get、Put、Delete 和 Scan 以及 Increment。Hbase 基于非行健值查询的唯一途径是通过带过滤器的扫描。<br>
</p>
<p>从上图我们可以看出 Hbase 的组成部件，HBase 中的每张表都通过行键按照一定的范围被分割成多个子表（HRegion），由 HRegionServer 管理，管理哪些 HRegion 由 HMaster 分配。</p>
<p>HRegionServer 存取一个子表时，会创建一个 HRegion 对象，然后对表的每个列族 (Column Family) 创建一个 Store 实例，每个 Store 都会有 0 个或多个 StoreFile 与之对应，每个 StoreFile 都会对应一个 HFile，HFile 就是实际的存储文件。因此，一个 HRegion 有多少个列族就有多少个 Store。此外，每个 HRegion 还拥有一个 MemStore 内存缓存实例。</p>
<ul>
<li>HFile：HBase 中 KeyValue 数据的存储格式，HFile 是 Hadoop 的二进制格式文件，实际上 StoreFile 就是对 HFile 做了轻量级包装，即 StoreFile 底层就是 HFile</li>
<li>HLog: HBase记录写入记录，WAL机制保证数据可靠性，即首先写日志再写缓存，即使发生宕机，也可以通过恢复HLog还原出原始数据。该步骤就是将数据构造为WALEdit对象，然后顺序写入HLog中。</li>
<li>MemStore：MemStore 即内存里放着的保存 KEY/VALUE 映射的 MAP，当 MemStore（默认 64MB）写满之后，会开始 flush 到磁盘（即 Hadoop 的 HDFS 上）的操作</li>
</ul>
<h5>HLog之WAL(write ahead log)机制</h5>
<p>WAL(Write-Ahead Logging)是一种高效的日志算法,基本原理是在数据写入之前首先顺序写入日志，然后再写入缓存，等到缓存写满之后统一落盘。之所以能够提升写性能，是因为WAL将一次随机写转化为了一次顺序写加一次内存写。提升写性能的同时，WAL可以保证数据的可靠性，即在任何情况下数据不丢失。假如一次写入完成之后发生了宕机，即使所有缓存中的数据丢失，也可以通过恢复日志还原出丢失的数据。</p>
<h6>HBase写入流程分析</h6>
<ol>
<li>zookeeper中存储了meta表的region信息，从meta表获取相应region信息，然后找到meta表的数据</li>
<li>根据meta表的数据找到写入数据对应的region信息, 找到对应的RegionServer</li>
<li>把数据分别写到HLog和MemStore上一份</li>
<li>MemStore达到一个阈值后则把数据刷成一个StoreFile文件。若MemStore中的数据有丢失，则可以总HLog上恢复</li>
<li>当多个StoreFile文件达到一定的大小后，会触发Compact合并操作，合并为一个StoreFile，这里同时进行版本的合并和数据删除</li>
<li>当Compact后，逐步形成越来越大的StoreFIle后，会触发Split操作，把当前的StoreFile分成两个，这里相当于把一个大的region分割成两个region</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>组件Hive</title>
      <link>https://ujava.cn/assembly/hive.html</link>
      <guid>https://ujava.cn/assembly/hive.html</guid>
      <source url="https://ujava.cn/rss.xml">组件Hive</source>
      <category>设计组件</category>
      <pubDate>Tue, 16 Apr 2024 01:53:26 GMT</pubDate>
    </item>
    <item>
      <title>组件MongoDB</title>
      <link>https://ujava.cn/assembly/mongodb.html</link>
      <guid>https://ujava.cn/assembly/mongodb.html</guid>
      <source url="https://ujava.cn/rss.xml">组件MongoDB</source>
      <description>一、简介 1.1 Mongodb MongoDb是一个基于分布式文件存储的数据库，官方地址 https://www.mongodb.com/ 1.2 数据库 数据库(DataBase)是按照数据结构来组织、存储和管理数据的应用程序。 作用：数据库的主要作用就是管理数据，对数据进行增(c)、删(d)、改(u)、查(r)。 核心概念： 数据库（databa...</description>
      <category>设计组件</category>
      <pubDate>Tue, 16 Apr 2024 01:53:26 GMT</pubDate>
      <content:encoded><![CDATA[
<h2>1.1 Mongodb</h2>
<p>MongoDb是一个基于分布式文件存储的数据库，官方地址 <a href="https://www.mongodb.com/" target="_blank" rel="noopener noreferrer">https://www.mongodb.com/</a></p>
<h2>1.2 数据库</h2>
<p>数据库(DataBase)是按照数据结构来组织、存储和管理数据的应用程序。</p>
<p>作用：数据库的主要作用就是管理数据，对数据进行增(c)、删(d)、改(u)、查(r)。</p>
<p>核心概念：</p>
<ul>
<li>数据库（database）数据库是一个数据仓库，数据库服务下可以创建很多数据库，数据库中可以存放很多集合。</li>
<li>集合（collection）集合类似于JS中的数组，在集合中可以存放很多文档。</li>
<li>文档（document）文档是数据库中的最小单位，类似于JS中的对象。</li>
</ul>
<blockquote>
<p>一般情况下：</p>
<ul>
<li>一个项目使用一个数据库</li>
<li>一个集合会存储同一种类型的数据</li>
</ul>
</blockquote>
<figure><figcaption>img_135.png</figcaption></figure>
<h1>二、下载安装与启动</h1>
<p>下载地址：<a href="https://www.mongodb.com/try/download/community" target="_blank" rel="noopener noreferrer">https://www.mongodb.com/try/download/community</a></p>
<p>建议选择<code>zip</code>类型，通用性更强，配置步骤如下：</p>
<ol>
<li>将压缩包移动到<code>C:\Program Files</code>下，然后解压</li>
<li>创建<code>C:\data\db</code>目录，mongodb会将数据默认保存在这个文件夹</li>
<li>以mongodb中bin目录作为工作目录，启动命令行</li>
<li>运行命令<code>mongod</code></li>
<li>成功运行服务<code>127.0.0.1:27017</code>，如下图</li>
</ol>
<figure><figcaption>img_136.png</figcaption></figure>
<blockquote>
<p>注意：</p>
<ul>
<li>为了方便后续使用<code>mongod</code>命令，可以将bin目录配置到环境变量Path中</li>
<li>千万不要选中服务端窗口的内容，选中会停止服务，可以敲回车取消选中</li>
</ul>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>组件MyBatis</title>
      <link>https://ujava.cn/assembly/mybatis.html</link>
      <guid>https://ujava.cn/assembly/mybatis.html</guid>
      <source url="https://ujava.cn/rss.xml">组件MyBatis</source>
      <category>设计组件</category>
      <pubDate>Tue, 16 Apr 2024 01:53:26 GMT</pubDate>
    </item>
    <item>
      <title>组件MySQL</title>
      <link>https://ujava.cn/assembly/mysql.html</link>
      <guid>https://ujava.cn/assembly/mysql.html</guid>
      <source url="https://ujava.cn/rss.xml">组件MySQL</source>
      <description>img_36.pngimg_36.png 一、数据库简介 1. 数据库是什么 数据库是数据管理的有效技术，是由一批数据构成的有序集合，这些数据被存放在结构化的数据表里。数据表之间相互关联，反映客观事物间的本质联系。数据库能有效地帮助一个组织或企业科学地管理各类信息资源。 数据是数据库中存储的基本对象，是按一定顺序排列组合的物理符号。数据有多种表现形式，...</description>
      <category>设计组件</category>
      <pubDate>Tue, 16 Apr 2024 01:53:26 GMT</pubDate>
      <content:encoded><![CDATA[<figure><figcaption>img_36.png</figcaption></figure>
<h2>一、数据库简介</h2>
<h3>1. 数据库是什么</h3>
<p>数据库是数据管理的有效技术，是由一批数据构成的有序集合，这些数据被存放在结构化的数据表里。数据表之间相互关联，反映客观事物间的本质联系。数据库能有效地帮助一个组织或企业科学地管理各类信息资源。</p>
<ul>
<li>数据是数据库中存储的基本对象，是按一定顺序排列组合的物理符号。数据有多种表现形式，可以是数字、文字、图像，甚至是音频或视频，它们都可以经过数字化后存入计算机。</li>
<li>数据库是数据的集合，具有统一的结构形式并存放于统一的存储介质内，是多种应用数据的集成，并可被各个应用程序所共享。</li>
<li>在日常生活中，人们可以直接用中文、英文等自然语言描述客观事物。在计算机中，则要抽象出对这些事物感兴趣的特征，并组成一个记录来描述。</li>
</ul>
<h3>2. 数据库在开发中的作用</h3>
<p>从数据库系统应用角度来看，数据库系统常见的运行与应用结构有：客户端/服务器结构、浏览器/服务器结构。</p>
<ul>
<li>在客户端/服务器（Client/Server，C/S）结构中，数据库的使用者（如 DBA、程序设计者）通过命令行客户端、图形化界面管理工具或应用程序等连接到数据库管理系统，可以通过数据库管理系统查询和处理存储在底层数据库中的各种数据。</li>
<li>数据库使用者与命令行客户端、图形化界面管理工具或应用程序等直接交互，而不与数据库管理系统直接联系。</li>
<li>在这种结构中，命令行客户端、图形化界面管理工具或应用程序等称为“客户端”或“前台”，主要完成与数据库使用者的交互任务；而数据库管理系统则称为“服务器”或“后台”，主要负责数据管理。这种结构经常被称为“C/S”结构。</li>
<li>在客户端/服务器模式中，客户端和服务器可以同时工作在同一台计算机上，这种工作方式称为“单机方式”；也可以“网络方式”运行，即服务器被安装和部署在网络中某一台或多台主机上。</li>
<li>对于客户端应用程序的开发，目前常用的语言工具主要有 Visual C++、Delphi、.NET 框架、Visual Basic、Python 等。</li>
<li>数据库能有效存储数据，读取数据、查找数据更是方便，其实那些管理软件就是通过软件的界面向内部的数据库进行数据的增、删、改、查操作。</li>
</ul>
<h3>3.常见数据库比较</h3>
<p><strong>3.1 MySQL数据库</strong><br>
<strong>定位</strong><br>
开源、多平台、关系型数据库<br>
目前使用最广泛、流行度最高的的开源数据库。</p>
<p><strong>功能</strong><br>
支持事务，符合关系型数据库原理，符合ACID，支持多数SQL规范，以二维表方式组织数据，有插件式存储引擎，支持多种存储引擎格式</p>
<p><strong>部署</strong><br>
用编译安装的方式，或者二进制包的方式，按照“安装软件-创建实例-库表用户初始化”，可以很快完成数据库部署</p>
<p><strong>使用</strong><br>
使用标准的SQL语句进行数据库管理，简单SQL语句的并发和性能较好，对视图、存储过程、函数、触发器等支持的不是太好</p>
<p><strong>监控</strong><br>
在命令行界面有一些常用的命令显示状态和性能，在图形界面方面，有比较多的开源监控工具来监控和记录数据库的状态，比如zabbix，nagios，cacti，lepus等</p>
<p><strong>备份</strong><br>
逻辑备份 mysqldump/mysqldumper ，物理备份 用xtrabackup等工具进行备份；</p>
<p><strong>高可用</strong><br>
MySQL高可用有多种方案，官方有基础的master-slave主从复制，新版本的innodb cluster，第三方的有MHA等高可用方案；</p>
<p><strong>扩展</strong><br>
MySQL水平拆分，可以通过水平拆分proxy中间进行逻辑映射和拆分，扩大MySQL数据库的并发能力和吞吐量。</p>
<p><strong>适用场景</strong><br>
默认的innodb存储引擎，支持高并发，简单的绝大部分OLTP场景；<br>
Tokudb存储引擎，使用高并发insert的场景；<br>
Inforbright存储引擎，可以进行列压缩和OLAP统计查询场景；</p>
<p><strong>选择注意</strong><br>
使用MySQL进行OLTP业务时，需要注意数据量级，如果数据量级过大，需要进行水平拆分；<br>
如果有OLAP需求，可以结合其他架构综合考虑。</p>
<p><strong>3.2 SQL Server数据库</strong><br>
<strong>定位</strong><br>
商业、Windows平台、关系型数据库<br>
最早接触、与微软体系结合紧密的的商业数据库，属于“微软技术体系”</p>
<p><strong>功能</strong><br>
支持事务，符合关系型数据库原理，符合ACID，支持多数SQL规范，以二维表方式组织数据</p>
<p><strong>部署</strong><br>
在Windows平台，用图形界面进行软件安装；</p>
<p><strong>使用</strong><br>
在Windows平台，使用SQL Server Mangement Studio图形界面进行安装；</p>
<p><strong>监控</strong><br>
一般通过Windows资源管理和SQL server图形工具进行系统和数据库性能显示；</p>
<p><strong>备份</strong><br>
通常用第三方备份恢复软件进行备份恢复；</p>
<p><strong>高可用</strong><br>
通过共享存储和双机热备的方式，可以实现SQL Server数据库的高可用；</p>
<p><strong>扩展</strong><br>
SQL Server数据库集群采用共存存储的方式，通过硬件垂直升级来对数据库集群进行扩展；</p>
<p><strong>适用场景</strong><br>
大多数OLTP场景（与微软体系配合）</p>
<p><strong>选择注意</strong></p>
<ul>
<li>SQL Server与微软技术体系结合比较紧密，绝大多数工作，都是通过图形界面完成，对于习惯使用命令行的DBA可能会有不习惯；</li>
<li>SQL server对双引号，大小写，元信息的管理和处理方式，与其他数据库很不相同，需要注意；</li>
<li>使用SQL Server满足OLTP业务，会有比较好的效果，但对于大数据量的OLAP业务，最好还是选用专门的OLAP架构，不要在同一个SQL Server实例上混用OLTP和OLAP业务；</li>
<li>SQL server属于商业软件，需要注意版权和licence授权费用；</li>
</ul>
<p><strong>3.3 Oracle数据库</strong><br>
<strong>定位</strong><br>
商业、多平台、关系型数据库<br>
功能最强大、最复杂、市场占比最高的商业数据库</p>
<p><strong>功能</strong><br>
支持事务，符合关系型数据库原理，符合ACID，支持多数SQL规范，以二维表方式组织数据</p>
<p><strong>部署</strong><br>
Oracle单实例数据库部署相对容易，但Oracle RAC集群环境，部署的步骤和依赖条件都比较多；</p>
<p><strong>使用</strong><br>
通常使用命令行工具，进行各种数据库的管理，通常也可以用shell脚本和python脚本提高Oracle数据库管理效率；各种管理功能，都比较强大；</p>
<p><strong>监控</strong><br>
Oracle官方有比较全面的监控工具，常用的第三方监控平台，如zabbix,cacti,lepus等都有对Oracle数据库的各项指标的完善监控；</p>
<p><strong>备份</strong><br>
支持冷备份和热备份，可以用 exp/imp , expdp/impdp等进行逻辑备份和恢复，可以使用强大的RMAN工具进行专业的物理热备份和恢复；</p>
<p><strong>高可用</strong><br>
Oracle数据库的高可用架构，可以用第三方双机热备软件，结合Oracle单实例实现；可以使用Oracle Dataguard，实现master和standby的备份；可以使用 Oracle RAC集群实现实例级别的高可用和负载均衡，使用ASM实现存储级别的高可用；</p>
<p><strong>扩展</strong><br>
由于Oracle集群采用共享存储的方式，一般只能通过垂直硬件升级进行升级；</p>
<p><strong>适用场景</strong><br>
绝大多数OLTP场景，部分OLAP</p>
<p><strong>选择注意</strong><br>
Oracle从架构到运维，可以说是最难的数据库，学习和使用难度较高。</p>
<p><strong>3.4 Hbase数据库</strong><br>
<strong>定位</strong></p>
<ul>
<li>开源、Linux平台、列存储nosql数据库</li>
<li>可用于海量数据存储、与Hadoop生态圈结合、定位于“大”的列存储nosql数据库</li>
</ul>
<p><strong>功能</strong><br>
命令执行速度非常看，读写性能可达10万/秒；数据结构是key-value类似字典的功能，可以键过期-缓存，发布订阅-消息系统，简单的事物功能；</p>
<p><strong>部署</strong><br>
相对其他数据库，hbase的部署比较复杂，依赖Hadoop，zookeeper等组件，Hbase集群包括一个mater节点，多个regionServer，zookeeper管理所有regionServer，需要依次部署Hadoop、zookeeper之后，再部署HBASE集群；</p>
<p><strong>使用</strong><br>
用redis-cli客户端连接，一般用简单的 set ,get,del 进行数据管理； 在单实例redis的基础上，进行可以数据持久化，主从复制，高可用和分布式等功能；</p>
<p><strong>监控</strong><br>
在命令行界面有一些常用的命令显示状态和性能，在图形界面方面，有开源监控工具来监控和记录数据库的状态，比如cachecloud；</p>
<p><strong>备份</strong><br>
Hbase一般用作海量数据的仓库，本身通过多层副本来保证数据安全性，不用进行专门的备份</p>
<p><strong>高可用</strong><br>
HBASE集群基于Hadoop，需要依次部署Hadoop单机模式、集群模式、HA模式，通过Hadoop HA实现高可用；</p>
<p><strong>扩展</strong><br>
HBASE以集群形式，依次是单机模式，伪分布模式，完全分布模式，底层基于HDFS，zookeeper可以很好地进行扩展；</p>
<p><strong>适用场景</strong><br>
两大用途：</p>
<ul>
<li>用于简单数据写入和海量、结构简单数据查询的业务场景；</li>
<li>用于成为其他数据库备份和下沉的数据库；</li>
</ul>
<p><strong>选择注意</strong></p>
<ul>
<li>Hbase不适合的场景：对数据分析需求高，需要能够用sql或者简单的MapReduce实现分析需求的业务场景，不适合用Hbase；</li>
<li>单表数据量，不超过千万时，使用Hbase，体现不出Hbase的优势，而且会比较慢，不适合用Hbase。</li>
<li>通过对上面数据库“七种”武器的描述，也可以看到目前常用数据库的使用脉络和选择顺序，对应一个业务，可以优先选择最流行的开源数据库——MySQL；如果出于稳定和商业版考虑，可以选择Oracle数据库，或者SQL Server数据库（与Windows体系结合）；如果想用开源，有想要有足够的功能来应对各种场景，可以使用 postgresql数据库。这四种数据库，都是关系型数据库，可以很好地满足大多数业务场景，解决通用性问题。</li>
<li>对于一些特殊性问题，尤其是想要在扩展性方面有比较高的要求，可以考虑nosql数据库。Mongodb数据库，介于关系型数据库和非关系型数据库之间，兼具两者的特点，是非常流行的文档型nosql数据库；redis定位于内存型键值nosql数据库；hbase是海量文件存储的列式nosql数据库。根据合适的业务场景，选择适合的nosql数据库，可以对某一类，或某几类业务问题有很好的解决，可以作为关系型数据库的一种补充。</li>
<li>换个角度，MySQL，Oracle，SQL Server，Postgresql，mongodb这五种数据库，也是DB-Engines排行榜上最流行的排名前五的五种数据库，从使用量和受欢迎程度，也可以看出这些数据库使用的广泛性。</li>
</ul>
<h3>4. 数据库常见功能</h3>
<figure><figcaption>img_37.png</figcaption></figure>
<h2>二、Mysql数据库简介</h2>
<h3>1. MySQL的优势</h3>
<p>MySQL 使用的 SQL 语言是用于访问数据库的最常用的标准化语言。<br>
  由于 MySQL 数据库体积小、速度快、总体拥有成本低、开放源代码，其有着广泛的应用，一般中小型网站的开发都选择 MySQL 作为网站数据库。由于其社区版的性能卓越，因此搭配 PHP 和 Apache 服务器可组成良好的开发环境。<br>
  MySQL 数据库管理系统具有以下系统特性：<br>
（1） 使用 C 和 C++ 编写，并使用多种编译器进行测试，保证源代码的可移植性。<br>
（2）支持 AIX、FreeBSD、HP-UX、Linux、Mac OS、NovellNetware、OpenBSD、OS/2 Wrap、Solaris、Windows 等多种操作系统。<br>
（3）为多种编程语言提供了 API。这些编程语言包括 C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。<br>
（4）支持多线程，充分利用 CPU 资源。<br>
（5）优化的 SQL 查询算法，有效地提高查询速度。<br>
（6）既能够作为一个单独的应用程序应用在客户端服务器网络环境中，也能够作为一个库而嵌入其他的软件中。<br>
（7）提供多语言支持，常见的编码如中文的 GB 2312、BIG 5，日文的 Shift_JIS 等都可以用作数据表名和数据列名。<br>
（8）提供 TCP/IP、ODBC 和 JDBC 等多种数据库连接途径。<br>
（9）提供用于管理、检查、优化数据库操作的管理工具。<br>
（10）支持大型的数据库。可以处理拥有上千万条记录的大型数据库。<br>
（11）支持多种存储引擎。</p>
<h3>2. MySQL的版本以及版本号</h3>
<p>针对不同的用户，MySQL分为两个版本：<br>
（1）MySQL Community Server（社区版）：该版本完全免费，但是官方不提供技术支持。<br>
（2）MySQL Enterprise Server（企业版）：该版本能够以很高的性价比为企业提供数据仓库应用，支持 ACID 事物处理，提供完整的提交、回滚、崩溃恢复和行级锁定功能，但是该版本需要付费使用，官方提供电话技术支持。<br>
温馨提示：MySQL Cluster 主要用于架设群服务器，需要在社区服务或企业版的基础上使用。</p>
<p>MySQL 的命名机制由 3 个数字和 1 个后缀组成，例如 mysql-5.7.20：</p>
<ul>
<li>第 1 个数字“5”是主版本号，用于描述文件的格式，所有版本 5 的发行版都有相同的文件夹格式。</li>
<li>第 2 个数字“7”是发行级别，主版本号和发行级别组合在一起便构成了发行序列号。</li>
<li>第 3 个数字“20”是在此发行系列的版本号，随每次新发行的版本递增。通常选择已经发行的最新版本。</li>
</ul>
<p>在 MySQL 开发过程中，同时存在多个发布系列，每个发布系列的成熟度处在不同阶段。</p>
<ul>
<li>MySQL 5.7 是最新开发的稳定（GA）发布系列，是将执行新功能的系列，目前已经可以正常使用。</li>
<li>MySQL 5.6 是比较稳定的（GA）发布系列，只针对漏洞修复重新发布，不增加会影响稳定性的新功能。</li>
<li>MySQL 5.1 是一个稳定的（产品质量）发布系列，只针对严重漏洞修复和安全修复重新发布，不增加影响该系列稳定性的重要功能。</li>
<li>对于 MySQL 4.1 等低于 5.0 的老版本，官方将不再提供支持</li>
</ul>
<h3>3. MySQL 5.7的新特性</h3>
<p>与 MySQL5.6 相比，MySQL 5.7 具有以下几个方面的新功能。<br>
（1）随机 root 密码<br>
MySQL 5.7 数据库初始化完成后，会自动生成一个 root@localhost 用户，root 用户的密码不为空，而是随机产生一个密码。<br>
（2）自定义 test 数据库<br>
MySQL 5.7 默认安装完成后没有 test 数据库。用户可以自行创建 test 数据库并对其进行权限控制。<br>
（3）默认 SSL 加密<br>
MySQL 5.7 采用了更加简单的 SSL 安全访问机制，默认连接使用 SSL 的加密方式。<br>
（4）密码过期策略<br>
MySQL 5.7 支持用户设置密码过期策略，要求用户在一定时间过后必须修改密码。<br>
（5）用户锁<br>
MySQL 5.7 为管理员提供了暂时禁用某个用户的功能，使被锁定的用户无法访问和使用数据库。<br>
（6）全面支持JSON<br>
MySQL 5.7在服务器端提供了一组便于操作 JSON 的函数。存储的方法是将 JSON 编码成 BLOB 后再由存储引擎进行处理。这样，MySQL 就同时拥有了关系型数据库和非关系型数据库的优点，并且可以提供完整的事务支持。<br>
（7）支持两类生成列（generated column）<br>
生成列是通过数据库中的其他列计算得到的一列。当为生成列创建索引时，可以便捷地加快查询速度。MySQL 5.7 支持虚拟生成列和存储生成列。虚拟生成列仅将数据保存在表的元数据中，作为缺省的生成列类型；存储生成列则是将数据永久保存在磁盘上，需要更多的磁盘空间。<br>
（8）引入系统库（sys schema）<br>
系统库中包含一系列视图、函数和存储过程，通过多线程、多进程、组合事务提交和基于行的优化方式将复制功能提高 5 倍以上，用户向外扩充其跨商品系统的工作负载时，得以大幅提升复制的效能和效率。<br>
与 MySQL5.6 相比，MySQL 5.7 具有以下几个方面的新功能。</p>
<h2>三、Mysql安装与服务启动（Windows版本）</h2>
<h3>1. 下载</h3>
<p>用户可以根据自身的操作系统类型，从 MySQL官方下载页面免费下载相应的服务器安装包。本书以 MySQL 5.7.20 为例介绍其在 Windows 10 操作系统下的安装和配置过程。</p>
<p>用户下载 Windows 图形化安装包的步骤如下。</p>
<p>步骤 1)：打开 MySQL 官方网站（<a href="https://www.mysql.com/" target="_blank" rel="noopener noreferrer">http://www.mysql.com</a>），单击 DOWNLOAD，进入 MySQL 产品的下载界面，如图所示。<br>
</p>
<p>步骤 2)：在 MySQL 产品分类中选择 Community 菜单，在下载列表中选择 MySQL Community Server，如图所示。<br>
</p>
<p>步骤3)：在下载页面中，操作系统选择 Microsoft Windows，下载的安装文件为 mysql-installer-community-5.7.20.0.msi，如图所示。<br>
</p>
<h3>2. 安装教程</h3>
<p>Windows 平台下提供两种安装 MySQL 的方式：</p>
<ul>
<li>MySQL 二进制分发版（.msi 安装文件）。</li>
<li>免安装版（.zip 压缩文件）。</li>
</ul>
<p>用户使用图形化安装包安装 MySQL 的步骤如下：</p>
<p>步骤 1)：双击下载的 MySQL 安装文件，进入 MySQL 安装界面，首先进入“License Agreement（用户许可证协议）”窗口，选中“I accept the license terms（我接受系统协议）”复选框，单击“Next（下一步）”按钮，如图所示。<br>
</p>
<p>进入MySQL安装界面并接受系统协议</p>
<p>步骤 2)：进入“Choosing a Setup Type（安装类型选择）”窗口，根据右侧的安装类型描述文件选择适合自己的安装类型，这里选择默认的安装类型，如图所示。<br>
</p>
<p>选择默认的安装类型</p>
<blockquote>
<p>注意：Developer Default：默认安装类型；Server only：仅作为服务；Client only：仅作为客户端；Full：完全安装；Custom：自定义安装类型。</p>
</blockquote>
<p>步骤 3)：根据所选择的安装类型安装 Windows 系统框架（framework），单击 Execute 按钮，安装程序会自动完成框架的安装，如图所示。<br>
</p>
<p>检查并生成安装所需要的框架列表</p>
<p>当弹出安装程序窗口时，勾选“我同意许可条款和条件”复选框，然后单击“安装”按钮，如图所示。<br>
</p>
<p>同意安装框架的许可条件</p>
<p>弹出“设置成功”的界面，表示该框架已经安装完成，单击“关闭”按钮即可。所有的框架安装均可参考本操作，如图所示。<br>
</p>
<p>安装框架成功</p>
<p>步骤 4)：所需框架均安装成功后，单击 “Next（下一步）”按钮，如图所示。<br>
</p>
<p>所有框架安装完成</p>
<p>步骤 5)：进入安装确认窗口，单击 “Execute（执行）”按钮，开始 MySQL 各个组件的安装，如图所示。<br>
</p>
<p>准备安装MySQL各个组件</p>
<p>步骤 6)：开始安装 MySQL 文件，安装完成后在 “Status（状态）”列表下显示 “Complete（安装成功）”，如图所示。<br>
</p>
<p>MySQL各个组件安装成功</p>
<h3>3. 判断是否安装成功</h3>
<p><strong>3.1 启动与关闭服务</strong><br>
net start mysql为启动服务，net stop mysql为关闭命令<br>
</p>
<p><strong>3.2 登录数据库</strong><br>
cmd进入数据库的bin文件夹中<br>
</p>
<p>输入mysql -u root -p命令，再输入登录密码，出现以下结果代表登录成功<br>
</p>
<p><strong>3.3 查看数据库名称</strong><br>
登录完成后，输入show databases<br>
</p>
<h2>四、Mysql图形化工具</h2>
<p>（1）Navicat（重点推荐）<br>
</p>
<p>Navicat是MySQL和MariaDB数据库管理与开发理想的解决方案。它可同时在一个应用程序上连接MySQL和MariaDB数据库。这种兼容前端为数据库提供了一个直观而强大的图形界面管理、开发和维护功能，为初级MySQL和MariaDB开发人员和专业开发人员都提供了一组全面的开发工具。</p>
<p>（2）Induction<br>
</p>
<p>Induction是一款用于理解数据关系的开源管理工具，它可用来探索行/列，运行查询和数据可视化等方面。该工具支持多种数据库，包括PostgreSQL，MySQL，SQLite，Redis以及MongoDB。此外，Induction还可以通过编写添加其他新的适配器。</p>
<p>（3）SqlWave<br>
</p>
<p>SQLWave是一种简单、快速且易用的MySQL客户端。用户可通过该工具轻松地连接到远程主机。SqlWave支持所有MySQL的最新版本，包括它用来管理数据库结构的所有最新功能，如工作表、视图、存储过程、函数、事件、外键和触发器等。</p>
<h2>五、Mysql存储引擎精讲</h2>
<h3>1. 存储引擎分类</h3>
<p>数据库存储引擎是数据库底层软件组件，数据库管理系统使用数据引擎进行创建、查询、更新和删除数据操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。现在许多数据库管理系统都支持多种不同的存储引擎。MySQL 的核心就是存储引擎。<br>
  提示：InnoDB 事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键。MySQL 5.5.5 之后，InnoDB 作为默认存储引擎。MyISAM 是基于 ISAM 的存储引擎，并对其进行扩展，是在 Web、数据仓储和其他应用环境下最常使用的存储引擎之一。MyISAM 拥有较高的插入、查询速度，但不支持事务。MEMORY 存储引擎将表中的数据存储到内存中，为查询和引用其他数据提供快速访问。</p>
<h3>2. MySQL 5.7 支持的存储引擎</h3>
<p>MySQL 支持多种类型的数据库引擎，可分别根据各个引擎的功能和特性为不同的数据库处理任务提供各自不同的适应性和灵活性。在 MySQL 中，可以利用 SHOW ENGINES 语句来显示可用的数据库引擎和默认引擎。<br>
  MySQL 提供了多个不同的存储引擎，包括处理事务安全表的引擎和处理非事务安全表的引擎。在 MySQL 中，不需要在整个服务器中使用同一种存储引擎，针对具体的要求，可以对每一个表使用不同的存储引擎。<br>
  MySQL 5.7 支持的存储引擎有 InnoDB、MyISAM、Memory、Merge、Archive、Federated、CSV、BLACKHOLE 等。可以使用SHOW ENGINES语句查看系统所支持的引擎类型，结果如图所示。<br>
</p>
<h3>3. MySQL 默认存储引擎</h3>
<ul>
<li>InnoDB 是系统的默认引擎，支持可靠的事务处理。</li>
<li>使用下面的语句可以修改数据库临时的默认存储引擎</li>
<li>SET default_storage_engine=&lt; 存储引擎名 &gt;<br>
例如，将 MySQL 数据库的临时默认存储引擎修改为 MyISAM，输入的 SQL 语句和运行结果如图所示。<br>
</li>
</ul>
<p>此时，可以发现 MySQL 的默认存储引擎已经变成了 MyISAM。但是当再次重启客户端时，默认存储引擎仍然是 InnoDB。</p>
<h2>六、Mysql数据类型介绍</h2>
<h3>1. 基本介绍</h3>
<p>在 MySQL 中常见的数据类型如下：</p>
<ol>
<li>整数类型<br>
包括 TINYINT、SMALLINT、MEDIUMINT、INT、BIGINT，浮点数类型 FLOAT 和 DOUBLE，定点数类型 DECIMAL。</li>
<li>日期/时间类型<br>
包括 YEAR、TIME、DATE、DATETIME 和 TIMESTAMP。</li>
<li>字符串类型<br>
包括 CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM 和 SET 等。</li>
<li>二进制类型<br>
包括 BIT、BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。</li>
</ol>
<h3>2. 整数类型</h3>
<p>MySQL提供了多种数值型数据类型，不同的数据类型提供不同的取值范围，可以存储的值范围越大，所需的存储空间也会越大。<br>
  MySQL 主要提供的整数类型有 <strong>TINYINT</strong>、<strong>SMALLINT</strong>、<strong>MEDIUMINT</strong>、<strong>INT</strong>、<strong>BIGINT</strong>，其属性字段可以添加 AUTO_INCREMENT 自增约束条件。下表中列出了 MySQL 中的数值类型。<br>
</p>
<p>从上表中可以看到，不同类型的整数存储所需的字节数不相同，占用字节数最小的是 TINYINT 类型，占用字节最大的是 BIGINT 类型，占用的字节越多的类型所能表示的数值范围越大。</p>
<p>根据占用字节数可以求出每一种数据类型的取值范围。例如，TINYINT 需要 1 个字节（8bit）来存储，那么 TINYINT 无符号数的最大值为 28-1，即 255；TINYINT 有符号数的最大值为 27-1，即 127。其他类型的整数的取值范围计算方法相同，如下表所示。<br>
</p>
<p>提示：显示宽度和数据类型的取值范围是无关的。显示宽度只是指明 MySQL 最大可能显示的数字个数，数值的位数小于指定的宽度时会由空格填充。如果插入了大于显示宽度的值，只要该值不超过该类型整数的取值范围，数值依然可以插入，而且能够显示出来。例如，year 字段插入 19999，当使用 SELECT 查询该列值的时候，MySQL 显示的将是完整的带有 5 位数字的 19999，而不是 4 位数字的值。</p>
<h3>3. 小数类型</h3>
<p>MySQL中使用浮点数和定点数来表示小数。</p>
<ul>
<li>浮点类型有两种，分别是单精度浮点数（<strong>FLOAT</strong>）和双精度浮点数（<strong>DOUBLE</strong>）；定点类型只有一种，就是 <strong>DECIMAL</strong>。</li>
<li>浮点类型和定点类型都可以用<code>(M, D)</code>来表示，其中<code>M</code>称为精度，表示总共的位数；<code>D</code>称为标度，表示小数的位数。</li>
<li>浮点数类型的取值范围为 M（1～255）和 D（1～30，且不能大于 M-2），分别表示显示宽度和小数位数。M 和 D 在 FLOAT 和DOUBLE 中是可选的，FLOAT 和 DOUBLE 类型将被保存为硬件所支持的最大精度。DECIMAL 的默认 D 值为 0、M 值为 10。</li>
<li>下表中列出了 MySQL 中的小数类型和存储需求。<br>
</li>
</ul>
<p>FLOAT 类型的取值范围如下：</p>
<ul>
<li>有符号的取值范围：-3.402823466E+38～-1.175494351E-38。</li>
<li>无符号的取值范围：0 和 -1.175494351E-38～-3.402823466E+38。</li>
</ul>
<p>DOUBLE 类型的取值范围如下：</p>
<ul>
<li>有符号的取值范围：-1.7976931348623157E+308～-2.2250738585072014E-308。</li>
<li>无符号的取值范围：0 和 -2.2250738585072014E-308～-1.7976931348623157E+308。</li>
<li>提示：不论是定点还是浮点类型，如果用户指定的精度超出精度范围，则会四舍五入进行处理。</li>
<li>FLOAT 和 DOUBLE 在不指定精度时，默认会按照实际的精度（由计算机硬件和操作系统决定），DECIMAL 如果不指定精度，默认为（10，0）。</li>
</ul>
<p>浮点数相对于定点数的优点是在长度一定的情况下，浮点数能够表示更大的范围；缺点是会引起精度问题。</p>
<p>最后再强调一下：在 MySQL 中，定点数以字符串形式存储，在对精度要求比较高的时候（如货币、科学数据），使用 DECIMAL 的类型比较好，另外两个浮点数进行减法和比较运算时也容易出问题，所以在使用浮点数时需要注意，并尽量避免做浮点数比较。</p>
<h3>4. 日期和时间类型</h3>
<p>MySQL中有多处表示日期的数据类型：<strong>YEAR</strong>、<strong>TIME</strong>、<strong>DATE</strong>、<strong>DTAETIME</strong>、<strong>TIMESTAMP</strong>。当只记录年信息的时候，可以只使用 YEAR 类型。</p>
<ul>
<li>每一个类型都有合法的取值范围，当指定确定不合法的值时，系统将“零”值插入数据库中。</li>
<li>下表中列出了 MySQL 中的日期与时间类型。<br>
</li>
</ul>
<p><strong>YEAR 类型</strong></p>
<ul>
<li>YEAR 类型是一个单字节类型，用于表示年，在存储时只需要 1 个字节。可以使用各种格式指定 YEAR，如下所示：</li>
<li>以 4 位字符串或者 4 位数字格式表示的 YEAR，范围为 '1901'～'2155'。输入格式为 'YYYY' 或者 YYYY，例如，输入 '2010' 或 2010，插入数据库的值均为 2010。</li>
<li>以 2 位字符串格式表示的 YEAR，范围为 '00' 到 '99'。'00'～'69' 和 '70'～'99' 范围的值分别被转换为 2000～2069 和 1970～1999 范围的 YEAR 值。'0' 与 '00' 的作用相同。插入超过取值范围的值将被转换为 2000。</li>
<li>以 2 位数字表示的 YEAR，范围为 1～99。1～99 和 70～99 范围的值分别被转换为 2001～2069 和 1970～1999 范围的 YEAR 值。注意，在这里 0 值将被转换为 0000，而不是 2000。</li>
<li>提示：两位整数范围与两位字符串范围稍有不同。例如，插入 3000 年，读者可能会使用数字格式的 0 表示 YEAR，实际上，插入数据库的值为 0000，而不是所希望的 3000。只有使用字符串格式的 '0' 或 '00'，才可以被正确解释为 3000，非法 YEAR值将被转换为 0000。</li>
</ul>
<p><strong>TIME 类型</strong><br>
TIME 类型用于只需要时间信息的值，在存储时需要 3 个字节。格式为 HH:MM:SS。HH 表示小时，MM 表示分钟，SS 表示秒。</p>
<p>TIME 类型的取值范围为 -838：59：59～838：59：59，小时部分如此大的原因是 TIME 类型不仅可以用于表示一天的时间（必须小于 24 小时），还可能是某个事件过去的时间或两个事件之间的时间间隔（可大于 24 小时，或者甚至为负）。</p>
<p>可以使用各种格式指定 TIME 值，如下所示。</p>
<ul>
<li>'D HH：MM：SS' 格式的字符串。还可以使用这些“非严格”的语法：'HH：MM：SS'、'HH：MM'、'D HH' 或 'SS'。这里的 D 表示日，可以取 0～34 之间的值。在插入数据库时，D 被转换为小时保存，格式为 “D*24+HH”。</li>
<li>'HHMMSS' 格式、没有间隔符的字符串或者 HHMMSS 格式的数值，假定是有意义的时间。例如，'101112' 被理解为'10：11：12'，但是 '106112' 是不合法的（它有一个没有意义的分钟部分），在存储时将变为 00：00：00。</li>
<li>提示：为 TIME 列分配简写值时应注意：如果没有冒号，MySQL 解释值时，假定最右边的两位表示秒。（MySQL 解释 TIME 值为过去的时间而不是当前的时间）。例如，读者可能认为 '1112' 和 1112 表示 11：12：00（即 11 点过 12 分钟），但MySQL 将它们解释为 00：11：12（即 11 分 12 秒）。同样 '12' 和 12 被解释为00：00：12。相反，TIME 值中如果使用冒号则肯定被看作当天的时间，也就是说，'11：12' 表示 11：12：00，而不是 00：11：12。</li>
</ul>
<p><strong>DATE 类型</strong><br>
DATE 类型用于仅需要日期值时，没有时间部分，在存储时需要 3 个字节。日期格式为 'YYYY-MM-DD'，其中 YYYY 表示年，MM 表示月，DD 表示日。</p>
<ul>
<li>在给 DATE 类型的字段赋值时，可以使用字符串类型或者数字类型的数据插入，只要符合 DATE 的日期格式即可。如下所示：</li>
<li>以 'YYYY-MM-DD' 或者 'YYYYMMDD' 字符中格式表示的日期，取值范围为 '1000-01-01'～'9999-12-3'。例如，输入 '2015-12-31' 或者 '20151231'，插入数据库的日期为2015-12-31。</li>
<li>以 'YY-MM-DD' 或者 'YYMMDD' 字符串格式表示日期，在这里YY表示两位的年值。MySQL 解释两位年值的规则：'00～69' 范围的年值转换为 '20002069'，'7099' 范围的年值转换为 '1970～1999'。例如，输入 '15-12-31'，插入数据库的日期为 2015-12-31；输入 '991231'，插入数据库的日期为 1999-12-31。</li>
<li>以 YYMMDD 数字格式表示的日期，与前面相似，00~69 范围的年值转换为 2000～2069，80～99 范围的年值转换为 1980～1999。例如，输入 151231，插入数据库的日期为 2015-12-31，输入 991231，插入数据库的日期为 1999-12-31。</li>
<li>使用 CURRENT_DATE 或者 NOW()，插入当前系统日期。</li>
<li>提示：MySQL 允许“不严格”语法：任何标点符号都可以用作日期部分之间的间隔符。例如，'98-11-31'、'98.11.31'、'98/11/31'和'98@11@31' 是等价的，这些值也可以正确地插入数据库。</li>
</ul>
<p><strong>DATETIME 类型</strong><br>
DATETIME 类型用于需要同时包含日期和时间信息的值，在存储时需要 8 个字节。日期格式为 'YYYY-MM-DD HH：MM：SS'，其中 YYYY 表示年，MM 表示月，DD 表示日，HH 表示小时，MM 表示分钟，SS 表示秒。</p>
<ul>
<li>在给 DATETIME 类型的字段赋值时，可以使用字符串类型或者数字类型的数据插入，只要符合 DATETIME 的日期格式即可，如下所示。</li>
<li>以 'YYYY-MM-DD HH：MM：SS' 或者 'YYYYMMDDHHMMSS' 字符串格式表示的日期，取值范围为 '1000-01-01 00：00：00'～'9999-12-3 23：59：59'。例如，输入 '2014-12-31 05：05：05' 或者 '20141231050505’，插入数据库的 DATETIME 值都为 2014-12-31 05：05：05。</li>
<li>以 'YY-MM-DD HH：MM：SS' 或者 'YYMMDDHHMMSS' 字符串格式表示的日期，在这里 YY 表示两位的年值。与前面相同，'00～79' 范围的年值转换为 '2000～2079'，'80～99' 范围的年值转换为 '1980～1999'。例如，输入 '14-12-31 05：05：05'，插入数据库的 DATETIME 为 2014-12-31 05：05：05；输入 141231050505，插入数据库的 DATETIME 为 2014-12-31 05：05：05。</li>
<li>以 YYYYMMDDHHMMSS 或者 YYMMDDHHMMSS 数字格式表示的日期和时间。例如，输入 20141231050505，插入数据库的 DATETIME 为 2014-12-31 05：05：05；输入 140505050505，插入数据库的 DATETIME 为 2014-12-31 05：05：05。</li>
<li>提示：MySQL 允许“不严格”语法：任何标点符号都可用作日期部分或时间部分之间的间隔符。例如，'98-12-31 11：30：45'、'98.12.31 11+30+35'、'98/12/31 11_30_45' 和 '98@12@31 113045' 是等价的，这些值都可以正确地插入数据库。</li>
</ul>
<p><strong>TIMESTAMP 类型</strong><br>
TIMESTAMP 的显示格式与 DATETIME 相同，显示宽度固定在 19 个字符，日期格式为 YYYY-MM-DD HH：MM：SS，在存储时需要 4 个字节。但是 TIMESTAMP 列的取值范围小于 DATETIME 的取值范围，为 '1970-01-01 00：00：01'UTC～'2038-01-19 03：14：07'UTC。在插入数据时，要保证在合法的取值范围内。<br>
提示：协调世界时（英：Coordinated Universal Time，法：Temps Universel Coordonné）又称为世界统一时间、世界标准时间、国际协调时间。英文（CUT）和法文（TUC）的缩写不同，作为妥协，简称 UTC。</p>
<ul>
<li>TIMESTAMP 与 DATETIME 除了存储字节和支持的范围不同外，还有一个最大的区别是：</li>
<li>DATETIME 在存储日期数据时，按实际输入的格式存储，即输入什么就存储什么，与时区无关；</li>
<li>而 TIMESTAMP 值的存储是以 UTC（世界标准时间）格式保存的，存储时对当前时区进行转换，检索时再转换回当前时区。即查询时，根据当前时区的不同，显示的时间值是不同的。<br>
提示：如果为一个 DATETIME 或 TIMESTAMP 对象分配一个 DATE 值，结果值的时间部分被设置为 '00：00：00'，因此 DATE 值未包含时间信息。如果为一个 DATE 对象分配一个 DATETIME 或 TIMESTAMP 值，结果值的时间部分被删除，因此DATE 值未包含时间信息。</li>
</ul>
<h3>5. 字符串类型</h3>
<p>字符串类型用来存储字符串数据，还可以存储图片和声音的二进制数据。字符串可以区分或者不区分大小写的串比较，还可以进行正则表达式的匹配查找。</p>
<ul>
<li>MySQL中的字符串类型有 <strong>CHAR</strong>、<strong>VARCHAR</strong>、<strong>TINYTEXT</strong>、<strong>TEXT</strong>、<strong>MEDIUMTEXT</strong>、<strong>LONGTEXT</strong>、<strong>ENUM</strong>、<strong>SET</strong> 等。</li>
<li>下表中列出了 MySQL 中的字符串数据类型，括号中的<code>M</code>表示可以为其指定长度。</li>
</ul>
<p>VARCHAR 和 TEXT 类型是变长类型，其存储需求取决于列值的实际长度（在前面的表格中用 L 表示），而不是取决于类型的最大可能尺寸。</p>
<p>例如，一个 VARCHAR(10) 列能保存一个最大长度为 10 个字符的字符串，实际的存储需要字符串的长度 L 加上一个字节以记录字符串的长度。对于字符 “abcd”，L 是 4，而存储要求 5 个字节。</p>
<p>CHAR 和 VARCHAR 类型</p>
<p>CHAR(M) 为固定长度字符串，在定义时指定字符串列长。当保存时，在右侧填充空格以达到指定的长度。M 表示列的长度，范围是 0～255 个字符。</p>
<p>例如，CHAR(4) 定义了一个固定长度的字符串列，包含的字符个数最大为 4。当检索到 CHAR 值时，尾部的空格将被删除。</p>
<p>VARCHAR(M) 是长度可变的字符串，M 表示最大列的长度，M 的范围是 0～65535。VARCHAR 的最大实际长度由最长的行的大小和使用的字符集确定，而实际占用的空间为字符串的实际长度加 1。</p>
<p>例如，VARCHAR(50) 定义了一个最大长度为 50 的字符串，如果插入的字符串只有 10 个字符，则实际存储的字符串为 10 个字符和一个字符串结束字符。VARCHAR 在值保存和检索时尾部的空格仍保留。</p>
<p>【实例】下面将不同的字符串保存到 CHAR(4) 和 VARCHAR(4) 列，说明 CHAR 和 VARCHAR 之间的差别，如下表所示。</p>
<p>插入值 CHAR(4) 存储需求 VARCHAR(4) 存储需求</p>
<ul>
<li>' ' ' ' 4字节 '' 1字节</li>
<li>'ab' 'ab ' 4字节 'ab' 3字节</li>
<li>'abc' 'abc ' 4字节 'abc' 4字节</li>
<li>'abcd' 'abcd' 4字节 'abcd' 5字节</li>
<li>'abcdef' 'abcd' 4字节 'abcd' 5字节<br>
对比结果可以看到，CHAR(4) 定义了固定长度为 4 的列，无论存入的数据长度为多少，所占用的空间均为 4 个字节。VARCHAR(4) 定义的列所占的字节数为实际长度加 1。</li>
</ul>
<p>TEXT 类型</p>
<p>TEXT 列保存非二进制字符串，如文章内容、评论等。当保存或查询 TEXT 列的值时，不删除尾部空格。</p>
<ul>
<li>TEXT 类型分为 4 种：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。不同的 TEXT 类型的存储空间和数据长度不同。</li>
<li>TINYTEXT 表示长度为 255（28-1）字符的 TEXT 列。</li>
<li>TEXT 表示长度为 65535（216-1）字符的 TEXT 列。</li>
<li>MEDIUMTEXT 表示长度为 16777215（224-1）字符的 TEXT 列。</li>
<li>LONGTEXT 表示长度为 4294967295 或 4GB（232-1）字符的 TEXT 列。</li>
</ul>
<p><strong>ENUM 类型</strong><br>
ENUM 是一个字符串对象，值为表创建时列规定中枚举的一列值。其语法格式如下：</p>
<ul>
<li>&lt;字段名&gt; ENUM( '值1', '值1', …, '值n' )</li>
<li>字段名指将要定义的字段，值 n 指枚举列表中第 n 个值。</li>
</ul>
<p>ENUM 类型的字段在取值时，能在指定的枚举列表中获取，而且一次只能取一个。如果创建的成员中有空格，尾部的空格将自动被删除。</p>
<p>ENUM 值在内部用整数表示，每个枚举值均有一个索引值；列表值所允许的成员值从 1 开始编号，MySQL 存储的就是这个索引编号，枚举最多可以有 65535 个元素。</p>
<p>例如，定义 ENUM 类型的列（'first'，'second'，'third'），该列可以取的值和每个值的索引如下表所示。</p>
<pre><code>值 索引  
NULL NULL  
'' 0  
’first 1  
second 2  
third 3  
</code></pre>
<p>ENUM 值依照列索引顺序排列，并且空字符串排在非空字符串前，NULL 值排在其他所有枚举值前。<br>
提示：ENUM 列总有一个默认值。如果将 ENUM 列声明为 NULL，NULL 值则为该列的一个有效值，并且默认值为 NULL。如果 ENUM 列被声明为 NOT NULL，其默认值为允许的值列表的第 1 个元素。</p>
<p><strong>SET 类型</strong><br>
SET 是一个字符串的对象，可以有零或多个值，SET 列最多可以有 64 个成员，值为表创建时规定的一列值。指定包括多个 SET 成员的 SET 列值时，各成员之间用逗号,隔开，语法格式如下：<br>
SET( '值1', '值2', …, '值n' )<br>
与 ENUM 类型相同，SET 值在内部用整数表示，列表中每个值都有一个索引编号。当创建表时，SET 成员值的尾部空格将自动删除。</p>
<ul>
<li>但与 ENUM 类型不同的是，ENUM 类型的字段只能从定义的列值中选择一个值插入，而 SET 类型的列可从定义的列值中选择多个字符的联合。</li>
<li>提示：如果插入 SET 字段中的列值有重复，则 MySQL 自动删除重复的值；插入 SET 字段的值的顺序并不重要，MySQL 会在存入数据库时，按照定义的顺序显示；如果插入了不正确的值，默认情况下，MySQL 将忽视这些值，给出警告。</li>
</ul>
<h2>七、Mysql主要专业名称介绍</h2>
<h3>1. 主键</h3>
<p><strong>1.1 什么是主键</strong><br>
“主键（PRIMARY KEY）”的完整称呼是“主键约束”。MySQL主键约束是一个列或者列的组合，其值能唯一地标识表中的每一行。这样的一列或多列称为表的主键，通过它可以强制表的实体完整性。</p>
<p><strong>1.2 选取设置主键约束的字段</strong><br>
主键约束即在表中定义一个主键来唯一确定表中每一行数据的标识符。主键可以是表中的某一列或者多列的组合，其中由多列组合的主键称为复合主键。主键应该遵守下面的规则：</p>
<ul>
<li>每个表只能定义一个主键。</li>
<li>主键值必须唯一标识表中的每一行，且不能为 NULL，即表中不可能存在两行数据有相同的主键值。这是唯一性原则。</li>
<li>一个列名只能在复合主键列表中出现一次。</li>
<li>复合主键不能包含不必要的多余列。当把复合主键的某一列删除后，如果剩下的列构成的主键仍然满足唯一性原则，那么这个复合主键是不正确的。这是最小化原则。</li>
</ul>
<p><strong>1.3 创建主键</strong><br>
语法规则：&lt;字段名&gt; &lt;数据类型&gt; PRIMARY KEY [默认值]<br>
</p>
<h3>2. 外键约束</h3>
<p><strong>2.1 什么是外键约束</strong><br>
  MySQL外键约束（FOREIGN KEY）用来在两个表的数据之间建立链接，它可以是一列或者多列。一个表可以有一个或多个外键。</p>
<ul>
<li>外键对应的是参照完整性，一个表的外键可以为空值，若不为空值，则每一个外键的值必须等于另一个表中主键的某个值。</li>
<li>外键是表的一个字段，不是本表的主键，但对应另一个表的主键。定义外键后，不允许删除另一个表中具有关联关系的行。</li>
<li>外键的主要作用是保持数据的一致性、完整性。例如，部门表 tb_dept 的主键是 id，在员工表 tb_emp5 中有一个键 deptId 与这个 id 关联。</li>
</ul>
<ul>
<li>主表（父表）：对于两个具有关联关系的表而言，相关联字段中主键所在的表就是主表。</li>
<li>从表（子表）：对于两个具有关联关系的表而言，相关联字段中外键所在的表就是从表。</li>
</ul>
<p><strong>2.2 选取设置 MySQL 外键约束的字段</strong><br>
定义一个外键时，需要遵守下列规则：<br>
（1）父表必须已经存在于数据库中，或者是当前正在创建的表。如果是后一种情况，则父表与子表是同一个表，这样的表称为自参照表，这种结构称为自参照完整性。<br>
（2）必须为父表定义主键。<br>
（3）主键不能包含空值，但允许在外键中出现空值。也就是说，只要外键的每个非空值出现在指定的主键中，这个外键的内容就是正确的。<br>
（4）在父表的表名后面指定列名或列名的组合。这个列或列的组合必须是父表的主键或候选键。<br>
（5）外键中列的数目必须和父表的主键中列的数目相同。<br>
（6）外键中列的数据类型必须和父表主键中对应列的数据类型相同。</p>
<p><strong>2.3 在创建表时设置外键约束</strong><br>
在数据表中创建外键使用 FOREIGN KEY 关键字，具体的语法规则如下：<br>
[CONSTRAINT &lt;外键名&gt;] FOREIGN KEY 字段名 [，字段名2，…]<br>
REFERENCES &lt;主表名&gt; 主键列1 [，主键列2，…]</p>
<p>其中：外键名为定义的外键约束的名称，一个表中不能有相同名称的外键；字段名表示子表需要添加外健约束的字段列；主表名即被子表外键所依赖的表的名称；主键列表示主表中定义的主键列或者列组合。</p>
<h3>3. 唯一约束</h3>
<p>MySQL唯一约束（Unique Key）要求该列唯一，允许为空，但只能出现一个空值。唯一约束可以确保一列或者几列不出现重复值。</p>
<h3>4. 默认值</h3>
<p><strong>4.1 什么是默认值</strong><br>
  “默认值（Default）”的完整称呼是“默认值约束（Default Constraint）”。MySQL默认值约束用来指定某列的默认值。<br>
  例如女性同学较多，性别就可以默认为“女”。如果插入一条新的记录时没有为这个字段赋值，那么系统会自动为这个字段赋值为“女”。</p>
<p><strong>4.2 在创建表时设置默认值约束</strong><br>
创建表时可以使用 DEFAULT 关键字设置默认值约束，具体的语法规则如下：<br>
&lt;字段名&gt; &lt;数据类型&gt; DEFAULT &lt;默认值&gt;;<br>
</p>
<h3>5. 非空约束</h3>
<p><strong>5.1 什么是非空约束</strong><br>
  MySQL非空约束（NOT NULL）可以通过 CREATE TABLE 或 ALTER TABLE 语句实现。在表中某个列的定义后加上关键字 NOT NULL 作为限定词，来约束该列的取值不能为空。<br>
  非空约束（Not Null Constraint）指字段的值不能为空。对于使用了非空约束的字段，如果用户在添加数据时没有指定值，数据库系统就会报错。</p>
<p><strong>5.2 在创建表时设置非空约束</strong><br>
创建表时可以使用 NOT NULL 关键字设置非空约束，具体的语法规则如下：<br>
&lt;字段名&gt; &lt;数据类型&gt; NOT NULL;<br>
</p>
<h3>6. 触发器</h3>
<p>触发器（TRIGGER）是由事件来触发某个操作。这些事件包括INSERT语句、UPDATE语句和DELETE语句。当数据库系统执行这些事件时，会激活促发其执行相应的操作。</p>
<h3>7. DML</h3>
<p>DML（data manipulation language）数据操纵语言：<br>
　　　　就是我们最经常用到的 SELECT、UPDATE、INSERT、DELETE。 主要用来对数据库的数据进行一些操作。</p>
<div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> 列名称 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> 表名称</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">UPDATE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> 表名称 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> 列名称 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> 新值 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> 列名称 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> 某值</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">INSERT</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> INTO</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> table_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (列1, 列2,...) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (值1, 值2,....)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">DELETE</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> 表名称 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> 列名称 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> 值</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>8. DDL</h3>
<p>DDL（data definition language）数据库定义语言：其实就是我们在创建表的时候用到的一些sql，比如说：CREATE、ALTER、DROP等。DDL主要是用在定义或改变表的结构，数据类型，表之间的链接和约束等初始化工作上</p>
<div class="language-undefined line-numbers-mode" data-highlighter="shiki" data-ext="undefined" data-title="undefined" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE 表名称</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>列名称1 数据类型,</span></span>
<span class="line"><span>列名称2 数据类型,</span></span>
<span class="line"><span>列名称3 数据类型,</span></span>
<span class="line"><span>....</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ALTER TABLE table_name</span></span>
<span class="line"><span>ALTER COLUMN column_name datatype</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DROP TABLE 表名称</span></span>
<span class="line"><span>DROP DATABASE 数据库名称</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>9. DCL</h3>
<p>DCL（Data Control Language）数据库控制语言：是用来设置或更改数据库用户或角色权限的语句，包括（grant,deny,revoke等）语句。这个比较少用到。在公司呢一般情况下我们用到的是DDL、DML这两种。</p>
<h2>八、Mysql常见sql语句</h2>
<h3>1. select语句</h3>
<p>请在资料下载中进行学习</p>
<h3>2. 函数</h3>
<p>请在资料下载中进行学习</p>
<h3>3. 多表查询</h3>
<p>请在资料下载中进行学习</p>
<h3>4. 表的内连与外连‘</h3>
<p>请在资料下载中进行学习’</p>
<h2>九、Mysql设计与语句优化</h2>
<h3>1. 数据库创建优化</h3>
<p>请在资料下载中进行学习</p>
<h3>2. sql语句优化</h3>
<p>请在资料下载中进行学习</p>
<h2>十、事务介绍</h2>
<h3>1. 事务概述</h3>
<p>事务是访问并更新数据库中各种数据项的一个程序执行单元。在事务中的操作，要么都执行修改，要么都不执行，这就是事务的目的，也是事务模型区别于文件系统的重要特征之一。</p>
<p>严格上来说，事务必须同时满足4个特性，即通常所说事务的ACID特性。虽然理论上定义了严格的事务要求，但是数据库厂商出于各种目的并没有严格满足事务的ACID标准。例如，对于MYSQL的NDB Cluster引擎，虽然支持事务，但是不满足D的要求，即持久性的要求。对于Oracle数据库来说，其默认的事务隔离级别为READ COMMITTED，不满足I的要求，即隔离性的要求。对于InnoDB存储引擎而言，默认的事务隔离级别是READ REPRATABLE，完全遵循和满足事务的ACID特性。</p>
<p>A（atomicity），原子性。原子性指整个数据库事务是不可分割的工作单位。只有使事务中所有的数据库操作都执行成功，整个事务的执行才算成功。事务中任何一个SQL语句执行失败，那么已经执行成功的SQL语句也必须撤销，数据库状态应该退回到事务前的状态。</p>
<p>C（consistency），一致性。一致性是指事务将数据库从一种状态转变为另一种状态。在事务的开始之前和事务结束以后，数据库的完整性约束没有被破坏。</p>
<p>I（isolation），隔离性。隔离性还有其他的称呼，如并发控制、可串行化、锁。事务的隔离性要求每个读写事务的对象与其他事务的操作对象能互相分离，即该事务提交前对其他事务都不可见，这通常使用锁来实现。数据库系统中提供了一种粒度锁的策略，允许事务仅锁住一个实体对象的子集，以此来提高事务之间的并发度。（如果是全表锁，事务之间基本就无法实现并发，但是如果只锁住表中处理的行，可以提高事务的并发度）</p>
<p>D（durability），持久性。事务一旦提交，其结果就是永久性的。即使发生宕机等故障，数据库也能将数据恢复。需要注意的是，持久性只能从事务本身的角度来保证结果的永久性，如事务提交后，所有的变化都是永久的，即使当数据库由于崩溃而需要恢复时，也能保证恢复后提交的数据都不会丢失。</p>
<p>事务的（ACID）特性是由关系数据库管理系统（RDBMS，数据库系统）来实现的。数据库管理系统采用日志来保证事务的原子性、一致性和持久性。日志记录了事务对数据库所做的更新，如果某个事务在执行过程中发生错误，就可以根据日志，撤销事务对数据库已做的更新，使数据库退回到执行事务前的初始状态。数据库管理系统采用锁机制来实现事务的隔离性。当多个事务同时更新数据库中相同的数据时，只允许持有锁的事务能更新该数据，其他事务必须等待，直到前一个事务释放了锁，其他事务才有机会更新该数据。</p>
<h3>2. 事务分类</h3>
<p>（1）扁平事务，最简单，使用最频繁的事务。在扁平事务中，所有的操作都处于一个层次，其有BEGIN WORK开始，有COMMIT WORK或ROLLBACK WORK结束。处于之间的操作是原子的，要么全部执行，要么全部回滚。<br>
（2）带有保存点的扁平事务，除了扁平事务支持的操作外，允许在事务执行过程中回滚到同一事务中较早的一个状态，这是因为可能有些事务在执行过程中出现的错误并不会对有的操作都无效，放弃整个事务不合乎要求，开销也太大。保存点用来通知系统应该记住事务当前的状态，以便以后发生错误时，事务能回到该状态。<br>
（3）链事务可视为保存点模式的一个变种。<br>
（4）嵌套事务是一个层次结构框架。<br>
（5）分布式事务</p>
<h3>3. 事务控制语句</h3>
<p>在MYSQL命令行的默认设置下，事务都是自动提交的，即执行SQL语句后就会马上执行COMMIT操作。因此要显示的开启一个事务必须使用命令BEGIN和START TRANSACTION，或者执行命令SET AUTOCOMMIT = 0，以禁用当前会话的自动提交。事务控制语句如下：</p>
<ul>
<li>START TRANSACTION | BEGIN：显示的开启一个事务。在存储过程中，MYSQL数据库的分析器会自动将BEGIN识别为BEGIN...END，因此在存储过程中只能使用START TRANSACTION语句来开启一个事务。</li>
<li>COMMIT：要想使用这个语句的最简形式，只需发出COMMIT。COMMIT会提交事务，并使已对数据库进行的所有修改成为永久性的。COMMIT和COMMIT WORK语句基本上是一致的，都是用来提交事务。不同的是COMMIT WORK用来控制事务结束后的行为是CHAIN还是RELEASE的。如果是CHAIN方式，那么事务就变成了链事务。用户可以通过参数completion_type来进行控制，默认该参数是0，表示没有任何操作。在这种设置下，COMMIT和COMMIT WORK是完全等价的。当参数值为1时，COMMIT WORK等价于COMMIT AND CHAIN，表示马上自动开启一个相同隔离级别的事务。当参数值为1时，COMMIT WORK等价于COMMIT AND RELEASE。当提交事务后会自动断开与服务器连接。</li>
<li>ROLLBACK：回滚会结束用户的事务，并撤销正在进行的所有未提交的修改。</li>
<li>SAVEPOINT identifiter：SAVEPOINT允许用户在事务中创建一个保存点，一个事务可以有很多个保存点。</li>
<li>RELEASE SAVEPOINT identifier：删除一个事务的保存点，当没有一个保存点执行这语句时，会抛出一个异常。</li>
<li>ROLLBACK to [SAVEPOINT] identifier：这个语句与SAVEPOINT命令一起使用。可以把事务回滚到标记点，而不回滚到此标记点之前的任何工作。注意：虽然有ROLLBACK，但是它并没有真正的结束一个事务，因此即使执行了ROLLBACK TO SAVEPOINT，之后也需要显示的运行COMMIT或ROLLBACK命令。</li>
<li>SET TRANSACTION：这个语句用来设置事务的隔离级别。InnoDB存储引擎提供的事务隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ和SERIALIZABLE。</li>
</ul>
<h3>4. 事务的隔离级别</h3>
<p>ANSI SQL标准定义的四个隔离级别为：</p>
<ul>
<li>READ UNCOMMITTED（未提交读），事务中的修改，即使没有提交，在其他事务也都是可见的。事务可以读取未提交的数据，这也被称为脏读。</li>
<li>READ COMMITTED（提交读），一个事务从开始直到提交之前，所做的任何修改对其他事务都是不可见的。这个级别有时候也叫做不可重复读，因为两次执行相同的查询，可能会得到不一样的结果。因为在这2次读之间可能有其他事务更改这个数据，每次读到的数据都是已经提交的。</li>
<li>REPEATABLE READ（可重复读），解决了脏读，也保证了在同一个事务中多次读取同样记录的结果是一致的。但是理论上，可重读读隔离级别还是无法解决另外一个幻读的问题，指的是当某个事务在读取某个范围内的记录时，另外一个事务也在该范围内插入了新的记录，当之前的事务再次读取该范围内的记录时，会产生幻行。</li>
<li>SERIALIZABLE（可串行化），它通过强制事务串行执行，避免了前面说的幻读的问题。<br>
1、脏读（dirty read）：一个事务可以读取另一个尚未提交事务的修改数据。</li>
</ul>
<p>2、不可重复读（nonrepeatable read）：在同一个事务中，同一个查询在T1时间读取某一行，在T2时间重新读取这一行时候，这一行的数据已经发生修改，可能被更新了（update），也可能被删除了（delete）。</p>
<p>3、幻像读（phantom read）：在同一事务中，同一查询多次进行时候，由于其他插入操作（insert）的事务提交，导致每次返回不同的结果集。</p>
<p>InnoDB采用MVCC来支持高并发，并实现了四个标准的隔离级别。其默认级别是REPEATABLE READ（可重复读），并且通过间隙锁（next-key locking）策略防止幻读的出现。间隙锁使得InnoDB不仅仅锁定查询涉及的行，还会对索引中的间隙进行锁定，以防止幻影的插入。</p>
<p>隔离级别越低，事务请求的锁越少或保持锁的时间就越短。所以很多数据库系统默认的事务隔离级别是READ COMMITTED。质疑SERIALIZABLE隔离级别的性能，但是InnoDB存储引擎认为两者的开销是一样的，所以默认隔离级别使用REPEATABLE READ。</p>
<p>用命令设置当前会话或全局会话的事务隔离级别。</p>
<p>SET [GLOBAL | SESSION] TRANSACTION ISOLATION LEVEL<br>
{<br>
READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE<br>
}<br>
如果想启动时就设置事务的默认隔离级别，修改MYSQL的配置文件，在[mysqld]中添加如下行：</p>
<p>[mysqld]<br>
transaction-isolation = READ-COMMITTED</p>
<h2>十一、Mysql数据库备份与恢复</h2>
<h3>1. 数据库备份</h3>
<p>数据库备份是指通过导出数据或者复制表文件的方式来制作数据库的副本。当数据库出现故障或遭到破坏时，将备份的数据库加载到系统，从而使数据库从错误状态恢复到备份时的正确状态。</p>
<p>可以使用 SELECT INTO OUTFILE 语句把表数据导出到一个文本文件中进行备份。</p>
<blockquote>
<p>注意：这种方法只能导出或导入数据的内容，而不包括表的结构。若表的结构文件损坏，则必须先设法恢复原来表的结构。</p>
</blockquote>
<p>【实例】将数据库 test_db 的表 tb_students_info 的全部数据备份到 C 盘的数据备份目录下文件名为 file.txt 的文件中，要求每个字段用逗号分开，并且字符用双引号标注，每行以问号结束。</p>
<p>输入的SQL语句和执行结果如下所示。</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">SELECT</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> FROM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> test_db.tb_students_info</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">INTO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> OUTFILE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'C:/ProgramData/MySQL/MySQL Server 5.7/Uploads/file.txt'</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">FIELDS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> TERMINATED</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> BY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '"'</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">LINES</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> TERMINATED</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> BY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '?'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Query</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> OK,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rows</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> affected</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (0.06 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">sec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)&lt;/pre&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用记事本查看 MySQL 备份文件夹下的 file.txt 文件，内容如下图所示。<br>
</p>
<h3>2. MySQL数据库恢复</h3>
<p>数据库恢复是指以备份为基础，与备份相对应的系统维护和管理操作。</p>
<p>系统进行恢复操作时，先执行一些系统安全性的检查，包括检查所要恢复的数据库是否存在、数据库是否变化及数据库文件是否兼容等，然后根据所采用的数据库备份类型采取相应的恢复措施。</p>
<p>数据库恢复机制设计的两个关键问题是：第一，如何建立冗余数据；第二，如何利用这些冗余数据实施数据库恢复。</p>
<p>建立冗余数据最常用的技术是数据转储和登录日志文件。通常在一个数据库系统中，这两种方法是一起使用的。</p>
<p>数据转储是 DBA 定期地将整个数据库复制到磁带或另一个磁盘上保存起来的过程。这些备用的版本成为后备副本或后援副本。</p>
<p>可使用 LOAD DATA…INFILE 语句来恢复先前备份的数据。</p>
<p>【实例】将之前导出的数据备份文件 file.txt 导入数据库 test_db 的表 tb_students_copy 中，其中 tb_students_copy 的表结构和 tb_students_info 相同。</p>
<p>首先创建表 tb_students_copy，输入的 SQL 语句和执行结果如下所示：</p>
<div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> CREATE </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">TABLE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> tb_students_copy</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> LIKE tb_students_info;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">Query OK</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> 0 rows affected (0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">.52</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> sec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> SELECT</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> *</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> FROM tb_students_copy;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">Empty </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> (0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">.00</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> sec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入数据与查询表 tb_students_copy 的过程如下所示：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">LOAD</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> DATA</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> INFILE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'C:/ProgramData/[MySQL](http://c.biancheng.net/mysql/)/MySQL Server 5.7/</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Uploads/file.txt'</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">INTO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> TABLE</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> test_db.tb_students_copy</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">FIELDS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> TERMINATED</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> BY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ','</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">OPTIONALLY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ENCLOSED</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> BY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '"'</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">LINES</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> TERMINATED</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> BY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '?'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Query</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> OK,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rows</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> affected</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (0.14 </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">sec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">Records:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 10</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  Deleted:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  Skipped:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">  Warnings:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">mysql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">SELECT</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> *</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> FROM</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> test_db.tb_students_copy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">+</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>组件Nocas</title>
      <link>https://ujava.cn/assembly/nocas.html</link>
      <guid>https://ujava.cn/assembly/nocas.html</guid>
      <source url="https://ujava.cn/rss.xml">组件Nocas</source>
      <description>1、Nacos概述 1.1、什么是Nacos Nacos 是阿里巴巴推出来的一个新开源项目，这是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。（英文全称Dynamic Naming and Configuration Service，Na为naming/nameServer即注册中心，co为configuration即配置中心，ser...</description>
      <category>设计组件</category>
      <pubDate>Tue, 16 Apr 2024 01:53:26 GMT</pubDate>
      <content:encoded><![CDATA[<h2><strong>1、Nacos概述</strong></h2>
<h3><strong>1.1、什么是Nacos</strong></h3>
<p>Nacos 是阿里巴巴推出来的一个新开源项目，这是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。（英文全称Dynamic Naming and Configuration Service，Na为naming/nameServer即注册中心，co为configuration即配置中心，service是指该注册/配置中心都是以服务为核心。服务在nacos是一等公民）</p>
<p>Nacos 致力于帮助您<strong>发现、配置和管理微服务</strong>。Nacos 提供了一组简单易用的特性集，帮助您快速实现<strong>动态服务发现、服务配置、服务元数据及流量管理</strong>。</p>
<p>Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建<strong>以“服务”为中心</strong>的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p>
<p><strong>Nacos 支持如下核心特性：</strong></p>
<p>**1）服务发现：**支持&nbsp;<strong>DNS 与 RPC 服务发现</strong>，也提供原生 SDK 、OpenAPI 等多种服务注册方式和 DNS、HTTP 与 API 等多种服务发现方式。</p>
<p>**2）服务健康监测：**Nacos&nbsp;<strong>提供对服务的实时的健康检查</strong>，<strong>阻止向不健康的主机或服务实例发送请求。</strong></p>
<p><strong>3）动态配置服务：<strong>Nacos 提供</strong>配置统一管理功能</strong>，能够帮助我们<strong>将配置以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置</strong>。</p>
<p><strong>4）动态 DNS 服务：<strong>Nacos&nbsp;<strong>支持动态 DNS 服务权重路由</strong>，能够让我们</strong>很容易地实现中间层负载均衡、更灵活的路由策略</strong>、流量控制以及数据中心内网的简单 DNS 解析服务。</p>
<p>**5）服务及其元数据管理：**Nacos&nbsp;<strong>支持从微服务平台建设的视角管理数据中心的所有服务及元数据</strong>，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 metrics 统计数据。</p>
<h3><strong>1.2、常见的注册中心</strong></h3>
<p>Eureka（原生，2.0遇到瓶颈，停止维护）</p>
<p>Zookeeper（支持，专业的独立产品。例如：dubbo）</p>
<p>Consul（原生，GO语言开发）</p>
<p>Nacos</p>
<p>相对于&nbsp;<strong>Spring Cloud Eureka 来说，Nacos 更强大</strong>。</p>
<p>Nacos = Spring Cloud Eureka + Spring Cloud Config</p>
<p>Nacos 可以<strong>与 Spring，Spring Boot，Spring Cloud 集成，并能代替 Spring Cloud Eureka， Spring Cloud Config。</strong></p>
<ul>
<li>通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-config&nbsp;<strong>实现配置的动态变更</strong>。</li>
<li>通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-discovery&nbsp;<strong>实现服务的注册与发现</strong>。</li>
</ul>
<p><strong>注</strong>：nacos与eureka的区别（简单介绍）</p>
<p>1）nacos和eureka的范围不同，Nacos的阈值是针对某个具体Service的，而<strong>不是针对所有服务</strong>的；但Eureka的自我保护阈值是针对所有服务的。<strong>nacos支持CP和AP两种；eureka只支持AP</strong>。nacos使用netty，<strong>是长连接</strong>；eureka是<strong>短连接，定时发送</strong>。</p>
<p>2）Eureka保护方式：当在短时间内，统计续约失败的比例，<strong>如果达到一定阈值，则会触发自我保护的机制</strong>，在该机制下，Eureka Server不会剔除任何的微服务，等到正常后，再退出自我保护机制。自我保护开关(eureka.server. enab1e-self-preservation:false)</p>
<p>Nacos保护方式：<strong>当域名健康实例(Instance)占总服务实例(Instance)的比例小于阈值时</strong>，<strong>无论实例(Instance)是否健康，都会将这个实例(Instance)返回给客户端</strong>。这样做虽然损失了一部分流量，但是保证了集群的剩余健康实例(Instance)能正常工作。</p>
<h3><strong>1.3、Nacos结构图</strong></h3>
<figure><figcaption>img_115.png</figcaption></figure>
<h3>1.4、Nacos下载和安装</h3>
<p><strong>1）软件环境</strong></p>
<p>Nacos 版本：2.0.4</p>
<p>mysql版本：5.7</p>
<p><strong>2）安转步骤</strong></p>
<p>此处使用docker安转nacos（单节点）</p>
<p>**注：**注意启动时需要配置这个环境配置&nbsp;<strong>-e MODE=standalone 否则默认启动为占用内存为1G</strong>。</p>
<blockquote>
<p>1、先拉取镜像<br>
命令：docker pull nacos/nacos-server:v2.0.4<br>
2、运行容器<br>
命令： docker run --name nacos(容器名称) -d -p 8848(外部访问端口):8848(容器内端口) -p 9848:9848<br>
-p 9849:9849 --privileged=true --restart=always -e JVM_XMS=256m -e JVM_XMX=256m -e MODE=standalone -e PREFER_HOST_MODE=hostname -v /home/nacos/logs(数据卷主机地址):/home/nacos/logs（数据卷容器内部地址） -v /home/nacos/conf:/home/nacos/conf ea54f31c46e4（容器id）</p>
</blockquote>
<p><strong>3）查看容器是否启动</strong></p>
<p>命令：docker ps<br>
</p>
<p><strong>4)查看容器相关日志</strong></p>
<p>命令：docker logs --since 10m nacos的容器id #查看指定容器的输出日志<br>
</p>
<p><strong>注意</strong>：如果查看日志发现报错如下截图<br>
</p>
<p>证明缺少日志文件，我们可以在宿主机配置文件目录下添加如下内容</p>
<p>1）新建文件nacos-logback.xml，在我们宿主机挂载的对应的保存配置文件的目录下，并在下方添加如下配置；</p>
<p>2）<strong>注意</strong>log.path 中的value配置要和日志数据卷挂载的目录一致</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;?</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">xml</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1.0"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> encoding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"UTF-8"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">?&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">configuration</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"false"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> scan</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"true"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> scanPeriod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1 seconds"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">contextName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;logback&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">contextName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">property</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"log.path"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/home/nacos/logs/logback.log"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">appender</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"console"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"ch.qos.logback.core.ConsoleAppender"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        &lt;!-- &lt;filter class="com.example.logback.filter.MyFilter" /&gt; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">filter</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"ch.qos.logback.classic.filter.ThresholdFilter"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;ERROR&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">encoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">pattern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">pattern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">encoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">appender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">appender</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"file"</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">              class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"ch.qos.logback.core.rolling.RollingFileAppender"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;${log.path}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">rollingPolicy</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">fileNamePattern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;${log.path}.%d{yyyy-MM-dd}.zip&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">fileNamePattern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">rollingPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">encoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">pattern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;%date %level [%thread] %logger{36} [%file : %line] %msg%n</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">pattern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">encoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">appender</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">root</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"debug"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">appender-ref</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"console"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">appender-ref</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"file"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">logger</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"com.example.logback"</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> level</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"warn"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5）进行访问</p>
<p>本机IP地址：8848/nacos<br>
</p>
<p><strong>注</strong>：记得开放对应端口</p>
<p>登录账号 登录密码</p>
<p>nacos nacos<br>
</p>
<h2>2、注册服务</h2>
<h3>1.1、整合nacos</h3>
<p>引入依赖</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;com.alibaba.cloud&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在对应模块的配置文件中添加nacos配置</p>
<div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">#服务名（该服务名，会在nacos上显示）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">服务名称</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"># nacos服务地址</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">spring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">cloud</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">nacos</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">discovery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B">server</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">addr</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">ip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:端口</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在启动类上添加注解<br>
</p>
<h3>2.2、重启服务，查看</h3>
<p>重新启动服务，登录nacos页面查看(下图发现服务成功注册上nacos中)<br>
</p>
<h2>3、整合外部的mysql（单节点）</h2>
<h3>3.1、建库建表</h3>
<p>可以直接根据里面的内容创建建表链接</p>
<p><strong>注</strong>：对应nacos版本建表可能出现的问题<br>
</p>
<h3>3.2、修改数据卷挂载出来的nacos配置</h3>
<p>进入数据卷保存路面<br>
此处我们nacos配置保存在宿主机的/home/nacos/conf中<br>
</p>
<p>修改下面内容即可<br>
</p>
<p>重启 Nacos 即可，验证。</p>
<p>再次创建相关信息、重启服务之后依然存在。</p>
<h2>4、Nacos集群化部署</h2>
<p>之前我们搭建的nacos是standalone（单节点模式），nacos是支持集群化部署的，<strong>最好使用单数节点进行集群化部署（因为此处会有投票机制）</strong>，此处因为只有两台机器，所以只演示两台机器如何部署</p>
<h3>4.1、使用docker，分别在不同的服务器上运行两台nacos容器</h3>
<p><strong>注意</strong>：2.x版本的nacos需要开放9848 和 9849 端口的映射端口</p>
<p>下面为示例命令：</p>
<div class="language-cobol line-numbers-mode" data-highlighter="shiki" data-ext="cobol" data-title="cobol" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">docker </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> -d \</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">#  hostname</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-e PREFER_HOST_MODE=nacos \</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"># 单例/集群模式</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-e MODE=cluster \</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"># nacos cluster地址,节点地址</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-e NACOS_SERVERS=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"124.223.xx.xx:8848 106.52.xx.xx:8848"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"># 开启mysql</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-e SPRING_DATASOURCE_PLATFORM=mysql \</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"># mysql主节点host</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-e MYSQL_SERVICE_HOST=106.52.xx.xx \</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"># mysql主节点端口</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-e MYSQL_SERVICE_PORT=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3306</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"># 数据库用户名</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-e MYSQL_SERVICE_USER=root \</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"># 数据库密码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-e MYSQL_SERVICE_PASSWORD=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">123456</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">#数据库名称</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-e MYSQL_SERVICE_DB_NAME=nacos_config_cluster \</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"># 自定义nacos服务器IP（当前）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-e NACOS_SERVER_IP=106.52.xx.xx \</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"># 指定映射端口 8848容器多映射</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">9848</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 9849</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> 端口</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-p 8848:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">8848</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-p 9848:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">9848</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-p 9849:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">9849</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> \</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"># 容器名</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">--name nacos-8848 \</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">--restart=always </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"># 挂载</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">-v /home/nacos/logs:/home/nacos/logs -v /home/nacos/conf:/home/nacos/conf  \</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">容器</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">id</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>4.2、查看nacos控制台（通过每个节点都可以看到对应信息）</h3>
<figure><figcaption>img_126.png</figcaption></figure>
<h3>4.3、集群简介</h3>
<p><strong>leader节点</strong>：负责事务型请求（事务型：创建配置、修改配置、删除配置）</p>
<p><strong>follow节点</strong>：负责读（查询请求）</p>
<p><strong>宕机情况</strong>：当leader节点宕机时，follow节点进行投票选举出新的leader节点（与传统的redis等不同的是，follow会自动进行重新选举，不需要借助类似于哨兵机制这种机制进行选举）<br>
</p>
<h2>5、可能遇到的问题</h2>
<p>1、conf无法挂载出来</p>
<blockquote>
<p>在使用docker运行时，将容器内的conf挂载出来时，发现并没有对应的配置文件</p>
</blockquote>
<p>1）先运行一个测试nacos容器</p>
<div class="language-cobol line-numbers-mode" data-highlighter="shiki" data-ext="cobol" data-title="cobol" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> docker </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> -p 8848:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">8848</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> --name nacostest -d 容器</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">id</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>2）将容器内的文件复制出来</p>
<div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" data-title="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">#配置文件复制 </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">#第一个目录为容器内目录  第二个为宿主机目录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">docker cp nacostest（容器名）</span><span style="--shiki-light:inherit;--shiki-dark:#D19A66">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">home</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">nacos</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">logs</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">/</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> /</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">home</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">nacos</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">logs</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">docker cp nacostest（容器名）</span><span style="--shiki-light:inherit;--shiki-dark:#D19A66">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">home</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">nacos</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">conf</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">/</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> /</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">home</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">nacos</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">conf</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3）强制关闭容器</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> rm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 容器id</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>4）然后在重新运行，包含数据卷挂载命令的启动命令</p>
<p><strong>docker运行命令介绍</strong></p>
<p>|名称|描述|值|<br>
|</p>
]]></content:encoded>
    </item>
    <item>
      <title>组件Redis</title>
      <link>https://ujava.cn/assembly/redis.html</link>
      <guid>https://ujava.cn/assembly/redis.html</guid>
      <source url="https://ujava.cn/rss.xml">组件Redis</source>
      <description>NoSQL:即Not-OnlySQL(泛指非关系型的数据库)，作为关系型数据库的补充。 作用:应对基于海量用户和海量数据前提下的数据处理问题。 Redis介绍 概念 Redis(REmote DlctionaryServer)是用C语言开发的一个开源的高性能键值对(key-value)数据库 特征 1.数据间没有必然的关联关系 2.内部采用单线程机制进...</description>
      <category>设计组件</category>
      <pubDate>Tue, 16 Apr 2024 01:53:26 GMT</pubDate>
      <content:encoded><![CDATA[<p>NoSQL:即Not-OnlySQL(泛指非关系型的数据库)，作为关系型数据库的补充。<br>
作用:应对基于海量用户和海量数据前提下的数据处理问题。</p>
<h2>Redis介绍</h2>
<h4>概念</h4>
<p>Redis(REmote DlctionaryServer)是用C语言开发的一个开源的高性能键值对(key-value)数据库</p>
<h4>特征</h4>
<p>1.数据间没有必然的关联关系</p>
<p>2.内部采用单线程机制进行工作</p>
<p>3.高性能</p>
<p>4.支持多种数据类型</p>
<p>5.支持持久化，可以存硬盘。</p>
<h4>应用</h4>
<p>热点信息，时效性信息，分布式数据共享，消息队列，即使信息查询。</p>
<h3>在虚拟机上启动redis服务</h3>
<p>通过指定的配置文件启动redis服务，</p>
<ol>
<li>查看进程：ps -ef | grep redis</li>
<li>进入配置文件的目录cd /usr/local/redis/bin/</li>
<li>输入 ./redis-server redis.conf</li>
<li>输入 ./redis-cli</li>
<li>关闭服务并退出：shutdown 然后：exit</li>
</ol>
<h3>键值对</h3>
<p>设置键值对</p>
<p>​ 语法：set key value</p>
<p>获取键值对</p>
<p>​ 语法：get key</p>
<p>判断键是否存在：exist key</p>
<p><strong>设置过期时间</strong>： expire key 时间</p>
<p>查看过期时间： ttl key</p>
<p>查看当前key的数据类型：&gt; type key</p>
<p>删除key：del key</p>
<h3>库</h3>
<p>redis共有16个库</p>
<h4>选择数据库</h4>
<p>语法：select 数字</p>
<h4>查看</h4>
<p>查看大小：dbsize</p>
<p>查看数据库所有的键：keys *</p>
<h4>清空</h4>
<p>清空当前数据库：flushdb</p>
<p>清空所有：flushall</p>
<h3>基本数据类型</h3>
<h4>String</h4>
<p>追加字符串，不存在则新建：append key1 "hello"</p>
<p>获取字符串长度：strlen key1</p>
<p>初始浏览量为0 ：set views 0</p>
<p>设置自增1：incr views</p>
<p>设置自减1：decr views</p>
<p>可以设置步长。每次的增长值 : INCRBY views 10 #</p>
<p>获取指定范围的值: GETRANGE key 起始点 结束点</p>
<p>获取所有长度的值: GETRANGE key 0 -1</p>
<p>设置多个值:</p>
<p>mset key value key value ……</p>
<p>mget key key key</p>
<p>msetnx 原子性操作设置多个值</p>
<p><strong>设置过期时间和值:</strong></p>
<p>设置key3 的值为 he11o,30秒后过期: setex key3 30 "he1lo"</p>
<p>先get然后在set: getset</p>
<h2>List</h2>
<p>LPuSH key value</p>
<p>LPUSH list one #将一个值或者多个值，插入到列表头部(左)</p>
<p>RPUSH key value</p>
<p>Rpush list righr #将一个值或者多个值，插入到列表位部(右)</p>
<p>lrange key start end</p>
<p>LRANGE list 0 1 #通过区间获取具体的值!</p>
<p>LROR key #移出并获取列表的第一个元素</p>
<p>lindex list 1 #通过下标获得list 中的某一个值!</p>
<p>Llen list # 返回列表的长度</p>
<p>lrem key count value</p>
<p>lrem list 1 one # 移除list集合中指定个数的value，精确匹配</p>
<p>ltrim list 1 2 #截取指定的长度!</p>
<p>lset 将列表中指定下标的值替换为另外一个值，更新操作</p>
<p>lset list 0 item #如果存在，更新当前下标的值</p>
<p>在指定元素前后插入指定的值</p>
<p>LINSERT mylist after world new</p>
<h2>set</h2>
<p>set集合中添加</p>
<p>sadd key value</p>
<p>sadd myset "hello"</p>
<p>查看指定set的所有值</p>
<p>smembers key</p>
<p>SMEMBERS myset</p>
<p>判断某一个值是不是在set集合中!</p>
<p>sismember key value</p>
<p>SISMEMBER myset hello</p>
<p>查看个数</p>
<p>scard key</p>
<p>scard myset</p>
<p>移除set集合中的指定元素</p>
<p>srem key value</p>
<p>srem myset hello</p>
<p>获取随机</p>
<p>SRANDMEMBER myset</p>
<p>SRANDMEMBER myset 2</p>
<p>smove myset myset2 "kuangshen"# 将一个指定的值，移动到另外一个set集合!</p>
<p>SDIFF key1 key2 差集</p>
<p>SINTER key1 key2 交集</p>
<p>SUNION key1 key2 并集</p>
<h2>hash</h2>
<p>hset 集合名 key value</p>
<p>hset myhash field1 hello</p>
<h1>set一个具体key-vlaue</h1>
<p>获取一个字段值</p>
<p>hget 集合名 key键</p>
<p>hget myhash field1</p>
<p>添加多个 key-vlaue</p>
<p>hmset 集合 key键1 key键2</p>
<p>hmset myhash field1 hello field2 world</p>
<p>获取多个字段值</p>
<p>hmget 集合名 key1 key2</p>
<p>hmget myhash field1 field2</p>
<p>获取全部的数据</p>
<p>hget 集合名</p>
<p>hgetall myhash</p>
<p>删除hash指定key字段!对应的value值也就消失了!</p>
<p>hdel 集合名 key</p>
<p>hdel myhash field1</p>
<p>判断hash中指定字段是否存在!</p>
<p>HEXISTS myhash field1</p>
<p>只获得所有field</p>
<p>hkeys 集合名</p>
<p>hkeys myhash</p>
<p>只获得所有value</p>
<p>hvals 集合名</p>
<p>hvals myhash</p>
<p>设置自动增长</p>
<p>HINCRBY myhash field3 1</p>
<p>HINCRBY myhash field3 -1</p>
<p>如果不存在则可以设置</p>
<p>hsetnx myhash field4 hello</p>
<p>如果存在则不能设置</p>
<p>hsetnx myhash field4 world</p>
<h2>zset</h2>
<p>zset在set的基础上增加了一个值，set k1 v1 zset k1 score1 v1</p>
<p>添加一个值</p>
<p>zadd key score value</p>
<p>zadd myset 1 one</p>
<p>添加多个值</p>
<p>zadd myset 2 two 3 three</p>
<p>获取范围值</p>
<p>zrange key start end</p>
<p>zrange myset 0 -1</p>
<p>显示全部内容从小到大</p>
<p>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</p>
<p>移除元素</p>
<p>zrem key value</p>
]]></content:encoded>
    </item>
    <item>
      <title>组件Spark</title>
      <link>https://ujava.cn/assembly/spark.html</link>
      <guid>https://ujava.cn/assembly/spark.html</guid>
      <source url="https://ujava.cn/rss.xml">组件Spark</source>
      <description>什么是Apache Spark？ 答案：Apache Spark是一个快速、通用的集群计算系统，旨在处理大规模数据处理和分析任务。它提供了高级的编程模型和丰富的库，可以在分布式环境中进行数据处理、机器学习、图计算等。 Spark和Hadoop有什么区别？ 答案：Spark和Hadoop都是用于大数据处理的框架，但有以下区别： 数据处理模型：Spark提...</description>
      <category>设计组件</category>
      <pubDate>Tue, 16 Apr 2024 01:53:26 GMT</pubDate>
      <content:encoded><![CDATA[<h2>什么是Apache Spark？</h2>
<p>答案：Apache Spark是一个快速、通用的集群计算系统，旨在处理大规模数据处理和分析任务。它提供了高级的编程模型和丰富的库，可以在分布式环境中进行数据处理、机器学习、图计算等。</p>
<h2>Spark和Hadoop有什么区别？</h2>
<p>答案：Spark和Hadoop都是用于大数据处理的框架，但有以下区别：</p>
<ul>
<li>数据处理模型：Spark提供了更灵活和高级的数据处理模型，如RDD（弹性分布式数据集）和DataFrame，而Hadoop使用的是基于MapReduce的批处理模型。</li>
<li>性能：由于Spark的内存计算和任务调度优化，它通常比Hadoop的MapReduce更快。</li>
<li>生态系统：Hadoop拥有更成熟和广泛的生态系统，包括HDFS、YARN和Hive等，而Spark在某些方面的生态系统仍在发展中。</li>
</ul>
<h2>Spark的核心组件是什么？</h2>
<p>答案：Spark的核心组件包括：</p>
<ul>
<li>Spark Core：提供了Spark的基本功能，包括任务调度、内存管理和分布式数据处理等。</li>
<li>Spark SQL：用于处理结构化数据的模块，支持SQL查询和DataFrame API。</li>
<li>Spark Streaming：用于实时数据流处理的模块，支持高吞吐量和低延迟的流处理任务。</li>
<li>MLlib：Spark的机器学习库，提供了常见的机器学习算法和工具。</li>
<li>GraphX：Spark的图计算库，用于图处理和分析任务。</li>
</ul>
<h2>Spark的数据处理模型是什么？</h2>
<p>答案：Spark的数据处理模型基于RDD（弹性分布式数据集）。RDD是一个可并行操作的、容错的、不可变的数据集合，可以在集群中进行分布式处理。Spark还引入了DataFrame和Dataset等高级抽象，提供了更丰富和优化的数据处理能力。</p>
<h2>Spark支持哪些编程语言？</h2>
<p>答案：Spark主要支持以下编程语言：</p>
<ul>
<li>Scala：Scala是Spark的主要编程语言，它是一种面向对象和函数式编程的语言，提供了强大的表达能力和丰富的特性。</li>
<li>Java：Spark可以通过Java API进行编程，适用于Java开发者。</li>
<li>Python：Spark提供了Python API（PySpark），可以使用Python语言进行Spark开发。</li>
<li>R：Spark也支持R语言，通过SparkR库可以在R环境中使用Spark。</li>
</ul>
<h2>Spark的调度器是什么？</h2>
<p>答案：Spark的调度器是负责将任务分配给集群中的执行节点的组件。Spark有两种调度器：</p>
<ul>
<li>FIFO调度器：按照任务提交的顺序依次执行，适用于简单的任务场景。</li>
<li>Fair调度器：根据资源使用情况动态分配资源，以保证每个任务能够公平地获得执行机会。</li>
</ul>
<h2>Spark的数据持久化机制是什么？</h2>
<p>答案：Spark使用RDD的持久化机制来将数据存储在内存或磁盘中，以加快后续操作的速度。它支持将RDD的数据持久化到内存、磁盘或者序列化到外部存储系统。</p>
<h2>Spark的容错机制是什么？</h2>
<p>答案：Spark的容错机制基于RDD的不可变性和记录操作的转换日志。当节点发生故障时，Spark可以根据转换日志重新计算丢失的数据，从而保证任务的容错性。</p>
<h2>Spark的机器学习库是什么？</h2>
<p>答案：Spark的机器学习库称为MLlib，它提供了常见的机器学习算法和工具，如分类、回归、聚类、推荐等。MLlib使用RDD和DataFrame作为数据接口，提供了易于使用和可扩展的机器学习功能。</p>
<h2>Spark的图计算库是什么？</h2>
<p>答案：Spark的图计算库称为GraphX，它提供了图处理和分析的功能，包括图的创建、遍历、连接等操作。GraphX使用RDD作为图数据的表示形式，并提供了丰富的图算法和操作符。</p>
<h2>Spark支持哪些数据源和数据格式？</h2>
<p>答案：Spark支持多种数据源和数据格式，包括：</p>
<ul>
<li>文件系统：Spark可以读写各种文件系统，如HDFS、本地文件系统、S3等。</li>
<li>数据库：Spark可以连接和读写关系型数据库，如MySQL、PostgreSQL等，也支持NoSQL数据库，如MongoDB、Cassandra等。</li>
<li>实时数据流：Spark支持读取实时数据流，如Kafka、Flume等。</li>
<li>数据格式：Spark支持常见的数据格式，如CSV、JSON、Parquet、Avro等。</li>
</ul>
<h2>Spark的集群部署模式有哪些？</h2>
<p>答案：Spark的集群部署模式包括：</p>
<ul>
<li>Standalone模式：在独立的Spark集群上运行，不依赖其他资源管理器。</li>
<li>YARN模式：在Hadoop集群上利用YARN资源管理器进行任务调度和资源分配。</li>
<li>Mesos模式：在Mesos集群上利用Mesos资源管理器进行任务调度和资源分配。</li>
<li>Kubernetes模式：在Kubernetes集群上运行Spark作业，利用Kubernetes进行容器管理和资源分配。</li>
</ul>
<h2>Spark的优化技术有哪些？</h2>
<p>答案：Spark的优化技术包括：</p>
<ul>
<li>延迟计算：Spark使用惰性求值策略，延迟计算数据，只在需要结果时才执行计算，减少不必要的中间结果。</li>
<li>数据分区和并行度：合理设置数据分区和并行度，使得任务可以并行执行，提高计算效率。</li>
<li>内存管理：通过合理配置内存和缓存策略，将常用的数据存储在内存中，减少磁盘IO，提高性能。</li>
<li>窗口操作：对于窗口操作，使用时间滑动窗口和窗口聚合等技术，减少数据的重复计算。</li>
<li>数据压缩和序列化：使用压缩和序列化技术减小数据的存储空间和传输成本。</li>
</ul>
<h2>Spark支持哪些集群调度器？</h2>
<p>答案：Spark支持以下集群调度器：</p>
<ul>
<li>Hadoop YARN：Spark可以与Hadoop集群上的YARN资源管理器集成，利用YARN进行任务调度和资源分配。</li>
<li>Apache Mesos：Spark可以与Mesos集群集成，利用Mesos进行任务调度和资源分配。</li>
<li>Kubernetes：Spark可以在Kubernetes集群上运行，利用Kubernetes进行容器管理和资源分配。</li>
</ul>
<h2>Spark的数据处理模型中的RDD是什么？</h2>
<p>答案：RDD（弹性分布式数据集）是Spark的核心数据结构，代表分布在集群中的不可变的、可分区的数据集合。RDD可以并行操作，支持容错和恢复。它是Spark进行分布式数据处理的基础。</p>
<h2>Spark的DataFrame是什么？</h2>
<p>答案：DataFrame是Spark提供的高级数据结构，用于处理结构化数据。DataFrame类似于传统数据库中的表格，具有列和行的概念，支持SQL查询和DataFrame API操作。DataFrame提供了更丰富的数据处理能力和优化技术，比原始的RDD更高效。</p>
<h2>Spark的机器学习库MLlib有哪些常见的算法？</h2>
<p>答案：Spark的机器学习库MLlib包含了多种常见的机器学习算法，包括分类算法（如逻辑回归、决策树、随机森林）、回归算法（如线性回归、岭回归）、聚类算法（如K均值聚类、高斯混合模型）、推荐算法（如协同过滤）、降维算法（如主成分分析）、自然语言处理（如文本分类、词嵌入）等。</p>
<h2>Spark的图计算库GraphX支持哪些图算法？</h2>
<p>答案：Spark的图计算库GraphX支持多种图算法，包括图的遍历、连接、聚合、PageRank、连通性组件、最短路径等。GraphX提供了丰富的图操作符和API，方便用户进行图处理和分析。</p>
<h2>Spark Streaming是什么？</h2>
<p>答案：Spark Streaming是Spark提供的实时数据流处理模块。它可以以微批处理的方式处理实时数据，支持高吞吐量和低延迟的数据处理。Spark Streaming可以与Spark的批处理和机器学习库无缝集成，实现批处理与实时处理的统一。</p>
<h2>Spark的扩展库和整合工具有哪些？</h2>
<p>答案：Spark有丰富的扩展库和整合工具，包括：</p>
<ul>
<li>Spark SQL：用于处理结构化数据，支持SQL查询和DataFrame操作。</li>
<li>Spark Streaming：用于实时数据流处理。</li>
<li>MLlib：Spark的机器学习库。</li>
<li>GraphX：Spark的图计算库。</li>
<li>SparkR：提供在R语言中使用Spark的能力。</li>
<li>PySpark：Spark的Python API。</li>
<li>Spark on Kubernetes：在Kubernetes集群上运行Spark作业。</li>
<li>Spark on Mesos：在Mesos集群上运行Spark作业。</li>
<li>Spark on YARN：在Hadoop YARN集群上运行Spark作业。</li>
</ul>
<h2>什么是宽依赖，什么是窄依赖？哪些算子是宽依赖，哪些是窄依赖？</h2>
<p>窄依赖就是一个父RDD分区对应一个子RDD分区，如map，filter<br>
或者多个父RDD分区对应一个子RDD分区，如co-partioned join</p>
<p>宽依赖是一个父RDD分区对应非全部的子RDD分区，如groupByKey，ruduceByKey<br>
或者一个父RDD分区对应全部的子RDD分区，如未经协同划分的join</p>
<h2>Transformation和action算子有什么区别？举例说明</h2>
<p>Transformation 变换/转换：这种变换并不触发提交作业，完成作业中间过程处理。Transformation 操作是延迟计算的，也就是说从一个RDD 转换生成另一个 RDD 的转换操作不是马上执行，需要等到有 Action 操作的时候才会真正触发运算</p>
<blockquote>
<p>map, filter</p>
</blockquote>
<p>Action 行动算子：这类算子会触发 SparkContext 提交 Job 作业。<br>
Action 算子会触发 Spark 提交作业（Job）。</p>
<blockquote>
<p>count</p>
</blockquote>
<h2>讲解spark shuffle原理和特性？shuffle write 和 shuffle read过程做些什么？</h2>
<h2>Shuffle数据块有多少种不同的存储方式？分别是什么</h2>
<ol>
<li>RDD数据块：用来存储所缓存的RDD数据。</li>
<li>Shuffle数据块：用来存储持久化的Shuffle数据。</li>
<li>广播变量数据块：用来存储所存储的广播变量数据。</li>
<li>任务返回结果数据块：用来存储在存储管理模块内部的任务返回结果。通常情况下任务返回结果随任务一起通过Akka返回到Driver端。但是当任务返回结果很大时，会引起Akka帧溢出，这时的另一种方案是将返回结果以块的形式放入存储管理模块，然后在Driver端获取该数据块即可，因为存储管理模块内部数据块的传输是通过Socket连接的，因此就不会出现Akka帧溢出了。</li>
<li>流式数据块：只用在Spark Streaming中，用来存储所接收到的流式数据块</li>
</ol>
<h2>哪些spark算子会有shuffle？</h2>
<ol>
<li>去重，distinct</li>
<li>排序，groupByKey，reduceByKey等</li>
<li>重分区，repartition，coalesce</li>
<li>集合或者表操作，interection，join</li>
</ol>
<h2>讲解spark schedule（任务调度）？</h2>
<figure><figcaption>img_85.png</figcaption></figure>
<h2>Spark stage是如何划分的？</h2>
<ol>
<li>从hdfs中读取文件后，创建 RDD 对象</li>
<li>DAGScheduler模块介入运算，计算RDD之间的依赖关系。RDD之间的依赖关系就形成了DAG</li>
<li>每一个JOB被分为多个Stage，划分Stage的一个主要依据是当前计算因子的输入是否是确定的，如果是则将其分在同一个Stage，避免多个Stage之间的消息传递开销。</li>
</ol>
<p>因此spark划分stage的整体思路是：从后往前推，遇到宽依赖就断开，划分为一个stage；遇到窄依赖就将这个RDD加入该stage中。</p>
<h2>Spark cache一定能提升计算性能么？说明原因？</h2>
<p>不一定啊，cache是将数据缓存到内存里，当小数据量的时候是能提升效率，但数据大的时候内存放不下就会报溢出。</p>
<h2>Cache和persist有什么区别和联系？</h2>
<p>cache调用了persist方法，cache只有一个默认的缓存级别MEMORY_ONLY ，而persist可以根据情况设置其它的缓存级别。</p>
<h2>RDD是弹性数据集，“弹性”体现在哪里呢？你觉得RDD有哪些缺陷？</h2>
<ol>
<li>自动进行内存和磁盘切换</li>
<li>基于lineage的高效容错</li>
<li>task如果失败会特定次数的重试</li>
<li>stage如果失败会自动进行特定次数的重试，而且只会只计算失败的分片</li>
<li>checkpoint【每次对RDD操作都会产生新的RDD，如果链条比较长，计算比较笨重，就把数据放在硬盘中】和persist 【内存或磁盘中对数据进行复用】(检查点、持久化)</li>
<li>数据调度弹性：DAG TASK 和资源管理无关</li>
<li>数据分片的高度弹性repartion</li>
</ol>
<p>缺陷：<br>
惰性计算的缺陷也是明显的：中间数据默认不会保存，每次动作操作都会对数据重复计算，某些计算量比较大的操作可能会影响到系统的运算效率</p>
<h2>RDD有多少种持久化方式？memory_only如果内存存储不了，会怎么操作？</h2>
<p>cache和persist</p>
<ul>
<li>memory_and_disk，放一部分到磁盘</li>
<li>MEMORY_ONLY_SER:同MEMORY_ONLY，但是会使用Java序列化方式，将Java对象序列化后进行持久化。可以减少内存开销，但是需要进行反序列化，因此会加大CPU开销。</li>
<li>MEMORY_AND_DSK_SER:同MEMORY_AND_DSK。但是使用序列化方式持久化Java对象。</li>
<li>DISK_ONLY:使用非序列化Java对象的方式持久化，完全存储到磁盘上。<br>
MEMORY_ONLY_2或者MEMORY_AND_DISK_2等：如果是尾部加了2的持久化级别，表示会将持久化数据复用一份，保存到其他节点，从而在数据丢失时，不需要再次计算，只需要使用备份数据即可。</li>
</ul>
<h2>RDD分区和数据块有啥联系？</h2>
<h2>当GC时间占比很大可能的原因有哪些？对应的优化方法是？</h2>
<p>垃圾回收的开销和对象合数成正比，所以减少对象的个数，就能大大减少垃圾回收的开销。序列化存储数据，每个RDD就是一个对象。缓存RDD占用的内存可能跟工作所需的内存打架，需要控制好</p>
<h2>Spark中repartition和coalesce异同？coalesce什么时候效果更高，为什么?</h2>
<div class="language-less line-numbers-mode" data-highlighter="shiki" data-ext="less" data-title="less" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">repartition(numPartitions:Int):RDD[T]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">coalesce(numPartitions:Int, shuffle:Boolean=false):RDD[T]</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上为他们的定义，区别就是repartition一定会触发shuffle，而coalesce默认是不触发shuffle的。</p>
<p>他们两个都是RDD的分区进行重新划分，repartition只是coalesce接口中shuffle为true的简易实现，（假设RDD有N个分区，需要重新划分成M个分区）</p>
<p>减少分区提高效率</p>
<h2>Groupbykey和reducebykey哪个性能更高，为什么？</h2>
<p>reduceByKey性能高，更适合大数据集</p>
<h2>你是如何理解caseclass的？</h2>
<h2>Scala里trait有什么功能，与class有何异同？什么时候用trait什么时候该用class?</h2>
<p>它可以被继承，而且支持多重继承，其实它更像我们熟悉的接口（interface），但它与接口又有不同之处是：<br>
trait中可以写方法的实现，interface不可以（java8开始支持接口中允许写方法实现代码了），这样看起来trait又很像抽象类</p>
<h2>Scala 语法中to 和 until有啥区别?</h2>
<p>to 包含上界，until不包含上界</p>
<h2>讲解Scala伴生对象和伴生类?</h2>
<p>单例对象与类同名时，这个单例对象被称为这个类的伴生对象，而这个类被称为这个单例对象的伴生类。伴生类和伴生对象要在同一个源文件中定义，伴生对象和伴生类可以互相访问其私有成员。不与伴生类同名的单例对象称为孤立对象。</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">import </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">scala</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">collection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">mutable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">Map</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">class ChecksumAccumulator {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  private</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> var sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  def </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(b: Byte) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    sum +</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  def </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">checksum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(): </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">Int</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ~(sum &amp; 0xFF) + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ChecksumAccumulator {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  private</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> val cache </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> Map</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[String, Int]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  def calculate(s: String): </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">Int</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">contains</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(s))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    cache(s)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">  else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      val acc </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> new ChecksumAccumulator</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">      for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">- s)</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">        acc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">toByte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      val cs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> acc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">checksum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      cache +</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (s -</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> cs)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      println(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"s:"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">+s+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">" cs:"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">+cs)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">      cs</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  def main(args: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">Array</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[String]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    println(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Java 1:"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">+calculate(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Java"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    println(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Java 2:"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">+calculate(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Java"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    println(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Scala :"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">+calculate(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Scala"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>spark作业执行流程?</h2>
<ol>
<li>客户端提交作业</li>
<li>Driver启动流程</li>
<li>Driver申请资源并启动其余Executor(即Container)</li>
<li>Executor启动流程</li>
<li>作业调度，生成stages与tasks。</li>
<li>Task调度到Executor上，Executor启动线程执行Task逻辑</li>
<li>Driver管理Task状态</li>
<li>Task完成，Stage完成，作业完成</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>组件Spring</title>
      <link>https://ujava.cn/assembly/spring.html</link>
      <guid>https://ujava.cn/assembly/spring.html</guid>
      <source url="https://ujava.cn/rss.xml">组件Spring</source>
      <category>设计组件</category>
      <pubDate>Tue, 16 Apr 2024 01:53:26 GMT</pubDate>
    </item>
    <item>
      <title>组件ZooKeeper</title>
      <link>https://ujava.cn/assembly/zookeeper.html</link>
      <guid>https://ujava.cn/assembly/zookeeper.html</guid>
      <source url="https://ujava.cn/rss.xml">组件ZooKeeper</source>
      <description>一、Zookeeper简介 Zookeeper 是一个开源的分布式协调服务，目前由 Apache 进行维护。Zookeeper 可以用于实现分布式系统中常见的发布/订阅、负载均衡、命令服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。它具有以下特性： 顺序一致性：从一个客户端发起的事务请求，最终都会严格按照其发起顺序被应...</description>
      <category>设计组件</category>
      <pubDate>Tue, 16 Apr 2024 01:53:26 GMT</pubDate>
      <content:encoded><![CDATA[<h3>一、Zookeeper简介</h3>
<p>Zookeeper 是一个开源的分布式协调服务，目前由 Apache 进行维护。Zookeeper 可以用于实现分布式系统中常见的发布/订阅、负载均衡、命令服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。它具有以下特性：</p>
<ul>
<li>
<p><strong>顺序一致性</strong>：从一个客户端发起的事务请求，最终都会严格按照其发起顺序被应用到 Zookeeper 中；</p>
</li>
<li>
<p><strong>原子性</strong>：所有事务请求的处理结果在整个集群中所有机器上都是一致的；不存在部分机器应用了该事务，而另一部分没有应用的情况；</p>
</li>
<li>
<p><strong>单一视图</strong>：所有客户端看到的服务端数据模型都是一致的；</p>
</li>
<li>
<p><strong>可靠性</strong>：一旦服务端成功应用了一个事务，则其引起的改变会一直保留，直到被另外一个事务所更改；</p>
</li>
<li>
<p><strong>实时性</strong>：一旦一个事务被成功应用后，Zookeeper 可以保证客户端立即可以读取到这个事务变更后的最新状态的数据。</p>
</li>
</ul>
<h3>二、Zookeeper设计目标</h3>
<p>Zookeeper 致力于为那些高吞吐的大型分布式系统提供一个高性能、高可用、且具有严格顺序访问控制能力的分布式协调服务。它具有以下四个目标：</p>
<h3>2.1 目标一：简单的数据模型</h3>
<p>Zookeeper 通过树形结构来存储数据，它由一系列被称为 ZNode 的数据节点组成，类似于常见的文件系统。不过和常见的文件系统不同，Zookeeper 将数据全量存储在内存中，以此来实现高吞吐，减少访问延迟。<br>
</p>
<h3>2.2 目标二：构建集群</h3>
<p>可以由一组 Zookeeper 服务构成 Zookeeper 集群，集群中每台机器都会单独在内存中维护自身的状态，并且每台机器之间都保持着通讯，只要集群中有半数机器能够正常工作，那么整个集群就可以正常提供服务。<br>
</p>
<h3>2.3 目标三：顺序访问</h3>
<p>对于来自客户端的每个更新请求，Zookeeper 都会分配一个全局唯一的递增 ID，这个 ID 反映了所有事务请求的先后顺序。</p>
<h3>2.4 目标四：高性能高可用</h3>
<p>ZooKeeper 将数据存全量储在内存中以保持高性能，并通过服务集群来实现高可用，由于 Zookeeper 的所有更新和删除都是基于事务的，所以其在读多写少的应用场景中有着很高的性能表现。</p>
<h3>三、核心概念</h3>
<h3>3.1 集群角色</h3>
<p>Zookeeper 集群中的机器分为以下三种角色：</p>
<ul>
<li>
<p><strong>Leader</strong>&nbsp;：为客户端提供读写服务，并维护集群状态，它是由集群选举所产生的；</p>
</li>
<li>
<p><strong>Follower</strong>&nbsp;：为客户端提供读写服务，并定期向 Leader 汇报自己的节点状态。同时也参与写操作“过半写成功”的策略和 Leader 的选举；</p>
</li>
<li>
<p><strong>Observer</strong>&nbsp;：为客户端提供读写服务，并定期向 Leader 汇报自己的节点状态，但不参与写操作“过半写成功”的策略和 Leader 的选举，因此 Observer 可以在不影响写性能的情况下提升集群的读性能。</p>
</li>
</ul>
<h3>3.2 会话</h3>
<p>Zookeeper 客户端通过 TCP 长连接连接到服务集群，会话 (Session) 从第一次连接开始就已经建立，之后通过心跳检测机制来保持有效的会话状态。通过这个连接，客户端可以发送请求并接收响应，同时也可以接收到 Watch 事件的通知。</p>
<p>关于会话中另外一个核心的概念是 sessionTimeOut(会话超时时间)，当由于网络故障或者客户端主动断开等原因，导致连接断开，此时只要在会话超时时间之内重新建立连接，则之前创建的会话依然有效。</p>
<h3>3.3 数据节点</h3>
<p>Zookeeper 数据模型是由一系列基本数据单元&nbsp;<code>Znode</code>(数据节点) 组成的节点树，其中根节点为&nbsp;<code>/</code>。每个节点上都会保存自己的数据和节点信息。Zookeeper 中节点可以分为两大类：</p>
<ul>
<li>
<p><strong>持久节点</strong>&nbsp;：节点一旦创建，除非被主动删除，否则一直存在；</p>
</li>
<li>
<p><strong>临时节点</strong>&nbsp;：一旦创建该节点的客户端会话失效，则所有该客户端创建的临时节点都会被删除。</p>
</li>
</ul>
<p>临时节点和持久节点都可以添加一个特殊的属性：<code>SEQUENTIAL</code>，代表该节点是否具有递增属性。如果指定该属性，那么在这个节点创建时，Zookeeper 会自动在其节点名称后面追加一个由父节点维护的递增数字。</p>
<h3>3.4 节点信息</h3>
<p>每个 ZNode 节点在存储数据的同时，都会维护一个叫做&nbsp;<code>Stat</code>&nbsp;的数据结构，里面存储了关于该节点的全部状态信息。如下：<br>
</p>
<h3>3.5 Watcher</h3>
<p>Zookeeper 中一个常用的功能是 Watcher(事件监听器)，它允许用户在指定节点上针对感兴趣的事件注册监听，当事件发生时，监听器会被触发，并将事件信息推送到客户端。该机制是 Zookeeper 实现分布式协调服务的重要特性。</p>
<h3>3.6 ACL</h3>
<p>Zookeeper 采用 ACL(Access Control Lists) 策略来进行权限控制，类似于 UNIX 文件系统的权限控制。它定义了如下五种权限：</p>
<ul>
<li>
<p><strong>CREATE</strong>：允许创建子节点；</p>
</li>
<li>
<p><strong>READ</strong>：允许从节点获取数据并列出其子节点；</p>
</li>
<li>
<p><strong>WRITE</strong>：允许为节点设置数据；</p>
</li>
<li>
<p><strong>DELETE</strong>：允许删除子节点；</p>
</li>
<li>
<p><strong>ADMIN</strong>：允许为节点设置权限。</p>
</li>
</ul>
<h3>四、ZAB协议</h3>
<h3>4.1 ZAB协议与数据一致性</h3>
<p>ZAB 协议是 Zookeeper 专门设计的一种支持崩溃恢复的原子广播协议。通过该协议，Zookeeper 基于主从模式的系统架构来保持集群中各个副本之间数据的一致性。具体如下：</p>
<p>Zookeeper 使用一个单一的主进程来接收并处理客户端的所有事务请求，并采用原子广播协议将数据状态的变更以事务 Proposal 的形式广播到所有的副本进程上去。如下图：<br>
</p>
<p>具体流程如下：</p>
<p>所有的事务请求必须由唯一的 Leader 服务来处理，Leader 服务将事务请求转换为事务 Proposal，并将该 Proposal 分发给集群中所有的 Follower 服务。如果有半数的 Follower 服务进行了正确的反馈，那么 Leader 就会再次向所有的 Follower 发出 Commit 消息，要求将前一个 Proposal 进行提交。</p>
<h3>4.2 ZAB协议的内容</h3>
<p>ZAB 协议包括两种基本的模式，分别是崩溃恢复和消息广播：</p>
<h3>1. 崩溃恢复</h3>
<p>当整个服务框架在启动过程中，或者当 Leader 服务器出现异常时，ZAB 协议就会进入恢复模式，通过过半选举机制产生新的 Leader，之后其他机器将从新的 Leader 上同步状态，当有过半机器完成状态同步后，就退出恢复模式，进入消息广播模式。</p>
<h3>2. 消息广播</h3>
<p>ZAB 协议的消息广播过程使用的是原子广播协议。在整个消息的广播过程中，Leader 服务器会每个事物请求生成对应的 Proposal，并为其分配一个全局唯一的递增的事务 ID(ZXID)，之后再对其进行广播。具体过程如下：</p>
<p>Leader 服务会为每一个 Follower 服务器分配一个单独的队列，然后将事务 Proposal 依次放入队列中，并根据 FIFO(先进先出) 的策略进行消息发送。Follower 服务在接收到 Proposal 后，会将其以事务日志的形式写入本地磁盘中，并在写入成功后反馈给 Leader 一个 Ack 响应。当 Leader 接收到超过半数 Follower 的 Ack 响应后，就会广播一个 Commit 消息给所有的 Follower 以通知其进行事务提交，之后 Leader 自身也会完成对事务的提交。而每一个 Follower 则在接收到 Commit 消息后，完成事务的提交。<br>
</p>
<h3>五、Zookeeper的典型应用场景</h3>
<p>5.1 数据的发布/订阅</p>
<p>数据的发布/订阅系统，通常也用作配置中心。在分布式系统中，你可能有成千上万个服务节点，如果想要对所有服务的某项配置进行更改，由于数据节点过多，你不可逐台进行修改，而应该在设计时采用统一的配置中心。之后发布者只需要将新的配置发送到配置中心，所有服务节点即可自动下载并进行更新，从而实现配置的集中管理和动态更新。</p>
<p>Zookeeper 通过 Watcher 机制可以实现数据的发布和订阅。分布式系统的所有的服务节点可以对某个 ZNode 注册监听，之后只需要将新的配置写入该 ZNode，所有服务节点都会收到该事件。</p>
<p>5.2 命名服务</p>
<p>在分布式系统中，通常需要一个全局唯一的名字，如生成全局唯一的订单号等，Zookeeper 可以通过顺序节点的特性来生成全局唯一 ID，从而可以对分布式系统提供命名服务。</p>
<p>5.3 Master选举</p>
<p>分布式系统一个重要的模式就是主从模式 (Master/Salves)，Zookeeper 可以用于该模式下的 Matser 选举。可以让所有服务节点去竞争性地创建同一个 ZNode，由于 Zookeeper 不能有路径相同的 ZNode，必然只有一个服务节点能够创建成功，这样该服务节点就可以成为 Master 节点。</p>
<p>5.4 分布式锁</p>
<p>可以通过 Zookeeper 的临时节点和 Watcher 机制来实现分布式锁，这里以排它锁为例进行说明：</p>
<p>分布式系统的所有服务节点可以竞争性地去创建同一个临时 ZNode，由于 Zookeeper 不能有路径相同的 ZNode，必然只有一个服务节点能够创建成功，此时可以认为该节点获得了锁。其他没有获得锁的服务节点通过在该 ZNode 上注册监听，从而当锁释放时再去竞争获得锁。锁的释放情况有以下两种：</p>
<p>当正常执行完业务逻辑后，客户端主动将临时 ZNode 删除，此时锁被释放；</p>
<p>当获得锁的客户端发生宕机时，临时 ZNode 会被自动删除，此时认为锁已经释放。</p>
<p>当锁被释放后，其他服务节点则再次去竞争性地进行创建，但每次都只有一个服务节点能够获取到锁，这就是排他锁。</p>
<p>5.5 集群管理</p>
<p>Zookeeper 还能解决大多数分布式系统中的问题：</p>
<p>如可以通过创建临时节点来建立心跳检测机制。如果分布式系统的某个服务节点宕机了，则其持有的会话会超时，此时该临时节点会被删除，相应的监听事件就会被触发。</p>
<p>分布式系统的每个服务节点还可以将自己的节点状态写入临时节点，从而完成状态报告或节点工作进度汇报。</p>
<p>通过数据的订阅和发布功能，Zookeeper 还能对分布式系统进行模块的解耦和任务的调度。</p>
<p>通过监听机制，还能对分布式系统的服务节点进行动态上下线，从而实现服务的动态扩容。</p>
]]></content:encoded>
    </item>
    <item>
      <title>MySQL慢查询</title>
      <link>https://ujava.cn/synthesis/mysqlslow.html</link>
      <guid>https://ujava.cn/synthesis/mysqlslow.html</guid>
      <source url="https://ujava.cn/rss.xml">MySQL慢查询</source>
      <description>简介 MySQL服务器处理查询请求的整个过程： 客户端发送SQL强求给服务器 服务器检查是否可以在查询缓存中命中该SQL 服务器端进行SQL解析，预处理，再由优化器生成对应的执行计划 根据执行计划，调用存储引擎API来查询数据 将结果返回给客户端 查询性能低下最基本的原因是访问的数据太多。 一、如何优化慢查询？ 1，首先开启慢查询日志： long_qu...</description>
      <category>设计综合</category>
      <pubDate>Mon, 15 Apr 2024 11:10:22 GMT</pubDate>
      <content:encoded><![CDATA[<h2>简介</h2>
<p>MySQL服务器处理查询请求的整个过程：</p>
<ul>
<li>客户端发送SQL强求给服务器</li>
<li>服务器检查是否可以在查询缓存中命中该SQL</li>
<li>服务器端进行SQL解析，预处理，再由优化器生成对应的执行计划</li>
<li>根据执行计划，调用存储引擎API来查询数据</li>
<li>将结果返回给客户端<br>
查询性能低下最基本的原因是访问的数据太多。</li>
</ul>
<h2>一、如何优化慢查询？</h2>
<p>1，首先开启慢查询日志：</p>
<ul>
<li>long_query_time（多长时间视为慢查询）</li>
<li>slow_query_log（是否开启了慢查询日志，off表示未开启）</li>
<li>slow_query_log_file（慢查询日志存放的位置）</li>
</ul>
<p>2.慢查询优化思路：<br>
</p>
<figure><figcaption>img_140.png</figcaption></figure>
<figure><figcaption>img_141.png</figcaption></figure>
<figure><figcaption>img_142.png</figcaption></figure>
<p>3，分析慢查询语句，来进行相应的优化</p>
<ul>
<li>①建立索引</li>
<li>②减少表之间的关联</li>
<li>③优化sql，尽量让sql很快定位数据，不要让sql做全表查询，应该走索引，把数据量大的表排在前面</li>
<li>④简化查询字段，没用的字段不要，已经对返回结果的控制，尽量返回少量数据</li>
</ul>
<h2>二、数据库优化的方法：</h2>
<p>1，SQL语句优化：</p>
<ul>
<li>①应该尽量避免在where子句中使用！=或者&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描</li>
<li>②应尽量避免在where子句中对字段进行null值判断，否则将导致引擎放弃使用而进行全表扫描</li>
<li>③很多时候，用exits代替in是一个很好的选择</li>
<li>④用where子句替代having子句，因为having只会在检索出所有记录之后才对结果集进行过滤</li>
</ul>
<p>2，索引优化：</p>
<ul>
<li>①为经常出现在关键字order by，group by，distinct后面的字段，建立索引</li>
<li>②为经常用作where查询选择的字段，建立索引</li>
<li>③在经常用作表连接的属性上建立索引</li>
<li>④更新非常频繁的字段不适合建立索引</li>
</ul>
<p>3，数据库结构优化：</p>
<ul>
<li>①范式优化（如消除冗余，节省空间）</li>
<li>②反范式化优化（适当增加冗余）</li>
<li>③拆分表（不同分区的数据可以指定保存在处于不同磁盘上的数据文件里）</li>
<li>④拆分又分为垂直拆分和水平拆分</li>
</ul>
<p>4，服务器硬件优化（对花钱）</p>
<h2>三、MySQL查询优化（0其实这个概念比较偏小，上一道题的概念比较偏大）：</h2>
<ul>
<li>应该尽量避免全表扫描，首先应考虑哎where及order by涉及的列上建索引</li>
<li>尽量避免在where子句中对字段进行null值判断</li>
<li>尽量避免在where子句中使用or来连接条件</li>
<li>尽量避免在where子句中使用！=或&lt;&gt;操作符</li>
<li>in和not in也要慎用</li>
<li>%aa%应尽量避免</li>
<li>尽量避免在where子句中对字段进行表达式操作</li>
<li>在where子句中使用参数慎用</li>
<li>尽量避免在where子句中进行函数操作</li>
<li>不要在where子句中的“=”左边进行函数算术运算或其他表达式运算</li>
<li>若使用复合索引，则必须使用到该索引中的第一个字段作为条件时才能保证系统使用索引</li>
<li>不要写无意义的查询，select…from…where 0=1</li>
<li>用exists代替in是一个很好的选择</li>
<li>建立索引时要慎重（并不是越多越好）</li>
<li>应尽量避免更新cluster（索引数据列）</li>
<li>尽量使用数字型字段（尽量不要设计为字符型）</li>
<li>尽量使用varchar/nvaechar代替char/nchar，因为变长字段存储空间小</li>
<li>尽量避免select * from t</li>
<li>尽量使用表变量来代替临时表</li>
</ul>
<h2>四、为什么Like以%开头索引会失效 ？</h2>
<p>like失效的原因：</p>
<ul>
<li>%在右：由于B+树的索引顺序，是按照首字母的大小进行排序，%号在右的匹配又是匹配首字母，所以可以在B+树上进行有序的查找，查找首字母符合要求的数据。</li>
<li>%在左：是匹配字符串尾部的数据，我们上面说了排序规则，尾部的字母是没有顺序的，所以不能按照索引顺序查询，就用不到索引。</li>
<li>两个%号：这个查询任意位置的字母满足条件即可，只有首字母是进行索引排序的，其他位置的字母都是相对无序的，所以查找任意位置的字母是用不上索引的。</li>
</ul>
<p>解决%出现在左边索引失效的方法，使用覆盖索引。</p>
<h2>五、select * 为什么禁止使用？</h2>
<p>为了说明这个问题，我们需要建一个表:</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">user_innodb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">` (</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`id`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`name`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> varchar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">255</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">DEFAULT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`gender`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> tinyint</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">DEFAULT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`phone`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> varchar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">DEFAULT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`id`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">),</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>组件Netty</title>
      <link>https://ujava.cn/assembly/netty.html</link>
      <guid>https://ujava.cn/assembly/netty.html</guid>
      <source url="https://ujava.cn/rss.xml">组件Netty</source>
      <description>一、Netty 简介 Netty 是基于 Java NIO 的异步事件驱动的网络应用框架，使用 Netty 可以快速开发网络应用，Netty 提供了高层次的抽象来简化 TCP 和 UDP 服务器的编程，但是你仍然可以使用底层的 API。 Netty 的内部实现是很复杂的，但是 Netty 提供了简单易用的API从网络处理代码中解耦业务逻辑。Netty ...</description>
      <category>设计组件</category>
      <pubDate>Mon, 15 Apr 2024 06:08:01 GMT</pubDate>
      <content:encoded><![CDATA[<h2>一、Netty 简介</h2>
<p>Netty 是基于 Java NIO 的异步事件驱动的网络应用框架，使用 Netty 可以快速开发网络应用，Netty 提供了高层次的抽象来简化 TCP 和 UDP 服务器的编程，但是你仍然可以使用底层的 API。</p>
<p>Netty 的内部实现是很复杂的，但是 Netty 提供了简单易用的API从网络处理代码中解耦业务逻辑。Netty 是完全基于 NIO 实现的，所以整个 Netty 都是异步的。</p>
<p>Netty 是最流行的 NIO 框架，它已经得到成百上千的商业、商用项目验证，许多框架和开源组件的底层 rpc 都是使用的 Netty，如 Dubbo、Elasticsearch 等等。下面是官网给出的一些 Netty 的特性：</p>
<p>设计方面</p>
<ul>
<li>
<p>对各种传输协议提供统一的 API（使用阻塞和非阻塞套接字时候使用的是同一个 API，只是需要设置的参数不一样）。</p>
</li>
<li>
<p>基于一个灵活、可扩展的事件模型来实现关注点清晰分离。</p>
</li>
<li>
<p>高度可定制的线程模型——单线程、一个或多个线程池。</p>
</li>
<li>
<p>真正的无数据报套接字（UDP）的支持（since 3.1）。<br>
易用性</p>
</li>
<li>
<p>完善的 Javadoc 文档和示例代码。</p>
</li>
<li>
<p>不需要额外的依赖，JDK 5 (Netty 3.x) 或者 JDK 6 (Netty 4.x) 已经足够。<br>
性能</p>
</li>
<li>
<p>更好的吞吐量，更低的等待延迟。</p>
</li>
<li>
<p>更少的资源消耗。</p>
</li>
<li>
<p>最小化不必要的内存拷贝。<br>
安全性</p>
</li>
<li>
<p>完整的 SSL/TLS 和 StartTLS 支持</p>
</li>
<li>
<p>对于初学者，上面的特性我们在脑中有个简单了解和印象即可， 下面开始我们的实战部分。</p>
</li>
</ul>
<h2>二、一个简单 Http 服务器</h2>
<p>开始前说明下我这里使用的开发环境是 IDEA+Gradle+Netty4，当然你使用 Eclipse 和 Maven 都是可以的，然后在 Gradle 的 build 文件中添加依赖 compile 'io.netty:netty-all:4.1.26.Final'，这样就可以编写我们的 Netty 程序了，正如在前面介绍 Netty 特性中提到的，Netty 不需要额外的依赖。</p>
<p>第一个示例我们使用 Netty 编写一个 Http 服务器的程序，启动服务我们在浏览器输入网址来访问我们的服务，便会得到服务端的响应。功能很简单，下面我们看看具体怎么做？</p>
<p>首先编写服务启动类</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HttpServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //构造两个线程组</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        EventLoopGroup</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> bossrGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> NioEventLoopGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        EventLoopGroup</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> workerGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> NioEventLoopGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">            //服务端启动辅助类</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">            ServerBootstrap</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> bootstrap</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ServerBootstrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            bootstrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(bossGroup, workerGroup)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">channel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">NioServerSocketChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">childHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HttpServerInitializer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">            ChannelFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> future</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> bootstrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">bind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">8080</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">            //等待服务端口关闭</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">channel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">closeFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">            // 优雅退出，释放线程池资源</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            bossGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">shutdownGracefully</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            workerGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">shutdownGracefully</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在编写 Netty 程序时，一开始都会生成 NioEventLoopGroup 的两个实例，分别是 bossGroup 和 workerGroup，也可以称为 parentGroup 和 childGroup，为什么创建这两个实例，作用是什么？可以这么理解，bossGroup 和 workerGroup 是两个线程池, 它们默认线程数为 CPU 核心数乘以 2，bossGroup 用于接收客户端传过来的请求，接收到请求后将后续操作交由 workerGroup 处理。</p>
<p>接下来我们生成了一个服务启动辅助类的实例 bootstrap，boostrap 用来为 Netty 程序的启动组装配置一些必须要组件，例如上面的创建的两个线程组。channel 方法用于指定服务器端监听套接字通道 NioServerSocketChannel，其内部管理了一个 Java NIO 中的ServerSocketChannel实例。</p>
<p>channelHandler 方法用于设置业务职责链，责任链是我们下面要编写的，责任链具体是什么，它其实就是由一个个的 ChannelHandler 串联而成，形成的链式结构。正是这一个个的 ChannelHandler 帮我们完成了要处理的事情。</p>
<p>接着我们调用了 bootstrap 的 bind 方法将服务绑定到 8080 端口上，bind 方法内部会执行端口绑定等一系列操，使得前面的配置都各就各位各司其职，sync 方法用于阻塞当前 Thread，一直到端口绑定操作完成。接下来一句是应用程序将会阻塞等待直到服务器的 Channel 关闭。</p>
<p>启动类的编写大体就是这样了，下面要编写的就是上面提到的责任链了。如何构建一个链，在 Netty 中很简单，不需要我们做太多，代码如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HttpServerInitializer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ChannelInitializer</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">SocketChannel</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> initChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">SocketChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> sc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        ChannelPipeline</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> sc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //处理http消息的编解码</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"httpServerCodec"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HttpServerCodec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //添加自定义的ChannelHandler</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"httpServerHandler"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HttpServerHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们自定义一个类 HttpServerInitializer 继承 ChannelInitializer 并实现其中的 initChannel方法。</p>
<p>ChannelInitializer 继承 ChannelInboundHandlerAdapter，用于初始化 Channel 的 ChannelPipeline。通过 initChannel 方法参数 sc 得到 ChannelPipeline 的一个实例。</p>
<p>当一个新的连接被接受时， 一个新的 Channel 将被创建，同时它会被自动地分配到它专属的 ChannelPipeline。</p>
<p>ChannelPipeline 提供了 ChannelHandler 链的容器，推荐读者仔细自己看看 ChannelPipeline 的 Javadoc，文章后面也会继续说明 ChannelPipeline 的内容。</p>
<p>Netty 是一个高性能网络通信框架，同时它也是比较底层的框架，想要 Netty 支持 Http（超文本传输协议），必须要给它提供相应的编解码器。</p>
<p>所以我们这里使用 Netty 自带的 Http 编解码组件 HttpServerCodec 对通信数据进行编解码，HttpServerCodec 是 HttpRequestDecoder 和 HttpResponseEncoder 的组合，因为在处理 Http 请求时这两个类是经常使用的，所以 Netty 直接将他们合并在一起更加方便使用。所以对于上面的代码：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"httpServerCodec"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HttpServerCodec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">())</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>我们替换成如下两行也是可以的。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"httpResponseEndcoder"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HttpResponseEncoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"HttpRequestDecoder"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HttpRequestDecoder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 addLast 方法将一个一个的 ChannelHandler 添加到责任链上并给它们取个名称（不取也可以，Netty 会给它个默认名称），这样就形成了链式结构。在请求进来或者响应出去时都会经过链上这些 ChannelHandler 的处理。</p>
<p>最后再向链上加入我们自定义的 ChannelHandler 组件，处理自定义的业务逻辑。下面就是我们自定义的 ChannelHandler。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HttpServerChannelHandler0</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> SimpleChannelInboundHandler</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">HttpObject</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HttpRequest</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> channelRead0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ChannelHandlerContext</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">HttpObject</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (msg </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">instanceof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> HttpRequest) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            request </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (HttpRequest) msg;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">            String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> uri</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">uri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Uri:"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> uri);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (msg </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">instanceof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> HttpContent) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">            HttpContent</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> content</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (HttpContent) msg;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">            ByteBuf</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> buf</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">buf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">netty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">util</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">CharsetUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">UTF_8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">            ByteBuf</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> byteBuf</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Unpooled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">copiedBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"hello world"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">CharsetUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">UTF_8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">            FullHttpResponse</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> DefaultFullHttpResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HttpVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HTTP_1_1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HttpResponseStatus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">OK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, byteBuf);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">headers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HttpHeaderNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">CONTENT_TYPE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"text/plain"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">headers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HttpHeaderNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">CONTENT_LENGTH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">byteBuf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">readableBytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">writeAndFlush</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(response);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此一个简单的 Http 服务器就完成了。首先我们来看看效果怎样，我们运行 HttpServer 中的 main 方法。让后使用 Postman 这个工具来测试下，使用 post 请求方式（也可以 get，但没有请求体），并一个 json 格式数据作为请求体发送给服务端，服务端返回给我们一个hello world字符串。</p>
<figure><figcaption>img.png</figcaption></figure>
<p>服务端控制台打印如下：</p>
<figure><figcaption>img_1.png</figcaption></figure>
<p>对于自定义的 ChannelHandler， 一般会继承 Netty 提供的SimpleChannelInboundHandler类，并且对于 Http 请求我们可以给它设置泛型参数为 HttpOjbect 类，然后覆写 channelRead0 方法，在 channelRead0 方法中编写我们的业务逻辑代码，此方法会在接收到服务器数据后被系统调用。</p>
<p>Netty 的设计中把 Http 请求分为了 HttpRequest 和 HttpContent 两个部分，HttpRequest 主要包含请求头、请求方法等信息，HttpContent 主要包含请求体的信息。</p>
<p>所以上面的代码我们分两块来处理。在 HttpContent 部分，首先输出客户端传过来的字符，然后通过 Unpooled 提供的静态辅助方法来创建未池化的 ByteBuf 实例， Java NIO 提供了 ByteBuffer 作为它的字节容器，Netty 的 ByteBuffer 替代品是 ByteBuf。</p>
<p>接着构建一个 FullHttpResponse 的实例，并为它设置一些响应参数，最后通过 writeAndFlush 方法将它写回给客户端。</p>
<p>上面这样获取请求和消息体则相当不方便，Netty 又提供了另一个类 FullHttpRequest，FullHttpRequest 包含请求的所有信息，它是一个接口，直接或者间接继承了 HttpRequest 和 HttpContent，它的实现类是 DefalutFullHttpRequest。</p>
<p>因此我们可以修改自定义的 ChannelHandler 如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HttpServerChannelHandler</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> SimpleChannelInboundHandler</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">FullHttpRequest</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> channelRead0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ChannelHandlerContext</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">FullHttpRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">channel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">remoteAddress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        FullHttpRequest</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> msg;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"请求方法名称:"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"uri:"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">uri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        ByteBuf</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> buf</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">buf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">CharsetUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">UTF_8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        ByteBuf</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> byteBuf</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Unpooled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">copiedBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"hello world"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">CharsetUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">UTF_8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        FullHttpResponse</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> DefaultFullHttpResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HttpVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HTTP_1_1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HttpResponseStatus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">OK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, byteBuf);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">headers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HttpHeaderNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">CONTENT_TYPE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"text/plain"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">headers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HttpHeaderNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">CONTENT_LENGTH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">byteBuf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">readableBytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">writeAndFlush</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(response);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样修改就可以了吗，如果你去启动程序运行看看，是会抛异常的。前面说过 Netty 是一个很底层的框架，对于将请求合并为一个 FullRequest 是需要代码实现的，然而这里我们并不需要我们自己动手去实现，Netty 为我们提供了一个 HttpObjectAggregator 类，这个 ChannelHandler作用就是将请求转换为单一的 FullHttpReques。</p>
<p>所以在我们的 ChannelPipeline 中添加一个 HttpObjectAggregator 的实例即可。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HttpServerInitializer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ChannelInitializer</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">SocketChannel</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> initChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">SocketChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> sc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        ChannelPipeline</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> sc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //处理http消息的编解码</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"httpServerCodec"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HttpServerCodec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"aggregator"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HttpObjectAggregator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">65536</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //添加自定义的ChannelHandler</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"httpServerHandler"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HttpServerChannelHandler0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动程序运行，一切都顺畅了，好了，这个简单 Http 的例子就 OK 了。</p>
<h2>三、编写 Netty 客户端</h2>
<p>上面的两个示例中我们都是以 Netty 做为服务端，接下来看看如何编写 Netty 客户端，以第一个 Http 服务的例子为基础，编写一个访问 Http 服务的客户端。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HttpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">   public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">       String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> host</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "127.0.0.1"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">       int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> port</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 8080</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">       EventLoopGroup</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> group</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> NioEventLoopGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">       try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">           Bootstrap</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Bootstrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">           b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(group)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">           .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">channel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">NioSocketChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">           .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">handler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ChannelInitializer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">SocketChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">               @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">               public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> initChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">SocketChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> ch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">                   ChannelPipeline</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> ch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                   pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HttpClientCodec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                   pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HttpObjectAggregator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">65536</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                   pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> HttpClientHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">               }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">           });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">           // 启动客户端.</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">           ChannelFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> f</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(host, port).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">           f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">channel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">closeFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">       } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">           group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">shutdownGracefully</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">       }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">   }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端启动类编写基本和服务端类似，在客户端我们只用到了一个线程池，服务端使用了两个，因为服务端要处理 n 条连接，而客户端相对来说只处理一条，因此一个线程池足以。</p>
<p>然后服务端启动辅助类使用的是 ServerBootstrap，而客户端换成了 Bootstrap。通过 Bootstrap 组织一些必要的组件，为了方便，在 handler 方法中我们使用匿名内部类的方式来构建 ChannelPipeline 链容器。最后通过 connect 方法连接服务端。</p>
<p>接着编写 HttpClientHandler 类。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HttpClientHandler</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> SimpleChannelInboundHandler</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">FullHttpResponse</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> channelActive</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ChannelHandlerContext</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        URI</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> uri</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> URI</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"http://127.0.0.1:8080"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> msg</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "Are you ok?"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        FullHttpRequest</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> DefaultFullHttpRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HttpVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HTTP_1_1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HttpMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">GET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                uri</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toASCIIString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(), </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Unpooled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">wrappedBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getBytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"UTF-8"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 构建http请求</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//        request.headers().set(HttpHeaderNames.HOST, "127.0.0.1");</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//        request.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">headers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HttpHeaderNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">CONTENT_LENGTH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">readableBytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 发送http请求</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">channel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">writeAndFlush</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(request);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> channelRead0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ChannelHandlerContext</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">FullHttpResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> msg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        FullHttpResponse</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> msg;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">headers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HttpHeaderNames</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">CONTENT_TYPE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        ByteBuf</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> buf</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">buf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">io</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">netty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">util</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">CharsetUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">UTF_8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 HttpClientHandler 类中，我们覆写了 channelActive 方法，当连接建立时，此方法会被调用，我们在方法中构建了一个 FullHttpRequest 对象，并且通过 writeAndFlush 方法将请求发送出去。</p>
<p>channelRead0 方法用于处理服务端返回给我们的响应，打印服务端返回给客户端的信息。至此，Netty 客户端的编写就完成了，我们先开启服务端，然后开启客户端就可以看到效果了。</p>
<p>希望通过前面介绍的几个例子能让大家基本知道如何编写 Netty 客户端和服务端，下面我们来说说 Netty 程序为什么是这样编写的，这也是 Netty 中最为重要的一部分知识，可以让你在编写 netty 程序时做到心中有数。</p>
<h2>四、Channel、ChannelPipeline、ChannelHandler、ChannelHandlerContext 之间的关系</h2>
<p>在编写 Netty 程序时，经常跟我们打交道的是上面这几个对象，这也是 Netty 中几个重要的对象，下面我们来看看它们之间有什么样的关系。</p>
<p>Netty 中的 Channel 是框架自己定义的一个通道接口，Netty 实现的客户端 NIO 套接字通道是 NioSocketChannel，提供的服务器端 NIO 套接字通道是 NioServerSocketChannel。</p>
<p>当服务端和客户端建立一个新的连接时， 一个新的 Channel 将被创建，同时它会被自动地分配到它专属的 ChannelPipeline。</p>
<p>ChannelPipeline 是一个拦截流经 Channel 的入站和出站事件的 ChannelHandler 实例链，并定义了用于在该链上传播入站和出站事件流的 API。那么就很容易看出这些 ChannelHandler 之间的交互是组成一个应用程序数据和事件处理逻辑的核心。</p>
<figure><figcaption>img_2.png</figcaption></figure>
<p>上图描述了 IO 事件如何被一个 ChannelPipeline 的 ChannelHandler 处理的。</p>
<p>ChannelHandler分为 ChannelInBoundHandler 和 ChannelOutboundHandler 两种，如果一个入站 IO 事件被触发，这个事件会从第一个开始依次通过 ChannelPipeline中的 ChannelInBoundHandler，先添加的先执行。</p>
<p>若是一个出站 I/O 事件，则会从最后一个开始依次通过 ChannelPipeline 中的 ChannelOutboundHandler，后添加的先执行，然后通过调用在 ChannelHandlerContext 中定义的事件传播方法传递给最近的 ChannelHandler。</p>
<p>在 ChannelPipeline 传播事件时，它会测试 ChannelPipeline 中的下一个 ChannelHandler 的类型是否和事件的运动方向相匹配。</p>
<p>如果某个ChannelHandler不能处理则会跳过，并将事件传递到下一个ChannelHandler，直到它找到和该事件所期望的方向相匹配的为止。</p>
<p>假设我们创建下面这样一个 pipeline：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ChannelPipeline</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> p </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ...;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"1"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> InboundHandlerA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"2"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> InboundHandlerB</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"3"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> OutboundHandlerA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"4"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> OutboundHandlerB</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"5"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> InboundOutboundHandlerX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面示例代码中，inbound 开头的 handler 意味着它是一个ChannelInBoundHandler。outbound 开头的 handler 意味着它是一个 ChannelOutboundHandler。</p>
<p>当一个事件进入 inbound 时 handler 的顺序是 1，2，3，4，5；当一个事件进入 outbound 时，handler 的顺序是 5，4，3，2，1。在这个最高准则下，ChannelPipeline 跳过特定 ChannelHandler 的处理：</p>
<ul>
<li>3，4 没有实现 ChannelInboundHandler，因而一个 inbound 事件的处理顺序是 1，2，5。</li>
<li>1，2 没有实现 ChannelOutBoundhandler，因而一个 outbound 事件的处理顺序是 5，4，3。</li>
<li>5 同时实现了 ChannelInboundHandler 和 channelOutBoundHandler，所以它同时可以处理 inbound 和 outbound 事件。<br>
ChannelHandler 可以通过添加、删除或者替换其他的 ChannelHandler 来实时地修改 ChannelPipeline 的布局。</li>
</ul>
<p>（它也可以将它自己从 ChannelPipeline 中移除。）这是 ChannelHandler 最重要的能力之一。</p>
<p>ChannelHandlerContext 代表了 ChannelHandler 和 ChannelPipeline 之间的关联，每当有 ChannelHandler 添加到 ChannelPipeline 中时，都会创建 ChannelHandlerContext。</p>
<p>ChannelHandlerContext 的主要功能是管理它所关联的 ChannelHandler 和在同一个 ChannelPipeline 中的其他 ChannelHandler 之间的交互。事件从一个 ChannelHandler 到下一个 ChannelHandler 的移动是由 ChannelHandlerContext 上的调用完成的。</p>
<figure><figcaption>img_3.png</figcaption></figure>
<p>但是有些时候不希望总是从 ChannelPipeline 的第一个 ChannelHandler 开始事件，我们希望从一个特定的 ChannelHandler 开始处理。</p>
<p>你必须引用于此 ChannelHandler 的前一个 ChannelHandler 关联的 ChannelHandlerContext，利用它调用与自身关联的 ChannelHandler 的下一个 ChannelHandler。</p>
<p>如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ChannelHandlerContext</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> ctx </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ...;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">   // 获得 ChannelHandlerContext引用</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// write()将会把缓冲区发送到下一个ChannelHandler  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Unpooled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">copiedBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Netty in Action"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">CharsetUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">UTF_8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">//流经整个pipeline</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">channel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Unpooled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">copiedBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Netty in Action"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">CharsetUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">UTF_8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想有一些事件流全部通过 ChannelPipeline，有两个不同的方法可以做到：</p>
<ul>
<li>
<p>调用 Channel 的方法</p>
</li>
<li>
<p>调用 ChannelPipeline 的方法</p>
</li>
<li>
<p>这两个方法都可以让事件流全部通过 ChannelPipeline，无论从头部还是尾部开始，因为它主要依赖于事件的性质。如果是一个 “ 入站 ” 事件，它开始于头部；若是一个 “ 出站 ” 事件，则开始于尾部。<br>
那为什么你可能会需要在 ChannelPipeline 某个特定的位置开始传递事件呢？</p>
</li>
<li>
<p>减少因为让事件穿过那些对它不感兴趣的 ChannelHandler 而带来的开销</p>
</li>
<li>
<p>避免事件被那些可能对它感兴趣的 ChannlHandler 处理</p>
</li>
</ul>
<h2>五、Netty 线程模型</h2>
<p>在前面的示例中我们程序一开始都会生成两个 NioEventLoopGroup 的实例，为什么需要这两个实例呢？这两个实例可以说是 Netty 程序的源头，其背后是由 Netty 线程模型决定的。</p>
<p>Netty 线程模型是典型的 Reactor 模型结构，其中常用的 Reactor 线程模型有三种，分别为：Reactor 单线程模型、Reactor 多线程模型和主从 Reactor 多线程模型。</p>
<p>而在 Netty 的线程模型并非固定不变，通过在启动辅助类中创建不同的 EventLoopGroup 实例并通过适当的参数配置，就可以支持上述三种 Reactor 线程模型。</p>
<p>Reactor 线程模型</p>
<h3>Reactor 单线程模型</h3>
<p>Reactor 单线程模型指的是所有的 IO 操作都在同一个 NIO 线程上面完成。作为 NIO 服务端接收客户端的 TCP 连接，作为 NIO 客户端向服务端发起 TCP 连接，读取通信对端的请求或向通信对端发送消息请求或者应答消息。</p>
<p>由于 Reactor 模式使用的是异步非阻塞 IO，所有的 IO 操作都不会导致阻塞，理论上一个线程可以独立处理所有 IO 相关的操作。</p>
<figure><figcaption>img_4.png</figcaption></figure>
<p>Netty 使用单线程模型的的方式如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">EventLoopGroup</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> bossGroup </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> NioEventLoopGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ServerBootstrap</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ServerBootstrap</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(bossGroup)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">channel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">NioServerSocketChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实例化 NioEventLoopGroup 时，构造器参数是 1，表示 NioEventLoopGroup 的线程池大小是 1。然后接着我们调用 b.group(bossGroup) 设置了服务器端的 EventLoopGroup，因此 bossGroup和 workerGroup 就是同一个 NioEventLoopGroup 了。</p>
<h3>Reactor 多线程模型</h3>
<p>对于一些小容量应用场景，可以使用单线程模型，但是对于高负载、大并发的应用却不合适，需要对该模型进行改进，演进为 Reactor 多线程模型。</p>
<p>Rector 多线程模型与单线程模型最大的区别就是有一组 NIO 线程处理 IO 操作。</p>
<p>在该模型中有专门一个 NIO 线程 -Acceptor 线程用于监听服务端，接收客户端的 TCP 连接请求；而 1 个 NIO 线程可以同时处理N条链路，但是 1 个链路只对应 1 个 NIO 线程，防止发生并发操作问题。</p>
<p>网络 IO 操作-读、写等由一个 NIO 线程池负责，线程池可以采用标准的 JDK 线程池实现，它包含一个任务队列和 N 个可用的线程，由这些 NIO 线程负责消息的读取、解码、编码和发送。</p>
<figure><figcaption>img_5.png</figcaption></figure>
<p>Netty 中实现多线程模型的方式如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">EventLoopGroup</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> bossGroup </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> NioEventLoopGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">EventLoopGroup</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> workerGroup </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> NioEventLoopGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ServerBootstrap</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ServerBootstrap</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(bossGroup, workerGroup)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">channel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">NioServerSocketChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bossGroup 中只有一个线程，而 workerGroup 中的线程是 CPU 核心数乘以 2，那么就对应 Recator 的多线程模型。</p>
<h3>主从 Reactor 多线程模型</h3>
<p>在并发极高的情况单独一个 Acceptor 线程可能会存在性能不足问题，为了解决性能问题，产生主从 Reactor 多线程模型。</p>
<p>主从 Reactor 线程模型的特点是：服务端用于接收客户端连接的不再是 1 个单独的 NIO 线程，而是一个独立的 NIO 线程池。</p>
<p>Acceptor 接收到客户端 TCP 连接请求处理完成后，将新创建的 SocketChannel 注册到 IO 线程池（sub reactor 线程池）的某个 IO 线程上，由它负责 SocketChannel 的读写和编解码工作。</p>
<p>Acceptor 线程池仅仅只用于客户端的登陆、握手和安全认证，一旦链路建立成功，就将链路注册到后端 subReactor 线程池的 IO 线程上，由 IO 线程负责后续的 IO 操作。</p>
<figure><figcaption>img_6.png</figcaption></figure>
<p>根据前面所讲的两个线程模型，很容想到 Netty 实现多线程的方式如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">EventLoopGroup</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> bossGroup </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> NioEventLoopGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">EventLoopGroup</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> workerGroup </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> NioEventLoopGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ServerBootstrap</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ServerBootstrap</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(bossGroup, workerGroup)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">channel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">NioServerSocketChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，在 Netty 的服务器端的 acceptor 阶段，没有使用到多线程, 因此上面的主从多线程模型在 Netty 的实现是有误的。</p>
<p>服务器端的 ServerSocketChannel 只绑定到了 bossGroup 中的一个线程，因此在调用 Java NIO 的 Selector.select 处理客户端的连接请求时，实际上是在一个线程中的，所以对只有一个服务的应用来说，bossGroup 设置多个线程是没有什么作用的，反而还会造成资源浪费。</p>
<p>至于 Netty 中的 bossGroup 为什么使用线程池，我在 stackoverflow 找到一个对于此问题的讨论 。</p>
<p>the creator of Netty says multiple boss threads are useful if we share NioEventLoopGroup between different server bootstraps</p>
<p>EventLoopGroup 和 EventLoop</p>
<p>当系统在运行过程中，如果频繁的进行线程上下文切换，会带来额外的性能损耗。多线程并发执行某个业务流程，业务开发者还需要时刻对线程安全保持警惕，哪些数据可能会被并发修改，如何保护？这不仅降低了开发效率，也会带来额外的性能损耗。</p>
<p>为了解决上述问题，Netty采用了串行化设计理念，从消息的读取、编码以及后续 ChannelHandler 的执行，始终都由 IO 线程 EventLoop 负责，这就意外着整个流程不会进行线程上下文的切换，数据也不会面临被并发修改的风险。</p>
<p>EventLoopGroup 是一组 EventLoop 的抽象，一个 EventLoopGroup 当中会包含一个或多个 EventLoop，EventLoopGroup 提供 next 接口，可以从一组 EventLoop 里面按照一定规则获取其中一个 EventLoop 来处理任务。</p>
<p>在 Netty 服务器端编程中我们需要 BossEventLoopGroup 和 WorkerEventLoopGroup 两个 EventLoopGroup 来进行工作。</p>
<p>BossEventLoopGroup 通常是一个单线程的 EventLoop，EventLoop 维护着一个注册了 ServerSocketChannel 的 Selector 实例，EventLoop 的实现涵盖 IO 事件的分离，和分发（Dispatcher），EventLoop 的实现充当 Reactor 模式中的分发（Dispatcher）的角色。</p>
<p>所以通常可以将 BossEventLoopGroup 的线程数参数为 1。</p>
<p>BossEventLoop 只负责处理连接，故开销非常小，连接到来，马上按照策略将 SocketChannel 转发给 WorkerEventLoopGroup，WorkerEventLoopGroup 会由 next 选择其中一个 EventLoop 来将这 个SocketChannel 注册到其维护的 Selector 并对其后续的 IO 事件进行处理。</p>
<p>ChannelPipeline 中的每一个 ChannelHandler 都是通过它的 EventLoop（I/O 线程）来处理传递给它的事件的。所以至关重要的是不要阻塞这个线程，因为这会对整体的 I/O 处理产生严重的负面影响。但有时可能需要与那些使用阻塞 API 的遗留代码进行交互。</p>
<p>对于这种情况， ChannelPipeline 有一些接受一个 EventExecutorGroup 的 add() 方法。如果一个事件被传递给一个自定义的 EventExecutorGroup， DefaultEventExecutorGroup 的默认实现。</p>
<p>就是在把 ChannelHanders 添加到 ChannelPipeline 的时候，指定一个 EventExecutorGroup，ChannelHandler 中所有的方法都将会在这个指定的 EventExecutorGroup 中运行。</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> EventExecutor</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> group </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> DefaultEventExecutorGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">16</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">...</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">ChannelPipeline</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> p </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> ch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">pipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addLast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(group, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"handler"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> MyChannelHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>NioEventLoopGroup 实际上就是个线程池，一个 EventLoopGroup 包含一个或者多个 EventLoop；</li>
<li>一个 EventLoop 在它的生命周期内只和一个 Thread 绑定；</li>
<li>所有有 EnventLoop 处理的 I/O 事件都将在它专有的 Thread 上被处理；</li>
<li>一个 Channel 在它的生命周期内只注册于一个 EventLoop；</li>
<li>每一个 EventLoop 负责处理一个或多个 Channel；</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>算法试题</title>
      <link>https://ujava.cn/algorithm/program.html</link>
      <guid>https://ujava.cn/algorithm/program.html</guid>
      <source url="https://ujava.cn/rss.xml">算法试题</source>
      <description>算法题</description>
      <category>设计算法</category>
      <pubDate>Mon, 15 Apr 2024 04:22:41 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<blockquote>
<blockquote>
<p><a href="https://javainterview.cn/categories/?category=algorithm" target="_blank" rel="noopener noreferrer">算法题</a></p>
</blockquote>
</blockquote>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>服务器高并发之提高TCP连接数</title>
      <link>https://ujava.cn/synthesis/tcpcount.html</link>
      <guid>https://ujava.cn/synthesis/tcpcount.html</guid>
      <source url="https://ujava.cn/rss.xml">服务器高并发之提高TCP连接数</source>
      <description>前言 测试服务器系统：ubuntu server 20.04.3 nginx负载均衡服务器：centos 7 服务器上我放了一个web系统用来测试连接数：开源的支持高并发的服务器 发出请求的是我的电脑，电脑系统：win7 发出请求用的是python的压测工具：locust TCP连接能连接多少 要想弄清楚一个服务器能接受多少连接数，就需要根据socke...</description>
      <category>设计高频</category>
      <pubDate>Mon, 15 Apr 2024 02:55:40 GMT</pubDate>
      <content:encoded><![CDATA[<h2>前言</h2>
<ul>
<li>测试服务器系统：ubuntu server 20.04.3</li>
<li>nginx负载均衡服务器：centos 7</li>
<li>服务器上我放了一个web系统用来测试连接数：<a href="https://github.com/yedf/handy" target="_blank" rel="noopener noreferrer">开源的支持高并发的服务器</a></li>
<li>发出请求的是我的电脑，电脑系统：win7</li>
<li>发出请求用的是python的压测工具：locust</li>
</ul>
<h2>TCP连接能连接多少</h2>
<p>要想弄清楚一个服务器能接受多少连接数，就需要根据socket五元组来看，即源IP+源端口+目标IP+目标端口+类型（TCP/UDP）。只要五元组不重复，就可以新增tcp连接。不过由于测试的时候一般类型都是相同的，所有大多数都是称为四元组。<br>
由于服务器的IP和web系统的端口一般是固定的，每个客户端的IP又不相同，那么照这样看连接数应该基本上相当于没限制才对。其实不然，实际上每个连接还要占用一定的内存和一个文件描述符。</p>
<p><strong>那么一个TCP socket占用多少内存呢？</strong><br>
大约是3K多，当然如果有发送或者接收的缓存区文件存在则另算，在响应较快、缓存文件不大的情况下内存应该不会成为瓶颈。</p>
<p><strong>服务器又能打开多少文件描述符呢？</strong><br>
可以通过以下命令查看<br>
系统级：当前系统可打开的最大数量，通过&nbsp;<code>cat /proc/sys/fs/file-max</code>&nbsp;查看<br>
用户级：指定用户可打开的最大数量，通过&nbsp;<code>cat /etc/security/limits.conf</code>&nbsp;查看<br>
进程级：单个进程可打开的最大数量，通过&nbsp;<code>cat /proc/sys/fs/nr_open</code>&nbsp;查看</p>
<p>修改方式<br>
修改单个进程可打开的最大文件描述符为10000，即可打开10000个连接：<code>echo 10000 &gt; /proc/sys/fs/nr_open</code><br>
用户级修改：</p>
<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> vi</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> /etc/security/limits.conf</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> soft</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> nofile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 65533</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">root</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> hard</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> nofile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 65533</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"># root为指定修改的用户，soft为软限制，hard为硬限制，一般软限制要小于或等于硬限制</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，每创建一个tcp连接，还需要消耗一个线程来处理（也可以采用IO多路复用的方式，一个线程管理多个TCP连接），所以和CPU也有关系，不能通过单纯的提高内存的方式来增加连接数。<br>
常用查看连接数命令：<br>
<code>netstat -nat | grep -i "8085" | wc -l # 查询指定端口的连接数</code><br>
<code>netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}' # 查看TCP连接数及状态命令</code></p>
<h2>实际测试</h2>
<p>此时是使用我的电脑向nginx负载均衡服务器发送请求，然后转发给web服务器。</p>
<h3>测试1 未调整的情况下测试</h3>
<p><strong>客户端情况：</strong><br>
初始：可用端口55000个，性能够用<br>
结果：本地性能未达瓶颈，但是设置的1000并发人数，请求数平均只有437.3。<br>
</p>
<p><strong>nginx服务器情况：</strong><br>
初始：可用端口60000个，用户级65535，性能够用<br>
结果：本地性能未达瓶颈，但是出现很多TIME_WAIT数，最高时8000多。<br>
</p>
<p><strong>服务器情况：</strong><br>
初始：用户级65535。<br>
结果：最高连接数23，平均2.<br>
</p>
<h3>测试1分析</h3>
<p>先分析一下TIME_WAIT、CLOSE_WAIT出现的原因及解决方法<br>
分析这里，就必须要简短回顾一下四次挥手（当client发起结束请求时）<br>
<br>
简短来说：<br>
1、一端没有close，那么另一端将有大量的close_wait状态；<br>
2、主动close的一端，在量特别大的情况下将造成大量的time_wait状态（由于Linux中一般默认的2msl为60s，那么正常情况下每秒1000的请求会造成60*1000=60000个time_wait记录，几百几千问题不大）</p>
<p>既然主动close的一方才会有time_wait记录，那么这里就说明nginx服务器是主动关闭的一方，那nginx服务器关闭的对象又是谁呢？<br>
在仅修改了nginx的代理地址，未改变其他配置情况下，通过wireshark抓包得知：</p>
<ul>
<li>客户端与nginx端相互通信都是http/1.1的链接，这里是nginx端先发起的fin请求；</li>
<li>nginx端到服务器端的请求是http/1.0，服务器端返回的请求是http/1.1，这里是nginx端先发起的fin请求。</li>
</ul>
<h3>测试1优化</h3>
<p>依上面的场景分析，如果要减少time_wait数，提高连接数，则需要从以下方面来解决</p>
<ol>
<li>调整负载均衡服务器和web服务器/etc/sysctl.conf下的net.ipv4.ip_local_port_range配置，修改成&nbsp;<code>net.ipv4.ip_local_port_range=1024 65535</code>，保证至少可以使用6万个随机端口，就算保留1分钟，也能支持每秒1000的并发；</li>
<li>加多负载均衡服务器的ip，直接翻番；</li>
<li>负载均衡与服务器端也建立长连接，不关闭就不会有等待；</li>
<li>扩大nginx的keep-alive超时时间，最大请求数，使得长连接不会这么早关闭；</li>
<li>在nginx服务器上调整time_wait参数net.ipv4.tcp_tw_reuse=1，尽可能去复用连接（另外net.ipv4.tcp_tw_recycle参数在4.10以上内核中被移除了）。</li>
</ol>
<p>另外还有一些参数可以调整，不过一般默认是够用的</p>
<div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">net.ipv4.tcp_syncookies = 1</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> #　表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭；</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">net.ipv4.tcp_keepalive_time = 1200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">　#</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为20分钟。</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">net.ipv4.tcp_max_syn_backlog = 8192</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">　#</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">表示SYN队列的长度，默认为1024，加大队列长度为8192，可以容纳更多等待连接的网络连接数。</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">net.ipv4.tcp_max_tw_buckets = 5000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">　#</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">表示系统同时保持TIME_WAIT套接字的最大数量，如果超过这个数字，TIME_WAIT套接字将立刻被清除并打印警告信息。</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">＃默认为180000，改为5000。对于Apache、Nginx等服务器，上几行的参数可以很好地减少TIME_WAIT套接字数量，。</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>待优化测试验证</p>
]]></content:encoded>
    </item>
    <item>
      <title>高并发场景下如何优化微服务的性能</title>
      <link>https://ujava.cn/synthesis/performance.html</link>
      <guid>https://ujava.cn/synthesis/performance.html</guid>
      <source url="https://ujava.cn/rss.xml">高并发场景下如何优化微服务的性能</source>
      <description>1.背景介绍 随着互联网和大数据时代的到来，数据量的增长和计算需求的提高对传统计算方法的压力日益大。微服务架构在分布式系统中发挥着越来越重要的作用，它将单个应用程序拆分成多个小服务，每个服务运行在自己的进程中，通过网络间通信进行数据交换。然而，微服务架构中的计算性能是一个关键问题，需要进行重构来提高性能。 在这篇文章中，我们将探讨如何在微服务架构中实现...</description>
      <category>设计高频</category>
      <pubDate>Mon, 15 Apr 2024 02:24:32 GMT</pubDate>
      <content:encoded><![CDATA[<h2>1.背景介绍</h2>
<p>随着互联网和大数据时代的到来，数据量的增长和计算需求的提高对传统计算方法的压力日益大。微服务架构在分布式系统中发挥着越来越重要的作用，它将单个应用程序拆分成多个小服务，每个服务运行在自己的进程中，通过网络间通信进行数据交换。然而，微服务架构中的计算性能是一个关键问题，需要进行重构来提高性能。</p>
<p>在这篇文章中，我们将探讨如何在微服务架构中实现高性能的重构计算方法。我们将从背景介绍、核心概念与联系、核心算法原理和具体操作步骤以及数学模型公式详细讲解，到具体代码实例和详细解释说明，再到未来发展趋势与挑战，最后附录常见问题与解答。</p>
<h2>2.核心概念与联系</h2>
<p>在微服务架构中，计算性能的重构主要包括以下几个方面：</p>
<p>分布式计算：将计算任务分散到多个节点上，通过网络间通信实现数据交换和任务协同。<br>
并发处理：利用多核处理器和多线程技术，实现并发处理，提高计算效率。<br>
数据分区：将数据划分为多个部分，每个服务只处理自己的数据，减少通信开销。<br>
负载均衡：将计算任务分配到多个节点上，实现资源共享和负载均衡。<br>
这些概念和技术在微服务架构中相互联系，共同实现高性能计算。</p>
<h2>3.核心算法原理和具体操作步骤以及数学模型公式详细讲解</h2>
<p>在微服务架构中，重构计算的核心算法原理包括以下几个方面：</p>
<h1>分布式计算：使用MapReduce算法实现分布式计算，将大型数据集划分为多个子任务，每个子任务在多个节点上并行执行，最后通过reduce阶段将结果聚合到一个最终结果中。<br>
MapReduce=(Map,Shuffle,Reduce)<br>
MapReduce</h1>
<h1>(<br>
Map<br>
,<br>
Shuffle<br>
,<br>
Reduce<br>
)<br>
并发处理：使用线程池技术实现并发处理，将任务分配到多个线程中执行，提高计算效率。<br>
线程池=(核心线程数,最大线程数,工作队列)<br>
线程池</h1>
<h1>(<br>
核心线程数<br>
,<br>
最大线程数<br>
,<br>
工作队列<br>
)<br>
数据分区：使用哈希分区算法实现数据分区，将数据按照某个关键字划分为多个部分，每个服务只处理自己的数据。<br>
哈希分区=(关键字,哈希函数,分区数)<br>
哈希分区</h1>
<h1>(<br>
关键字<br>
,<br>
哈希函数<br>
,<br>
分区数<br>
)<br>
负载均衡：使用Consistent Hashing算法实现负载均衡，将计算任务分配到多个节点上，实现资源共享和负载均衡。<br>
一致性哈希=(虚拟节点,哈希函数,节点集)<br>
一致性哈希</h1>
<p>(<br>
虚拟节点<br>
,<br>
哈希函数<br>
,<br>
节点集<br>
)</p>
<h2>4.具体代码实例和详细解释说明</h2>
<p>在这里，我们以一个简单的Word Count示例来展示如何在微服务架构中实现高性能计算。</p>
<p>使用MapReduce算法实现分布式计算：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">python </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> multiprocessing import </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">Pool</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">def mapper(word): </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (word, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">def reducer(word, counts): </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (word, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(counts))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> ==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "main"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">pool</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> Pool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ["hello world", "hello python", "python is fun"]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> results </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> pool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(mapper, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) finalresults </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> pool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(reducer, results) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(finalresults)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用线程池技术实现并发处理：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">python </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> concurrent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">futures</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> import ThreadPoolExecutor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">def process_word(word): </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (word, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> ==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "main"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ThreadPoolExecutor(maxworkers</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> executor: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ["hello world", "hello python", "python is fun"]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> results </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> list(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">executor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(processword, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(results)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用哈希分区算法实现数据分区：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">python import hashlib</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">def hashpartition(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, numpartitions): partitionsize </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) // numpartitions partitions </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> [data[i:i + partitionsize]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">in</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">), partitionsize)] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> partitions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> ==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "main"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ["hello world", "hello python", "python is fun"]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> numpartitions </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> partitions </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> hashpartition(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, num_partitions) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(partitions)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用一致性哈希算法实现负载均衡：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">python import hashlib</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">class ConsistentHashing: def </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, nodes, replicas</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">): </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">nodes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> nodes </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">replicas</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> replicas </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">virtualnodes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">() </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">hashfunction</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> hashlib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">sha256</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">def add_node(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, node):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">in</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">replicas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">virtual_nodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">hash_function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(node).hexdigest())</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">def remove_node(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, node):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">in</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">replicas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">virtual_nodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">remove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">hash_function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(node).hexdigest())</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">def get_node(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    key_hash </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">hash_function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).hexdigest()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> node </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> sorted(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">virtual_nodes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> node </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> key_hash:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> node</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">virtual_nodes</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">[0]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> ==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "main"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: nodes </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> ["node1", "node2", "node3"]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ch </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> ConsistentHashing(nodes) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">addnode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"node4"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">getnode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">removenode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"node4"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">getnode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">))</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>5.未来发展趋势与挑战</h2>
<p>随着大数据和人工智能的发展，微服务架构在计算性能方面面临着越来越大的挑战。未来的发展趋势包括：</p>
<ul>
<li>
<p>更高性能的分布式计算：通过优化算法和数据结构，提高分布式计算的性能。</p>
</li>
<li>
<p>更智能的负载均衡：通过学习算法和自适应机制，实现更智能的负载均衡。</p>
</li>
<li>
<p>更高效的数据存储和处理：通过新的存储技术和处理方法，提高数据存储和处理的效率。<br>
挑战包括：</p>
</li>
<li>
<p>系统复杂性：微服务架构的系统复杂性增加，导致开发、测试和维护的难度增加。</p>
</li>
<li>
<p>数据一致性：在分布式计算中，保证数据的一致性变得越来越难以实现。</p>
</li>
<li>
<p>安全性和隐私：在大数据时代，数据安全性和隐私保护成为关键问题。</p>
</li>
</ul>
<h2>6.附录常见问题与解答</h2>
<p>Q: 微服务架构与传统架构有什么区别？</p>
<p>A: 微服务架构将单个应用程序拆分成多个小服务，每个服务运行在自己的进程中，通过网络间通信进行数据交换。而传统架构通常是基于大型应用程序和单个进程结构的。</p>
<p>Q: 如何选择合适的算法和数据结构？</p>
<p>A: 在选择算法和数据结构时，需要考虑问题的特点，如问题规模、时间复杂度、空间复杂度等。同时，也需要考虑算法和数据结构的实现难度和性能。</p>
<p>Q: 如何保证微服务架构的高性能？</p>
<p>A: 要保证微服务架构的高性能，需要关注分布式计算、并发处理、数据分区和负载均衡等方面。同时，还需要关注系统的设计和优化，如选择合适的算法和数据结构、减少通信开销、提高系统可扩展性等。</p>
<p>Q: 如何处理微服务架构中的数据一致性问题？</p>
<p>A: 在微服务架构中，数据一致性问题可以通过使用分布式事务、版本控制和幂等性等方法来解决。同时，还可以通过设计合理的系统架构和算法来减少数据一致性问题的影响。</p>
<p>Q: 如何保证微服务架构的安全性和隐私？</p>
<p>A: 保证微服务架构的安全性和隐私需要关注多方面，如身份验证、授权、加密、审计等。同时，还需要关注数据存储和处理的安全性，如使用安全的存储技术和处理方法。</p>
]]></content:encoded>
    </item>
    <item>
      <title>微服务拆分原则</title>
      <link>https://ujava.cn/synthesis/split.html</link>
      <guid>https://ujava.cn/synthesis/split.html</guid>
      <source url="https://ujava.cn/rss.xml">微服务拆分原则</source>
      <description>简介 微服务架构是将一个单体应用程序拆分为一个个独立且保持松耦合的服务的一种架构方式，每个服务有着独立的数据库并且能独立运行部署。微服务架构的构建过程中，第一步也是最为重要的一步是进行服务拆分。只有将微服务按照合理的方式进行拆分，才能确保整个项目能够高效而正确地运行。 一、微服务拆分的原则 微服务拆分原则有以下几个： 单一职责原则：每个微服务应该有一个...</description>
      <category>设计高频</category>
      <pubDate>Mon, 15 Apr 2024 02:16:22 GMT</pubDate>
      <content:encoded><![CDATA[<h2>简介</h2>
<p>微服务架构是将一个单体应用程序拆分为一个个独立且保持松耦合的服务的一种架构方式，每个服务有着独立的数据库并且能独立运行部署。微服务架构的构建过程中，第一步也是最为重要的一步是进行服务拆分。只有将微服务按照合理的方式进行拆分，才能确保整个项目能够高效而正确地运行。</p>
<h2>一、微服务拆分的原则</h2>
<p>微服务拆分原则有以下几个：</p>
<ul>
<li>单一职责原则：每个微服务应该有一个明确的职责范围，只负责自己的一部分业务功能，不涉及其他职责。</li>
<li>服务自治原则：每个微服务应该具备自我管理、独立部署、独立伸缩、独立运维的能力，不与其他服务强依赖。</li>
<li>服务可复用原则：每个微服务应该是可复用的，可以为其他服务提供通用的服务功能。</li>
<li>服务粒度原则：微服务应该按照业务功能划分，而不是按照技术、数据结构等因素划分，保持服务规模适度。</li>
<li>服务高内聚、低耦合原则：微服务内部业务功能高度内聚，与其他服务之间耦合度低，便于分布式部署和独立开发、维护。</li>
<li>服务易于测试原则：每个微服务应该具备自我测试的能力，包括单元测试、接口测试、集成测试等多种形式，确保服务质量。</li>
<li>服务可扩展原则：每个微服务应该能够按照业务需求进行扩展，包括水平扩展和垂直扩展两种方式，以应对高并发、大流量等场景。</li>
<li>使用有界上下文。</li>
<li>确定核心域并保持竞争优势。</li>
<li>对通用域进行成本优化。</li>
<li>考虑支持领域。</li>
<li>引入反腐层。</li>
<li>识别数据通信模式。</li>
<li>引入事件驱动架构。</li>
<li>使API简洁明了。</li>
<li>将相关的微服务合并为更大的服务。</li>
<li>引入无缝开发支持工具。</li>
</ul>
<p><strong>不管是哪种拆分原则，目标都是需要将相同或相似的服务聚合在一起，形成一个独立的自治服务。</strong></p>
<h2>二、微服务拆分的时机</h2>
<p>并非所有公司都适合采用微服务架构，尤其是规模较小且业务相对固定的公司。对于这些公司来说，从服务层面，他们不会有更多变化，通过优化现有服务即可满足需求。从成本方面，构建微服务架构，需要很多资源和配套的中间件。因此，对于那些规模较大，业务服务复杂度高，同时业务也在不断更新或新增的项目，微服务架构则是非常适合的选择。</p>
<p>在确定使用微服务架构后，服务的拆分是一项重要任务。根据拆分原则，我们可以在恰当的时机进行服务拆分。然而，根据行业经验来看，并<strong>不建议在项目构建初期进行服务拆分</strong>。主要原因有以下几点：</p>
<ul>
<li>项目构建初期，服务单一，数据量较少，及时是单体系统都可以支撑业务。</li>
<li>项目构建初期，服务没有形成体系，更没有规模服务，很难做到微服务的单一职责和服务自治。</li>
<li>业务架构不够成熟，目前提供的服务，很有可能会优化，甚至更改技术栈重构。</li>
</ul>
<p>因此，项目构建初期无需将其拆分，因为强行拆分此时可能会产生适得其反的效果。而遇到下面这些情况就可以进行服务拆分了。</p>
<ul>
<li>项目足够成熟并且业务稳定，团队成员不断扩大并且目前的服务想要扩展很难。只有在项目成熟的情况下，业务专家才可以从精确的划分出业务领域，进而将各个服务分解到业务领域内，最终形成各自独立的微服务。</li>
<li></li>
</ul>
<p>项目要求CI/CD（持续集成/持续交付）。尤其是很多新兴的互联网公司，要求系统在尽可能不停机的情况下，还需要持续上线新的功能。使用敏捷开发，可以更好地让开发者在完成周期形的业务交付，而DevOps则可以将这些代码，进行自动化测试、构建和集成，不断的完成新的需求提交，并保证代码的质量和稳定性。</p>
<ul>
<li>正式运行的项目，部分服务需要停机。当上线一些有问题的服务时，将该部分服务停机，这个情况对单体应用是非常有困难的。而微服务架构中，可以对存在问题的微服务进行下线处理，从而达到快速解决问题的目的。</li>
</ul>
<h2>三、微服务拆分的方法</h2>
<p>在掌握了准确的微服务拆分时机和有了强有力的拆分原则后，拆分方法将成为下一个关键环节。现在微服务拆分的方法有很多种，常见的包括：</p>
<ul>
<li>按业务功能拆分：将整个系统按照不同的业务模块进行拆分，每个模块对应一个微服务。这种方式能够有效地降低系统的复杂度，提高系统的可维护性和可扩展性。</li>
<li>按数据拆分：将整个系统的数据按照不同的领域进行拆分，每个领域对应一个微服务。这种方式能够提高系统的性能和可扩展性。</li>
<li>按用户界面拆分：将整个系统按照不同的用户界面进行拆分，每个用户界面对应一个微服务。这种方式能够实现快速迭代和响应用户需求的能力。</li>
<li>按技术栈拆分：将整个系统按照不同的技术栈进行拆分，每个技术栈对应一个微服务。这种方式能够提高开发效率和降低系统的复杂度。</li>
<li>按性能拆分：将整个系统按照不同的性能需求进行拆分，每个需求对应一个微服务。这种方式能够提高系统的性能和可扩展性。</li>
</ul>
<p>从行业经验来看，可以确定领域驱动设计（Domain Driven Design，简称DDD）在微服务拆分方面具有显著优势。</p>
<ul>
<li>DDD是一种软件开发方法论，它强调将软件划分为不同的领域，每个领域都由一个核心模型驱动。</li>
<li>微服务架构的核心概念是将单一的应用程序拆分为一组小型、自治的服务。而DDD则提供了一种方法来设计这些微服务的边界和交互。</li>
<li>领域驱动设计引入了领域模型的概念，该模型描述了业务领域的核心概念和实体，而不关注技术实现细节。这使得团队可以专注于业务逻辑，而不被底层技术细节所干扰。</li>
<li>通过将领域模型作为微服务拆分的基础，可以确保每个微服务都是高内聚的，并且只关注自己领域内的业务逻辑。这种拆分方式使得每个微服务都能够独立开发、部署和维护，从而提高了系统的可伸缩性和可靠性。</li>
<li>此外，DDD还强调了领域驱动设计的语言在业务团队和开发团队之间的沟通和理解的重要性。通过共享统一的语言和概念，可以确保业务需求能够准确地传达给开发团队，并且开发团队能够将其转化为可行的技术解决方案。<br>
因此，DDD是一种非常适合成为微服务拆分的方法论。它能够帮助开发人员更好地理解业务需求，找到合适的服务边界，构建高质量的领域模型和微服务。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>4种MySQL同步ES方案</title>
      <link>https://ujava.cn/synthesis/synchronousdata.html</link>
      <guid>https://ujava.cn/synthesis/synchronousdata.html</guid>
      <source url="https://ujava.cn/rss.xml">4种MySQL同步ES方案</source>
      <description>简介 本文会先讲述数据同步的 4 种方案，并给出常用数据迁移工具 img_129.pngimg_129.png 1.前言 在实际项目开发中，我们经常将 MySQL 作为业务数据库，ES 作为查询数据库，用来实现读写分离，缓解 MySQL 数据库的查询压力，应对海量数据的复杂查询。 这其中有一个很重要的问题，就是如何实现 MySQL 数据库和 ES 的数...</description>
      <category>设计高频</category>
      <pubDate>Fri, 12 Apr 2024 08:16:59 GMT</pubDate>
      <content:encoded><![CDATA[<h2>简介</h2>
<p>本文会先讲述数据同步的 4 种方案，并给出常用数据迁移工具</p>
<figure><figcaption>img_129.png</figcaption></figure>
<h1><strong>1.前言</strong></h1>
<p>在实际项目开发中，我们经常将 MySQL 作为业务数据库，ES 作为查询数据库，用来实现读写分离，缓解 MySQL 数据库的查询压力，应对海量数据的复杂查询。<br>
这其中有一个很重要的问题，就是如何实现 MySQL 数据库和 ES 的数据同步，今天和大家聊聊 MySQL 和 ES 数据同步的各种方案。<br>
我们先看看下面 4 种常用的数据同步方案。</p>
<h1><strong>2.数据同步方案</strong></h1>
<h2><strong>2.1同步双写</strong></h2>
<p>这是一种最为简单的方式，在将数据写到 MySQL 时，同时将数据写到 ES。</p>
<figure><figcaption>img_130.png</figcaption></figure>
<p>优点：</p>
<ul>
<li>业务逻辑简单；</li>
<li>实时性高。</li>
</ul>
<p>缺点：</p>
<ul>
<li>硬编码，有需要写入 MySQL 的地方都需要添加写入 ES 的代码；</li>
<li>业务强耦合；</li>
<li>存在双写失败丢数据风险；</li>
<li>性能较差，本来 MySQL 的性能不是很高，再加一个 ES，系统的性能必然会下降。</li>
</ul>
<h2><strong>2.2异写同步</strong></h2>
<p>针对多数据源写入的场景，可以借助 MQ 实现异步的多源写入。</p>
<figure><figcaption>img_131.png</figcaption></figure>
<p>优点：</p>
<ul>
<li>性能高；</li>
<li>不易出现数据丢失问题，主要基于 MQ 消息的消费保障机制，比如 ES 宕机或者写入失败，还能重新消费 MQ 消息；</li>
<li>多源写入之间相互隔离，便于扩展更多的数据源写入。</li>
</ul>
<p>缺点：</p>
<ul>
<li>硬编码问题，接入新的数据源需要实现新的消费者代码；</li>
<li>系统复杂度增加，引入了消息中间件；</li>
<li>MQ是异步消费模型，用户写入的数据不一定可以马上看到，造成延时。</li>
</ul>
<h2><strong>2.3基于SQL抽取</strong></h2>
<p>上面两种方案中都存在硬编码问题，代码的侵入性太强，如果对实时性要求不高的情况下，可以考虑用定时器来处理：</p>
<ol>
<li>数据库的相关表中增加一个字段为 timestamp 的字段，任何 CURD 操作都会导致该字段的时间发生变化；</li>
<li>原来程序中的 CURD 操作不做任何变化；</li>
<li>增加一个定时器程序，让该程序按一定的时间周期扫描指定的表，把该时间段内发生变化的数据提取出来；</li>
<li>逐条写入到 ES 中。</li>
</ol>
<figure><figcaption>img_132.png</figcaption></figure>
<p>优点：</p>
<ul>
<li>不改变原来代码，没有侵入性、没有硬编码；</li>
<li>没有业务强耦合，不改变原来程序的性能；</li>
<li>Worker 代码编写简单不需要考虑增删改查。</li>
</ul>
<p>缺点：</p>
<ul>
<li>时效性较差，由于是采用定时器根据固定频率查询表来同步数据，尽管将同步周期设置到秒级，也还是会存在一定时间的延迟；</li>
<li>对数据库有一定的轮询压力，一种改进方法是将轮询放到压力不大的从库上。</li>
</ul>
<p><strong>经典方案：借助 Logstash 实现数据同步，其底层实现原理就是根据配置定期使用 SQL 查询新增的数据写入 ES 中，实现数据的增量同步。</strong></p>
<h2><strong>2.4基于Binlog实现同步</strong></h2>
<p>上面三种方案要么有代码侵入，要么有硬编码，要么有延迟，那么有没有一种方案既能保证数据同步的实时性又没有代入侵入呢？</p>
<p>当然有，可以利用 MySQL 的 Binlog 来进行同步。</p>
<figure><figcaption>img_133.png</figcaption></figure>
<p>具体步骤如下：</p>
<ul>
<li>读取 MySQL 的 Binlog 日志，获取指定表的日志信息；</li>
<li>将读取的信息转为 MQ；</li>
<li>编写一个 MQ 消费程序；</li>
<li>不断消费 MQ，每消费完一条消息，将消息写入到 ES 中。</li>
</ul>
<p>优点：</p>
<ul>
<li>没有代码侵入、没有硬编码；</li>
<li>原有系统不需要任何变化，没有感知；</li>
<li>性能高；</li>
<li>业务解耦，不需要关注原来系统的业务逻辑。</li>
</ul>
<p>缺点：</p>
<ul>
<li>构建 Binlog 系统复杂；</li>
<li>如果采用 MQ 消费解析的 Binlog 信息，也会像方案二一样存在 MQ 延时的风险。</li>
</ul>
<h1><strong>3.数据迁移工具</strong></h1>
<p>对于上面 4 种数据同步方案，“基于 Binlog 实时同步”方案是目前最常用的，也诞生了很多优秀的数据迁移工具，这里主要对这些迁移工具进行介绍。</p>
<p>这些数据迁移工具，很多都是基于 Binlog 订阅的方式实现，<strong>模拟一个 MySQL Slave 订阅 Binlog 日志，从而实现 CDC</strong>（Change Data Capture），将已提交的更改发送到下游，包括 INSERT、DELETE、UPDATE。</p>
<p>至于如何伪装？大家需要先了解 MySQL 的主从复制原理，需要学习这块知识的同学，可以看我之前写的高并发教程，里面有详细讲解。</p>
<h2><strong>3.1Canal</strong></h2>
<p>基于数据库增量日志解析，提供增量数据订阅&amp;消费，目前主要支持 MySQL。</p>
<p>Canal 原理就是伪装成 MySQL 的从节点，从而订阅 master 节点的 Binlog 日志，主要流程为：</p>
<ol>
<li>Canal 服务端向 MySQL 的 master 节点传输 dump 协议；</li>
<li>MySQL 的 master 节点接收到 dump 请求后推送 Binlog 日志给 Canal 服务端，解析 Binlog 对象（原始为 byte 流）转成 Json 格式；</li>
<li>Canal 客户端通过 TCP 协议或 MQ 形式监听 Canal 服务端，同步数据到 ES。</li>
</ol>
<figure><figcaption>img_134.png</figcaption></figure>
<h2><strong>3.2阿里DTS</strong></h2>
<p>数据传输服务 DTS（Data Transmission Service）支持 RDBMS、NoSQL、OLAP 等多种数据源之间的数据传输。</p>
<p>它提供了数据迁移、实时数据订阅及数据实时同步等多种数据传输方式。相对于第三方数据流工具，DTS 提供丰富多样、高性能、高安全可靠的传输链路，同时它提供了诸多便利功能，极大方便了传输链路的创建及管理。</p>
<p>特点：</p>
<ul>
<li>多数据源：支持 RDBMS、NoSQL、OLAP 等多种数据源间的数据传输；</li>
<li>多传输方式：支持多种传输方式，包括数据迁移、实时数据订阅及数据实时同步；</li>
<li>高性能：底层采用了多种性能优化措施，全量数据迁移高峰期时性能可以达到70MB/s，20万的TPS，使用高规格服务器来保证每条迁移或同步链路都能拥有良好的传输性能；</li>
<li>高可用：底层为服务集群，如果集群内任何一个节点宕机或发生故障，控制中心都能够将这个节点上的所有任务快速切换到其他节点上，链路稳定性高；</li>
<li>简单易用：提供可视化管理界面，提供向导式的链路创建流程，用户可以在其控制台简单轻松地创建传输链路；</li>
<li>需要付费。</li>
</ul>
<h2><strong>3.3Databus</strong></h2>
<p>Databus 是一个低延迟、可靠的、支持事务的、保持一致性的数据变更抓取系统。由 LinkedIn 于 2013 年开源。</p>
<p>Databus 通过挖掘数据库日志的方式，将数据库变更实时、可靠的从数据库拉取出来，业务可以通过定制化 client 实时获取变更并进行其他业务逻辑。</p>
<p>特点：</p>
<ul>
<li>多数据源：Databus 支持多种数据来源的变更抓取，包括 Oracle 和 MySQL。</li>
<li>可扩展、高度可用：Databus 能扩展到支持数千消费者和事务数据来源，同时保持高度可用性。</li>
<li>事务按序提交：Databus 能保持来源数据库中的事务完整性，并按照事务分组和来源的提交顺寻交付变更事件。</li>
<li>低延迟、支持多种订阅机制：数据源变更完成后，Databus 能在毫秒级内将事务提交给消费者。同时，消费者使用D atabus 中的服务器端过滤功能，可以只获取自己需要的特定数据。</li>
<li>无限回溯：对消费者支持无限回溯能力，例如当消费者需要产生数据的完整拷贝时，它不会对数据库产生任何额外负担。当消费者的数据大大落后于来源数据库时，也可以使用该功能。</li>
</ul>
<h2><strong>3.4其他</strong></h2>
<p><strong>Flink</strong></p>
<ul>
<li>有界数据流和无界数据流上进行有状态计算分布式处理引擎和框架。</li>
<li>官网地址：<a href="https://flink.apache.org" target="_blank" rel="noopener noreferrer">https://flink.apache.org</a></li>
</ul>
<p><strong>CloudCanal</strong></p>
<ul>
<li>数据同步迁移系统，商业产品。</li>
<li>官网地址：<a href="https://www.clougence.com/?utm_source=wwek" target="_blank" rel="noopener noreferrer">https://www.clougence.com/?utm_source=wwek</a></li>
</ul>
<p><strong>Maxwell</strong></p>
<ul>
<li>使用简单，直接将数据变更输出为json字符串，不需要再编写客户端。</li>
<li>官网地址：<a href="http://maxwells-daemon.io" target="_blank" rel="noopener noreferrer">http://maxwells-daemon.io</a></li>
</ul>
<p><strong>DRD</strong></p>
<ul>
<li>阿里巴巴集团自主研发的分布式数据库中间件产品，专注于解决单机关系型数据库扩展性问题，具备轻量(无状态)、灵活、稳定、高效等特性。</li>
<li>官方地址：<a href="https://www.aliyun.com/product/drds" target="_blank" rel="noopener noreferrer">https://www.aliyun.com/product/drds</a></li>
</ul>
<p><strong>yugong</strong></p>
<ul>
<li>帮助用户完成从 Oracle 数据迁移到 MySQL。</li>
<li>访问地址：<a href="https://github.com/alibaba/yugong" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/yugong</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>微服务架构和分布式架构的区别</title>
      <link>https://ujava.cn/synthesis/microservice.html</link>
      <guid>https://ujava.cn/synthesis/microservice.html</guid>
      <source url="https://ujava.cn/rss.xml">微服务架构和分布式架构的区别</source>
      <description>微服务架构和分布式架构的区别有：1、含义不同；2、概念层面不同；3、解决问题不同；4、部署方式不同；5、耦合度不同。其中，含义不同指微服务架构是一种将一个单一应用程序开发为一组小型服务的方法，每个服务运行在自己的进程中，而分布式系统是若干独立计算机的集合。 1、含义不同 微服务架构：微服务架构风格是一种将一个单一应用程序开发为一组小型服务的方法，每个服...</description>
      <category>设计高频</category>
      <pubDate>Fri, 12 Apr 2024 07:48:57 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p><strong>微服务架构和分布式架构的区别</strong>有：1、含义不同；2、概念层面不同；3、解决问题不同；4、部署方式不同；5、耦合度不同。其中，含义不同指微服务架构是一种将一个单一应用程序开发为一组小型服务的方法，每个服务运行在自己的进程中，而分布式系统是若干独立计算机的集合。</p>
</blockquote>
<h2>1、含义不同</h2>
<p><strong>微服务架构</strong>：微服务架构风格是一种将一个单一应用程序开发为一组小型服务的方法，每个服务运行在自己的进程中，服务间通信采用轻量级通信机制(通常用HTTP资源API)。这些服务围绕业务能力构建并且可通过全自动部署机制独立部署。这些服务共用一个最小型的集中式的管理，服务可用不同的语言开发，使用不同的数据存储技术。</p>
<p><strong>分布式架构</strong>：分布式系统是若干独立计算机的集合，这些计算机对用户来说就像单个相关系统，即整个系统是由不同的计算机组成，而用户是无感知的，就像访问一台计算机一样。这里强调的是系统由不同物理上分离的计算机（服务器）组成。</p>
<h2>2、概念层面不同</h2>
<p><strong>微服务架构</strong>：微服务是设计层面的东西，一般考虑如何将系统从逻辑上进行拆分，也就是垂直拆分。微服务可以是分布式的，即可以将不同服务部署在不同计算机上，当然如果量小也可以部署在单机上。</p>
<p><strong>分布式架构</strong>：分布式是部署层面的东西，即强调物理层面的组成，即系统的各子系统部署在不同计算机上。</p>
<h2>3、解决问题不同</h2>
<p><strong>微服务架构</strong>：微服务解决的是系统复杂度问题： 一般来说是业务问题，即在一个系统中承担职责太多了，需要打散，便于理解和维护，进而提升系统的开发效率和运行效率，微服务一般来说是针对应用层面的。微服务如果用在其它系统，如存储系统感觉怪怪的，就像说Mysql集群是微服务的，总觉得哪里不舒服。</p>
<p><strong>分布式架构</strong>：分布式解决的是系统性能问题： 即解决系统部署上单点的问题，尽量让组成系统的子系统分散在不同的机器上进而提高系统的吞吐能力。</p>
<h2>4、部署方式不同</h2>
<p><strong>微服务架构</strong>：微服务的应用可以部署在是同一个服务器，不一定是分散在多个服务器上。微服务架构是一项在云中部署应用和服务的新技术。微服务架构是一种架构模式，它将一个复杂的大型应用程序划分成多个微服务，这些小型服务都在各自独立的进程中运行。</p>
<p><strong>分布式架构</strong>：分布式是将一个大的系统划分为多个业务模块,这些业务模块会分别部署到不同的机器上，通过接口进行数据交互。</p>
<h2>5、耦合度不同</h2>
<p>微服务相比分布式服务来说，它的粒度更小，服务之间耦合度更低，由于每个微服务都由独立的小团队负责，因此它敏捷性更高，分布式服务最后都会向微服务架构演化，这是一种趋势，不过服务微服务化后带来的挑战也是显而易见的，例如服务粒度小，数量大，后期运维将会很难。</p>
<h3>拓展阅读</h3>
<h2>分布式是否属于微服务？</h2>
<p>答案是属于。微服务的意思也就是将模块拆分成一个独立的服务单元通过接口来实现数据的交互。但是微服务不一定是分布式，因为微服务的应用不一定是分散在多个服务器上，他也可以是同一个服务器。这也是分布式和微服务的一个细微差别。</p>
]]></content:encoded>
    </item>
    <item>
      <title>组件ElasticSearch</title>
      <link>https://ujava.cn/assembly/elasticsearch.html</link>
      <guid>https://ujava.cn/assembly/elasticsearch.html</guid>
      <source url="https://ujava.cn/rss.xml">组件ElasticSearch</source>
      <description>一、 简介 Elasticsearch 是一个分布式可扩展的实时搜索和分析引擎,一个建立在全文搜索引擎 Apache Lucene™ 基础上的搜索引擎.当然 Elasticsearch 并不仅仅是 Lucene 那么简单，它不仅包括了全文搜索功能，还可以进行以下工作: 一个分布式的实时文档存储，每个字段可以被索引与搜索 一个分布式实时分析搜索引擎 能胜...</description>
      <category>设计组件</category>
      <pubDate>Wed, 10 Apr 2024 08:44:25 GMT</pubDate>
      <content:encoded><![CDATA[<h2>一、 简介</h2>
<p>Elasticsearch 是一个分布式可扩展的实时搜索和分析引擎,一个建立在全文搜索引擎 Apache Lucene™ 基础上的搜索引擎.当然 Elasticsearch 并不仅仅是 Lucene 那么简单，它不仅包括了全文搜索功能，还可以进行以下工作:</p>
<ul>
<li>一个分布式的实时文档存储，每个字段可以被索引与搜索</li>
<li>一个分布式实时分析搜索引擎</li>
<li>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</li>
</ul>
<h3>1.ES优点</h3>
<ul>
<li>1.支持全文搜索，并基于倒排索引，检索速度特别快</li>
<li>2.高可用性，支持集群部署，任何节点失效系统自动调整。</li>
</ul>
<h3>2.ES缺点</h3>
<ul>
<li>1.对硬件要求较高，es比较吃内存，需要存储资源来支持大量数据的处理。</li>
<li>2.不支持事务等ACID属性。</li>
</ul>
<h3>3.ES使用场景</h3>
<p>1.聊天消息</p>
<ul>
<li>数据量大，业务关系简单，会通过关键字搜索聊天信息</li>
<li>非核心业务，不会频繁crud</li>
<li>没有事务的场景，可以不用支持事务</li>
</ul>
<p>2.日志纪录</p>
<p>Elasticsearch 一个典型应用就是 ELK 日志分析系统。如nginx接入请求的访问日志纪录。</p>
<p>3.热点数据搜索</p>
<p>如电商业务的商品搜索等。</p>
<h3>4.DSL语言高级查询</h3>
<h4>1.Query DSL概述</h4>
<p>Domain Specific Language 领域专用语言</p>
<ul>
<li>Elasticsearch provides a ful1 Query DSL based on JSON to define queries</li>
<li>Elasticsearch提供了基于JSON的DSL来定义查询。</li>
</ul>
<p>DSL由叶子查询子句和复合查询子句两种子句组成。</p>
<figure><figcaption>img_111.png</figcaption></figure>
<h4>2.模糊匹配</h4>
<p>模糊匹配主要是针对文本类型的字段，文本类型的字段会对内容进行分词，对查询时，也会对搜索条件进行分词，然后通过倒排索引查找到匹配的数据，模糊匹配主要通过match等参数来实现</p>
<ul>
<li>match : 通过match关键词模糊匹配条件内容</li>
<li>prefix : 前缀匹配</li>
<li>regexp : 通过正则表达式来匹配数据</li>
</ul>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">POST /es_db/_doc/_search</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"from"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"size"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"query"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"match"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"address"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"广州"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">SQL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> user </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> address</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> '%广州%'</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> limit</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>3.精确匹配</h4>
<ul>
<li>term : 单个条件相等</li>
<li>terms : 单个字段属于某个值数组内的值</li>
<li>range : 字段属于某个范围内的值</li>
<li>exists : 某个字段的值是否存在</li>
<li>ids : 通过ID批量查询</li>
</ul>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">POST /es_db/_doc/_search</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"query"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"term"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"name"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"admin"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">SQL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> student </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> 'admin'</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4>4.聚合搜索</h4>
<p><strong>1.bucket和metric</strong></p>
<p>bucket就是一个聚合搜索时的数据分组。</p>
<p>如：销售部门有员工张三和李四，开发部门有员工王五和赵六。那么根据部门分组聚合得到结果就是两个bucket。销售部门bucket中有张三和李四，开发部门 bucket中有王五和赵六。</p>
<p>metric就是对一个bucket数据执行的统计分析。如上述案例中，开发部门有2个员工，销售部门有2个员工，这就是metric。</p>
<p>metric有多种统计，如：求和，最大值，最小值，平均值等。</p>
<p>用一个大家容易理解的SQL语法来解释，如：select count() from table group by column。那么group by column分组后的每组数据就是bucket。对每个分组执行的count()就是metric。</p>
<p>es最重要的核心功能是数据检索，统计分析我认为不是es最核心的功能，想这种离线统计应该由其他的替代方案去做，所以如果想了解更多es聚合搜索相关知识可以参考官网或者其他博客</p>
<h3>5.文档映射</h3>
<p>ES中映射可以分为动态映射和静态映射</p>
<h4>1.动态映射</h4>
<p>在关系数据库中，需要事先创建数据库，然后在该数据库下创建数据表，并创建表字段、类型、长度、主键等，最后才能基于表插入数据。而Elasticsearch中不需要定义Mapping映射（即关系型数据库的表、字段等），在文档写入Elasticsearch时，会根据文档字段自动识别类型，这种机制称之为动态映射。<br>
动态映射规则如下：</p>
<figure><figcaption>img_112.png</figcaption></figure>
<h4>2.静态映射</h4>
<p>静态映射是在Elasticsearch中也可以事先定义好映射，包含文档的各字段类型、分词器等，这种方式称之为静态映射。</p>
<h4>3.核心类型（Core datatype）</h4>
<ul>
<li>字符串：string，string类型包含 text 和 keyword。</li>
<li>text：该类型被用来索引长文本，在创建索引前会将这些文本进行分词，转化为词的组合，建立索引；允许es来检索这些词，text类型不能用来排序和聚合。</li>
<li>keyword：该类型不能分词，可以被用来检索过滤、排序和聚合，keyword类型不可用text进行分词模糊检索。</li>
<li>数值型：long、integer、short、byte、double、float</li>
<li>日期型：date</li>
<li>布尔型：boolean</li>
</ul>
<h4>4.数据建模</h4>
<p>就是针对于关系型数据库的一对多数据模型，而我自己认为es的主要应用场景是全文搜索引擎，这种复杂的业务关系就应该由关系型数据库如mysql去完成数据建模和存储，而不是交给es去建模存储，当然es也是提供了Parent / Child相关机制继续数据建模，如果有场景使用到，自己去参考对应的官方文档了解即可，但我自己不建议这样做。</p>
<h4>5.分页查询</h4>
<p>1.语法</p>
<p>在存在大量数据时，一般我们进行查询都需要进行分页查询。例如：我们指定页码、并指定每页显示多少条数据，然后Elasticsearch返回对应页码的数据。</p>
<p>在执行查询时，可以指定from（从第几条数据开始查起）和size（每页返回多少条）数据，就可以轻松完成分页。</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">POST /es_db/_doc/_search</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"from"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"size"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"query"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"match"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"address"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"广州天河"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.scroll解决深分页问题</p>
<p>前面使用from和size方式，查询在1W条数据以内都是OK的，但如果数据比较多的时候，会出现性能问题。Elasticsearch做了一个限制，不允许查询的是10000条以后的数据。如果要查询1W条以后的数据，需要使用Elasticsearch中提供的scroll游标来查询。</p>
<p>在进行大量分页时，每次分页都需要将要查询的数据进行重新排序，这样非常浪费性能。</p>
<p>使用scroll是将要用的数据一次性排序好，然后分批取出,性能要比from + size好得多。</p>
<p>使用scroll查询后，排序后的数据会保持一定的时间，后续的分页查询都从该快照取数据即可。</p>
<p>第一次使用scroll分页查询</p>
<p>此处，我们让排序的数据保持1分钟，所以设置scroll为1m</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">GET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /es_db/_search?</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">scroll</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">1m</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"query"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"multi_match"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"query"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"广州长沙张三"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"fields"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">["address","name"]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">},</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"size"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">100</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行后，我们注意到，在响应结果中有一项：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"_scroll_id"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAZEWY2VQZXBia1JTVkdhTWkwSl9GaUYtQQ=="</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div><p>后续，我们需要根据这个_scroll_id来进行查询</p>
<p>第二次直接使用scroll id进行查询</p>
<h3>6.suggest search</h3>
<p>suggest search（completion suggest）：就是建议搜索或称为搜索建议，也可以叫做自动完成-auto completion。类似百度中的搜索联想提示功能。</p>
<p>ES实现suggest的时候，性能非常高，其构建的不是倒排索引，也不是正排索引，就是纯的用于进行前缀搜索的一种特殊的数据结构，而且会全部放在内存中，所以suggest search进行的前缀搜索提示，性能是非常高。</p>
<p>需要使用suggest的时候，必须在定义index时，为其mapping指定开启suggest。</p>
<p>具体如下:</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">PUT /movie</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"mappings"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"properties"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> : {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"title"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> : {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"type"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"text"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"analyzer"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"ik_max_word"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"fields"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"suggest"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> : {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"type"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"completion"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"analyzer"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"ik_max_word"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">},</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"content"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"type"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"text"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"analyzer"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"ik_max_word"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">PUT /movie/_doc/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"title"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"西游记电影系列"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"content"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"西游记之月光宝盒将与2021年进行......"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">PUT /movie/_doc/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"title"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"西游记文学系列"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"content"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"某知名网络小说作家已经完成了大话西游同名小说的出版"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">PUT /movie/_doc/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"title"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"西游记之大话西游手游"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"content"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"网易游戏近日出品了大话西游经典IP的手游，正在火爆内测中"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>suggest 搜索：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">GET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /movie/_search</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"suggest"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"my-suggest"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> : {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"prefix"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"西游记"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"completion"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> : {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"field"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"title.suggest"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>二、ES核心原理</h2>
<p>ES存储模型</p>
<p>Elasticsearch与关系数据库结构对应</p>
<figure><figcaption>img_113.png</figcaption></figure>
<p>ElasticSearch的对象模型，跟关系型数据库模型相比：</p>
<h3>1.索引（Index）</h3>
<p>相当于数据库，用于定义文档类型的存储；在同一个索引中，同一个字段只能定义一个数据类型；</p>
<p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引<br>
一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对对应于这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字</p>
<h3>2.文档类型（Type）</h3>
<p>相当于关系表，用于描述文档中的各个字段的定义；不同的文档类型，能够存储不同的字段，服务于不同的查询请求；</p>
<p>每一个字段都应该有一个对应的类型，例如：Text、Keyword、Byte等</p>
<h3>3.文档（Document）</h3>
<p>相当于关系表的数据行，存储数据的载体，包含一个或多个存有数据的字段；</p>
<p>一个文档是一个可被索引的基础信息单元，类似一条记录。文档以JSON（Javascript Object Notation）格式来表示；</p>
<h3>4.字段（Field）</h3>
<p>文档的一个Key/Value对；</p>
<ul>
<li>词（Term）：表示文本中的一个单词；</li>
<li>标记（Token）：表示在字段中出现的词，由该词的文本、偏移量（开始和结束）以及类型组成；</li>
</ul>
<p>相当于是数据表的字段|列</p>
<h3>5.倒排索引</h3>
<p>全文搜索引擎的技术原理被称为“倒排索引”（Inverted index），也常被称为反向索引、置入档案或反向档案，是一种索引方法，其基本原理是建立单词到文档的索引。</p>
<p>之所以被称为“倒排”索引，是和“正排“索引相对的，“正排索引”的基本原理是建立文档到单词的索引。我们通过一个简单的样例来说明这两种索引的差异。</p>
<p>假设我们有一个技术文章的网站，里面收集了各种技术文章，用户可以在网站浏览或者搜索文章。</p>
<p>正排索引示例：</p>
<figure><figcaption>img_114.png</figcaption></figure>
<p>（注：文章内容仅为示范，文章内容实际上存储的是几千字的内容。）</p>
<p>正排索引适用于根据文档名称来查询文档内容。例如，用户在网站上单击了“面向对象葵花宝典是什么”，网站根据文章标题查询文章的内容展示给用户。</p>
<p>倒排索引示例：</p>
<figure><figcaption>img_115.png</figcaption></figure>
<p>（注：表格仅为示范，不是完整的倒排索引表格，实际上的倒排索引有成千上万行，因为每个单词就是一个索引。）</p>
<p>倒排索引适用于根据关键词来查询文档内容，它是根据文章内容中的关键字建立索引，而值对应于文档ID，而搜索出来的结果就是文档ID所在行的所有内容。</p>
<p>例如，用户只是想看“设计”相关的文章，网站需要将文章内容中包含“设计”一词的文章都搜索出来展示给用户。</p>
<p>要注意倒排索引的两个重要细节：</p>
<ul>
<li>倒排索引中的所有词项对应一个或多个文档；</li>
<li>倒排索引中的词项根据字典顺序升序排列<br>
Elasticsearch 也是 Master-slave 架构，也实现了数据的分片和备份。</li>
</ul>
<h3>6.分词器</h3>
<p>对于英文来说，分词比较简单，只需要按照单词的空格来进行分词。<br>
如下所示<br>
</p>
<p>如果要搜索hello这个关键词，则匹配的结果将是下面两个内容</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">hello world</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">hello elasticsearch</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>ES的默认分词设置是standard，这个在中文分词时就比较尴尬了，会单字拆分，比如我搜索关键词“清华大学”，这时候会按“清”，“华”，“大”，“学”去分词，然后搜出来的都是些“清清的河水”，“中华儿女”，“地大物博”，“学而不思则罔”之类的莫名其妙的结果。</p>
<p>这里我们就想把这个分词方式修改一下，于是呢，就想到了ik分词器，有两种ik_smart和ik_max_word。</p>
<p>ik_smart会将“清华大学”整个分为一个词，而ik_max_word会将“清华大学”分为“清华大学”，“清华”和“大学”，按需选其中之一就可以了。</p>
<p>修改默认分词方法(这里修改school_index索引的默认分词为：ik_max_word)：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">PUT /school_index</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"settings"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> : {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"index"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> : {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"analysis.analyzer.default.type"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"ik_max_word"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分词器工作流程<br>
<br>
分词器由三部分组成：</p>
<ul>
<li>Character Filter：将文本中html标签剔除掉。</li>
<li>Tokenizer：按照规则进行分词，在英文中按照空格分词</li>
<li>Token Filter：将切分的单词进行加工，小写，删除 stopwords(停顿词，a、an、the、is等),增加同义词</li>
</ul>
<p>每个组件的作用，可参考下面的例子</p>
<p>character filter：在一段文本进行分词之前，先进行预处理，比如说最常见的就是，过滤html标签</p>
<p>tokenizer：分词，hello you and me --&gt; hello, you, and, me</p>
<p>token filter：lowercase，stop word，synonymom，liked --&gt; like，Tom --&gt; tom，a/the/an --&gt; 干掉，small --&gt; little</p>
<p>ES内置分词器</p>
<ul>
<li>Standard Analyzer - 默认分词器，按词切分，小写处理</li>
<li>Simple Analyzer - 按照非字母切分(符号被过滤), 小写处理</li>
<li>Stop Analyzer - 小写处理，停用词过滤(the,a,is)</li>
<li>Whitespace Analyzer - 按照空格切分，不转小写</li>
<li>Keyword Analyzer - 不分词，直接将输入当作输出</li>
<li>Patter Analyzer - 正则表达式，默认\W+(非字符分割)</li>
<li>Language - 提供了30多种常见语言的分词器</li>
<li>Customer Analyzer 自定义分词器</li>
</ul>
<p>每个内置分词器的作用，可参考下面的例子</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">Set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> the shape </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> semi-transparent </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">by</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> calling set_trans(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">standard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> analyzer：</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, the, shape, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, semi, transparent, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">by</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, calling, set_trans, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">（默认的是standard）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">simple</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> analyzer：</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, the, shape, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, semi, transparent, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">by</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, calling, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, trans</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">whitespace analyzer：</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">Set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, the, shape, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, semi-transparent, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">by</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, calling, set_trans(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">stop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> analyzer:移除停用词，比如a the it等等</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定制分词器</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">PUT /my_index</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"settings"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"analysis"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"analyzer"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"es_std"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"type"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"standard"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"stopwords"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"_english_"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">GET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /my_index/_analyze</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"analyzer"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"standard"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"text"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"a dog is in the house"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">GET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /my_index/_analyze</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"analyzer"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"es_std"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"text"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"a dog is in the house"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定制化自己的分词器</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">PUT /my_index</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"settings"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"analysis"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"char_filter"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"&amp;_to_and"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"type"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"mapping"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"mappings"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">["&amp;=&gt; and"]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">},</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"filter"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"my_stopwords"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"type"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"stop"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"stopwords"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">["the", "a"]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">},</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"analyzer"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"my_analyzer"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"type"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"custom"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"char_filter"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">["html_strip", "&amp;_to_and"]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"tokenizer"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"standard"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"filter"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">["lowercase", "my_stopwords"]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">GET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> /my_index/_analyze</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"text"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"tom&amp;jerry are a friend in the house, &lt;a&gt;, HAHA!!"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"analyzer"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"my_analyzer"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">PUT /my_index/_mapping/my_type</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"properties"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"content"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"type"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"text"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"analyzer"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"my_analyzer"</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IK热更新</p>
<p>每次都是在es的扩展词典中，手动添加新词语，很坑</p>
<p>（1）每次添加完，都要重启es才能生效，非常麻烦</p>
<p>（2）es是分布式的，可能有数百个节点，你不能每次都一个一个节点上面去修改</p>
<p>es不停机，直接我们在外部某个地方添加新的词语，es中立即热加载到这些新词语<br>
IKAnalyzer.cfg.xml</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">properties</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">	&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">comment</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">IK Analyzer 扩展配置</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/comment</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">	&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">!</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">--用户可以在这里配置自己的扩展字典 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">	&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">entry</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"ext_dict"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">location</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">entry</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">	 &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">!</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">	&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">entry</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"ext_stopwords"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">location</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">entry</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">	&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">!</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">--用户可以在这里配置远程扩展字典 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">	&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">entry</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"remote_ext_dict"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">words_location</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">entry</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">	&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">!</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">--用户可以在这里配置远程扩展停止词字典--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">	&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">entry</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"remote_ext_stopwords"</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">words_location</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">entry</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/properties</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3>7.es评分机制</h3>
<p>当你通过关键字搜索相关文档时，可能会出现多个文档，这些文档的顺序是通过一个max_score属性的大小从高到低顺序展现出来的，max_score属性就是我们所说的评分。</p>
<p>打分算法</p>
<p>relevance score算法，简单来说，就是计算出，一个索引中的文本，与搜索文本，他们之间的关联匹配程度</p>
<p>Elasticsearch使用的是 term frequency/inverse document frequency算法，简称为TF/IDF算法</p>
<p>总公式</p>
<p>max_score = boost * idf * tf</p>
<figure><figcaption>img_118.png</figcaption></figure>
<p>对于查询权重我们可以自己定义</p>
<p>如下面所示：</p>
<figure><figcaption>img_119.png</figcaption></figure>
<p>TF算法</p>
<p>Term frequency：搜索文本中的各个词条在field文本中出现了多少次，出现次数越多，就越相关</p>
<ul>
<li>搜索请求：hello world</li>
<li>doc1：hello you, and world is very good</li>
<li>doc2：hello, how are you</li>
</ul>
<p>doc1这个文档匹配了2个单词，所以doc1的得分要高一些。</p>
<p>2.IDF算法<br>
Inverse document frequency：搜索文本中的各个词条在整个索引的所有文档中出现了多少次，出现的次数越多，就越不相关</p>
<ul>
<li>搜索请求：hello world</li>
<li>doc1：hello, tuling is very good</li>
<li>doc2：hi world, how are you</li>
</ul>
<p>比如说，在index中有1万条document，hello这个单词在所有的document中，一共出现了1000次；world这个单词在所有的document中，一共出现了100次，所以world这个单词得分就更高。</p>
<p>那么匹配world的doc得分就越高,越有可能排在搜索结果前面。</p>
<p>Field-length norm：field长度，field越长，相关度越弱<br>
搜索请求：hello world</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">doc1：{ "title": "hello article", "content": "...... N个单词" }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">doc2：{ "title": "my article", "content": "...... N个单词，hi world" }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>hello world在整个index中出现的次数是一样多的，那么doc1更相关，title field更短</p>
<p><strong>2.空间向量模型（vector space model）</strong></p>
<p>每个doc vector计算出对query vector的弧度，最后基于这个弧度给出一个doc相对于query中多个term的总分数</p>
<p>弧度越大，分数月底; 弧度越小，分数越高</p>
<p>如果是多个term，那么就是线性代数来计算，无法用图表示</p>
<figure><figcaption>img_120.png</figcaption></figure>
<p>了解即可，掌握对应的打分算法我自己认为就足够了，不用砖牛角尖</p>
<h2>三、ElasticSearch架构设计</h2>
<p>es集群架构</p>
<p>如下图 ，就是一个三个节点组成的es集群，p0、p1、p2表示一个节点中的分片，R0、R1、R2表示分片对应的副本<br>
<br>
在Elasticsearch主要分成两类节点，一类是Master，一类是DataNode。</p>
<h3>1.Master节点</h3>
<p>在Elasticsearch启动时，会选举出来一个Master节点。</p>
<p>当某个节点启动后，然后使用Zen Discovery机制找到集群中的其他节点，并建立连接。</p>
<p>discovery.seed_hosts: [“192.168.21.130”, “192.168.21.131”, “192.168.21.132”]</p>
<p>并从候选主节点中选举出一个主节点。</p>
<p>cluster.initial_master_nodes: [“node1”, “node2”,“node3”]</p>
<p>Master节点主要负责</p>
<ul>
<li>管理索引（创建索引、删除索引）、分配分片</li>
<li>维护元数据</li>
<li>管理集群节点状态</li>
<li>不负责数据写入和查询，比较轻量级</li>
</ul>
<p>一个Elasticsearch集群中，只有一个Master节点。在生产环境中，内存可以相对小一点，但机器要稳定。</p>
<h3>2.DataNode节点</h3>
<p>在Elasticsearch集群中，会有N个DataNode节点。</p>
<p>DataNode节点主要负责：</p>
<p>数据写入、数据检索，</p>
<p>大部分Elasticsearch的压力都在DataNode节点上在生产环境中，内存最好配置大一些</p>
<h3>3.分片</h3>
<p>Elasticsearch是一个分布式的搜索引擎，索引的数据也是分成若干部分，分布在不同的服务器节点中，分布在不同服务器节点中的索引数据，就是分片（Shard）。</p>
<p>Elasticsearch会自动管理分片，如果发现分片分布不均衡，就会自动迁移一个索引（index）由多个shard（分片）组成，而分片是分布在不同的服务器上的.</p>
<h3>4.副本</h3>
<p>为了对Elasticsearch的分片进行容错，假设某个节点不可用，会导致整个索引库都将不可用。所以，需要对分片进行副本容错，每一个分片都会有对应的副本。</p>
<p>在Elasticsearch中，默认创建的索引为1个分片、每个分片有1个主分片和1个副本分片。</p>
<p>每个分片都会有一个Primary Shard（主分片），也会有若干个Replica Shard（副本分片）</p>
<p>Primary Shard和Replica Shard不在同一个节点上</p>
<h3>5.es集群读写流程</h3>
<p>es 写数据流程</p>
<figure><figcaption>img_122.png</figcaption></figure>
<p>1.选择任意一个DataNode发送请求，例如：node2。此时，node2就成为一个coordinating node（协调节点）</p>
<p>2.计算得到文档要写入的分片</p>
<p><code>shard = hash(routing) % number_of_primary_shards</code><br>
routing 是一个可变值，默认是文档的 _id</p>
<p>3.coordinating node会进行路由，将请求转发给对应的primary shard所在的DataNode（假设primary shard在node1、replica shard在node2）</p>
<p>4.node1节点上的Primary Shard处理请求，写入数据到索引库中，并将数据同步到Replica shard</p>
<p>5.Primary Shard和Replica Shard都保存好了文档，返回client</p>
<p>es 读数据流程</p>
<figure><figcaption>img_123.png</figcaption></figure>
<p>1.client发起查询请求，某个DataNode接收到请求，该DataNode就会成为协调节点（Coordinating Node）</p>
<p>2.协调节点（Coordinating Node）将查询请求广播到每一个数据节点，这些数据节点的分片会处理该查询请求</p>
<p>3.每个分片进行数据查询，将符合条件的数据放在一个优先队列中，并将这些数据的文档ID、节点信息、分片信息返回给协调节点</p>
<p>4.协调节点将所有的结果进行汇总，并进行全局排序</p>
<p>5.协调节点向包含这些文档ID的分片发送get请求，对应的分片将文档数据返回给协调节点，最后协调节点将数据返回给客户端</p>
<p>注意：写请求是写入 primary shard，然后同步给所有的 replica shard；读请求可以从 primary shard 或 replica shard 读取，采用的是随机轮询算法。</p>
<p>自己总结：es的检索流程和mysql数据表查询非主键索引的思路有些相似，先从索引表查询出对应的主键索引值，在进行回表查询具体的行数据。</p>
<p>es删除/更新数据底层原理</p>
<p>如果是删除操作，commit 的时候会生成一个 .del 文件，里面将某个 doc 标识为 deleted 状态，那么搜索的时候根据 .del 文件就知道这个 doc 是否被删除了。</p>
<p>如果是更新操作，就是将原来的 doc 标识为 deleted 状态，然后新写入一条数据。</p>
<p>es 底层写数据原理</p>
<figure><figcaption>img_124.png</figcaption></figure>
<p>简述：先写入内存 buffer，在 buffer 里的时候数据是搜索不到的；然后刷新到os cache中（同时将数据备份到translog日志文件），最后刷新到 segment file磁盘文件中</p>
<p>总结一下，数据先写入内存 buffer，然后每隔 1s，将数据 refresh 到 os cache，到了 os cache 数据就能被搜索到（所以我们才说 es 从写入到能被搜索到，中间有 1s 的延迟）。每隔 5s，将数据写入 translog 文件作备份（这样如果机器宕机，内存数据全没，最多会有 5s 的数据丢失），translog 大到一定程度，或者默认每隔 30mins，会触发 commit 操作，将缓冲区的数据都 flush 到 segment file 磁盘文件中。最后存入到commit point磁盘文件中。</p>
<p>refresh到文件系统缓存</p>
<p>当数据写入到ES分片时，会首先写入到内存中，然后通过内存的buffer生成一个segment，并刷到文件系统缓存中。</p>
<p>如果 buffer 快满了，或者到一定时间，就会将内存 buffer 数据 refresh 到一个新的 segment file中，但是此时数据不是直接进入 segment file 磁盘文件，而是先进入 os cache 。</p>
<p>这个过程就是 refresh 。</p>
<p>只要 buffer 中的数据被 refresh 操作刷入 os cache 中，这个数据就可以被搜索到了。</p>
<p>定时 refresh到文件系统缓存机制</p>
<p>每隔 1 秒钟，es 将 buffer 中的数据写入一个新的 segment file ，每秒钟会产生一个新的磁盘文件 segment file ，这个 segment file 中就存储最近 1 秒内 buffer 中写入的数据。<br>
但是如果 buffer 里面此时没有数据，那当然不会执行 refresh 操作，如果 buffer 里面有数据，默认 1 秒钟执行一次 refresh 操作，刷入一个新的 segment file 中。</p>
<p>segment file合并</p>
<p>buffer 每 refresh 一次，就会产生一个 segment file ，所以默认情况下是 1 秒钟一个 segment file ，这样下来 segment file 会越来越多，此时会定期执行 merge，减少索引查询时IO开销。<br>
每次 merge 的时候，会将多个 segment file 合并成一个，同时这里会将标识为 deleted 的 doc 给物理删除掉（之前执行过的delete的数据），然后将新的 segment file 写入到一个 commit point磁盘 。</p>
<p>知识扩展</p>
<p>操作系统里面，磁盘文件其实都有一个东西，叫做 os cache ，即操作系统缓存，就是说数据写入磁盘文件之前，会先进入 os cache ，先进入操作系统级别的一个内存缓存中去。</p>
<p>备份到translog磁盘</p>
<p>刷新到translog文件以保障数据不丢失，translog的设计思想和mysql的redo log是相似的。</p>
<p>每隔5s,从os cache 中同步到translog磁盘里面去做备份。</p>
<p>那么translog 日志文件的作用是什么？</p>
<p>你执行 commit 操作之前，数据要么是停留在 buffer 中，要么是停留在 os cache 中，无论是 buffer 还是 os cache 都是内存，一旦这台机器死了，内存中的数据就全丢了。所以需要将数据对应的操作写入一个专门的日志文件 translog 中，一旦此时机器宕机，再次重启的时候，es 会自动读取 translog 日志文件中的数据，恢复到内存 buffer 和 os cache 中去。</p>
<p>flush到磁盘文件</p>
<p>重复上面的步骤，新的数据不断进入 buffer 和 translog，不断将 buffer 数据写入一个又一个新的 segment file文件系统缓存中去，每次 refresh 完 buffer 清空，translog 保留。随着这个过程推进，translog 会变得越来越大。当 translog 达到一定长度的时候，就会触发 commit 操作。</p>
<p>数据最终被flush到磁盘文件就完成了数据的最终归宿。</p>
<figure><figcaption>img_125.png</figcaption></figure>
<p>commit操作流程</p>
<p>commit 操作首先就是将 buffer 中现有数据 refresh 到 os cache 中去，清空 buffer。<br>
然后，将一个 commit point 写入磁盘文件，里面标识着这个 commit point 对应的所有 segment file ，同时强行将 os cache 中目前所有的数据都 fsync 到磁盘文件中去。<br>
最后清空 现有 translog 日志文件，重启一个 translog，此时 commit 操作完成。</p>
<p>这个 commit 操作叫做 flush 。</p>
<p>默认 30 分钟自动执行一次 flush ，将文件系统缓存的数据刷入到磁盘。<br>
但如果 translog 过大，也会触发 flush 。</p>
<p>flush 操作就对应着 commit 的全过程，我们可以通过 es api，手动执行 flush 操作，手动将 os cache 中的数据 fsync 强刷到磁盘上去。</p>
<p>es准实时机制</p>
<p>为什么叫 es 是准实时的？</p>
<p>NRT ，全称 near real-time 。默认是每隔 1 秒 refresh 一次的，所以 es 是准实时的，因为写入的数据 1 秒之后才能被看到。</p>
<p>可以通过 es 的 restful api 或者 java api ，手动执行一次 refresh 操作，就是手动将 buffer 中的数据刷入 os cache 中，让数据立马就可以被搜索到。只要数据被输入 os cache 中，buffer 就会被清空了，因为不需要保留 buffer 了，数据在 translog 里面已经持久化到磁盘去一份了。</p>
<p>es会数据丢失吗？</p>
<p>可能会丢失有 5 秒的数据，停留在 buffer、translog os cache、segment file os cache 中，而不在磁盘上，此时如果备份到translog过程中宕机，会导致 5 秒的数据丢失。</p>
<p>translog 其实也是先写入 os cache 的，默认每隔 5 秒刷一次到磁盘中去，所以默认情况下，可能有 5 秒的数据会仅仅停留在 buffer 或者 translog 文件的 os cache 中，如果此时机器挂了，会丢失 5 秒钟的数据。但是这样性能比较好，最多丢 5 秒的数据。<br>
也可以将 translog 设置成每次写操作必须是直接 fsync 到磁盘，但是性能会差很多。</p>
<p>es集群脑裂</p>
<p>关于集群脑裂的定义请参考我的另一篇博文</p>
<p><a href="https://blog.csdn.net/sinat_34814635/article/details/129914369" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/sinat_34814635/article/details/129914369</a></p>
<p>那么es是如何解决脑裂问题的？</p>
<p>es是直到有足够的master候选节点时，才可以选举出一个master，否则就不要选举出一个master。</p>
<p>这个参数必须被设置为集群中master候选节点的quorum数量，也就是大多数，至于quorum的算法，就是：master候选节点数量 / 2 + 1。</p>
<p>综上所述，一个生产环境的es集群，至少要有3个节点，同时将这个参数设置为quorum，也就是2。discovery.zen.minimum_master_nodes设置为2</p>
<p>那么这个是参数是如何避免脑裂问题的产生的呢？比如我们有3个节点，quorum是2.现在网络故障，1个节点在一个网络区域，另外2个节点在另外一个网络区域，不同的网络区域内无法通信。</p>
<p>这个时候有两种情况情况：</p>
<p>（1）如果master是单独的那个节点，另外2个节点是master候选节点，那么此时那个单独的master节点因为没有指定数量的候选master node在自己当前所在的集群内，因此就会取消当前master的角色，尝试重新选举，但是无法选举成功。然后另外一个网络区域内的node因为无法连接到master，就会发起重新选举，因为有两个master候选节点，满足了quorum，因此可以成功选举出一个master。此时集群中就会还是只有一个master。</p>
<p>（2）如果master和另外一个node在一个网络区域内，然后一个node单独在一个网络区域内。那么此时那个单独的node因为连接不上master，会尝试发起选举，但是因为master候选节点数量不到quorum，因此无法选举出master。而另外一个网络区域内，原先的那个master还会继续工作。这也可以保证集群内只有一个master节点。</p>
<p>综上所述，集群中master节点的数量至少3台，三台主节点通过在elasticsearch.yml中配置discovery.zen.minimum_master_nodes: 2，就可以避免脑裂问题的产生。</p>
<h2>四、ElasticSearch应用</h2>
<h3>1.Elasticsearch SQL</h3>
<figure><figcaption>img_126.png</figcaption></figure>
<p>Elasticsearch SQL允许执行类SQL的查询，可以使用REST接口、命令行或者是JDBC，都可以使用SQL来进行数据的检索和数据的聚合。</p>
<p>Elasticsearch SQL特点：</p>
<p>本地集成</p>
<p>Elasticsearch SQL是专门为Elasticsearch构建的。每个SQL查询都根据底层存储对相关节点有效执行。</p>
<p>没有额外的要求</p>
<p>不依赖其他的硬件、进程、运行时库，Elasticsearch SQL可以直接运行在Elasticsearch集群上</p>
<p>轻量且高效</p>
<p>像SQL那样简洁、高效地完成查询</p>
<p>Elasticsearch SQL提供了sql转换的功能，但是只能满足一些简单的查询，例如：不支持JOIN、不支持较复杂的子查询。官方还是推荐使用DSL语句来实现</p>
<h3>2.Java客户端</h3>
<p>这个就自己看官网吧</p>
<h3>3.es和mysql的双写</h3>
<p>双写的流程：</p>
<ul>
<li>1.先写数据库，然后写es，es只存常搜索的索引字段。</li>
<li>2.读取时先读es，找到对应主键后，然后根据主键在读mysql。（这种场景主要出现在mysql是分表的，而主键配置的是分片键，非分片键的查询将扫描全表）<br>
首先不建议进行双写，因为会造成数据不一致这样新的问题。造成不一致的原因为写入es或者更新es字段失败，加上补充机制后也没有成功。</li>
</ul>
<p>双写的同步</p>
<p>分页查询mysql中的数据，放入mq中（放入mq中的原因，为读取mysql的线程会远比执行同步的线程速度快），同步线程从mq中拉起数据，然后和es对比，如果不同，与mysql中的数据为准，进行删除复制。</p>
<p>补偿机制</p>
<p>我认为任何对es写失败，更新失败，删除失败都应该纪录下来，然后去手动操作使其同步。</p>
<h2>五、ElasticSearch安装配置</h2>
<h3>1.安装ElasticSearch</h3>
<p>解压下载的压缩包，本次使用7.14.0版本</p>
<p>从v7开始，elasticsearch不用单独安装JDK，因为它在下载时会自动下载对应的jdk包。因此不用额外下载jdk和配置环境变量。</p>
<p>在终端cd到elasticsearch的bin目录，运行命令./elasticsearch即可开启es数据库服务（在终端通过按control + c可停止服务）。在网页中访问localhost:9200看到json结果即启动成功。</p>
<p>如下图所示：</p>
<figure><figcaption>img_127.png</figcaption></figure>
<h3>2.安装Kibana</h3>
<p>下载可视化工具Kibanahttps://www.elastic.co/cn/downloads/kibana</p>
<p>解压下载的压缩包，并将其复制粘贴至自己想要存放的目录。Kibana的版本最好和es保持一致，如这次同样使用7.14.0版本</p>
<p>启动Kibana</p>
<p>在终端cd到Kibana目录下，运行命令./Kibana即可开启Kibana的端口访问。在网页中访问http://localhost:5601跳转到如下界面即访问成功。</p>
<p>访问下面地址：<a href="http://localhost:5601/app/dev_tools#/console" target="_blank" rel="noopener noreferrer">http://localhost:5601/app/dev_tools#/console</a> 可进入管理后台</p>
<figure><figcaption>img_128.png</figcaption></figure>
<p>ElasticSearch可视化工具之cerebro</p>
]]></content:encoded>
    </item>
    <item>
      <title>组件Mock</title>
      <link>https://ujava.cn/assembly/mock.html</link>
      <guid>https://ujava.cn/assembly/mock.html</guid>
      <source url="https://ujava.cn/rss.xml">组件Mock</source>
      <description>简介 通过Mock方式，测试编写的程序 通用类定义 方式一（直接操作库表） 方式二（启动容器） 方式三（不启动容器） Mock静态数据 在实际工作当中，我们经常会遇到需要对静态方法进行 mock 的情况。在 mockito 2.x 的时代，我们需要借助 powmock 才能实现。当 mockito 进化到了 3.4.0 版本以后，也开始对静态方法 mo...</description>
      <category>设计组件</category>
      <pubDate>Mon, 25 Mar 2024 03:10:48 GMT</pubDate>
      <content:encoded><![CDATA[<h2>简介</h2>
<p>通过Mock方式，测试编写的程序</p>
<p>通用类定义</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">SpringBootTest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">classes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Application</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">RunWith</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">SpringJUnit4ClassRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> BaseTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">BeforeClass</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> before</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">RunWith</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">SpringJUnit4ClassRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> NewBaseTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> lombok.AllArgsConstructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> lombok.Builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> lombok.NoArgsConstructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Builder</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">NoArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">AllArgsConstructor</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> name;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> setName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> name;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Integer</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> age;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> setAge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">age</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> age;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">User</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">User</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> u</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> jakarta.annotation.Resource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.springframework.stereotype.Service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Service</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserServiceImpl</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Resource</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserMapper</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">User</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> u</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(u);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> lombok.extern.slf4j.Slf4j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.junit.BeforeClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.junit.runner.RunWith</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">RunWith</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">SpringJUnit4ClassRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> NewBaseTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">BeforeClass</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> before</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> lombok.extern.slf4j.Slf4j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.junit.BeforeClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.junit.runner.RunWith</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.springframework.boot.test.context.SpringBootTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">SpringBootTest</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">classes</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> YJavaWebApplication</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">RunWith</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">SpringJUnit4ClassRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> BaseTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">BeforeClass</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> before</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">    &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">springframework</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.boot</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">    &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">spring-boot-test</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">    &lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">version</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.RELEASE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">version</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">    &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">mockito</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">    &lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">mockito-core</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">    &lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">version</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">version</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>方式一（直接操作库表）</h2>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> jakarta.annotation.Resource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> lombok.extern.slf4j.Slf4j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.junit.Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.junit.Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Slf4j</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserDBTest</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> BaseTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Resource</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Resource</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserMapper</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testInsert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        User</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> u</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"zhongguo"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(u);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, i);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>方式二（启动容器）</h2>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> jakarta.annotation.Resource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.junit.Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.junit.Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.mockito.Mockito</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.springframework.boot.test.mock.mockito.MockBean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> * 启动容器单测</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserTest</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> BaseTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Resource</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">MockBean</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> UserMapper</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testInsert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        User</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> u</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"共产"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        Mockito</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">when</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(u)).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">thenReturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(u);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, i);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>方式三（不启动容器）</h2>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.junit.Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.junit.Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.mockito.InjectMocks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.mockito.Mock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.mockito.Mockito</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> * 不启动容器单测</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> NewUserTest</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> NewBaseTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Mock</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    UserMapper</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">InjectMocks</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    UserServiceImpl</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testInsert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        User</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> u</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"中国"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        Mockito</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">when</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">Mockito</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">any</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">())).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">thenReturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">thenThrow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> RuntimeException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"111"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> userService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(u);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, i);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>Mock静态数据</h2>
<p>在实际工作当中，我们经常会遇到需要对静态方法进行 mock 的情况。在 mockito 2.x 的时代，我们需要借助 powmock 才能实现。当<br>
mockito 进化到了 3.4.0 版本以后，也开始对静态方法 mock 进行了支持（主要是通过 mockito-inline 包）。</p>
<p>简单的介绍就到这里，下面让我们进入主题吧。</p>
<p>首先确保 pom 文件中 mockito 相关 jar 包的版本（这里我用的版本是 3.7.7），如下：</p>
<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.mockito&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;mockito-core&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;3.7.7&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;test&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.mockito&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;mockito-inline&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;3.7.7&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;test&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.mockito&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;mockito-junit-jupiter&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;3.7.7&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;test&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;junit&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;junit&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;4.13&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;test&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方式</p>
<p>Mockito.mockStatic(Class mockClass)，如下：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">// 这里 DateUtil 内提供了静态方法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">MockedStatic</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">DateUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> dateUtil </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> mockStatic(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">DateUtil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.mockito.Mockito.mockStatic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">RunWith</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">MockitoJUnitRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> AlphaServiceTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testHttp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        MockedStatic</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">HTTPClient</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> mockStatic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HTTPClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">when</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> HTTPClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sendPost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"xxx/zzz/ccc"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">thenReturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"success"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 关闭</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样基本上就 OK 了。唯一需要注意下的就是 httpClient.close()。</p>
<p>如果项目中未引入 mockito-inline，会出现如下错误信息：</p>
<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">org</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">mockito</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">exceptions</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">base</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">MockitoException</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">The used MockMaker SubclassByteBuddyMockMaker does </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">not</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> support the creation of </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">static</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> mocks</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">Mockito</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'s inline mock maker supports static mocks based on the Instrumentation API.</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">You can simply enable this mock mode, by placing the '</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">mockito-inline</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">' artifact where you are currently using '</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">mockito-core</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">'.</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">Note that Mockito'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">s inline mock maker </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">is</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> not</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> supported</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> Android.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">annoroad</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">order</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">PreOrderServiceTestCase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">testSaveClinicalFreeSuccess1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">PreOrderServiceTestCase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">86</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> sun</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">NativeMethodAccessorImpl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">invoke0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">Native</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> Method)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> sun</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">NativeMethodAccessorImpl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">invoke</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">NativeMethodAccessorImpl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">62</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> sun</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">DelegatingMethodAccessorImpl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">invoke</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">DelegatingMethodAccessorImpl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">43</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">lang</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">reflect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">Method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.invoke(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">Method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">498</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">runners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.FrameworkMethod$</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.runReflectiveCall(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">FrameworkMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">50</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">internal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">runners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ReflectiveCallable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.run(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ReflectiveCallable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">12</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">runners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">FrameworkMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">invokeExplosively</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">FrameworkMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">47</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">internal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">runners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">statements</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">InvokeMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.evaluate(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">InvokeMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">17</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">springframework</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">statements</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">RunBeforeTestExecutionCallbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">evaluate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">RunBeforeTestExecutionCallbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">74</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">springframework</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">statements</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">RunAfterTestExecutionCallbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">evaluate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">RunAfterTestExecutionCallbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">84</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">springframework</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">statements</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">RunBeforeTestMethodCallbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">evaluate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">RunBeforeTestMethodCallbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">75</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">springframework</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">statements</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">RunAfterTestMethodCallbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">evaluate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">RunAfterTestMethodCallbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">86</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">springframework</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">statements</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">SpringRepeat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">evaluate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">SpringRepeat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">84</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">runners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ParentRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.runLeaf(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ParentRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">325</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">springframework</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">SpringJUnit4ClassRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.runChild(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">SpringJUnit4ClassRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">251</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">springframework</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">SpringJUnit4ClassRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.runChild(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">SpringJUnit4ClassRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">97</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">runners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ParentRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">$</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.run(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ParentRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">290</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">runners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ParentRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">$</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.schedule(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ParentRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">71</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">runners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ParentRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.runChildren(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ParentRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">288</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">runners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ParentRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.access$</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ParentRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">58</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">runners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ParentRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">$</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.evaluate(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ParentRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">268</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">springframework</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">statements</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">RunBeforeTestClassCallbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">evaluate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">RunBeforeTestClassCallbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">61</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">springframework</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">statements</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">RunAfterTestClassCallbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">evaluate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">RunAfterTestClassCallbacks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">70</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">runners</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ParentRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.run(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">ParentRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">363</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">springframework</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">SpringJUnit4ClassRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.run(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">SpringJUnit4ClassRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">190</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> org</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">runner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">JUnitCore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.run(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">JUnitCore</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">137</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">intellij</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">JUnit4IdeaTestRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.startRunnerWithArgs(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">JUnit4IdeaTestRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">68</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">intellij</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">rt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.IdeaTestRunner$</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">Repeater</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">startRunnerWithArgs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">IdeaTestRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">33</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">intellij</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">rt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">JUnitStarter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">prepareStreamsAndStart</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">JUnitStarter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">230</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">	at</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">intellij</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">rt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">junit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">JUnitStarter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">JUnitStarter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">58</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>错误提示 static mocking is already registered in the current thread To create a new mock, the existing static mock<br>
registration must be deregistered</p>
<p>当多个单元测试都使用了同一个 static mock 对象，且使用完成后都没有进行 close。此时，若这几个单元测试用一起执行，第一个单元测试占用了<br>
static mock 对象，第二个单元测试就没有办法再占用了。</p>
<p>如果出现了这种情况，解决办法也很简单，就是关闭 static mock 对象，如下：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.mockito.Mockito.mockStatic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">RunWith</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">MockitoJUnitRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> AlphaServiceTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testHttp1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        MockedStatic</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">HTTPClient</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> mockStatic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HTTPClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">when</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> HTTPClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sendPost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"xxx/zzz/ccc"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">thenReturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"success"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testHttp2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        MockedStatic</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">HTTPClient</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> mockStatic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HTTPClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">when</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> HTTPClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sendPost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"xxx/zzz/ccc"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">thenReturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"success"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testHttp3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        MockedStatic</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">HTTPClient</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> mockStatic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HTTPClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">when</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> HTTPClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sendPost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"xxx/zzz/ccc"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">thenReturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"success"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你的很多单元测试中都用到了 mockStatic(HTTPClient.class)，且觉得在每个单元测试当中都写一遍 mockStatic()…close()<br>
很低效，可以采用下边的方式：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.mockito.Mockito.mockStatic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">RunWith</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">MockitoJUnitRunner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> AlphaServiceTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> MockedStatic</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">HttpClietn</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    // 每个单元测试启动前，先执行该方法（高版本中 @Before 被替换成 @BeforeEach）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Before</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> setUp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> mockStatic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">HTTPClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    // 每个单元测试执行完成后，执行该方法（高版本中 @After 被替换成 @AfterEach）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">After</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> teardown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testHttp1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">when</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> HTTPClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sendPost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"xxx/zzz/ccc"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">thenReturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"success"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testHttp2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">when</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> HTTPClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sendPost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"xxx/zzz/ccc"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">thenReturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"success"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testHttp3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        httpClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">when</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> HTTPClient</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">sendPost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"xxx/zzz/ccc"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">thenReturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"success"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        //...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2>Mock缓存数据</h2>
<p>在Mockito中，你可以使用Mockito.when配合相应的调用记录方法来模拟缓存场景。以下是一个简单的例子，展示了如何使用Mockito来模拟一个缓存方法的行为：</p>
<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.junit.Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.junit.Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> org.mockito.Mockito</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.util.Map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> java.util.concurrent.ConcurrentHashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> CacheMockTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    // 模拟的缓存实现</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> cache </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ConcurrentHashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">    // 待测试的缓存访问方法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getFromCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(key);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Test</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> testCacheHit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 缓存数据</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        cache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"key"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"value"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 创建模拟测试</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        CacheMockTest</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> testInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Mockito</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">spy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">// 创建实例的模拟</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 配置mock行为：当调用getFromCache并传递"key"时，返回"value"</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        Mockito</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">doReturn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"value"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">when</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(testInstance).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getFromCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"key"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 执行测试方法</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> testInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getFromCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"key"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 验证结果</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        Assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"value"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, result);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic">        // 验证缓存被正确访问</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        Mockito</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">verify</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(testInstance).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">getFromCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"key"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>
<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们首先通过ConcurrentHashMap模拟了一个简单的缓存。然后我们使用Mockito.spy创建了一个被测试方法所在类的模拟实例。通过Mockito.doReturn我们配置了当调用getFromCache方法并传递特定的key时，模拟方法返回预先定义的值。最后，我们使用Mockito.verify来验证缓存访问方法是否被调用了。这个例子展示了如何使用Mockito来模拟和验证缓存相关的行为。</p>
]]></content:encoded>
    </item>
    <item>
      <title>设计限流</title>
      <link>https://ujava.cn/synthesis/throttling.html</link>
      <guid>https://ujava.cn/synthesis/throttling.html</guid>
      <source url="https://ujava.cn/rss.xml">设计限流</source>
      <description>简介 漏桶和令牌桶的区别 漏桶 漏桶漏桶 令牌桶 令牌桶令牌桶</description>
      <category>设计高频</category>
      <pubDate>Thu, 21 Mar 2024 13:06:03 GMT</pubDate>
      <content:encoded><![CDATA[<h2>简介</h2>
<p>漏桶和令牌桶的区别</p>
<h2>漏桶</h2>
<figure><figcaption>漏桶</figcaption></figure>
<h2>令牌桶</h2>
<figure><figcaption>令牌桶</figcaption></figure>
]]></content:encoded>
    </item>
    <item>
      <title>反应器(Reactor)模式</title>
      <link>https://ujava.cn/design/other/reactor.html</link>
      <guid>https://ujava.cn/design/other/reactor.html</guid>
      <source url="https://ujava.cn/rss.xml">反应器(Reactor)模式</source>
      <description>概述 Reactor设计模式处理由一个或多个客户端并发传递到应用程序的服务请求。应用程序可以注册特定的处理程序以进行处理，这些处理程序由reactor在特定事件上调用。事件处理程序的调度由初始化调度器执行，该调度器管理已注册的事件处理程序。服务请求的多路分解由同步事件多路分解器执行。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>Reactor设计模式处理由一个或多个客户端并发传递到应用程序的服务请求。应用程序可以注册特定的处理程序以进行处理，这些处理程序由reactor在特定事件上调用。事件处理程序的调度由初始化调度器执行，该调度器管理已注册的事件处理程序。服务请求的多路分解由同步事件多路分解器执行。</p>
]]></content:encoded>
    </item>
    <item>
      <title>读写锁模式</title>
      <link>https://ujava.cn/design/other/readerwriterlock.html</link>
      <guid>https://ujava.cn/design/other/readerwriterlock.html</guid>
      <source url="https://ujava.cn/rss.xml">读写锁模式</source>
      <description>概述 当访问数据结构模式时，常规锁不会区分“读锁”和“写锁” 由许多读取数据的线程组成，每个线程都必须锁定数据，这会产生不必要的序列化。 众所周知，读写器锁的存在解决了这个问题 “多个并发读卡器，单个写入器锁”，用于由多个线程同时读取数据组成 并且只允许一个线程写入或修改数据。所有其他人（读者或作者）将被阻止，而作者 正在修改或写入数据，并被取消阻止，...</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>当访问数据结构模式时，常规锁不会区分“读锁”和“写锁”<br>
由许多读取数据的线程组成，每个线程都必须锁定数据，这会产生不必要的序列化。<br>
众所周知，读写器锁的存在解决了这个问题<br>
“多个并发读卡器，单个写入器锁”，用于由多个线程同时读取数据组成<br>
并且只允许一个线程写入或修改数据。所有其他人（读者或作者）将被阻止，而作者<br>
正在修改或写入数据，并被取消阻止，直到写入程序完成写入。</p>
]]></content:encoded>
    </item>
    <item>
      <title>注册(Registry)模式</title>
      <link>https://ujava.cn/design/other/registry.html</link>
      <guid>https://ujava.cn/design/other/registry.html</guid>
      <source url="https://ujava.cn/rss.xml">注册(Registry)模式</source>
      <description>概述 存储单个类的对象，并提供对它们的全局访问点。 与Multiton模式类似，唯一的区别是在注册表中对对象的数量没有限制。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>存储单个类的对象，并提供对它们的全局访问点。<br>
与Multiton模式类似，唯一的区别是在注册表中对对象的数量没有限制。</p>
]]></content:encoded>
    </item>
    <item>
      <title>存储库(Repository)模式</title>
      <link>https://ujava.cn/design/other/repository.html</link>
      <guid>https://ujava.cn/design/other/repository.html</guid>
      <source url="https://ujava.cn/rss.xml">存储库(Repository)模式</source>
      <description>概述 存储库层添加在域和数据映射层之间，以将域对象与 数据库访问代码的详细信息，并最大限度地减少查询代码的分散和重复。这个 存储库模式在域类数量很大或很重的系统中特别有用 利用查询。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>存储库层添加在域和数据映射层之间，以将域对象与<br>
数据库访问代码的详细信息，并最大限度地减少查询代码的分散和重复。这个<br>
存储库模式在域类数量很大或很重的系统中特别有用<br>
利用查询。</p>
]]></content:encoded>
    </item>
    <item>
      <title>资源获取即初始化模式</title>
      <link>https://ujava.cn/design/other/resourceacquisitioninit.html</link>
      <guid>https://ujava.cn/design/other/resourceacquisitioninit.html</guid>
      <source url="https://ujava.cn/rss.xml">资源获取即初始化模式</source>
      <description>概述 资源获取即初始化模式可用于实现异常安全的资源管理。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>资源获取即初始化模式可用于实现异常安全的资源管理。</p>
]]></content:encoded>
    </item>
    <item>
      <title>重试(Retry)模式</title>
      <link>https://ujava.cn/design/other/retry.html</link>
      <guid>https://ujava.cn/design/other/retry.html</guid>
      <source url="https://ujava.cn/rss.xml">重试(Retry)模式</source>
      <description>概述 透明地重试涉及与外部资源通信的某些操作， 特别是在网络上，将调用代码与重试实现细节隔离开来。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>透明地重试涉及与外部资源通信的某些操作，<br>
特别是在网络上，将调用代码与重试实现细节隔离开来。</p>
]]></content:encoded>
    </item>
    <item>
      <title>角色对象(Role Object)模式</title>
      <link>https://ujava.cn/design/other/roleobject.html</link>
      <guid>https://ujava.cn/design/other/roleobject.html</guid>
      <source url="https://ujava.cn/rss.xml">角色对象(Role Object)模式</source>
      <description>概述 通过透明附加的角色对象使对象适应不同客户端的需求，每个对象代表一个角色 对象必须在该客户端的上下文中播放。对象动态管理其角色集。通过将角色表示为 单独的对象、不同的上下文是分开的，并且简化了系统配置。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>通过透明附加的角色对象使对象适应不同客户端的需求，每个对象代表一个角色<br>
对象必须在该客户端的上下文中播放。对象动态管理其角色集。通过将角色表示为<br>
单独的对象、不同的上下文是分开的，并且简化了系统配置。</p>
]]></content:encoded>
    </item>
    <item>
      <title>事务(Saga)模式</title>
      <link>https://ujava.cn/design/other/saga.html</link>
      <guid>https://ujava.cn/design/other/saga.html</guid>
      <source url="https://ujava.cn/rss.xml">事务(Saga)模式</source>
      <description>概述 这种模式用于分布式服务，以原子方式执行一组操作。 这是数据库中事务的模拟，但就微服务架构而言，这是执行的 在分布式环境中</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>这种模式用于分布式服务，以原子方式执行一组操作。<br>
这是数据库中事务的模拟，但就微服务架构而言，这是执行的<br>
在分布式环境中</p>
]]></content:encoded>
    </item>
    <item>
      <title>分离接口模式</title>
      <link>https://ujava.cn/design/other/separatedinterface.html</link>
      <guid>https://ujava.cn/design/other/separatedinterface.html</guid>
      <source url="https://ujava.cn/rss.xml">分离接口模式</source>
      <description>概述 在不同的包中分离接口定义和实现。这允许客户端 完全不知道实现。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>在不同的包中分离接口定义和实现。这允许客户端<br>
完全不知道实现。</p>
]]></content:encoded>
    </item>
    <item>
      <title>序列化实体模式</title>
      <link>https://ujava.cn/design/other/serializedentity.html</link>
      <guid>https://ujava.cn/design/other/serializedentity.html</guid>
      <source url="https://ujava.cn/rss.xml">序列化实体模式</source>
      <description>概述 序列化实体模式。 序列化实体模式使我们能够轻松地将Java对象持久化到数据库中。它使用Serializable接口和DAO模式。序列化实体模式将首先使用Serializable将Java对象转换为一组字节，然后使用DAO模式将这组字节作为BLOB存储到数据库中。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>序列化实体模式。<br>
序列化实体模式使我们能够轻松地将Java对象持久化到数据库中。它使用Serializable接口和DAO模式。序列化实体模式将首先使用Serializable将Java对象转换为一组字节，然后使用DAO模式将这组字节作为BLOB存储到数据库中。</p>
]]></content:encoded>
    </item>
    <item>
      <title>雇工(Servant)模式</title>
      <link>https://ujava.cn/design/other/servant.html</link>
      <guid>https://ujava.cn/design/other/servant.html</guid>
      <source url="https://ujava.cn/rss.xml">雇工(Servant)模式</source>
      <description>概述 Servant用于为一组类提供一些行为。 而不是在每个类中定义这种行为——或者当我们无法将其排除在外时 公共父类中的这种行为-它在Servant中定义过一次。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>Servant用于为一组类提供一些行为。<br>
而不是在每个类中定义这种行为——或者当我们无法将其排除在外时<br>
公共父类中的这种行为-它在Servant中定义过一次。</p>
]]></content:encoded>
    </item>
    <item>
      <title>服务层模式</title>
      <link>https://ujava.cn/design/other/servicelayer.html</link>
      <guid>https://ujava.cn/design/other/servicelayer.html</guid>
      <source url="https://ujava.cn/rss.xml">服务层模式</source>
      <description>概述 Servant用于为一组类提供一些行为。 而不是在每个类中定义这种行为——或者当我们无法将其排除在外时 公共父类中的这种行为-它在Servant中定义过一次。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>Servant用于为一组类提供一些行为。<br>
而不是在每个类中定义这种行为——或者当我们无法将其排除在外时<br>
公共父类中的这种行为-它在Servant中定义过一次。</p>
]]></content:encoded>
    </item>
    <item>
      <title>服务定位模式</title>
      <link>https://ujava.cn/design/other/servicelocator.html</link>
      <guid>https://ujava.cn/design/other/servicelocator.html</guid>
      <source url="https://ujava.cn/rss.xml">服务定位模式</source>
      <description>概述 使用封装获取服务所涉及的过程 强抽象层。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>使用封装获取服务所涉及的过程<br>
强抽象层。</p>
]]></content:encoded>
    </item>
    <item>
      <title>服务工作者模式</title>
      <link>https://ujava.cn/design/other/serviceworker.html</link>
      <guid>https://ujava.cn/design/other/serviceworker.html</guid>
      <source url="https://ujava.cn/rss.xml">服务工作者模式</source>
      <description>概述 将控制器和调度程序与视图和助手相结合，以处理客户端请求并准备一个动态演示作为响应。控制器将内容检索委托给助手，后者管理视图的中间模型的填充。调度器负责视图管理和导航，可以封装在控制器或单独的组件中。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>将控制器和调度程序与视图和助手相结合，以处理客户端请求并准备一个动态演示作为响应。控制器将内容检索委托给助手，后者管理视图的中间模型的填充。调度器负责视图管理和导航，可以封装在控制器或单独的组件中。</p>
]]></content:encoded>
    </item>
    <item>
      <title>分区(Sharding)模式</title>
      <link>https://ujava.cn/design/other/sharding.html</link>
      <guid>https://ujava.cn/design/other/sharding.html</guid>
      <source url="https://ujava.cn/rss.xml">分区(Sharding)模式</source>
      <description>概述 Sharding模式意味着将数据存储划分为水平分区或碎片。每个shard都有相同的模式，但拥有自己不同的数据子集。 shard本身就是一个数据存储（它可以包含许多不同类型实体的数据），在充当存储节点的服务器上运行。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>Sharding模式意味着将数据存储划分为水平分区或碎片。每个shard都有相同的模式，但拥有自己不同的数据子集。<br>
shard本身就是一个数据存储（它可以包含许多不同类型实体的数据），在充当存储节点的服务器上运行。</p>
]]></content:encoded>
    </item>
    <item>
      <title>空间分区模式</title>
      <link>https://ujava.cn/design/other/spatialpartition.html</link>
      <guid>https://ujava.cn/design/other/spatialpartition.html</guid>
      <source url="https://ujava.cn/rss.xml">空间分区模式</source>
      <description>概述 正如《游戏编程模式》一书中所解释的那样 Bob Nystrom认为，空间分区模式通过将对象存储在 按位置组织的数据结构。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>正如<a href="http://gameprogrammingpatterns.com/spatial-partition.html" target="_blank" rel="noopener noreferrer">《游戏编程模式》</a>一书中所解释的那样<br>
Bob Nystrom认为，空间分区模式通过将对象存储在<br>
按位置组织的数据结构。</p>
]]></content:encoded>
    </item>
    <item>
      <title>特殊例子模式</title>
      <link>https://ujava.cn/design/other/specialcase.html</link>
      <guid>https://ujava.cn/design/other/specialcase.html</guid>
      <source url="https://ujava.cn/rss.xml">特殊例子模式</source>
      <description>概述 定义一些特殊情况，并将它们封装到提供不同特殊行为的子类中。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>定义一些特殊情况，并将它们封装到提供不同特殊行为的子类中。</p>
]]></content:encoded>
    </item>
    <item>
      <title>规范(Specification)模式</title>
      <link>https://ujava.cn/design/other/specification.html</link>
      <guid>https://ujava.cn/design/other/specification.html</guid>
      <source url="https://ujava.cn/rss.xml">规范(Specification)模式</source>
      <description>概述 规范模式将如何匹配候选对象的语句与候选对象分开 与之匹配的。它不仅在选择中有用，而且对 验证和按订单建造。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>规范模式将如何匹配候选对象的语句与候选对象分开<br>
与之匹配的。它不仅在选择中有用，而且对<br>
验证和按订单建造。</p>
]]></content:encoded>
    </item>
    <item>
      <title>步骤建立者模式</title>
      <link>https://ujava.cn/design/other/stepbuilder.html</link>
      <guid>https://ujava.cn/design/other/stepbuilder.html</guid>
      <source url="https://ujava.cn/rss.xml">步骤建立者模式</source>
      <description>概述 Builder模式的扩展，它完全指导用户创建对象，不会出现混淆。 用户体验将得到更大的改善，因为他只会看到下一步可用的方法，在正确的时间构建对象之前没有构建方法。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>Builder模式的扩展，它完全指导用户创建对象，不会出现混淆。<br>
用户体验将得到更大的改善，因为他只会看到下一步可用的方法，在正确的时间构建对象之前没有构建方法。</p>
]]></content:encoded>
    </item>
    <item>
      <title>扼杀者(Strangler)模式</title>
      <link>https://ujava.cn/design/other/strangler.html</link>
      <guid>https://ujava.cn/design/other/strangler.html</guid>
      <source url="https://ujava.cn/rss.xml">扼杀者(Strangler)模式</source>
      <description>概述 通过逐步替换特定的功能，逐步迁移遗留系统 新的应用程序和服务。随着旧系统的功能被替换 系统最终覆盖了旧系统的所有功能，并可能具有自己的新功能，然后 扼杀旧系统，让你退役。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>通过逐步替换特定的功能，逐步迁移遗留系统<br>
新的应用程序和服务。随着旧系统的功能被替换<br>
系统最终覆盖了旧系统的所有功能，并可能具有自己的新功能，然后<br>
扼杀旧系统，让你退役。</p>
]]></content:encoded>
    </item>
    <item>
      <title>子类沙盒模式</title>
      <link>https://ujava.cn/design/other/subclasssandbox.html</link>
      <guid>https://ujava.cn/design/other/subclasssandbox.html</guid>
      <source url="https://ujava.cn/rss.xml">子类沙盒模式</source>
      <description>概述 子类沙盒模式描述了一个基本思想，但没有很多详细的机制。当您有几个类似的子类时，您将需要该模式。如果你必须做一个微小的改变，那么就改变基类，而所有的子类都不应该被触及。因此基类必须能够提供派生类需要执行的所有操作。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>子类沙盒模式描述了一个基本思想，但没有很多详细的机制。当您有几个类似的子类时，您将需要该模式。如果你必须做一个微小的改变，那么就改变基类，而所有的子类都不应该被触及。因此基类必须能够提供派生类需要执行的所有操作。</p>
]]></content:encoded>
    </item>
    <item>
      <title>表模块(Table Module)模式</title>
      <link>https://ujava.cn/design/other/tablemodule.html</link>
      <guid>https://ujava.cn/design/other/tablemodule.html</guid>
      <source url="https://ujava.cn/rss.xml">表模块(Table Module)模式</source>
      <description>概述 表模块通过数据库中每个表一个类来组织域逻辑，并且类的单个实例包含将对数据进行操作的各种过程。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>表模块通过数据库中每个表一个类来组织域逻辑，并且类的单个实例包含将对数据进行操作的各种过程。</p>
]]></content:encoded>
    </item>
    <item>
      <title>模版方法模式</title>
      <link>https://ujava.cn/design/other/templatemethod.html</link>
      <guid>https://ujava.cn/design/other/templatemethod.html</guid>
      <source url="https://ujava.cn/rss.xml">模版方法模式</source>
      <description>概述 在操作中定义算法的骨架，将一些步骤推迟到子类中。样板 方法允许子类在不更改算法的情况下重新定义算法的某些步骤 结构</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>在操作中定义算法的骨架，将一些步骤推迟到子类中。样板<br>
方法允许子类在不更改算法的情况下重新定义算法的某些步骤<br>
结构</p>
]]></content:encoded>
    </item>
    <item>
      <title>本地线程存储模式</title>
      <link>https://ujava.cn/design/other/threadlocalstorage.html</link>
      <guid>https://ujava.cn/design/other/threadlocalstorage.html</guid>
      <source url="https://ujava.cn/rss.xml">本地线程存储模式</source>
      <description>概述 提供为每个线程提供一个变量副本的功能，使其线程安全。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>提供为每个线程提供一个变量副本的功能，使其线程安全。</p>
]]></content:encoded>
    </item>
    <item>
      <title>线程池模式</title>
      <link>https://ujava.cn/design/other/threadpool.html</link>
      <guid>https://ujava.cn/design/other/threadpool.html</guid>
      <source url="https://ujava.cn/rss.xml">线程池模式</source>
      <description>概述 通常情况下，要执行的任务是短暂的，并且任务数量很大。 为每个任务创建一个新线程会使系统花费更多的时间来创建和销毁 线程而不是执行实际任务。线程池通过重用现有的 线程，并消除创建新线程的延迟。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>通常情况下，要执行的任务是短暂的，并且任务数量很大。<br>
为每个任务创建一个新线程会使系统花费更多的时间来创建和销毁<br>
线程而不是执行实际任务。线程池通过重用现有的<br>
线程，并消除创建新线程的延迟。</p>
]]></content:encoded>
    </item>
    <item>
      <title>节流(Throttling)模式</title>
      <link>https://ujava.cn/design/other/throttling.html</link>
      <guid>https://ujava.cn/design/other/throttling.html</guid>
      <source url="https://ujava.cn/rss.xml">节流(Throttling)模式</source>
      <description>概述 确保给定的客户端访问服务资源的次数不能超过指定的限制。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>确保给定的客户端访问服务资源的次数不能超过指定的限制。</p>
]]></content:encoded>
    </item>
    <item>
      <title>读者容错模式</title>
      <link>https://ujava.cn/design/other/tolerantreader.html</link>
      <guid>https://ujava.cn/design/other/tolerantreader.html</guid>
      <source url="https://ujava.cn/rss.xml">读者容错模式</source>
      <description>概述 Tolerant Reader是一种集成模式，有助于创建健壮的通信系统。这个想法 是在从另一个服务读取数据时尽可能宽容。这样，当 交流模式发生变化，读者一定不能断。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>Tolerant Reader是一种集成模式，有助于创建健壮的通信系统。这个想法<br>
是在从另一个服务读取数据时尽可能宽容。这样，当<br>
交流模式发生变化，读者一定不能断。</p>
]]></content:encoded>
    </item>
    <item>
      <title>蹦床(Trampoline)模式</title>
      <link>https://ujava.cn/design/other/trampoline.html</link>
      <guid>https://ujava.cn/design/other/trampoline.html</guid>
      <source url="https://ujava.cn/rss.xml">蹦床(Trampoline)模式</source>
      <description>概述 Trampoline模式用于在不破坏堆栈的情况下在Java中递归地实现算法 并且交织功能的执行而不将它们硬编码在一起。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>Trampoline模式用于在不破坏堆栈的情况下在Java中递归地实现算法<br>
并且交织功能的执行而不将它们硬编码在一起。</p>
]]></content:encoded>
    </item>
    <item>
      <title>事务脚本模式</title>
      <link>https://ujava.cn/design/other/transactionscript.html</link>
      <guid>https://ujava.cn/design/other/transactionscript.html</guid>
      <source url="https://ujava.cn/rss.xml">事务脚本模式</source>
      <description>概述 事务脚本按过程组织业务逻辑，其中每个过程处理一个 来自演示文稿的请求。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>事务脚本按过程组织业务逻辑，其中每个过程处理一个<br>
来自演示文稿的请求。</p>
]]></content:encoded>
    </item>
    <item>
      <title>双(Twin)模式</title>
      <link>https://ujava.cn/design/other/twin.html</link>
      <guid>https://ujava.cn/design/other/twin.html</guid>
      <source url="https://ujava.cn/rss.xml">双(Twin)模式</source>
      <description>概述 双模式是一种设计模式，它提供了一个标准的解决方案来模拟多个 java中的继承</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>双模式是一种设计模式，它提供了一个标准的解决方案来模拟多个<br>
java中的继承</p>
]]></content:encoded>
    </item>
    <item>
      <title>事务脚本模式</title>
      <link>https://ujava.cn/design/other/typeobject.html</link>
      <guid>https://ujava.cn/design/other/typeobject.html</guid>
      <source url="https://ujava.cn/rss.xml">事务脚本模式</source>
      <description>概述 当创建基类并从中继承的OOP概念不适用于当前情况时，类型对象模式就是我们使用的模式。当我们不知道预先需要什么类型，或者希望能够在不重复重新编译的情况下方便地修改或添加新类型时，就会发生这种情况。该模式提供了一种解决方案，允许通过创建一个类来灵活地创建所需的对象，该类具有一个表示对象“类型”的字段。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>当创建基类并从中继承的OOP概念不适用于当前情况时，类型对象模式就是我们使用的模式。当我们不知道预先需要什么类型，或者希望能够在不重复重新编译的情况下方便地修改或添加新类型时，就会发生这种情况。该模式提供了一种解决方案，允许通过创建一个类来灵活地创建所需的对象，该类具有一个表示对象“类型”的字段。</p>
]]></content:encoded>
    </item>
    <item>
      <title>工作单元模式</title>
      <link>https://ujava.cn/design/other/unitofwork.html</link>
      <guid>https://ujava.cn/design/other/unitofwork.html</guid>
      <source url="https://ujava.cn/rss.xml">工作单元模式</source>
      <description>概述 当业务事务完成时，所有更新都作为一个大的工作单元发送 一次性持久化，以最大限度地减少数据库往返。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>当业务事务完成时，所有更新都作为一个大的工作单元发送<br>
一次性持久化，以最大限度地减少数据库往返。</p>
]]></content:encoded>
    </item>
    <item>
      <title>更新方法模式</title>
      <link>https://ujava.cn/design/other/updatemethod.html</link>
      <guid>https://ujava.cn/design/other/updatemethod.html</guid>
      <source url="https://ujava.cn/rss.xml">更新方法模式</source>
      <description>概述 更新方法模式通过告诉每个对象一次处理一帧行为来模拟独立对象的集合。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>更新方法模式通过告诉每个对象一次处理一帧行为来模拟独立对象的集合。</p>
]]></content:encoded>
    </item>
    <item>
      <title>值对象模式</title>
      <link>https://ujava.cn/design/other/valueobject.html</link>
      <guid>https://ujava.cn/design/other/valueobject.html</guid>
      <source url="https://ujava.cn/rss.xml">值对象模式</source>
      <description>概述 提供遵循值语义而不是引用语义的对象。 这意味着值对象的相等性不是基于身份的。两个值对象是 当它们具有相同的值时相等，而不一定是同一对象。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>提供遵循值语义而不是引用语义的对象。<br>
这意味着值对象的相等性不是基于身份的。两个值对象是<br>
当它们具有相同的值时相等，而不一定是同一对象。</p>
]]></content:encoded>
    </item>
    <item>
      <title>版本号模式</title>
      <link>https://ujava.cn/design/other/versionnumber.html</link>
      <guid>https://ujava.cn/design/other/versionnumber.html</guid>
      <source url="https://ujava.cn/rss.xml">版本号模式</source>
      <description>概述 版本号模式有助于解决应用程序中的并发冲突。通常，当多个客户端试图同时更新同一记录时，这些冲突会出现在数据库操作中。解决此类冲突需要确定对象是否已更改。因此，我们需要一个版本号，该版本号随着底层数据（例如数据库）的每次更改而递增。存储库可以使用版本号来检查外部更改并向用户报告并发问题。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 06:36:55 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>版本号模式有助于解决应用程序中的并发冲突。通常，当多个客户端试图同时更新同一记录时，这些冲突会出现在数据库操作中。解决此类冲突需要确定对象是否已更改。因此，我们需要一个版本号，该版本号随着底层数据（例如数据库）的每次更改而递增。存储库可以使用版本号来检查外部更改并向用户报告并发问题。</p>
]]></content:encoded>
    </item>
    <item>
      <title>页面对象模式</title>
      <link>https://ujava.cn/design/other/pageobject.html</link>
      <guid>https://ujava.cn/design/other/pageobject.html</guid>
      <source url="https://ujava.cn/rss.xml">页面对象模式</source>
      <description>概述 Page 对象封装 UI，隐藏应用程序（通常是 Web 应用程序）的基础 UI 小组件，并提供特定于应用程序的 API，以允许操作测试所需的 UI 组件。这样一来，它允许测试类本身专注于测试逻辑。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 03:06:02 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>Page 对象封装 UI，隐藏应用程序（通常是 Web 应用程序）的基础 UI 小组件，并提供特定于应用程序的 API，以允许操作测试所需的 UI<br>
组件。这样一来，它允许测试类本身专注于测试逻辑。</p>
]]></content:encoded>
    </item>
    <item>
      <title>参数对象模式</title>
      <link>https://ujava.cn/design/other/parameterobject.html</link>
      <guid>https://ujava.cn/design/other/parameterobject.html</guid>
      <source url="https://ujava.cn/rss.xml">参数对象模式</source>
      <description>概述 Java 语言的语法不允许使用参数的预定义值声明方法。在 Java 中实现默认方法参数的最佳选择可能是使用方法重载。方法重载允许您声明多个具有相同名称但参数数量不同的方法。但是，当方法接受多个参数时，方法重载作为默认参数值解决方案的主要问题就会显现出来。为每个可能的参数组合创建重载方法可能很麻烦。为了解决此问题，使用了 Parameter Obj...</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 03:06:02 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>Java 语言的语法不允许使用参数的预定义值声明方法。在 Java 中实现默认方法参数的最佳选择可能是使用方法重载。方法重载允许您声明多个具有相同名称但参数数量不同的方法。但是，当方法接受多个参数时，方法重载作为默认参数值解决方案的主要问题就会显现出来。为每个可能的参数组合创建重载方法可能很麻烦。为了解决此问题，使用了 Parameter Object 模式。</p>
]]></content:encoded>
    </item>
    <item>
      <title>部分响应模式</title>
      <link>https://ujava.cn/design/other/partialresponse.html</link>
      <guid>https://ujava.cn/design/other/partialresponse.html</guid>
      <source url="https://ujava.cn/rss.xml">部分响应模式</source>
      <description>概述 根据需要将部分响应从服务器发送到客户端。客户端将指定它需要服务器的字段，而不是提供资源的所有详细信息。</description>
      <category>设计模式</category>
      <pubDate>Mon, 04 Mar 2024 03:06:02 GMT</pubDate>
      <content:encoded><![CDATA[<h2>概述</h2>
<p>根据需要将部分响应从服务器发送到客户端。客户端将指定它需要服务器的字段，而不是提供资源的所有详细信息。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>