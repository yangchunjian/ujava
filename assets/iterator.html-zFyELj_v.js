import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as r,c as o,e as s}from"./app-oeUzSxMW.js";const n={},e=s('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><strong>介绍</strong>：Java迭代器模式是一种行为设计模式，它提供了一种访问集合对象元素的方法，而不需要暴露该对象的内部表示。该模式适用于需要遍历集合对象的场景，例如数组、列表、树等。迭代器模式也叫游标模式，它用来<strong>遍历集合对象</strong>。这里说的“集合对象”，我们也可以叫“容器”“聚合对象”，实际上就是包含一组对象的对象，比如，数组、链表、树、图、跳表。迭代器模式主要作用是解耦容器代码和遍历代码。简单来说，不同种类的对象可能需要不同的遍历方式，我们对每一种类型的对象配一个迭代器，最后多个迭代器合成一个。</p><p><strong>场景</strong>：</p><ul><li>1.访问一个集合对象的内容而无需暴露它的内部表示</li><li><ol start="2"><li>为遍历不同的集合结构提供一个统一的访问接口</li></ol></li></ul><p>JAVA 中的 iterator。</p><p><strong>优点</strong>：</p><ul><li>1.它支持以不同的方式遍历一个聚合对象。</li><li>2.迭代器<strong>简化了聚合类</strong></li><li>3.在同一个聚合上可以有多个遍历</li><li>4.在迭代器模式中，<strong>增加新的聚合类和迭代器类都很方便，无须修改原有代码</strong></li></ul><p><strong>不足</strong>：由于迭代器模式将存储数据和遍历数据的职责分离，<strong>增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性</strong></p>',8),i=[e];function l(a,c){return r(),o("div",null,i)}const p=t(n,[["render",l],["__file","iterator.html.vue"]]);export{p as default};
