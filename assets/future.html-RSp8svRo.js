const a=JSON.parse('{"key":"v-657b9982","path":"/java/future.html","title":"Future和CompletableFuture的区别","lang":"zh-CN","frontmatter":{"title":"Future和CompletableFuture的区别","category":"Java","icon":"laptop-code","tag":["设计Java"],"description":"1.Future 在执行多个任务的时候，使用Java标准库提供的线程池是非常方便的。我们提交的任务只需要实现Runnable接口，就可以让线程池去执行： class Task implements Runnable { public String result; public void run() { this.result = longTimeCalculation(); } }","head":[["meta",{"property":"og:url","content":"https://ujava.cn/java/future.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"Future和CompletableFuture的区别"}],["meta",{"property":"og:description","content":"1.Future 在执行多个任务的时候，使用Java标准库提供的线程池是非常方便的。我们提交的任务只需要实现Runnable接口，就可以让线程池去执行： class Task implements Runnable { public String result; public void run() { this.result = longTimeCalculation(); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-25T01:39:12.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:tag","content":"设计Java"}],["meta",{"property":"article:modified_time","content":"2024-04-25T01:39:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Future和CompletableFuture的区别\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-25T01:39:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":3,"title":"小结","slug":"小结-1","link":"#小结-1","children":[]}],"git":{"createdTime":1714009152000,"updatedTime":1714009152000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":1}]},"readingTime":{"minutes":5.68,"words":1703},"filePathRelative":"java/future.md","localizedDate":"2024年4月25日","excerpt":"<h1> 1.Future</h1>\\n<p>在执行多个任务的时候，使用Java标准库提供的线程池是非常方便的。我们提交的任务只需要实现<code>Runnable</code>接口，就可以让线程池去执行：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Task</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">Runnable</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">String</span> result<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>result <span class=\\"token operator\\">=</span> <span class=\\"token function\\">longTimeCalculation</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> \\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}');export{a as data};
