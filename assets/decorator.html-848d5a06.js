import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as t,e as l}from"./app-b5d162aa.js";const r={},a=l('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>装饰器模式是一种结构性设计模式，它允许您在不影响同一类的其他对象的行为的情况下，静态或动态地向单个对象添加行为。 当您想要在运行时添加或删除对象的功能时，或者当您想要减少创建不同行为组合所需的子类数量时，此模式非常有用。</p><p>在Java中，使用继承和组合的结合来实现装饰器模式。 具体来说，您需要创建一个基类或接口来定义对象的核心行为，然后创建一个或多个装饰器类来向对象添加附加行为。 每个装饰器类都具有对其装饰的对象的引用，并且它可以在委托给对象的原始行为之前或之后修改对象的行为。</p><p>装饰器模式适用于以下场景：</p><ul><li><p>在不修改现有代码的情况下，向现有类添加新的功能。</p></li><li><p>在运行时动态地向对象添加新的行为。</p></li><li><p>以不同的方式组合对象，以实现不同的行为。<br> 使用装饰器模式时需要注意以下几点：</p></li><li><p>装饰器类需要实现与被装饰对象相同的接口，以便可以对被装饰对象进行包装。</p></li><li><p>装饰器类应该在调用被装饰对象的方法之前或之后添加新的行为。</p></li><li><p>不要创建过多的装饰器对象，否则会导致代码变得复杂难以维护。</p></li></ul>',5),o=[a];function p(c,n){return i(),t("div",null,o)}const d=e(r,[["render",p],["__file","decorator.html.vue"]]);export{d as default};
