import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,e}from"./app-9mIwNq47.js";const t={},p=e(`<h2 id="一-命名风格" tabindex="-1"><a class="header-anchor" href="#一-命名风格" aria-hidden="true">#</a> (一) 命名风格</h2><h4 id="_1-【强制】所有编程相关的命名均不能以下划线或美元符号开始-也不能以下划线或美元符号结束。" tabindex="-1"><a class="header-anchor" href="#_1-【强制】所有编程相关的命名均不能以下划线或美元符号开始-也不能以下划线或美元符号结束。" aria-hidden="true">#</a> 1.【强制】所有编程相关的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>反例：_name <span class="token operator">/</span> __name <span class="token operator">/</span> $<span class="token class-name">Object</span> <span class="token operator">/</span> name_ <span class="token operator">/</span> name$ <span class="token operator">/</span> <span class="token class-name">Object</span>$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-【强制】所有编程相关的命名严禁使用拼音与英文混合的方式-更不允许直接使用中文的方式。" tabindex="-1"><a class="header-anchor" href="#_2-【强制】所有编程相关的命名严禁使用拼音与英文混合的方式-更不允许直接使用中文的方式。" aria-hidden="true">#</a> 2.【强制】所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</h4><p>说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用。</p><ul><li>正例：ali / alibaba / taobao / kaikeba / aliyun / youku / hangzhou 等国际通用的名称，可视同英文。</li><li>反例：DaZhePromotion【打折】/ getPingfenByName()【评分】 / String fw【福娃】/ int 变量名 = 3</li></ul><h4 id="_3-【强制】代码和注释中都要避免使用任何人类语言中的种族歧视性或侮辱性词语。" tabindex="-1"><a class="header-anchor" href="#_3-【强制】代码和注释中都要避免使用任何人类语言中的种族歧视性或侮辱性词语。" aria-hidden="true">#</a> 3.【强制】代码和注释中都要避免使用任何人类语言中的种族歧视性或侮辱性词语。</h4><ul><li>正例：blockList / allowList / secondary</li><li>反例：blackList / whiteList / slave / SB / WTF</li></ul><h4 id="_4-【强制】类名使用-uppercamelcase-风格-以下情形例外-do-po-dto-bo-vo-uid-等。" tabindex="-1"><a class="header-anchor" href="#_4-【强制】类名使用-uppercamelcase-风格-以下情形例外-do-po-dto-bo-vo-uid-等。" aria-hidden="true">#</a> 4.【强制】类名使用 UpperCamelCase 风格，以下情形例外：DO / PO / DTO / BO / VO / UID 等。</h4><ul><li>正例：ForceCode / UserDO / HtmlDTO / XmlService / TcpUdpDeal / TaPromotion</li><li>反例：forcecode / UserDo / HTMLDto / XMLService / TCPUDPDeal / TAPromotion</li></ul><h4 id="_5-【强制】方法名、参数名、成员变量、局部变量都统一使用-lowercamelcase-风格。" tabindex="-1"><a class="header-anchor" href="#_5-【强制】方法名、参数名、成员变量、局部变量都统一使用-lowercamelcase-风格。" aria-hidden="true">#</a> 5.【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格。</h4><p>正例：localValue / getHttpMessage() / inputUserId</p><h4 id="_6-【强制】常量命名应该全部大写-单词间用下划线隔开-力求语义表达完整清楚-不要嫌名字长。" tabindex="-1"><a class="header-anchor" href="#_6-【强制】常量命名应该全部大写-单词间用下划线隔开-力求语义表达完整清楚-不要嫌名字长。" aria-hidden="true">#</a> 6.【强制】常量命名应该全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</h4><ul><li>正例：MAX_STOCK_COUNT / CACHE_EXPIRED_TIME</li><li>反例：MAX_COUNT / EXPIRED_TIME</li></ul><h4 id="_7-【强制】抽象类命名使用-abstract-或-base-开头-异常类命名使用-exception-结尾-测试类命名以它要测试的类的名称开始-以-test-结尾。" tabindex="-1"><a class="header-anchor" href="#_7-【强制】抽象类命名使用-abstract-或-base-开头-异常类命名使用-exception-结尾-测试类命名以它要测试的类的名称开始-以-test-结尾。" aria-hidden="true">#</a> 7.【强制】抽象类命名使用 Abstract 或 Base 开头；异常类命名使用 Exception 结尾，测试类命名以它要测试的类的名称开始，以 Test 结尾。</h4><h4 id="_8-【强制】类型与中括号紧挨相连来定义数组。" tabindex="-1"><a class="header-anchor" href="#_8-【强制】类型与中括号紧挨相连来定义数组。" aria-hidden="true">#</a> 8.【强制】类型与中括号紧挨相连来定义数组。</h4><ul><li>正例：定义整形数组 int[] arrayDemo。</li><li>反例：在 main 参数中，使用 String args[] 来定义。</li></ul><h4 id="_9-【强制】pojo-类中的任何布尔类型的变量-都不要加-is-前缀-否则部分框架解析会引起序列化错误。" tabindex="-1"><a class="header-anchor" href="#_9-【强制】pojo-类中的任何布尔类型的变量-都不要加-is-前缀-否则部分框架解析会引起序列化错误。" aria-hidden="true">#</a> 9.【强制】POJO 类中的任何布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。</h4><ul><li>说明：本文 MySQL 规约中的建表约定第 1 条，表达是与否的变量采用 is_xxx 的命名方式，所以需要在&lt;resultMap####&lt;/resultMap####设置从 is_xxx 到 xxx 的映射关系。</li><li>反例：定义为布尔类型 Boolean isDeleted 的字段，它的 getter 方法也是 isDeleted()，部分框架在反向解析时，“误以为”对应的字段名称是 deleted，导致字段获取不到，得到意料之外的结果或抛出异常。</li></ul><h4 id="_10-【强制】包名统一使用小写-点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式-但是类名如果有复数含义-类名可以使用复数形式。" tabindex="-1"><a class="header-anchor" href="#_10-【强制】包名统一使用小写-点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式-但是类名如果有复数含义-类名可以使用复数形式。" aria-hidden="true">#</a> 10.【强制】包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。</h4><p>正例：应用工具类包名为 com.alibaba.ei.kunlun.aap.util；类名为 MessageUtils（此规则参考 spring 的框架结构）。</p><h4 id="_11-【强制】避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名-使可理解性降低。" tabindex="-1"><a class="header-anchor" href="#_11-【强制】避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名-使可理解性降低。" aria-hidden="true">#</a> 11.【强制】避免在子父类的成员变量之间、或者不同代码块的局部变量之间采用完全相同的命名，使可理解性降低。</h4><p>说明：子类、父类成员变量名相同，即使是 public 也是能够通过编译，而局部变量在同一方法内的不同代码块中同名<br> 也是合法的，但是要避免使用。对于非 setter / getter 的参数名称也要避免与成员变量名称相同。</p><p>反例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfusingName</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> stock<span class="token punctuation">;</span> <span class="token keyword">protected</span> <span class="token class-name">String</span> alibaba<span class="token punctuation">;</span>
    <span class="token comment">// 非 setter/getter 的参数名称，不允许与本类成员变量同名</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token class-name">String</span> alibaba<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在同一方法体中，不允许与其它代码块中的 money 命名相同</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">15978</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
    <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">ConfusingName</span> <span class="token punctuation">{</span>
    <span class="token comment">// 不允许与父类的成员变量名称相同</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> stock<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_12-【强制】杜绝完全不规范的英文缩写-避免望文不知义。" tabindex="-1"><a class="header-anchor" href="#_12-【强制】杜绝完全不规范的英文缩写-避免望文不知义。" aria-hidden="true">#</a> 12.【强制】杜绝完全不规范的英文缩写，避免望文不知义。</h4><p>反例：AbstractClass“缩写”成 AbsClass；condition“缩写”成 condi；Function“缩写”成 Fu，此类随意缩写<br> 严重降低了代码的可阅读性。</p><h4 id="_13-【推荐】为了达到代码自解释的目标-任何自定义编程元素在命名时-使用完整的单词组合来表达。" tabindex="-1"><a class="header-anchor" href="#_13-【推荐】为了达到代码自解释的目标-任何自定义编程元素在命名时-使用完整的单词组合来表达。" aria-hidden="true">#</a> 13.【推荐】为了达到代码自解释的目标，任何自定义编程元素在命名时，使用完整的单词组合来表达。</h4><ul><li>正例：在 JDK 中，对某个对象引用的 volatile 字段进行原子更新的类名为 AtomicReferenceFieldUpdater。</li><li>反例：常见的方法内变量为 int a; 的定义方式。</li></ul><h4 id="_14-【推荐】在常量与变量命名时-表示类型的名词放在词尾-以提升辨识度。" tabindex="-1"><a class="header-anchor" href="#_14-【推荐】在常量与变量命名时-表示类型的名词放在词尾-以提升辨识度。" aria-hidden="true">#</a> 14.【推荐】在常量与变量命名时，表示类型的名词放在词尾，以提升辨识度。</h4><ul><li>正例：startTime / workQueue / nameList / TERMINATED_THREAD_COUNT</li><li>反例：startedAt / QueueOfWork / listName / COUNT_TERMINATED_THREAD</li></ul><h4 id="_15-【推荐】如果模块、接口、类、方法使用了设计模式-在命名时要体现出具体模式。" tabindex="-1"><a class="header-anchor" href="#_15-【推荐】如果模块、接口、类、方法使用了设计模式-在命名时要体现出具体模式。" aria-hidden="true">#</a> 15.【推荐】如果模块、接口、类、方法使用了设计模式，在命名时要体现出具体模式。</h4><p>说明：将设计模式体现在名字中，有利于阅读者快速理解架构设计思想。<br> 正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderFactory</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginProxy</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceObserver</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_16-【推荐】接口类中的方法和属性不要加任何修饰符号-public-也不要加-保持代码的简洁性-并加上有效的-javadoc-注释。尽量不要在接口里定义常量-如果一定要定义-最好确定该常量与接口的方法相关-并且是整个应用的基础常量。" tabindex="-1"><a class="header-anchor" href="#_16-【推荐】接口类中的方法和属性不要加任何修饰符号-public-也不要加-保持代码的简洁性-并加上有效的-javadoc-注释。尽量不要在接口里定义常量-如果一定要定义-最好确定该常量与接口的方法相关-并且是整个应用的基础常量。" aria-hidden="true">#</a> 16.【推荐】接口类中的方法和属性不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上有效的 Javadoc 注释。尽量不要在接口里定义常量，如果一定要定义，最好确定该常量与接口的方法相关，并且是整个应用的基础常量。</h4><ul><li>正例：接口方法签名 void commit();</li><li>接口基础常量 String COMPANY = &quot;alibaba&quot;;</li><li>反例：接口方法定义 public abstract void commit();<br> 说明：JDK8 中接口允许有默认实现，那么这个 default 方法，是对所有实现类都有价值的默认实现。</li></ul><h4 id="_17-接口和实现类的命名有两套规则" tabindex="-1"><a class="header-anchor" href="#_17-接口和实现类的命名有两套规则" aria-hidden="true">#</a> 17.接口和实现类的命名有两套规则：</h4><p>1）【强制】对于 Service 和 DAO 类，基于 SOA 的理念，暴露出来的服务一定是接口，内部的实现类用 Impl 的后缀与接口区别。</p><ul><li>正例：CacheServiceImpl 实现 CacheService 接口。<br> 2）【推荐】如果是形容能力的接口名称，取对应的形容词为接口名（通常是 –able 结尾的形容词）。</li><li>正例：AbstractTranslator 实现 Translatable。</li></ul><h4 id="_18-【参考】枚举类名带上-enum-后缀-枚举成员名称需要全大写-单词间用下划线隔开。" tabindex="-1"><a class="header-anchor" href="#_18-【参考】枚举类名带上-enum-后缀-枚举成员名称需要全大写-单词间用下划线隔开。" aria-hidden="true">#</a> 18.【参考】枚举类名带上 Enum 后缀，枚举成员名称需要全大写，单词间用下划线隔开。</h4><p>说明：枚举其实就是特殊的常量类，且构造方法被默认强制是私有。</p><ul><li>正例：枚举名字为 ProcessStatusEnum 的成员名称：SUCCESS / UNKNOWN_REASON</li></ul><h4 id="_19-【参考】各层命名规约" tabindex="-1"><a class="header-anchor" href="#_19-【参考】各层命名规约" aria-hidden="true">#</a> 19.【参考】各层命名规约：</h4><p>A）Service / DAO 层方法命名规约：</p><ul><li>1）获取单个对象的方法用 get 做前缀。</li><li>2）获取多个对象的方法用 list 做前缀，复数结尾，如：listObjects</li><li>3）获取统计值的方法用 count 做前缀。 4）插入的方法用 save / insert 做前缀。</li><li>5）删除的方法用 remove / delete 做前缀。 6）修改的方法用 update 做前缀。</li></ul><p>B）领域模型命名规约：</p><ul><li>1）数据对象：xxxDO，xxx 即为数据表名。</li><li>2）数据传输对象：xxxDTO，xxx 为业务领域相关的名称。</li><li>3）展示对象：xxxVO，xxx 一般为网页名称。</li><li>4）POJO 是 DO / DTO / BO / VO 的统称，禁止命名成 xxxPOJO。</li></ul><h2 id="二-常量定义" tabindex="-1"><a class="header-anchor" href="#二-常量定义" aria-hidden="true">#</a> (二) 常量定义</h2><h4 id="_1-【强制】不允许任何魔法值-即未经预先定义的常量-直接出现在代码中。" tabindex="-1"><a class="header-anchor" href="#_1-【强制】不允许任何魔法值-即未经预先定义的常量-直接出现在代码中。" aria-hidden="true">#</a> 1.【强制】不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。</h4><p>反例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 开发者 A 定义了缓存的 key。</span>
<span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;Id#taobao_&quot;</span> <span class="token operator">+</span> tradeId<span class="token punctuation">;</span>
cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 开发者 B 使用缓存时直接复制少了下划线，即 key 是&quot;Id#taobao&quot; + tradeId，导致出现故障。</span>
<span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;Id#taobao&quot;</span> <span class="token operator">+</span> tradeId<span class="token punctuation">;</span>
cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-【强制】long-或-long-赋值时-数值后使用大写-l-不能是小写-l-小写容易跟数字混淆-造成误解。" tabindex="-1"><a class="header-anchor" href="#_2-【强制】long-或-long-赋值时-数值后使用大写-l-不能是小写-l-小写容易跟数字混淆-造成误解。" aria-hidden="true">#</a> 2.【强制】long 或 Long 赋值时，数值后使用大写 L，不能是小写 l，小写容易跟数字混淆，造成误解。</h4><p>说明：public static final Long NUM = 2l; 写的是数字的 21，还是 Long 型的 2？</p><h4 id="_3-【强制】浮点数类型的数值后缀统一为大写的-d-或-f。" tabindex="-1"><a class="header-anchor" href="#_3-【强制】浮点数类型的数值后缀统一为大写的-d-或-f。" aria-hidden="true">#</a> 3.【强制】浮点数类型的数值后缀统一为大写的 D 或 F。</h4><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">HEIGHT</span> <span class="token operator">=</span> <span class="token number">175.5D</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">WEIGHT</span> <span class="token operator">=</span> <span class="token number">150.3F</span><span class="token punctuation">;</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-【推荐】不要使用一个常量类维护所有常量-要按常量功能进行归类-分开维护。" tabindex="-1"><a class="header-anchor" href="#_4-【推荐】不要使用一个常量类维护所有常量-要按常量功能进行归类-分开维护。" aria-hidden="true">#</a> 4.【推荐】不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护。</h4><p>说明：大而全的常量类，杂乱无章，使用查找功能才能定位到要修改的常量，不利于理解，也不利于维护。</p><ul><li>正例：缓存相关常量放在类 CacheConsts 下；系统配置相关常量放在类 SystemConfigConsts 下。</li></ul><h4 id="_5-【推荐】常量的复用层次有五层-跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。" tabindex="-1"><a class="header-anchor" href="#_5-【推荐】常量的复用层次有五层-跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。" aria-hidden="true">#</a> 5.【推荐】常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。</h4><ul><li>1）跨应用共享常量：放置在二方库中，通常是 client.jar 中的 constant 目录下。</li><li>2）应用内共享常量：放置在一方库中，通常是子模块中的 constant 目录下。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    反例：易懂常量也要统一定义成应用内共享常量，两个程序员在两个类中分别定义了表示“是”的常量： 
    类 <span class="token class-name">A</span> 中：<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">YES</span> <span class="token operator">=</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">;</span>
    类 <span class="token class-name">B</span> 中：<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">YES</span> <span class="token operator">=</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">A</span><span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">)</span>，预期是 <span class="token boolean">true</span>，但实际返回为 <span class="token boolean">false</span>，导致线上问题。 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>3）子工程内部共享常量：即在当前子工程的 constant 目录下。</li><li>4）包内共享常量：即在当前包下单独的 constant 目录下。</li><li>5）类内共享常量：直接在类内部 private static final 定义。</li></ul><h4 id="_6-【推荐】如果变量值仅在一个固定范围内变化用-enum-类型来定义。" tabindex="-1"><a class="header-anchor" href="#_6-【推荐】如果变量值仅在一个固定范围内变化用-enum-类型来定义。" aria-hidden="true">#</a> 6.【推荐】如果变量值仅在一个固定范围内变化用 enum 类型来定义。</h4><p>说明：如果存在名称之外的延伸属性应使用 enum 类型，下面正例中的数字就是延伸信息，表示一年中的第几个季节。</p><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SeasonEnum</span> <span class="token punctuation">{</span> 
    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> seq<span class="token punctuation">;</span>
    <span class="token class-name">SeasonEnum</span><span class="token punctuation">(</span><span class="token keyword">int</span> seq<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>seq <span class="token operator">=</span> seq<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSeq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> seq<span class="token punctuation">;</span> <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-代码格式" tabindex="-1"><a class="header-anchor" href="#三-代码格式" aria-hidden="true">#</a> (三) 代码格式</h2><h4 id="_1-【强制】如果大括号内为空-简洁地写成-即可-大括号中间无需换行和空格-如果是非空代码块-则" tabindex="-1"><a class="header-anchor" href="#_1-【强制】如果大括号内为空-简洁地写成-即可-大括号中间无需换行和空格-如果是非空代码块-则" aria-hidden="true">#</a> 1.【强制】如果大括号内为空，简洁地写成{}即可，大括号中间无需换行和空格；如果是非空代码块，则：</h4><ul><li>1）左大括号前不换行。</li><li>2）左大括号后换行。</li><li>3）右大括号前换行。</li><li>4）右大括号后还有 else 等代码则不换行；表示终止的右大括号后必须换行。</li></ul><h4 id="_2-【强制】左小括号和右边相邻字符之间不需要空格-右小括号和左边相邻字符之间也不需要空格-而左大括号前需要加空格。详见第-5-条下方正例提示。" tabindex="-1"><a class="header-anchor" href="#_2-【强制】左小括号和右边相邻字符之间不需要空格-右小括号和左边相邻字符之间也不需要空格-而左大括号前需要加空格。详见第-5-条下方正例提示。" aria-hidden="true">#</a> 2.【强制】左小括号和右边相邻字符之间不需要空格；右小括号和左边相邻字符之间也不需要空格；而左大括号前需要加空格。详见第 5 条下方正例提示。</h4><p>反例：if(空格 a == b 空格)</p><h4 id="_3-【强制】if-for-while-switch-do-等保留字与左右括号之间都必须加空格。" tabindex="-1"><a class="header-anchor" href="#_3-【强制】if-for-while-switch-do-等保留字与左右括号之间都必须加空格。" aria-hidden="true">#</a> 3.【强制】if / for / while / switch / do 等保留字与左右括号之间都必须加空格。</h4><h4 id="_4-【强制】任何二目、三目运算符的左右两边都需要加一个空格。" tabindex="-1"><a class="header-anchor" href="#_4-【强制】任何二目、三目运算符的左右两边都需要加一个空格。" aria-hidden="true">#</a> 4.【强制】任何二目、三目运算符的左右两边都需要加一个空格。</h4><p>说明：包括赋值运算符 =、逻辑运算符 &amp;&amp;、加减乘除符号等。</p><h4 id="_5-【强制】采用-4-个空格缩进-禁止使用-tab-字符。" tabindex="-1"><a class="header-anchor" href="#_5-【强制】采用-4-个空格缩进-禁止使用-tab-字符。" aria-hidden="true">#</a> 5.【强制】采用 4 个空格缩进，禁止使用 Tab 字符。</h4><p>说明：如使用 Tab 缩进，必须设置 1 个 Tab 为 4 个空格。IDEA 设置 Tab 为 4 个空格时，请勿勾选 Use tab character；<br> 而在 Eclipse 中，找到 tab policy 设置为 Spaces only，Tab size：4，最后必须勾选 insert spaces for tabs<br> 正例：（涉及上述中的 1-5 点）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 缩进 4 个空格</span>
    <span class="token class-name">String</span> say <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 运算符的左右必须有一个空格</span>
    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 关键词 if 与括号之间必须有一个空格，括号内的 f 与左括号，0 与右括号不需要空格</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 左大括号前加空格且不换行；左大括号后换行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 右大括号前换行，右大括号后有 else，不用换行</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 在右大括号后直接结束，则必须换行</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-【强制】注释的双斜线与注释内容之间有且仅有一个空格。" tabindex="-1"><a class="header-anchor" href="#_6-【强制】注释的双斜线与注释内容之间有且仅有一个空格。" aria-hidden="true">#</a> 6.【强制】注释的双斜线与注释内容之间有且仅有一个空格。</h4><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 这是示例注释，请注意在双斜线之后有一个空格</span>
<span class="token class-name">String</span> commentString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;demo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-【强制】在进行类型强制转换时-右括号与强制转换值之间不需要任何空格隔开。" tabindex="-1"><a class="header-anchor" href="#_7-【强制】在进行类型强制转换时-右括号与强制转换值之间不需要任何空格隔开。" aria-hidden="true">#</a> 7.【强制】在进行类型强制转换时，右括号与强制转换值之间不需要任何空格隔开。</h4><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> first <span class="token operator">=</span> <span class="token number">3.2D</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>first <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-【强制】单行字符数限制不超过-120-个-超出需要换行-换行时遵循如下原则" tabindex="-1"><a class="header-anchor" href="#_8-【强制】单行字符数限制不超过-120-个-超出需要换行-换行时遵循如下原则" aria-hidden="true">#</a> 8.【强制】单行字符数限制不超过 120 个，超出需要换行，换行时遵循如下原则：</h4><ul><li>1）第二行相对第一行缩进 4 个空格，从第三行开始，不再继续缩进，参考示例。</li><li>2）运算符与下文一起换行。</li><li>3）方法调用的点符号与下文一起换行。</li><li>4）方法调用中的多个参数需要换行时，在逗号后进行。</li><li>5）在括号前不要换行，见反例。<br> 正例：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 超过 120 个字符的情况下，换行缩进 4 个空格，并且方法前的点号一起换行</span>
builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;yang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;hao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;chen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;chen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;chen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 超过 120 个字符的情况下，不要在括号前换行</span>
builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;you&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;are&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>append
<span class="token punctuation">(</span><span class="token string">&quot;lucky&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 参数很多的方法调用可能超过 120 个字符，逗号后才是换行处</span>
<span class="token function">method</span><span class="token punctuation">(</span>args1<span class="token punctuation">,</span> args2<span class="token punctuation">,</span> args3<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> argsX<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-【强制】方法参数在定义和传入时-多个参数逗号后面必须加空格。" tabindex="-1"><a class="header-anchor" href="#_9-【强制】方法参数在定义和传入时-多个参数逗号后面必须加空格。" aria-hidden="true">#</a> 9.【强制】方法参数在定义和传入时，多个参数逗号后面必须加空格。</h4><p>正例：下例中实参的 args1 逗号后边必须要有一个空格。 method(args1, args2, args3);</p><h4 id="_10-【强制】ide-的-text-file-encoding-设置为-utf-8-ide-中文件的换行符使用-unix-格式-不要使用windows-格式。" tabindex="-1"><a class="header-anchor" href="#_10-【强制】ide-的-text-file-encoding-设置为-utf-8-ide-中文件的换行符使用-unix-格式-不要使用windows-格式。" aria-hidden="true">#</a> 10.【强制】IDE 的 text file encoding 设置为 UTF-8；IDE 中文件的换行符使用 Unix 格式，不要使用Windows 格式。</h4><h4 id="_11-【推荐】单个方法的总行数不超过-80-行。" tabindex="-1"><a class="header-anchor" href="#_11-【推荐】单个方法的总行数不超过-80-行。" aria-hidden="true">#</a> 11.【推荐】单个方法的总行数不超过 80 行。</h4><p>说明：除注释之外的方法签名、左右大括号、方法内代码、空行、回车及任何不可见字符的总行数不超过 80 行。</p><p>正例：代码逻辑分清红花和绿叶，个性和共性，绿叶逻辑单独出来成为额外方法，使主干代码更加晰；共性逻辑抽取<br> 成为共性方法，便于复用和维护。</p><h4 id="_12-【推荐】没有必要增加若干空格来使变量的赋值等号与上一行对应位置的等号对齐。" tabindex="-1"><a class="header-anchor" href="#_12-【推荐】没有必要增加若干空格来使变量的赋值等号与上一行对应位置的等号对齐。" aria-hidden="true">#</a> 12.【推荐】没有必要增加若干空格来使变量的赋值等号与上一行对应位置的等号对齐。</h4><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> one <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> two <span class="token operator">=</span> <span class="token number">2L</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> three <span class="token operator">=</span> <span class="token number">3F</span><span class="token punctuation">;</span>
<span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：增加 builder 这个变量，如果需要对齐，则给 one、two、three 都要增加几个空格，在变量比较多的情况下，是非常累赘的事情。</p><h4 id="_13-【推荐】不同逻辑、不同语义、不同业务的代码之间插入一个空行-分隔开来以提升可读性。" tabindex="-1"><a class="header-anchor" href="#_13-【推荐】不同逻辑、不同语义、不同业务的代码之间插入一个空行-分隔开来以提升可读性。" aria-hidden="true">#</a> 13.【推荐】不同逻辑、不同语义、不同业务的代码之间插入一个空行，分隔开来以提升可读性。</h4><p>说明：任何情形，没有必要插入多个空行进行隔开。</p><h2 id="四-oop-规约" tabindex="-1"><a class="header-anchor" href="#四-oop-规约" aria-hidden="true">#</a> (四) OOP 规约</h2><h4 id="_1-【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法-无谓增加编译器解析成本-直接用类名来访问即可。" tabindex="-1"><a class="header-anchor" href="#_1-【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法-无谓增加编译器解析成本-直接用类名来访问即可。" aria-hidden="true">#</a> 1.【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成本，直接用类名来访问即可。</h4><h4 id="_2-【强制】所有的覆写方法-必须加-override-注解。" tabindex="-1"><a class="header-anchor" href="#_2-【强制】所有的覆写方法-必须加-override-注解。" aria-hidden="true">#</a> 2.【强制】所有的覆写方法，必须加 @Override 注解。</h4><p>说明：getObject() 与 get0bject() 的问题。一个是字母的 O，一个是数字的 0，加 @Override 可以准确判断是否覆盖<br> 成功。另外，如果在抽象类中对方法签名进行修改，其实现类会马上编译报错。</p><h4 id="_3-【强制】相同参数类型-相同业务含义-才可以使用的可变参数-参数类型避免定义为-object。" tabindex="-1"><a class="header-anchor" href="#_3-【强制】相同参数类型-相同业务含义-才可以使用的可变参数-参数类型避免定义为-object。" aria-hidden="true">#</a> 3.【强制】相同参数类型，相同业务含义，才可以使用的可变参数，参数类型避免定义为 Object。</h4><p>说明：可变参数必须放置在参数列表的最后。（建议开发者尽量不用可变参数编程）</p><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">listUsers</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-【强制】外部正在调用的接口或者二方库依赖的接口-不允许修改方法签名-避免对接口调用方产生影响。接口过时必须加-deprecated-注解-并清晰地说明采用的新接口或者新服务是什么。" tabindex="-1"><a class="header-anchor" href="#_4-【强制】外部正在调用的接口或者二方库依赖的接口-不允许修改方法签名-避免对接口调用方产生影响。接口过时必须加-deprecated-注解-并清晰地说明采用的新接口或者新服务是什么。" aria-hidden="true">#</a> 4.【强制】外部正在调用的接口或者二方库依赖的接口，不允许修改方法签名，避免对接口调用方产生影响。接口过时必须加 @Deprecated 注解，并清晰地说明采用的新接口或者新服务是什么。</h4><h4 id="_5-【强制】不能使用过时的类或方法。" tabindex="-1"><a class="header-anchor" href="#_5-【强制】不能使用过时的类或方法。" aria-hidden="true">#</a> 5.【强制】不能使用过时的类或方法。</h4><p>说明：java.net.URLDecoder 中的方法 decode(String encodeStr) 这个方法已经过时，应该使用双参数<br> decode(String source, String encode)。接口提供方既然明确是过时接口，那么有义务同时提供新的接口；作为调用<br> 方来说，有义务去考证过时方法的新实现是什么。</p><h4 id="_6-【强制】object-的-equals-方法容易抛空指针异常-应使用常量或确定有值的对象来调用-equals。" tabindex="-1"><a class="header-anchor" href="#_6-【强制】object-的-equals-方法容易抛空指针异常-应使用常量或确定有值的对象来调用-equals。" aria-hidden="true">#</a> 6.【强制】Object 的 equals 方法容易抛空指针异常，应使用常量或确定有值的对象来调用 equals。</h4><ul><li>正例：&quot;test&quot;.equals(param);</li><li>反例：param.equals(&quot;test&quot;);<br> 说明：推荐使用 JDK7 引入的工具类 java.util.Objects#equals(Object a, Object b)</li></ul><h4 id="_7-【强制】所有整型包装类对象之间值的比较-全部使用-equals-方法比较。" tabindex="-1"><a class="header-anchor" href="#_7-【强制】所有整型包装类对象之间值的比较-全部使用-equals-方法比较。" aria-hidden="true">#</a> 7.【强制】所有整型包装类对象之间值的比较，全部使用 equals 方法比较。</h4><p>说明：对于 Integer var = ? 在 -128 至 127 之间的赋值，Integer 对象是在 IntegerCache.cache 产生，会复用已有对<br> 象，这个区间内的 Integer 值可以直接使用 == 进行判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复<br> 用已有对象，这是一个大坑，推荐使用 equals 方法进行判断。</p><h4 id="_8-【强制】任何货币金额-均以最小货币单位且为整型类型进行存储。" tabindex="-1"><a class="header-anchor" href="#_8-【强制】任何货币金额-均以最小货币单位且为整型类型进行存储。" aria-hidden="true">#</a> 8.【强制】任何货币金额，均以最小货币单位且为整型类型进行存储。</h4><h4 id="_9-【强制】浮点数之间的等值判断-基本数据类型不能使用-进行比较-包装数据类型不能使用-equals进行判断。" tabindex="-1"><a class="header-anchor" href="#_9-【强制】浮点数之间的等值判断-基本数据类型不能使用-进行比较-包装数据类型不能使用-equals进行判断。" aria-hidden="true">#</a> 9.【强制】浮点数之间的等值判断，基本数据类型不能使用 == 进行比较，包装数据类型不能使用 equals进行判断。</h4><p>说明：浮点数采用“尾数+阶码”的编码方式，类似于科学计数法的“有效数字+指数”的表示方式。二进制无法精确表<br> 示大部分的十进制小数。</p><p>反例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">1.0F</span> <span class="token operator">-</span> <span class="token number">0.9F</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">0.9F</span> <span class="token operator">-</span> <span class="token number">0.8F</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// 预期进入此代码块，执行其它业务逻辑</span>
<span class="token comment">// 但事实上 a == b 的结果为 false</span>
<span class="token punctuation">}</span><span class="token class-name">Float</span> x <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Float</span> y <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// 预期进入此代码块，执行其它业务逻辑</span>
<span class="token comment">// 但事实上 equals 的结果为 false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正例：</p><p>(1)指定一个误差范围，两个浮点数的差值在此范围之内，则认为是相等的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">1.0F</span> <span class="token operator">-</span> <span class="token number">0.9F</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">0.9F</span> <span class="token operator">-</span> <span class="token number">0.8F</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> diff <span class="token operator">=</span> <span class="token number">1e-6F</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> diff<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(2)使用 BigDecimal 来定义值，再进行浮点数的运算操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;1.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.9&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> x <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> y <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-【强制】bigdecimal-的等值比较应使用-compareto-方法-而不是-equals-方法。" tabindex="-1"><a class="header-anchor" href="#_10-【强制】bigdecimal-的等值比较应使用-compareto-方法-而不是-equals-方法。" aria-hidden="true">#</a> 10.【强制】BigDecimal 的等值比较应使用 compareTo() 方法，而不是 equals() 方法。</h4><p>说明：equals() 方法会比较值和精度（1.0 与 1.00 返回结果为 false），而 compareTo() 则会忽略精度。</p><h4 id="_11-【强制】定义数据对象-do-类时-属性类型要与数据库字段类型相匹配。" tabindex="-1"><a class="header-anchor" href="#_11-【强制】定义数据对象-do-类时-属性类型要与数据库字段类型相匹配。" aria-hidden="true">#</a> 11.【强制】定义数据对象 DO 类时，属性类型要与数据库字段类型相匹配。</h4><ul><li>正例：数据库字段的 bigint 必须与类属性的 Long 类型相对应。</li><li>反例：某业务的数据库表 id 字段定义类型为 bigint unsigned，实际类对象属性为 Integer，随着 id 越来越大，超过 Integer 的表示范围而溢出成为负数，此时数据库 id 不支持存入负数抛出异常产生线上故障。</li></ul><h4 id="_12-【强制】禁止使用构造方法-bigdecimal-double-的方式把-double-值转化为-bigdecimal-对象。" tabindex="-1"><a class="header-anchor" href="#_12-【强制】禁止使用构造方法-bigdecimal-double-的方式把-double-值转化为-bigdecimal-对象。" aria-hidden="true">#</a> 12.【强制】禁止使用构造方法 BigDecimal(double) 的方式把 double 值转化为 BigDecimal 对象。</h4><p>说明：BigDecimal(double) 存在精度损失风险，在精确计算或值比较的场景中可能会导致业务逻辑异常。如：<br> BigDecimal g = new BigDecimal(0.1F)；实际的存储值为：0.100000001490116119384765625</p><p>正例：优先推荐入参为 String 的构造方法，或使用 BigDecimal 的 valueOf 方法，此方法内部其实执行了 Double 的<br> toString，而 Double 的 toString 按 double 的实际能表达的精度对尾数进行了截断。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> recommend1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> recommend2 <span class="token operator">=</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_13-关于基本数据类型与包装数据类型的使用标准如下" tabindex="-1"><a class="header-anchor" href="#_13-关于基本数据类型与包装数据类型的使用标准如下" aria-hidden="true">#</a> 13.关于基本数据类型与包装数据类型的使用标准如下：</h4><ul><li>1）【强制】所有的 POJO 类属性必须使用包装数据类型。</li><li>2）【强制】RPC 方法的返回值和参数必须使用包装数据类型。</li><li>3）【推荐】所有的局部变量使用基本数据类型。</li></ul><p>说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何 NPE 问题，或者入库检查，<br> 都由使用者来保证。</p><ul><li>正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。</li><li>反例：某业务的交易报表上显示成交总额涨跌情况，即正负 x%，x 为基本数据类型，调用的 RPC 服务，调用不成功时，返回的是默认值，页面显示为 0%，这是不合理的，应该显示成中划线-。所以包装数据类型的 null 值，能够表示额外的<br> 信息，如：远程调用失败，异常退出。</li></ul><h4 id="_14-【强制】定义-do-po-dto-vo-等-pojo-类时-不要设定任何属性默认值。" tabindex="-1"><a class="header-anchor" href="#_14-【强制】定义-do-po-dto-vo-等-pojo-类时-不要设定任何属性默认值。" aria-hidden="true">#</a> 14.【强制】定义 DO / PO / DTO / VO 等 POJO 类时，不要设定任何属性默认值。</h4><p>反例：某业务的 DO 的 createTime 默认值为 new Date()；但是这个属性在数据提取时并没有置入具体值，在更新其<br> 它字段时又附带更新了此字段，导致创建时间被修改成当前时间。</p><h4 id="_15-【强制】序列化类新增属性时-请不要修改-serialversionuid-字段-避免反序列失败-如果完全不兼容升级-避免反序列化混乱-那么请修改-serialversionuid-值。" tabindex="-1"><a class="header-anchor" href="#_15-【强制】序列化类新增属性时-请不要修改-serialversionuid-字段-避免反序列失败-如果完全不兼容升级-避免反序列化混乱-那么请修改-serialversionuid-值。" aria-hidden="true">#</a> 15.【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。</h4><p>说明：注意 serialVersionUID 不一致会抛出序列化运行时异常。</p><h4 id="_16-【强制】构造方法里面禁止加入任何业务逻辑-如果有初始化逻辑-请放在-init-方法中。" tabindex="-1"><a class="header-anchor" href="#_16-【强制】构造方法里面禁止加入任何业务逻辑-如果有初始化逻辑-请放在-init-方法中。" aria-hidden="true">#</a> 16.【强制】构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在 init 方法中。</h4><h4 id="_17-【强制】pojo-类必须写-tostring-方法。使用-ide-中的工具-source-generate-tostring-时-如果继承了另一个-pojo-类-注意在前面加一下-super-tostring-。" tabindex="-1"><a class="header-anchor" href="#_17-【强制】pojo-类必须写-tostring-方法。使用-ide-中的工具-source-generate-tostring-时-如果继承了另一个-pojo-类-注意在前面加一下-super-tostring-。" aria-hidden="true">#</a> 17.【强制】POJO 类必须写 toString 方法。使用 IDE 中的工具 source &gt; generate toString 时，如果继承了另一个 POJO 类，注意在前面加一下 super.toString()。</h4><p>说明：在方法执行抛出异常时，可以直接调用 POJO 的 toString() 方法打印其属性值，便于排查问题。</p><h4 id="_18-【强制】禁止在-pojo-类中-同时存在对应属性-xxx-的-isxxx-和-getxxx-方法。" tabindex="-1"><a class="header-anchor" href="#_18-【强制】禁止在-pojo-类中-同时存在对应属性-xxx-的-isxxx-和-getxxx-方法。" aria-hidden="true">#</a> 18.【强制】禁止在 POJO 类中，同时存在对应属性 xxx 的 isXxx() 和 getXxx() 方法。</h4><p>说明：框架在调用属性 xxx 的提取方法时，并不能确定哪个方法一定是被优先调用到，神坑之一。</p><h4 id="_19-【推荐】使用索引访问用-string-的-split-方法得到的数组时-需做最后一个分隔符后有无内容的检查" tabindex="-1"><a class="header-anchor" href="#_19-【推荐】使用索引访问用-string-的-split-方法得到的数组时-需做最后一个分隔符后有无内容的检查" aria-hidden="true">#</a> 19.【推荐】使用索引访问用 String 的 split 方法得到的数组时，需做最后一个分隔符后有无内容的检查，</h4><p>否则会有抛 IndexOutOfBoundsException 的风险。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>说明： <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;a,b,c,,&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ary <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 预期大于 3，结果等于 3</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_20-【推荐】当一个类有多个构造方法-或者多个同名方法-这些方法应该按顺序放置在一起-便于阅读" tabindex="-1"><a class="header-anchor" href="#_20-【推荐】当一个类有多个构造方法-或者多个同名方法-这些方法应该按顺序放置在一起-便于阅读" aria-hidden="true">#</a> 20.【推荐】当一个类有多个构造方法，或者多个同名方法，这些方法应该按顺序放置在一起，便于阅读，</h4><p>此条规则优先于下一条。</p><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">protected</span> <span class="token keyword">double</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> param1<span class="token punctuation">,</span> <span class="token keyword">int</span> param2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_21-【推荐】类内方法定义的顺序依次是-公有方法或保护方法-私有方法-getter-setter-方法。" tabindex="-1"><a class="header-anchor" href="#_21-【推荐】类内方法定义的顺序依次是-公有方法或保护方法-私有方法-getter-setter-方法。" aria-hidden="true">#</a> 21.【推荐】类内方法定义的顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; getter / setter 方法。</h4><p>说明：公有方法是类的调用者和维护者最关心的方法，首屏展示最好；保护方法虽然只是子类关心，也可能是“模板设<br> 计模式”下的核心方法；而私有方法外部一般不需要特别关心，是一个黑盒实现；因为承载的信息价值较低，所有<br> Service 和 DAO 的 getter / setter 方法放在类体最后。</p><h4 id="_22-【推荐】setter-方法中-参数名称与类成员变量名称一致-this-成员名-参数名。在-getter-setter-方法中-不要增加业务逻辑-增加排查问题的难度。" tabindex="-1"><a class="header-anchor" href="#_22-【推荐】setter-方法中-参数名称与类成员变量名称一致-this-成员名-参数名。在-getter-setter-方法中-不要增加业务逻辑-增加排查问题的难度。" aria-hidden="true">#</a> 22.【推荐】setter 方法中，参数名称与类成员变量名称一致，this.成员名=参数名。在 getter / setter 方法中，不要增加业务逻辑，增加排查问题的难度。</h4><p>反例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_23-【推荐】循环体内-字符串的连接方式-使用-stringbuilder-的-append-方法进行扩展。" tabindex="-1"><a class="header-anchor" href="#_23-【推荐】循环体内-字符串的连接方式-使用-stringbuilder-的-append-方法进行扩展。" aria-hidden="true">#</a> 23.【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。</h4><p>反例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;start&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
str <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：反编译出的字节码文件显示每次循环都会 new 出一个 StringBuilder 对象，然后进行 append 操作，最后通过<br> toString() 返回 String 对象，造成内存资源浪费。</p><h4 id="_24-【推荐】final-可以声明类、成员变量、方法、以及本地变量-下列情况使用-final-关键字" tabindex="-1"><a class="header-anchor" href="#_24-【推荐】final-可以声明类、成员变量、方法、以及本地变量-下列情况使用-final-关键字" aria-hidden="true">#</a> 24.【推荐】final 可以声明类、成员变量、方法、以及本地变量，下列情况使用 final 关键字：</h4><ul><li>1）不允许被继承的类，如：String 类。</li><li>2）不允许修改引用的域对象，如：POJO 类的域变量。</li><li>3）不允许被覆写的方法，如：POJO 类的 setter 方法。</li><li>4）不允许运行过程中重新赋值的局部变量。</li><li>5）避免上下文重复使用一个变量，使用 final 关键字可以强制重新定义一个变量，方便更好地进行重构。</li></ul><h4 id="_25-【推荐】慎用-object-的-clone-方法来拷贝对象。" tabindex="-1"><a class="header-anchor" href="#_25-【推荐】慎用-object-的-clone-方法来拷贝对象。" aria-hidden="true">#</a> 25.【推荐】慎用 Object 的 clone 方法来拷贝对象。</h4><p>说明：对象 clone 方法默认是浅拷贝，若想实现深拷贝需覆写 clone 方法实现域对象的深度遍历式拷贝。</p><h4 id="_26-【推荐】类成员与方法访问控制从严" tabindex="-1"><a class="header-anchor" href="#_26-【推荐】类成员与方法访问控制从严" aria-hidden="true">#</a> 26.【推荐】类成员与方法访问控制从严：</h4><ul><li>1）如果不允许外部直接通过 new 来创建对象，那么构造方法必须是 private。</li><li>2）工具类不允许有 public 或 default 构造方法。</li><li>3）类非 static 成员变量并且与子类共享，必须是 protected。</li><li>4）类非 static 成员变量并且仅在本类使用，必须是 private。</li><li>5）类 static 成员变量如果仅在本类使用，必须是 private。</li><li>6）若是 static 成员变量，考虑是否为 final。</li><li>7）类成员方法只供类内部调用，必须是 private。</li><li>8）类成员方法只对继承类公开，那么限制为 protected。</li></ul><p>说明：任何类、方法、参数、变量，严控访问范围。过于宽泛的访问范围，不利于模块解耦。思考：如果是一个<br> private 的方法，想删除就删除，可是一个 public 的 service 成员方法或成员变量，删除一下，不得手心冒点汗吗？<br> 变量像自己的小孩，尽量在自己的视线内，变量作用域太大，无限制的到处跑，那么你会担心的。</p><h2 id="五-日期时间" tabindex="-1"><a class="header-anchor" href="#五-日期时间" aria-hidden="true">#</a> (五) 日期时间</h2><h4 id="_1-【强制】日期格式化时-传入-pattern-中表示年份统一使用小写的-y。" tabindex="-1"><a class="header-anchor" href="#_1-【强制】日期格式化时-传入-pattern-中表示年份统一使用小写的-y。" aria-hidden="true">#</a> 1.【强制】日期格式化时，传入 pattern 中表示年份统一使用小写的 y。</h4><p>说明：日期格式化时，yyyy 表示当天所在的年，而大写的 YYYY 代表是 week in which year（JDK7 之后引入的概念），<br> 意思是当天所在的周属于的年份，一周从周日开始，周六结束，只要本周跨年，返回的 YYYY 就是下一年。</p><p>正例：表示日期和时间的格式如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>反例：某程序员因使用 YYYY/MM/dd 进行日期格式化，2017/12/31 执行结果为 2018/12/31，造成线上故障。</p><h4 id="_2-【强制】在日期格式中分清楚大写的-m-和小写的-m-大写的-h-和小写的-h-分别指代的意义。" tabindex="-1"><a class="header-anchor" href="#_2-【强制】在日期格式中分清楚大写的-m-和小写的-m-大写的-h-和小写的-h-分别指代的意义。" aria-hidden="true">#</a> 2.【强制】在日期格式中分清楚大写的 M 和小写的 m，大写的 H 和小写的 h 分别指代的意义。</h4><p>说明：日期格式中的这两对字母表意如下：</p><ul><li>1）表示月份是大写的 M</li><li>2）表示分钟则是小写的 m</li><li>3）24 小时制的是大写的 H</li><li>4）12 小时制的则是小写的 h</li></ul><h4 id="_3-【强制】获取当前毫秒数-system-currenttimemillis-而不是-new-date-gettime-。" tabindex="-1"><a class="header-anchor" href="#_3-【强制】获取当前毫秒数-system-currenttimemillis-而不是-new-date-gettime-。" aria-hidden="true">#</a> 3.【强制】获取当前毫秒数：System.currentTimeMillis()；而不是 new Date().getTime()。</h4><p>说明：获取纳秒级时间，则使用 System.nanoTime 的方式。在 JDK8 中，针对统计时间等场景，推荐使用 Instant 类。</p><h4 id="_4-【强制】不允许在程序任何地方中使用" tabindex="-1"><a class="header-anchor" href="#_4-【强制】不允许在程序任何地方中使用" aria-hidden="true">#</a> 4.【强制】不允许在程序任何地方中使用：</h4><ul><li>1）java.sql.Date</li><li>2）java.sql.Time</li><li>3）java.sql.Timestamp。</li></ul><p>说明：第 1 个不记录时间，getHours() 抛出异常；第 2 个不记录日期，getYear() 抛出异常；第 3 个在构造方法<br> super((time / 1000) * 1000)，在 Timestamp 属性 fastTime 和 nanos 分别存储秒和纳秒信息。</p><p>反例：java.util.Date.after(Date) 进行时间比较时，当入参是 java.sql.Timestamp 时，会触发 JDK BUG（JDK9 已修<br> 复），可能导致比较时的意外结果。</p><h4 id="_5-【强制】禁止在程序中写死一年为-365-天-避免在公历闰年时出现日期转换错误或程序逻辑错误。" tabindex="-1"><a class="header-anchor" href="#_5-【强制】禁止在程序中写死一年为-365-天-避免在公历闰年时出现日期转换错误或程序逻辑错误。" aria-hidden="true">#</a> 5.【强制】禁止在程序中写死一年为 365 天，避免在公历闰年时出现日期转换错误或程序逻辑错误。</h4><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取今年的天数</span>
<span class="token keyword">int</span> daysOfThisYear <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lengthOfYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取指定某年的天数</span>
<span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2011</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lengthOfYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 第一种情况：在闰年 366 天时，出现数组越界异常</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dayArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">365</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 第二种情况：一年有效期的会员制，2020 年 1 月 26 日注册，硬编码 365 返回的却是 2021 年 1 月 25 日</span>
<span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">,</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-【推荐】避免公历闰年-2-月问题。闰年的-2-月份有-29-天-一年后的那一天不可能是-2-月-29-日。" tabindex="-1"><a class="header-anchor" href="#_6-【推荐】避免公历闰年-2-月问题。闰年的-2-月份有-29-天-一年后的那一天不可能是-2-月-29-日。" aria-hidden="true">#</a> 6.【推荐】避免公历闰年 2 月问题。闰年的 2 月份有 29 天，一年后的那一天不可能是 2 月 29 日。</h4><h4 id="_7-【推荐】使用枚举值来指代月份。如果使用数字-注意-date-calendar-等日期相关类的月份-month-取-值范围从-0-到-11-之间。" tabindex="-1"><a class="header-anchor" href="#_7-【推荐】使用枚举值来指代月份。如果使用数字-注意-date-calendar-等日期相关类的月份-month-取-值范围从-0-到-11-之间。" aria-hidden="true">#</a> 7.【推荐】使用枚举值来指代月份。如果使用数字，注意 Date，Calendar 等日期相关类的月份 month 取 值范围从 0 到 11 之间。</h4><p>说明：参考 JDK 原生注释，Month value is 0-based. e.g., 0 for January.</p><p>正例：Calendar.JANUARY，Calendar.FEBRUARY，Calendar.MARCH 等来指代相应月份来进行传参或比较。</p><h2 id="六-集合处理" tabindex="-1"><a class="header-anchor" href="#六-集合处理" aria-hidden="true">#</a> (六) 集合处理</h2><h4 id="_1-【强制】关于-hashcode-和-equals-的处理-遵循如下规则" tabindex="-1"><a class="header-anchor" href="#_1-【强制】关于-hashcode-和-equals-的处理-遵循如下规则" aria-hidden="true">#</a> 1.【强制】关于 hashCode 和 equals 的处理，遵循如下规则：</h4><ul><li>1）只要覆写 equals，就必须覆写 hashCode。</li><li>2）因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须覆写这两种方法。</li><li>3）如果自定义对象作为 Map 的键，那么必须覆写 hashCode 和 equals。</li></ul><p>说明：String 因为覆写了 hashCode 和 equals 方法，所以可以愉快地将 String 对象作为 key 来使用。</p><h4 id="_2-【强制】判断所有集合内部的元素是否为空-使用-isempty-方法-而不是-size-0-的方式。" tabindex="-1"><a class="header-anchor" href="#_2-【强制】判断所有集合内部的元素是否为空-使用-isempty-方法-而不是-size-0-的方式。" aria-hidden="true">#</a> 2.【强制】判断所有集合内部的元素是否为空，使用 isEmpty() 方法，而不是 size() == 0 的方式。</h4><p>说明：在某些集合中，前者的时间复杂度为 O(1)，而且可读性更好。</p><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;no element in this map.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-【强制】在使用-java-util-stream-collectors-类的-tomap-方法转为-map-集合时-一定要使用参数类型为-binaryoperator-参数名为-mergefunction-的方法-否则当出现相同-key-时会抛出illegalstateexception-异常。" tabindex="-1"><a class="header-anchor" href="#_3-【强制】在使用-java-util-stream-collectors-类的-tomap-方法转为-map-集合时-一定要使用参数类型为-binaryoperator-参数名为-mergefunction-的方法-否则当出现相同-key-时会抛出illegalstateexception-异常。" aria-hidden="true">#</a> 3.【强制】在使用 java.util.stream.Collectors 类的 toMap() 方法转为 Map 集合时，一定要使用参数类型为 BinaryOperator，参数名为 mergeFunction 的方法，否则当出现相同 key 时会抛出IllegalStateException 异常。</h4><p>说明：参数 mergeFunction 的作用是当出现 key 重复时，自定义对 value 的处理策略。</p><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> pairArrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pairArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">,</span> <span class="token number">12.10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pairArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">,</span> <span class="token number">12.19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pairArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">,</span> <span class="token number">6.28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 生成的 map 集合中只有一个键值对：{version=6.28}</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> pairArrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Pair</span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">,</span> <span class="token class-name">Pair</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> departments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;RDC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;RDC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;KKB&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 抛出 IllegalStateException 异常</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>departments<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">hashCode</span><span class="token punctuation">,</span> str <span class="token operator">-&gt;</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-【强制】在使用-java-util-stream-collectors-类的-tomap-方法转为-map-集合时-一定要注意当-value为-null-时会抛-npe-异常。" tabindex="-1"><a class="header-anchor" href="#_4-【强制】在使用-java-util-stream-collectors-类的-tomap-方法转为-map-集合时-一定要注意当-value为-null-时会抛-npe-异常。" aria-hidden="true">#</a> 4.【强制】在使用 java.util.stream.Collectors 类的 toMap() 方法转为 Map 集合时，一定要注意当 value为 null 时会抛 NPE 异常。</h4><p>说明：在 java.util.HashMap 的 merge 方法里会进行如下的判断：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> remappingFunction <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> pairArrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pairArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;version1&quot;</span><span class="token punctuation">,</span> <span class="token number">8.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pairArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;version2&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 抛出 NullPointerException 异常</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> pairArrayList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Pair</span><span class="token operator">::</span><span class="token function">getKey</span><span class="token punctuation">,</span> <span class="token class-name">Pair</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-【强制】arraylist-的-sublist-结果不可强转成-arraylist-否则会抛出-classcastexception-异常" tabindex="-1"><a class="header-anchor" href="#_5-【强制】arraylist-的-sublist-结果不可强转成-arraylist-否则会抛出-classcastexception-异常" aria-hidden="true">#</a> 5.【强制】ArrayList 的 subList 结果不可强转成 ArrayList，否则会抛出 ClassCastException 异常：</h4><p>java.util.RandomAccessSubList cannot be cast to java.util.ArrayList。</p><p>说明：subList() 返回的是 ArrayList 的内部类 SubList，并不是 ArrayList 本身，而是 ArrayList 的一个视图，对于<br> SubList 的所有操作最终会反映到原列表上。</p><h4 id="_6-【强制】使用-map-的方法-keyset-values-entryset-返回集合对象时-不可以对其进行添加元素" tabindex="-1"><a class="header-anchor" href="#_6-【强制】使用-map-的方法-keyset-values-entryset-返回集合对象时-不可以对其进行添加元素" aria-hidden="true">#</a> 6.【强制】使用 Map 的方法 keySet() / values() / entrySet() 返回集合对象时，不可以对其进行添加元素</h4><p>操作，否则会抛出 UnsupportedOperationException 异常。</p><h4 id="_7-【强制】collections-类返回的对象-如-emptylist-singletonlist-等都是-immutable-list-不可对其进行添加或者删除元素的操作。" tabindex="-1"><a class="header-anchor" href="#_7-【强制】collections-类返回的对象-如-emptylist-singletonlist-等都是-immutable-list-不可对其进行添加或者删除元素的操作。" aria-hidden="true">#</a> 7.【强制】Collections 类返回的对象，如：emptyList() / singletonList() 等都是 immutable list，不可对其进行添加或者删除元素的操作。</h4><p>反例：如果查询无结果，返回 Collections.emptyList() 空集合对象，调用方一旦在返回的集合中进行了添加元素的操作，就会触发 UnsupportedOperationException 异常。</p><h4 id="_8-【强制】在-sublist-场景中-高度注意对父集合元素的增加或删除-均会导致子列表的遍历、增加、删除产生-concurrentmodificationexception-异常。" tabindex="-1"><a class="header-anchor" href="#_8-【强制】在-sublist-场景中-高度注意对父集合元素的增加或删除-均会导致子列表的遍历、增加、删除产生-concurrentmodificationexception-异常。" aria-hidden="true">#</a> 8.【强制】在 subList 场景中，高度注意对父集合元素的增加或删除，均会导致子列表的遍历、增加、删除产生 ConcurrentModificationException 异常。</h4><p>说明：抽查表明，90% 的程序员对此知识点都有错误的认知。</p><h4 id="_9-【强制】使用集合转数组的方法-必须使用集合的-toarray-t-array-传入的是类型完全一致、长度为0-的空数组。" tabindex="-1"><a class="header-anchor" href="#_9-【强制】使用集合转数组的方法-必须使用集合的-toarray-t-array-传入的是类型完全一致、长度为0-的空数组。" aria-hidden="true">#</a> 9.【强制】使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一致、长度为0 的空数组。</h4><ul><li>反例：直接使用 toArray 无参方法存在问题，此方法返回值只能是 Object[]类，若强转其它类型数组将出现 ClassCastException 错误。</li><li>正例：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;guan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：使用 toArray 带参方法，数组空间大小的 length：</p><ul><li>1）等于 0，动态创建与 size 相同的数组，性能最好。</li><li>2）大于 0 但小于 size，重新创建大小等于 size 的数组，增加 GC 负担。</li><li>3）等于 size，在高并发情况下，数组创建完成之后，size 正在变大的情况下，负面影响与 2 相同。</li><li>4）大于 size，空间浪费，且在 size 处插入 null 值，存在 NPE 隐患。</li></ul><h4 id="_10-【强制】使用-collection-接口任何实现类的-addall-方法时-要对输入的集合参数进行-npe-判断。" tabindex="-1"><a class="header-anchor" href="#_10-【强制】使用-collection-接口任何实现类的-addall-方法时-要对输入的集合参数进行-npe-判断。" aria-hidden="true">#</a> 10.【强制】使用 Collection 接口任何实现类的 addAll() 方法时，要对输入的集合参数进行 NPE 判断。</h4><p>说明：在 ArrayList#addAll 方法的第一行代码即 Object[] a = c.toArray()；其中 c 为输入集合参数，如果为 null，<br> 则直接抛出异常。</p><h4 id="_11-【强制】使用工具类-arrays-aslist-把数组转换成集合时-不能使用其修改集合相关的方法-它的-add-remove-clear-方法会抛出-unsupportedoperationexception-异常。" tabindex="-1"><a class="header-anchor" href="#_11-【强制】使用工具类-arrays-aslist-把数组转换成集合时-不能使用其修改集合相关的方法-它的-add-remove-clear-方法会抛出-unsupportedoperationexception-异常。" aria-hidden="true">#</a> 11.【强制】使用工具类 Arrays.asList() 把数组转换成集合时，不能使用其修改集合相关的方法，它的 add/ remove / clear 方法会抛出 UnsupportedOperationException 异常。</h4><p>说明：asList 的返回对象是一个 Arrays 内部类，并没有实现集合的修改方法。Arrays.asList 体现的是适配器模式，只<br> 是转换接口，后台的数据仍是数组。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token string">&quot;yang&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;guan&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bao&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第一种情况：list.add(&quot;a&quot;); 运行时异常。</li><li>第二种情况：str[0] = &quot;change&quot;; list 中的元素也会随之修改，反之亦然。</li></ul><h4 id="_12-【强制】泛型通配符-extends-t-来接收返回的数据-此写法的泛型集合不能使用-add-方法-而-super-t-不能使用-get-方法-两者在接口调用赋值的场景中容易出错。" tabindex="-1"><a class="header-anchor" href="#_12-【强制】泛型通配符-extends-t-来接收返回的数据-此写法的泛型集合不能使用-add-方法-而-super-t-不能使用-get-方法-两者在接口调用赋值的场景中容易出错。" aria-hidden="true">#</a> 12.【强制】泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法， 而&lt;? super T&gt;不能使用 get 方法，两者在接口调用赋值的场景中容易出错。</h4><p>说明：扩展说一下 PECS(Producer Extends Consumer Super) 原则，即频繁往外读取内容的，适合用&lt;? extends T&gt;，经常往里插入的，适合用&lt;? super T&gt;</p><h4 id="_13-【强制】在无泛型限制定义的集合赋值给泛型限制的集合时-在使用集合元素时-需要进行instanceof-判断-避免抛出-classcastexception-异常。" tabindex="-1"><a class="header-anchor" href="#_13-【强制】在无泛型限制定义的集合赋值给泛型限制的集合时-在使用集合元素时-需要进行instanceof-判断-避免抛出-classcastexception-异常。" aria-hidden="true">#</a> 13.【强制】在无泛型限制定义的集合赋值给泛型限制的集合时，在使用集合元素时，需要进行instanceof 判断，避免抛出 ClassCastException 异常。</h4><p>说明：毕竟泛型是在 JDK5 后才出现，考虑到向前兼容，编译器是允许非泛型集合与泛型集合互相赋值。</p><p>反例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> generics <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">List</span> notGenerics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
notGenerics<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
notGenerics<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
generics <span class="token operator">=</span> notGenerics<span class="token punctuation">;</span>
<span class="token comment">// 此处抛出 ClassCastException 异常</span>
<span class="token class-name">String</span> string <span class="token operator">=</span> generics<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_14-【强制】不要在-foreach-循环里进行元素的-remove-add-操作。remove-元素请使用-iterator-方式" tabindex="-1"><a class="header-anchor" href="#_14-【强制】不要在-foreach-循环里进行元素的-remove-add-操作。remove-元素请使用-iterator-方式" aria-hidden="true">#</a> 14.【强制】不要在 foreach 循环里进行元素的 remove / add 操作。remove 元素请使用 iterator 方式，</h4><p>如果并发操作，需要对 iterator 对象加锁。</p><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token class-name">String</span> item <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>删除元素的条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：反例中的执行结果肯定会出乎大家的意料，那么试一下把“1”换成“2”会是同样的结果吗？</p><h4 id="_15-【强制】在-jdk7-版本及以上-comparator-实现类要满足如下三个条件-不然-arrays-sort-collections-sort-会抛-illegalargumentexception-异常。" tabindex="-1"><a class="header-anchor" href="#_15-【强制】在-jdk7-版本及以上-comparator-实现类要满足如下三个条件-不然-arrays-sort-collections-sort-会抛-illegalargumentexception-异常。" aria-hidden="true">#</a> 15.【强制】在 JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然 Arrays.sort，Collections.sort 会抛 IllegalArgumentException 异常。</h4><p>说明：三个条件如下</p><ul><li>1）x，y 的比较结果和 y，x 的比较结果相反。</li><li>2）x &gt; y，y &gt; z，则 x &gt; z。</li><li>3）x = y，则 x，z 比较结果和 y，z 比较结果相同。</li></ul><p>反例：下例中没有处理相等的情况，交换两个对象判断结果并不互反，不符合第一个条件，在实际使用中可能会出现异常。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Student</span> o1<span class="token punctuation">,</span> <span class="token class-name">Student</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> o2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_16-【推荐】泛型集合使用时-在-jdk7-及以上-使用-diamond-语法或全省略。" tabindex="-1"><a class="header-anchor" href="#_16-【推荐】泛型集合使用时-在-jdk7-及以上-使用-diamond-语法或全省略。" aria-hidden="true">#</a> 16.【推荐】泛型集合使用时，在 JDK7 及以上，使用 diamond 语法或全省略。</h4><p>说明：菱形泛型，即 diamond，直接使用&lt;&gt;来指代前边已经指定的类型。</p><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// diamond 方式，即&lt;&gt;</span>
<span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> userCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 全省略方式</span>
<span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_17-【推荐】集合初始化时-指定集合初始值大小。" tabindex="-1"><a class="header-anchor" href="#_17-【推荐】集合初始化时-指定集合初始值大小。" aria-hidden="true">#</a> 17.【推荐】集合初始化时，指定集合初始值大小。</h4><p>说明：HashMap 使用构造方法 HashMap(int initialCapacity) 进行初始化时，如果暂时无法确定集合大小，那么指<br> 定默认值（16）即可。</p><ul><li>正例：initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子（即 loaderfactor）默认为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。</li><li>反例：HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素增加而被迫不断扩容，resize() 方法总共会调用 8 次，反复重建哈希表和数据迁移。当放置的集合元素个数达千万级时会影响程序性能。</li></ul><h4 id="_18-【推荐】使用-entryset-遍历-map-类集合-kv-而不是-keyset-方式进行遍历。" tabindex="-1"><a class="header-anchor" href="#_18-【推荐】使用-entryset-遍历-map-类集合-kv-而不是-keyset-方式进行遍历。" aria-hidden="true">#</a> 18.【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。</h4><p>说明：keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应的 value。而<br> entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用 Map.forEach 方法。</p><p>正例：values() 返回的是 V 值集合，是一个 list 集合对象；keySet() 返回的是 K 值集合，是一个 Set 集合对象；<br> entrySet() 返回的是 K-V 值组合的 Set 集合。</p><h4 id="_19-【推荐】高度注意-map-类集合-k-v-能不能存储-null-值的情况-如下表格" tabindex="-1"><a class="header-anchor" href="#_19-【推荐】高度注意-map-类集合-k-v-能不能存储-null-值的情况-如下表格" aria-hidden="true">#</a> 19.【推荐】高度注意 Map 类集合 K / V 能不能存储 null 值的情况，如下表格：</h4><table><thead><tr><th>集合类</th><th>Key</th><th>Value</th><th>Super</th><th>说明</th></tr></thead><tbody><tr><td>Hashtable</td><td>不允许为 null</td><td>不允许为 null</td><td>Dictionary</td><td>线程安全</td></tr><tr><td>TreeMap</td><td>不允许为 null</td><td>允许为 null</td><td>AbstractMap</td><td>线程不安全</td></tr><tr><td>ConcurrentHashMap</td><td>不允许为 null</td><td>不允许为 null</td><td>AbstractMap</td><td>锁分段技术（JDK8:CAS）</td></tr><tr><td>HashMap</td><td>允许为 null</td><td>允许为 null</td><td>AbstractMap</td><td>线程不安全</td></tr></tbody></table><p>反例：由于 HashMap 的干扰，很多人认为 ConcurrentHashMap 是可以置入 null 值，而事实上，存储 null 值时会抛<br> 出 NPE 异常。</p><h4 id="_20-【参考】合理利用好集合的有序性-sort-和稳定性-order-避免集合的无序性-unsort-和不稳定性-unorder-带来的负面影响。" tabindex="-1"><a class="header-anchor" href="#_20-【参考】合理利用好集合的有序性-sort-和稳定性-order-避免集合的无序性-unsort-和不稳定性-unorder-带来的负面影响。" aria-hidden="true">#</a> 20.【参考】合理利用好集合的有序性（sort）和稳定性（order），避免集合的无序性（unsort）和不稳定性（unorder）带来的负面影响。</h4><p>说明：有序性是指遍历的结果是按某种比较规则依次排列的，稳定性指集合每次遍历的元素次序是一定的。如：</p><p>ArrayList 是 order / unsort；HashMap 是 unorder / unsort；TreeSet 是 order / sort。</p><h4 id="_21-【参考】利用-set-元素唯一的特性-可以快速对一个集合进行去重操作-避免使用-list-的contains-进行遍历去重或者判断包含操作。" tabindex="-1"><a class="header-anchor" href="#_21-【参考】利用-set-元素唯一的特性-可以快速对一个集合进行去重操作-避免使用-list-的contains-进行遍历去重或者判断包含操作。" aria-hidden="true">#</a> 21.【参考】利用 Set 元素唯一的特性，可以快速对一个集合进行去重操作，避免使用 List 的contains() 进行遍历去重或者判断包含操作。</h4><h2 id="七-并发处理" tabindex="-1"><a class="header-anchor" href="#七-并发处理" aria-hidden="true">#</a> (七) 并发处理</h2><h4 id="_1-【强制】获取单例对象需要保证线程安全-其中的方法也要保证线程安全。" tabindex="-1"><a class="header-anchor" href="#_1-【强制】获取单例对象需要保证线程安全-其中的方法也要保证线程安全。" aria-hidden="true">#</a> 1.【强制】获取单例对象需要保证线程安全，其中的方法也要保证线程安全。</h4><p>说明：资源驱动类、工具类、单例工厂类都需要注意。</p><h4 id="_2-【强制】创建线程或线程池时请指定有意义的线程名称-方便出错时回溯。" tabindex="-1"><a class="header-anchor" href="#_2-【强制】创建线程或线程池时请指定有意义的线程名称-方便出错时回溯。" aria-hidden="true">#</a> 2.【强制】创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。</h4><p>正例：自定义线程工厂，并且根据外部特征进行分组，比如，来自同一机房的调用，把机房编号赋值给</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>whatFeatureOfGroup：
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserThreadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">{</span> 
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> namePrefix<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> nextId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 定义线程组名称，在利用 jstack 来排查问题时，非常有帮助</span>
            <span class="token class-name">UserThreadFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> whatFeatureOfGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            namePrefix <span class="token operator">=</span> <span class="token string">&quot;FromUserThreadFactory&#39;s&quot;</span> <span class="token operator">+</span> whatFeatureOfGroup <span class="token operator">+</span> <span class="token string">&quot;-Worker-&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> name <span class="token operator">=</span> namePrefix <span class="token operator">+</span> nextId<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> task<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> thread<span class="token punctuation">;</span> 
        <span class="token punctuation">}</span> 
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-【强制】线程资源必须通过线程池提供-不允许在应用中自行显式创建线程。" tabindex="-1"><a class="header-anchor" href="#_3-【强制】线程资源必须通过线程池提供-不允许在应用中自行显式创建线程。" aria-hidden="true">#</a> 3.【强制】线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。</h4><p>说明：线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。如果不使用<br> 线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题。</p><h4 id="_4-【强制】线程池不允许使用-executors-去创建-而是通过-threadpoolexecutor-的方式-这样的处理方式让写的同学更加明确线程池的运行规则-规避资源耗尽的风险。" tabindex="-1"><a class="header-anchor" href="#_4-【强制】线程池不允许使用-executors-去创建-而是通过-threadpoolexecutor-的方式-这样的处理方式让写的同学更加明确线程池的运行规则-规避资源耗尽的风险。" aria-hidden="true">#</a> 4.【强制】线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</h4><p>说明：Executors 返回的线程池对象的弊端如下：</p><ul><li>1）FixedThreadPool 和 SingleThreadPool： <ul><li>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</li></ul></li><li>2）CachedThreadPool： <ul><li>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</li></ul></li><li>3）ScheduledThreadPool： <ul><li>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</li></ul></li></ul><h4 id="_5-【强制】simpledateformat-是线程不安全的类-一般不要定义为-static-变量-如果定义为-static-必须加锁-或者使用-dateutils-工具类。" tabindex="-1"><a class="header-anchor" href="#_5-【强制】simpledateformat-是线程不安全的类-一般不要定义为-static-变量-如果定义为-static-必须加锁-或者使用-dateutils-工具类。" aria-hidden="true">#</a> 5.【强制】SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为 static，必须加锁，或者使用 DateUtils 工具类。</h4><p>正例：注意线程安全，使用 DateUtils。亦推荐如下处理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DateFormat</span><span class="token punctuation">&gt;</span></span> dateStyle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DateFormat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">DateFormat</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：如果是 JDK8 的应用，可以使用 Instant 代替 Date，LocalDateTime 代替 Calendar，DateTimeFormatter 代替<br> SimpleDateFormat，官方给出的解释：simple beautiful strong immutable thread-safe。</p><h4 id="_6-【强制】必须回收自定义的-threadlocal-变量记录的当前线程的值-尤其在线程池场景下-线程经常会被复用-如果不清理自定义的-threadlocal-变量-可能会影响后续业务逻辑和造成内存泄露等问题。" tabindex="-1"><a class="header-anchor" href="#_6-【强制】必须回收自定义的-threadlocal-变量记录的当前线程的值-尤其在线程池场景下-线程经常会被复用-如果不清理自定义的-threadlocal-变量-可能会影响后续业务逻辑和造成内存泄露等问题。" aria-hidden="true">#</a> 6.【强制】必须回收自定义的 ThreadLocal 变量记录的当前线程的值，尤其在线程池场景下，线程经常会被复用，如果不清理自定义的 ThreadLocal 变量，可能会影响后续业务逻辑和造成内存泄露等问题。</h4><p>尽量在代码中使用 try-finally 块进行回收。<br> 正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>objectThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
<span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
objectThreadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-【强制】高并发时-同步调用应该去考量锁的性能损耗。能用无锁数据结构-就不要用锁-能锁区块-就不要锁整个方法体-能用对象锁-就不要用类锁。" tabindex="-1"><a class="header-anchor" href="#_7-【强制】高并发时-同步调用应该去考量锁的性能损耗。能用无锁数据结构-就不要用锁-能锁区块-就不要锁整个方法体-能用对象锁-就不要用类锁。" aria-hidden="true">#</a> 7.【强制】高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。</h4><p>说明：尽可能使加锁的代码块工作量尽可能的小，避免在锁代码块中调用 RPC 方法。</p><h4 id="_8-【强制】对多个资源、数据库表、对象同时加锁时-需要保持一致的加锁顺序-否则可能会造成死锁。" tabindex="-1"><a class="header-anchor" href="#_8-【强制】对多个资源、数据库表、对象同时加锁时-需要保持一致的加锁顺序-否则可能会造成死锁。" aria-hidden="true">#</a> 8.【强制】对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。</h4><p>说明：线程一需要对表 A、B、C 依次全部加锁后才可以进行更新操作，那么线程二的加锁顺序也必须是 A、B、C，否则可<br> 能出现死锁。</p><h4 id="_9-【强制】在使用阻塞等待获取锁的方式中-必须在-try-代码块之外-并且在加锁方法与-try-代码块之间没有任何可能抛出异常的方法调用-避免加锁成功后-在-finally-中无法解锁。" tabindex="-1"><a class="header-anchor" href="#_9-【强制】在使用阻塞等待获取锁的方式中-必须在-try-代码块之外-并且在加锁方法与-try-代码块之间没有任何可能抛出异常的方法调用-避免加锁成功后-在-finally-中无法解锁。" aria-hidden="true">#</a> 9.【强制】在使用阻塞等待获取锁的方式中，必须在 try 代码块之外，并且在加锁方法与 try 代码块之间没有任何可能抛出异常的方法调用，避免加锁成功后，在 finally 中无法解锁。</h4><ul><li>说明一：在 lock 方法与 try 代码块之间的方法调用抛出异常，无法解锁，造成其它线程无法成功获取锁。</li><li>说明二：如果 lock 方法在 try 代码块之内，可能由于其它方法抛出异常，导致在 finally 代码块中，unlock 对未加锁的对象解锁，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），抛出 IllegalMonitorStateException 异常。</li><li>说明三：在 Lock 对象的 lock 方法实现中可能抛出 unchecked 异常，产生的后果与说明二相同。</li></ul><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxxLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
<span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">doOthers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxxLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
<span class="token comment">// 如果此处抛出异常，则直接执行 finally 代码块</span>
<span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 无论加锁是否成功，finally 代码块都会执行</span>
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">doOthers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-【强制】在使用尝试机制来获取锁的方式中-进入业务代码块之前-必须先判断当前线程是否持有锁。" tabindex="-1"><a class="header-anchor" href="#_10-【强制】在使用尝试机制来获取锁的方式中-进入业务代码块之前-必须先判断当前线程是否持有锁。" aria-hidden="true">#</a> 10.【强制】在使用尝试机制来获取锁的方式中，进入业务代码块之前，必须先判断当前线程是否持有锁。</h4><p>锁的释放规则与锁的阻塞等待方式相同。<br> 说明：Lock 对象的 unlock 方法在执行时，它会调用 AQS 的 tryRelease 方法（取决于具体实现类），如果当前线程不<br> 持有锁，则抛出 IllegalMonitorStateException 异常。<br> 正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XxxLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token keyword">boolean</span> isLocked <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>isLocked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
<span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">doOthers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_11-【强制】并发修改同一记录时-避免更新丢失-需要加锁。要么在应用层加锁-要么在缓存加锁-要么在数据库层使用乐观锁-使用-version-作为更新依据。" tabindex="-1"><a class="header-anchor" href="#_11-【强制】并发修改同一记录时-避免更新丢失-需要加锁。要么在应用层加锁-要么在缓存加锁-要么在数据库层使用乐观锁-使用-version-作为更新依据。" aria-hidden="true">#</a> 11.【强制】并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用 version 作为更新依据。</h4><p>说明：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于 3 次。</p><h4 id="_12-【强制】多线程并行处理定时任务时-timer-运行多个-timetask-时-只要其中之一没有捕获抛出的异常-其它任务便会自动终止运行-使用-scheduledexecutorservice-则没有这个问题。" tabindex="-1"><a class="header-anchor" href="#_12-【强制】多线程并行处理定时任务时-timer-运行多个-timetask-时-只要其中之一没有捕获抛出的异常-其它任务便会自动终止运行-使用-scheduledexecutorservice-则没有这个问题。" aria-hidden="true">#</a> 12.【强制】多线程并行处理定时任务时，Timer 运行多个 TimeTask 时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，使用 ScheduledExecutorService 则没有这个问题。</h4><h4 id="_13-【推荐】资金相关的金融敏感信息-使用悲观锁策略。" tabindex="-1"><a class="header-anchor" href="#_13-【推荐】资金相关的金融敏感信息-使用悲观锁策略。" aria-hidden="true">#</a> 13.【推荐】资金相关的金融敏感信息，使用悲观锁策略。</h4><p>说明：乐观锁在获得锁的同时已经完成了更新操作，校验逻辑容易出现漏洞，另外，乐观锁对冲突的解决策略有较复杂<br> 的要求，处理不当容易造成系统压力或数据异常，所以资金相关的金融敏感信息不建议使用乐观锁更新。</p><p>正例：悲观锁遵循一锁二判三更新四释放的原则。</p><h4 id="_14-【推荐】使用-countdownlatch-进行异步转同步操作-每个线程退出前必须调用-countdown-方法-线程执行代码注意-catch-异常-确保-countdown-方法被执行到-避免主线程无法执行至-await-方法-直到超时才返回结果。" tabindex="-1"><a class="header-anchor" href="#_14-【推荐】使用-countdownlatch-进行异步转同步操作-每个线程退出前必须调用-countdown-方法-线程执行代码注意-catch-异常-确保-countdown-方法被执行到-避免主线程无法执行至-await-方法-直到超时才返回结果。" aria-hidden="true">#</a> 14.【推荐】使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown 方法，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至 await 方法，直到超时才返回结果。</h4><p>说明：注意，子线程抛出异常堆栈，不能在主线程 try-catch 到。</p><h4 id="_15-【推荐】避免-random-实例被多线程使用-虽然共享该实例是线程安全的-但会因竞争同一-seed-导致的性能下降。" tabindex="-1"><a class="header-anchor" href="#_15-【推荐】避免-random-实例被多线程使用-虽然共享该实例是线程安全的-但会因竞争同一-seed-导致的性能下降。" aria-hidden="true">#</a> 15.【推荐】避免 Random 实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一 seed 导致的性能下降。</h4><p>说明：Random 实例包括 java.util.Random 的实例或者 Math.random() 的方式。</p><p>正例：在 JDK7 之后，可以直接使用 API ThreadLocalRandom，而在 JDK7 之前，需要编码保证每个线程持有一个<br> 单独的 Random 实例。</p><h4 id="_16-【推荐】通过双重检查锁-double-checked-locking-实现延迟初始化需要将目标属性声明为volatile-型-比如修改-helper-的属性声明为-private-volatile-helper-helper-null-。" tabindex="-1"><a class="header-anchor" href="#_16-【推荐】通过双重检查锁-double-checked-locking-实现延迟初始化需要将目标属性声明为volatile-型-比如修改-helper-的属性声明为-private-volatile-helper-helper-null-。" aria-hidden="true">#</a> 16.【推荐】通过双重检查锁（double-checked locking），实现延迟初始化需要将目标属性声明为volatile 型，（比如修改 helper 的属性声明为 private volatile Helper helper = null;）。</h4><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyInitDemo</span> <span class="token punctuation">{</span> <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Helper</span> helper <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token class-name">Helper</span> <span class="token function">getHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>helper <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>helper <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token keyword">return</span> helper<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">// other methods and fields...</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_17-【参考】volatile-解决多线程内存不可见问题对于一写多读-是可以解决变量同步问题-但是如果多写-同样无法解决线程安全问题。" tabindex="-1"><a class="header-anchor" href="#_17-【参考】volatile-解决多线程内存不可见问题对于一写多读-是可以解决变量同步问题-但是如果多写-同样无法解决线程安全问题。" aria-hidden="true">#</a> 17.【参考】volatile 解决多线程内存不可见问题对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。</h4><p>说明：如果是 count++操作，使用如下类实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AtomicInteger</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
count<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是 JDK8，推荐使用 LongAdder 对象，比 AtomicLong 性能更好（减少乐观锁的重试次数）。</p><h4 id="_18-【参考】hashmap-在容量不够进行-resize-时由于高并发可能出现死链-导致-cpu-飙升-在开发过程中注意规避此风险。" tabindex="-1"><a class="header-anchor" href="#_18-【参考】hashmap-在容量不够进行-resize-时由于高并发可能出现死链-导致-cpu-飙升-在开发过程中注意规避此风险。" aria-hidden="true">#</a> 18.【参考】HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升，在开发过程中注意规避此风险。</h4><h4 id="_19-【参考】threadlocal-对象使用-static-修饰-threadlocal-无法解决共享对象的更新问题。" tabindex="-1"><a class="header-anchor" href="#_19-【参考】threadlocal-对象使用-static-修饰-threadlocal-无法解决共享对象的更新问题。" aria-hidden="true">#</a> 19.【参考】ThreadLocal 对象使用 static 修饰，ThreadLocal 无法解决共享对象的更新问题。</h4><p>说明：这个变量是针对一个线程内所有操作共享的，所以设置为静态变量，所有此类实例共享此静态变量，也就是说在<br> 类第一次被使用时装载，只分配一块存储空间，所有此类的对象（只要是这个线程内定义的）都可以操控这个变量。</p><h2 id="八-控制语句" tabindex="-1"><a class="header-anchor" href="#八-控制语句" aria-hidden="true">#</a> (八) 控制语句</h2><h4 id="_1-【强制】在一个-switch-块内-每个-case-要么通过-continue-break-return-等来终止-要么注释说明程序将继续执行到哪一个-case-为止-在一个-switch-块内-都必须包含一个-default-语句并且放在最后-即使它什么代码也没有。" tabindex="-1"><a class="header-anchor" href="#_1-【强制】在一个-switch-块内-每个-case-要么通过-continue-break-return-等来终止-要么注释说明程序将继续执行到哪一个-case-为止-在一个-switch-块内-都必须包含一个-default-语句并且放在最后-即使它什么代码也没有。" aria-hidden="true">#</a> 1.【强制】在一个 switch 块内，每个 case 要么通过 continue / break / return 等来终止，要么注释说明程序将继续执行到哪一个 case 为止；在一个 switch 块内，都必须包含一个 default 语句并且放在最后，即使它什么代码也没有。</h4><p>说明：注意 break 是退出 switch 语句块，而 return 是退出方法体。</p><h4 id="_2-【强制】当-switch-括号内的变量类型为-string-并且此变量为外部参数时-必须先进行-null-判断。" tabindex="-1"><a class="header-anchor" href="#_2-【强制】当-switch-括号内的变量类型为-string-并且此变量为外部参数时-必须先进行-null-判断。" aria-hidden="true">#</a> 2.【强制】当 switch 括号内的变量类型为 String 并且此变量为外部参数时，必须先进行 null 判断。</h4><p>反例：如下的代码输出是什么？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwitchString</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">String</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 肯定不是进入这里</span>
    <span class="token keyword">case</span> <span class="token string">&quot;sth&quot;</span><span class="token operator">:</span>
    <span class="token class-name">Java</span> 开发手册（黄山版）
    <span class="token number">18</span><span class="token operator">/</span><span class="token number">51</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;it&#39;s sth&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token comment">// 也不是进入这里</span>
    <span class="token keyword">case</span> <span class="token string">&quot;null&quot;</span><span class="token operator">:</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;it&#39;s null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token comment">// 也不是进入这里</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-【强制】在-if-else-for-while-do-语句中必须使用大括号。" tabindex="-1"><a class="header-anchor" href="#_3-【强制】在-if-else-for-while-do-语句中必须使用大括号。" aria-hidden="true">#</a> 3.【强制】在 if / else / for / while / do 语句中必须使用大括号。</h4><p>反例： if (condition) statements;</p><p>说明：即使只有一行代码，也要采用大括号的编码方式。 4.【强制】三目运算符 condition ? 表达式 1：表达式 2 中，高度注意表达式 1 和 2 在类型对齐时，可能<br> 抛出因自动拆箱导致的 NPE 异常。</p><p>说明：以下两种场景会触发类型对齐的拆箱操作：</p><ul><li>1）表达式 1 或 表达式 2 的值只要有一个是原始类型。</li><li>2）表达式 1 或 表达式 2 的值的类型不一致，会强制拆箱升级成表示范围更大的那个类型。</li></ul><p>反例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">Boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token comment">// a*b 的结果是 int 类型，那么 c 会强制拆箱成 int 类型，抛出 NPE 异常</span>
<span class="token class-name">Integer</span> result <span class="token operator">=</span> <span class="token punctuation">(</span>flag <span class="token operator">?</span> a <span class="token operator">*</span> b <span class="token operator">:</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-【强制】在高并发场景中-避免使用-等于-判断作为中断或退出的条件。" tabindex="-1"><a class="header-anchor" href="#_5-【强制】在高并发场景中-避免使用-等于-判断作为中断或退出的条件。" aria-hidden="true">#</a> 5.【强制】在高并发场景中，避免使用“等于”判断作为中断或退出的条件。</h4><p>说明：如果并发控制没有处理好，容易产生等值判断被“击穿”的情况，使用大于或小于的区间判断条件来代替。</p><p>反例：判断剩余奖品数量等于 0 时，终止发放奖品，但因为并发处理错误导致奖品数量瞬间变成了负数，这样的话，<br> 活动无法终止。</p><h4 id="_6-【推荐】当方法的代码总行数超过-10-行时-return-throw-等中断逻辑的右大括号后需要加一个空行。" tabindex="-1"><a class="header-anchor" href="#_6-【推荐】当方法的代码总行数超过-10-行时-return-throw-等中断逻辑的右大括号后需要加一个空行。" aria-hidden="true">#</a> 6.【推荐】当方法的代码总行数超过 10 行时，return / throw 等中断逻辑的右大括号后需要加一个空行。</h4><p>说明：这样做逻辑清晰，有利于代码阅读时重点关注。</p><h4 id="_7-【推荐】表达异常的分支时-少用-if-else-方式-这种方式可以改写成" tabindex="-1"><a class="header-anchor" href="#_7-【推荐】表达异常的分支时-少用-if-else-方式-这种方式可以改写成" aria-hidden="true">#</a> 7.【推荐】表达异常的分支时，少用 if-else 方式，这种方式可以改写成：</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">return</span> obj<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">// 接着写 else 的业务逻辑代码;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：如果非使用 if()...else if()...else...方式表达逻辑，避免后续代码维护困难，请勿超过 3 层。</p><p>正例：超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现，其中卫语句示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findBoyfriend</span><span class="token punctuation">(</span><span class="token class-name">Man</span> man<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>man<span class="token punctuation">.</span><span class="token function">isUgly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;本姑娘是外貌协会的资深会员&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>man<span class="token punctuation">.</span><span class="token function">isPoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;贫贱夫妻百事哀&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>man<span class="token punctuation">.</span><span class="token function">isBadTemper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;银河有多远，你就给我滚多远&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;可以先交往一段时间看看&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-【推荐】除常用方法-如-getxxx-isxxx-等外不要在条件判断中执行其它复杂的语句-将复杂逻辑判断的结果赋值给一个有意义的布尔变量名-以提高可读性。" tabindex="-1"><a class="header-anchor" href="#_8-【推荐】除常用方法-如-getxxx-isxxx-等外不要在条件判断中执行其它复杂的语句-将复杂逻辑判断的结果赋值给一个有意义的布尔变量名-以提高可读性。" aria-hidden="true">#</a> 8.【推荐】除常用方法（如 getXxx / isXxx）等外不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。</h4><p>说明：很多 if 语句内的逻辑表达式相当复杂，与、或、取反混合运算，甚至各种方法纵深调用，理解成本非常高。如果赋<br> 值一个非常好理解的布尔变量名字，则是件令人爽心悦目的事情。</p><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 伪代码如下</span>
<span class="token keyword">final</span> <span class="token keyword">boolean</span> existed <span class="token operator">=</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>existed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">long</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">EXCLUSIVE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-【推荐】不要在其它表达式-尤其是条件表达式-中-插入赋值语句。" tabindex="-1"><a class="header-anchor" href="#_9-【推荐】不要在其它表达式-尤其是条件表达式-中-插入赋值语句。" aria-hidden="true">#</a> 9.【推荐】不要在其它表达式（尤其是条件表达式）中，插入赋值语句。</h4><p>说明：赋值点类似于人体的穴位，对于代码的理解至关重要，所以赋值语句需要清晰地单独成为一行。</p><p>反例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Lock</span> <span class="token function">getLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// 算术表达式中出现赋值操作，容易忽略 count 值已经被改变</span>
threshold <span class="token operator">=</span> <span class="token punctuation">(</span>count <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 条件表达式中出现赋值操作，容易误认为是 sync == fair</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span>sync <span class="token operator">=</span> fair<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-【推荐】循环体中的语句要考量性能-以下操作尽量移至循环体外处理-如定义对象、变量、获取数据库连接-进行不必要的-try-catch-操作-这个-try-catch-是否可以移至循环体外-。" tabindex="-1"><a class="header-anchor" href="#_10-【推荐】循环体中的语句要考量性能-以下操作尽量移至循环体外处理-如定义对象、变量、获取数据库连接-进行不必要的-try-catch-操作-这个-try-catch-是否可以移至循环体外-。" aria-hidden="true">#</a> 10.【推荐】循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的 try-catch 操作（这个 try-catch 是否可以移至循环体外）。</h4><h4 id="_11-【推荐】避免采用取反逻辑运算符。" tabindex="-1"><a class="header-anchor" href="#_11-【推荐】避免采用取反逻辑运算符。" aria-hidden="true">#</a> 11.【推荐】避免采用取反逻辑运算符。</h4><p>说明：取反逻辑不利于快速理解，并且取反逻辑写法一般都存在对应的正向逻辑写法。</p><ul><li>正例：使用 if(x &lt; 628) 来表达 x 小于 628。</li><li>反例：使用 if(!(x &gt;= 628)) 来表达 x 小于 628。</li></ul><h4 id="_12-【推荐】公开接口需要进行入参保护-尤其是批量操作的接口。" tabindex="-1"><a class="header-anchor" href="#_12-【推荐】公开接口需要进行入参保护-尤其是批量操作的接口。" aria-hidden="true">#</a> 12.【推荐】公开接口需要进行入参保护，尤其是批量操作的接口。</h4><p>反例：某业务系统，提供一个用户批量查询的接口，API 文档上有说最多查多少个，但接口实现上没做任何保护，导致<br> 调用方传了一个 1000 的用户 id 数组过来后，查询信息后，内存爆了。</p><h4 id="_13-【参考】下列情形-需要进行参数校验" tabindex="-1"><a class="header-anchor" href="#_13-【参考】下列情形-需要进行参数校验" aria-hidden="true">#</a> 13.【参考】下列情形，需要进行参数校验：</h4><ul><li>1）调用频次低的方法。</li><li>2）执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致中间执行回退，或者错误，那得不偿失。</li><li>3）需要极高稳定性和可用性的方法。</li><li>4）对外提供的开放接口，不管是 RPC / API / HTTP 接口。</li><li>5）敏感权限入口。</li></ul><h4 id="_14-【参考】下列情形-不需要进行参数校验" tabindex="-1"><a class="header-anchor" href="#_14-【参考】下列情形-不需要进行参数校验" aria-hidden="true">#</a> 14.【参考】下列情形，不需要进行参数校验：</h4><ul><li>1）极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查。</li><li>2）底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般 DAO 层与 Service 层都在同一个应用中，部署在同一台服务器中，所以 DAO 的参数校验，可以省略。</li><li>3）被声明成 private 只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。</li></ul><h2 id="九-注释规约" tabindex="-1"><a class="header-anchor" href="#九-注释规约" aria-hidden="true">#</a> (九) 注释规约</h2><h4 id="_1-【强制】类、类属性、类方法的注释必须使用-javadoc-规范-使用-内容-格式-不得使用-xxx方式。" tabindex="-1"><a class="header-anchor" href="#_1-【强制】类、类属性、类方法的注释必须使用-javadoc-规范-使用-内容-格式-不得使用-xxx方式。" aria-hidden="true">#</a> 1.【强制】类、类属性、类方法的注释必须使用 Javadoc 规范，使用 /** 内容 */ 格式，不得使用 // xxx方式。</h4><p>说明：在 IDE 编辑窗口中，Javadoc 方式会提示相关注释，生成 Javadoc 可以正确输出相应注释；在 IDE 中，工程调用<br> 方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读效率。</p><h4 id="_2-【强制】所有的抽象方法-包括接口中的方法-必须要用-javadoc-注释、除了返回值、参数异常说明外-还必须指出该方法做什么事情-实现什么功能。" tabindex="-1"><a class="header-anchor" href="#_2-【强制】所有的抽象方法-包括接口中的方法-必须要用-javadoc-注释、除了返回值、参数异常说明外-还必须指出该方法做什么事情-实现什么功能。" aria-hidden="true">#</a> 2.【强制】所有的抽象方法（包括接口中的方法）必须要用 Javadoc 注释、除了返回值、参数异常说明外，还必须指出该方法做什么事情，实现什么功能。</h4><p>说明：对子类的实现要求，或者调用注意事项，请一并说明。</p><h4 id="_3-【强制】所有的类都必须添加创建者和创建日期。" tabindex="-1"><a class="header-anchor" href="#_3-【强制】所有的类都必须添加创建者和创建日期。" aria-hidden="true">#</a> 3.【强制】所有的类都必须添加创建者和创建日期。</h4><p>说明：在设置模板时，注意 IDEA 的@author 为<code>\${USER}</code>，而 eclipse 的@author 为<code>\${user}</code>，大小写有区别，而日期<br> 的设置统一为 yyyy/MM/dd 的格式。</p><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
** @author yangguanbao
* <span class="token keyword">@date</span> 2021/11/26
*
**/</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-【强制】方法内部单行注释-在被注释语句上方另起一行-使用-注释。方法内部多行注释使用-注释-注意与代码对齐。" tabindex="-1"><a class="header-anchor" href="#_4-【强制】方法内部单行注释-在被注释语句上方另起一行-使用-注释。方法内部多行注释使用-注释-注意与代码对齐。" aria-hidden="true">#</a> 4.【强制】方法内部单行注释，在被注释语句上方另起一行，使用 // 注释。方法内部多行注释使用 /* */注释，注意与代码对齐。</h4><h4 id="_5-【强制】所有的枚举类型字段必须要有注释-说明每个数据项的用途。" tabindex="-1"><a class="header-anchor" href="#_5-【强制】所有的枚举类型字段必须要有注释-说明每个数据项的用途。" aria-hidden="true">#</a> 5.【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。</h4><h4 id="_6-【推荐】与其用半吊子英文来注释-不如用中文注释说清楚。专有名词与关键字保持英文原文即可。" tabindex="-1"><a class="header-anchor" href="#_6-【推荐】与其用半吊子英文来注释-不如用中文注释说清楚。专有名词与关键字保持英文原文即可。" aria-hidden="true">#</a> 6.【推荐】与其用半吊子英文来注释，不如用中文注释说清楚。专有名词与关键字保持英文原文即可。</h4><p>反例：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋。</p><h4 id="_7-【推荐】代码修改的同时-注释也要进行相应的修改-尤其是参数、返回值、异常、核心逻辑等。" tabindex="-1"><a class="header-anchor" href="#_7-【推荐】代码修改的同时-注释也要进行相应的修改-尤其是参数、返回值、异常、核心逻辑等。" aria-hidden="true">#</a> 7.【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等。</h4><p>说明：代码与注释更新不同步，就像公路网与导航软件更新不同步一样，如果导航软件严重滞后，就失去了导航的意义。</p><h4 id="_8-【推荐】在类中删除未使用的任何字段和方法、内部类-在方法中删除未使用的参数声明与内部变量。" tabindex="-1"><a class="header-anchor" href="#_8-【推荐】在类中删除未使用的任何字段和方法、内部类-在方法中删除未使用的参数声明与内部变量。" aria-hidden="true">#</a> 8.【推荐】在类中删除未使用的任何字段和方法、内部类；在方法中删除未使用的参数声明与内部变量。</h4><h4 id="_9-【参考】谨慎注释掉代码。在上方详细说明-而不是简单地注释掉。如果无用-则删除。" tabindex="-1"><a class="header-anchor" href="#_9-【参考】谨慎注释掉代码。在上方详细说明-而不是简单地注释掉。如果无用-则删除。" aria-hidden="true">#</a> 9.【参考】谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。</h4><p>说明：代码被注释掉有两种可能性：</p><ul><li>1）后续会恢复此段代码逻辑。</li><li>2）永久不用。前者如果没有备注信息，难以知晓注释动机。后者建议直接删掉即可，假如需要查阅历史代码，登录代码仓库即可。</li></ul><h4 id="_10-【参考】对于注释的要求" tabindex="-1"><a class="header-anchor" href="#_10-【参考】对于注释的要求" aria-hidden="true">#</a> 10.【参考】对于注释的要求：</h4><ul><li>第一、能够准确反映设计思想和代码逻辑；</li><li>第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。</li></ul><h4 id="_11-【参考】好的命名、代码结构是自解释的-注释力求精简准确、表达到位。避免出现注释的另一个极端-过多过滥的注释-代码的逻辑一旦修改-修改注释又是相当大的负担。" tabindex="-1"><a class="header-anchor" href="#_11-【参考】好的命名、代码结构是自解释的-注释力求精简准确、表达到位。避免出现注释的另一个极端-过多过滥的注释-代码的逻辑一旦修改-修改注释又是相当大的负担。" aria-hidden="true">#</a> 11.【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的另一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释又是相当大的负担。</h4><p>反例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// put elephant into fridge</span>
<span class="token function">put</span><span class="token punctuation">(</span>elephant<span class="token punctuation">,</span> fridge<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法名 put，加上两个有意义的变量名称 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注释。</p><h4 id="_12-【参考】特殊注释标记-请注明标记人与标记时间。注意及时处理这些标记-通过标记扫描-经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。" tabindex="-1"><a class="header-anchor" href="#_12-【参考】特殊注释标记-请注明标记人与标记时间。注意及时处理这些标记-通过标记扫描-经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。" aria-hidden="true">#</a> 12.【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。</h4><ul><li>1）待办事宜（TODO）：（标记人，标记时间，[预计处理时间]）表示需要实现，但目前还未实现的功能。这实际上是一个 Javadoc 的标签，目前的 Javadoc 还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个 Javadoc 标签）。</li><li>2）错误，不能工作（FIXME）：（标记人，标记时间，[预计处理时间]）在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情况。</li></ul><h2 id="十-前后端规约" tabindex="-1"><a class="header-anchor" href="#十-前后端规约" aria-hidden="true">#</a> (十) 前后端规约</h2><h4 id="_1-【强制】前后端交互的-api-需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。" tabindex="-1"><a class="header-anchor" href="#_1-【强制】前后端交互的-api-需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。" aria-hidden="true">#</a> 1.【强制】前后端交互的 API，需要明确协议、域名、路径、请求方法、请求内容、状态码、响应体。</h4><p>说明：</p><ul><li>1）协议：生产环境必须使用 HTTPS。</li><li>2）路径：每一个 API 需对应一个路径，表示 API 具体的请求地址： <ul><li>a）代表一种资源，只能为名词，推荐使用复数，不能为动词，请求方法已经表达动作意义。</li><li>b）URL 路径不能使用大写，单词如果需要分隔，统一使用下划线。</li><li>c）路径禁止携带表示请求内容类型的后缀，比如&quot;.json&quot;，&quot;.xml&quot;，通过 accept 头表达即可。</li></ul></li><li>3）请求方法：对具体操作的定义，常见的请求方法如下： <ul><li>a）GET：从服务器取出资源。</li><li>b）POST：在服务器新建一个资源。</li><li>c）PUT：在服务器更新资源。</li><li>d）DELETE：从服务器删除资源。</li></ul></li><li>4）请求内容：URL 带的参数必须无敏感信息或符合安全要求；body 里带参数时必须设置 Content-Type。</li><li>5）响应体：响应体 body 可放置多种数据类型，由 Content-Type 头来确定。</li></ul><h4 id="_2-【强制】前后端数据列表相关的接口返回-如果为空-则返回空数组-或空集合-。" tabindex="-1"><a class="header-anchor" href="#_2-【强制】前后端数据列表相关的接口返回-如果为空-则返回空数组-或空集合-。" aria-hidden="true">#</a> 2.【强制】前后端数据列表相关的接口返回，如果为空，则返回空数组[]或空集合{}。</h4><p>说明：此条约定有利于数据层面上的协作更加高效，减少前端很多琐碎的 null 判断。</p><h4 id="_3-【强制】服务端发生错误时-返回给前端的响应信息必须包含-http-状态码-errorcode、errormessage、用户提示信息四个部分。" tabindex="-1"><a class="header-anchor" href="#_3-【强制】服务端发生错误时-返回给前端的响应信息必须包含-http-状态码-errorcode、errormessage、用户提示信息四个部分。" aria-hidden="true">#</a> 3.【强制】服务端发生错误时，返回给前端的响应信息必须包含 HTTP 状态码，errorCode、errorMessage、用户提示信息四个部分。</h4><p>说明：四个部分的涉众对象分别是浏览器、前端开发、错误排查人员、用户。其中输出给用户的提示信息要求：简短清<br> 晰、提示友好，引导用户进行下一步操作或解释错误原因，提示信息可以包括错误原因、上下文环境、推荐操作等。</p><p>errorCode：参考 。errorMessage：简要描述后端出错原因，便于错误排查人员快速定位问题，注意不要包含敏 感数据信息。</p><p>正例：常见的 HTTP 状态码如下</p><ul><li>1）200 OK：表明该请求被成功地完成，所请求的资源发送到客户端。</li><li>2）401 Unauthorized：请求要求身份验证，常见对于需要登录而用户未登录的情况。</li><li>3）403 Forbidden：服务器拒绝请求，常见于机密信息或复制其它登录用户链接访问服务器的情况。</li><li>4）404 NotFound：服务器无法取得所请求的网页，请求资源不存在。</li><li>5）500 InternalServerError：服务器内部错误。</li></ul><h4 id="_4-【强制】在前后端交互的-json-格式数据中-所有的-key-必须为小写字母开始的-lowercamelcase风格-符合英文表达习惯-且表意完整。" tabindex="-1"><a class="header-anchor" href="#_4-【强制】在前后端交互的-json-格式数据中-所有的-key-必须为小写字母开始的-lowercamelcase风格-符合英文表达习惯-且表意完整。" aria-hidden="true">#</a> 4.【强制】在前后端交互的 JSON 格式数据中，所有的 key 必须为小写字母开始的 lowerCamelCase风格，符合英文表达习惯，且表意完整。</h4><ul><li>正例：errorCode / errorMessage / assetStatus / menuList / orderList / configFlag</li><li>反例：ERRORCODE / ERROR_CODE / error_message / error-message / errormessage</li></ul><h4 id="_5-【强制】errormessage-是前后端错误追踪机制的体现-可以在前端输出到-type-hidden-文字类控件中-或者用户端的日志中-帮助我们快速地定位出问题。" tabindex="-1"><a class="header-anchor" href="#_5-【强制】errormessage-是前后端错误追踪机制的体现-可以在前端输出到-type-hidden-文字类控件中-或者用户端的日志中-帮助我们快速地定位出问题。" aria-hidden="true">#</a> 5.【强制】errorMessage 是前后端错误追踪机制的体现，可以在前端输出到 type=&quot;hidden&quot; 文字类控件中，或者用户端的日志中，帮助我们快速地定位出问题。</h4><h4 id="_6-【强制】对于需要使用超大整数的场景-服务端一律使用-string-字符串类型返回-禁止使用-long-类型。" tabindex="-1"><a class="header-anchor" href="#_6-【强制】对于需要使用超大整数的场景-服务端一律使用-string-字符串类型返回-禁止使用-long-类型。" aria-hidden="true">#</a> 6.【强制】对于需要使用超大整数的场景，服务端一律使用 String 字符串类型返回，禁止使用 Long 类型。</h4><p>说明：Java 服务端如果直接返回 Long 整型数据给前端，Javascript 会自动转换为 Number 类型（注：此类型为双精度浮点数，表示原理与取值范围等同于 Java 中的 Double）。Long 类型能表示的最大值是 263-1，在取值范围之内，超过 253<br> （9007199254740992）的数值转化为 Javascript 的 Number 时，有些数值会产生精度损失。扩展说明，在 Long 取值范围内，任何 2 的指数次的整数都是绝对不会存在精度损失的，所以说精度损失是一个概率问题。若浮点数尾数位与指数位<br> 空间不限，则可以精确表示任何整数，但很不幸，双精度浮点数的尾数位只有 52 位。</p><p>反例：通常在订单号或交易号大于等于 16 位，大概率会出现前后端订单数据不一致的情况。</p><p>比如，后端传输的 &quot;orderId&quot;：362909601374617692，前端拿到的值却是：362909601374617660</p><h4 id="_7-【强制】http-请求通过-url-传递参数时-不能超过-2048-字节。" tabindex="-1"><a class="header-anchor" href="#_7-【强制】http-请求通过-url-传递参数时-不能超过-2048-字节。" aria-hidden="true">#</a> 7.【强制】HTTP 请求通过 URL 传递参数时，不能超过 2048 字节。</h4><p>说明：不同浏览器对于 URL 的最大长度限制略有不同，并且对超出最大长度的处理逻辑也有差异，2048 字节是取所<br> 有浏览器的最小值。</p><p>反例：某业务将退货的商品 id 列表放在 URL 中作为参数传递，当一次退货商品数量过多时，URL 参数超长，传递到后端的参数被截断，导致部分商品未能正确退货。</p><h4 id="_8-【强制】http-请求通过-body-传递内容时-必须控制长度-超出最大长度后-后端解析会出错。" tabindex="-1"><a class="header-anchor" href="#_8-【强制】http-请求通过-body-传递内容时-必须控制长度-超出最大长度后-后端解析会出错。" aria-hidden="true">#</a> 8.【强制】HTTP 请求通过 body 传递内容时，必须控制长度，超出最大长度后，后端解析会出错。</h4><p>说明：nginx 默认限制是 1MB，tomcat 默认限制为 2MB，当确实有业务需要传较大内容时，可以调大服务器端的限制。</p><h4 id="_9-【强制】在翻页场景中-用户输入参数的小于-1-则前端返回第一页参数给后端-后端发现用户输入的参数大于总页数-直接返回最后一页。" tabindex="-1"><a class="header-anchor" href="#_9-【强制】在翻页场景中-用户输入参数的小于-1-则前端返回第一页参数给后端-后端发现用户输入的参数大于总页数-直接返回最后一页。" aria-hidden="true">#</a> 9.【强制】在翻页场景中，用户输入参数的小于 1，则前端返回第一页参数给后端；后端发现用户输入的参数大于总页数，直接返回最后一页。</h4><h4 id="_10-【强制】服务器内部重定向必须使用-forward-外部重定向地址必须使用-url-统一代理模块生成-否-则会因线上采用-https-协议而导致浏览器提示-不安全-并且还会带来-url-维护不一致的问题。" tabindex="-1"><a class="header-anchor" href="#_10-【强制】服务器内部重定向必须使用-forward-外部重定向地址必须使用-url-统一代理模块生成-否-则会因线上采用-https-协议而导致浏览器提示-不安全-并且还会带来-url-维护不一致的问题。" aria-hidden="true">#</a> 10.【强制】服务器内部重定向必须使用 forward；外部重定向地址必须使用 URL 统一代理模块生成，否 则会因线上采用 HTTPS 协议而导致浏览器提示“不安全”，并且还会带来 URL 维护不一致的问题。</h4><h4 id="_11-【推荐】服务器返回信息必须被标记是否可以缓存-如果缓存-客户端可能会重用之前的请求结果。" tabindex="-1"><a class="header-anchor" href="#_11-【推荐】服务器返回信息必须被标记是否可以缓存-如果缓存-客户端可能会重用之前的请求结果。" aria-hidden="true">#</a> 11.【推荐】服务器返回信息必须被标记是否可以缓存，如果缓存，客户端可能会重用之前的请求结果。</h4><p>说明：缓存有利于减少交互次数，减少交互的平均延迟。</p><p>正例：http1.1 中，s-maxage 告诉服务器进行缓存，时间单位为秒，用法如下，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Cache-Control&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;s-maxage=&quot;</span> <span class="token operator">+</span> cacheSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_12-【推荐】服务端返回的数据-使用-json-格式而非-xml。" tabindex="-1"><a class="header-anchor" href="#_12-【推荐】服务端返回的数据-使用-json-格式而非-xml。" aria-hidden="true">#</a> 12.【推荐】服务端返回的数据，使用 JSON 格式而非 XML。</h4><p>说明：尽管 HTTP 支持使用不同的输出格式，例如纯文本，JSON，CSV，XML，RSS 甚至 HTML。如果我们使用的面<br> 向用户的服务，应该选择 JSON 作为通信中使用的标准数据交换格式，包括请求和响应。此外，application/JSON 是<br> 一种通用的 MIME 类型，具有实用、精简、易读的特点。</p><h4 id="_13-【推荐】前后端的时间格式统一为-yyyy-mm-dd-hh-mm-ss-统一为-gmt。" tabindex="-1"><a class="header-anchor" href="#_13-【推荐】前后端的时间格式统一为-yyyy-mm-dd-hh-mm-ss-统一为-gmt。" aria-hidden="true">#</a> 13.【推荐】前后端的时间格式统一为&quot;yyyy-MM-dd HH:mm:ss&quot;，统一为 GMT。</h4><h4 id="_14-【参考】在接口路径中不要加入版本号-版本控制在-http-头信息中体现-有利于向前兼容。" tabindex="-1"><a class="header-anchor" href="#_14-【参考】在接口路径中不要加入版本号-版本控制在-http-头信息中体现-有利于向前兼容。" aria-hidden="true">#</a> 14.【参考】在接口路径中不要加入版本号，版本控制在 HTTP 头信息中体现，有利于向前兼容。</h4><p>说明：当用户在低版本与高版本之间反复切换工作时，会导致迁移复杂度升高，存在数据错乱风险。</p><h2 id="十一-其他" tabindex="-1"><a class="header-anchor" href="#十一-其他" aria-hidden="true">#</a> (十一) 其他</h2><h4 id="_1-【强制】在使用正则表达式时-利用好其预编译功能-可以有效加快正则匹配速度。" tabindex="-1"><a class="header-anchor" href="#_1-【强制】在使用正则表达式时-利用好其预编译功能-可以有效加快正则匹配速度。" aria-hidden="true">#</a> 1.【强制】在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度。</h4><p>说明：不要在方法体内定义：Pattern pattern = Pattern.compile(&quot;规则&quot;);</p><h4 id="_2-【强制】避免用-apachebeanutils-进行属性的-copy。" tabindex="-1"><a class="header-anchor" href="#_2-【强制】避免用-apachebeanutils-进行属性的-copy。" aria-hidden="true">#</a> 2.【强制】避免用 ApacheBeanutils 进行属性的 copy。</h4><p>说明：ApacheBeanUtils 性能较差，可以使用其他方案比如 SpringBeanUtils，CglibBeanCopier，注意均是浅拷贝。</p><h4 id="_3-【强制】velocity-调用-pojo-类的属性时-直接使用属性名取值即可-模板引擎会自动按规范调用-pojo的-getxxx-如果是-boolean-基本数据类型变量-boolean-命名不需要加-is-前缀-会自动调-isxxx-方法。" tabindex="-1"><a class="header-anchor" href="#_3-【强制】velocity-调用-pojo-类的属性时-直接使用属性名取值即可-模板引擎会自动按规范调用-pojo的-getxxx-如果是-boolean-基本数据类型变量-boolean-命名不需要加-is-前缀-会自动调-isxxx-方法。" aria-hidden="true">#</a> 3.【强制】velocity 调用 POJO 类的属性时，直接使用属性名取值即可，模板引擎会自动按规范调用 POJO的 getXxx()，如果是 boolean 基本数据类型变量（boolean 命名不需要加 is 前缀），会自动调 isXxx()方法。</h4><p>说明：注意如果是 Boolean 包装类对象，优先调用 getXxx() 的方法。</p><h4 id="_4-【强制】后台输送给页面的变量必须加-var-——中间的感叹号。" tabindex="-1"><a class="header-anchor" href="#_4-【强制】后台输送给页面的变量必须加-var-——中间的感叹号。" aria-hidden="true">#</a> 4.【强制】后台输送给页面的变量必须加 $!{var} ——中间的感叹号。</h4><p>说明：如果 var 等于 null 或者不存在，那么 \${var} 会直接显示在页面上。</p><h4 id="_5-【强制】注意-math-random-这个方法返回是-double-类型-注意取值的范围-0-≤-x-1-能够取到零值-注意除零异常-如果想获取整数类型的随机数-不要将-x-放大-10-的若干倍然后取" tabindex="-1"><a class="header-anchor" href="#_5-【强制】注意-math-random-这个方法返回是-double-类型-注意取值的范围-0-≤-x-1-能够取到零值-注意除零异常-如果想获取整数类型的随机数-不要将-x-放大-10-的若干倍然后取" aria-hidden="true">#</a> 5.【强制】注意 Math.random() 这个方法返回是 double 类型，注意取值的范围 0 ≤ x &lt; 1（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将 x 放大 10 的若干倍然后取</h4><p>整，直接使用 Random 对象的 nextInt 或者 nextLong 方法。</p><h4 id="_6-【强制】枚举-enum-括号内-的属性字段必须是私有且不可变。" tabindex="-1"><a class="header-anchor" href="#_6-【强制】枚举-enum-括号内-的属性字段必须是私有且不可变。" aria-hidden="true">#</a> 6.【强制】枚举 enum（括号内）的属性字段必须是私有且不可变。</h4><h4 id="_7-【推荐】不要在视图模板中加入任何复杂的逻辑运算。" tabindex="-1"><a class="header-anchor" href="#_7-【推荐】不要在视图模板中加入任何复杂的逻辑运算。" aria-hidden="true">#</a> 7.【推荐】不要在视图模板中加入任何复杂的逻辑运算。</h4><p>说明：根据 MVC 理论，视图的职责是展示，不要抢模型和控制器的活。</p><h4 id="_8-【推荐】任何数据结构的构造或初始化-都应指定大小-避免数据结构无限增长吃光内存。" tabindex="-1"><a class="header-anchor" href="#_8-【推荐】任何数据结构的构造或初始化-都应指定大小-避免数据结构无限增长吃光内存。" aria-hidden="true">#</a> 8.【推荐】任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存。</h4><h4 id="_9-【推荐】及时清理不再使用的代码段或配置信息。" tabindex="-1"><a class="header-anchor" href="#_9-【推荐】及时清理不再使用的代码段或配置信息。" aria-hidden="true">#</a> 9.【推荐】及时清理不再使用的代码段或配置信息。</h4><p>说明：对于垃圾代码或过时配置，坚决清理干净，避免程序过度臃肿，代码冗余。</p><p>正例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>对于暂时被注释掉，后续可能恢复使用的代码片断，在注释代码上方，统一规定使用三个斜杠<span class="token punctuation">(</span><span class="token comment">///)</span>
来说明注释掉代码的理由：
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">/// 业务方通知活动暂停</span>
<span class="token comment">// Business business = new Business();</span>
<span class="token comment">// business.active();</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;it&#39;s finished&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,443),o=[p];function c(i,l){return a(),s("div",null,o)}const d=n(t,[["render",c],["__file","code.html.vue"]]);export{d as default};
