const e=JSON.parse('{"key":"v-0442795f","path":"/highfreq/jenkins.html","title":"Jenkins详解","lang":"zh-CN","frontmatter":{"title":"Jenkins详解","index":false,"icon":"laptop-code","category":["设计高频"],"tag":["高频"],"description":"1.背景 在实际开发中，我们经常要一边开发一边测试，当然这里说的测试并不是程序员对自己代码的单元测试，而是同组程序员将代码提交后，由测试人员测试； 或者前后端分离后，经常会修改接口，然后重新部署； 这些情况都会涉及到频繁的打包部署； 手动打包常规步骤： 1.提交代码 2.问一下同组小伙伴有没有要提交的代码 3.拉取代码并打包（war包，或者jar包） 4.上传到Linux服务器 5.查看当前程序是否在运行 6.关闭当前程序 7.启动新的jar包 8.观察日志看是否启动成功 9.如果有同事说，自己还有代码没有提交......再次重复1到8的步骤！！！！！（一上午没了）","head":[["meta",{"property":"og:url","content":"https://ujava.cn/highfreq/jenkins.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"Jenkins详解"}],["meta",{"property":"og:description","content":"1.背景 在实际开发中，我们经常要一边开发一边测试，当然这里说的测试并不是程序员对自己代码的单元测试，而是同组程序员将代码提交后，由测试人员测试； 或者前后端分离后，经常会修改接口，然后重新部署； 这些情况都会涉及到频繁的打包部署； 手动打包常规步骤： 1.提交代码 2.问一下同组小伙伴有没有要提交的代码 3.拉取代码并打包（war包，或者jar包） 4.上传到Linux服务器 5.查看当前程序是否在运行 6.关闭当前程序 7.启动新的jar包 8.观察日志看是否启动成功 9.如果有同事说，自己还有代码没有提交......再次重复1到8的步骤！！！！！（一上午没了）"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-27T07:30:24.000Z"}],["meta",{"property":"article:author","content":"ujava"}],["meta",{"property":"article:tag","content":"高频"}],["meta",{"property":"article:modified_time","content":"2024-02-27T07:30:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jenkins详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-27T07:30:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ujava\\",\\"url\\":\\"https://ujava.cn\\"}]}"]]},"headers":[{"level":2,"title":"1.背景","slug":"_1-背景","link":"#_1-背景","children":[]},{"level":2,"title":"2.Jenkins服务器搭建及基本配置","slug":"_2-jenkins服务器搭建及基本配置","link":"#_2-jenkins服务器搭建及基本配置","children":[{"level":3,"title":"2.1.简介","slug":"_2-1-简介","link":"#_2-1-简介","children":[]},{"level":3,"title":"2.2.Jenkins自动化部署实现原理","slug":"_2-2-jenkins自动化部署实现原理","link":"#_2-2-jenkins自动化部署实现原理","children":[]},{"level":3,"title":"2.3.Jenkins部署环境","slug":"_2-3-jenkins部署环境","link":"#_2-3-jenkins部署环境","children":[]},{"level":3,"title":"2.4.Jenkins安装","slug":"_2-4-jenkins安装","link":"#_2-4-jenkins安装","children":[]},{"level":3,"title":"2.5.Jenkins基本配置","slug":"_2-5-jenkins基本配置","link":"#_2-5-jenkins基本配置","children":[]}]},{"level":2,"title":"3.Jenkins自动化部署（springBoot+maven+gitHub）项目","slug":"_3-jenkins自动化部署-springboot-maven-github-项目","link":"#_3-jenkins自动化部署-springboot-maven-github-项目","children":[{"level":3,"title":"3.1.Jenkins服务器上创建项目和配置","slug":"_3-1-jenkins服务器上创建项目和配置","link":"#_3-1-jenkins服务器上创建项目和配置","children":[]},{"level":3,"title":"3.2.Linux服务器配置","slug":"_3-2-linux服务器配置","link":"#_3-2-linux服务器配置","children":[]},{"level":3,"title":"3.3.GitHub服务器配置","slug":"_3-3-github服务器配置","link":"#_3-3-github服务器配置","children":[]}]},{"level":2,"title":"4.测试","slug":"_4-测试","link":"#_4-测试","children":[]},{"level":2,"title":"5.总结&资料下载","slug":"_5-总结-资料下载","link":"#_5-总结-资料下载","children":[{"level":3,"title":"5.1.总结","slug":"_5-1-总结","link":"#_5-1-总结","children":[]},{"level":3,"title":"5.2.相关资料","slug":"_5-2-相关资料","link":"#_5-2-相关资料","children":[]}]}],"git":{"createdTime":1709016040000,"updatedTime":1709019024000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":2}]},"readingTime":{"minutes":7.18,"words":2155},"filePathRelative":"highfreq/jenkins.md","localizedDate":"2024年2月27日","excerpt":"<h2> 1.背景</h2>\\n<p>在实际开发中，我们经常要一边开发一边测试，当然这里说的测试并不是程序员对自己代码的单元测试，而是同组程序员将代码提交后，由测试人员测试；</p>\\n<p>或者前后端分离后，经常会修改接口，然后重新部署；</p>\\n<p>这些情况都会涉及到频繁的打包部署；</p>\\n<p>手动打包常规步骤：</p>\\n<ul>\\n<li>1.提交代码</li>\\n<li>2.问一下同组小伙伴有没有要提交的代码</li>\\n<li>3.拉取代码并打包（war包，或者jar包）</li>\\n<li>4.上传到Linux服务器</li>\\n<li>5.查看当前程序是否在运行</li>\\n<li>6.关闭当前程序</li>\\n<li>7.启动新的jar包</li>\\n<li>8.观察日志看是否启动成功</li>\\n<li>9.如果有同事说，自己还有代码没有提交......再次重复1到8的步骤！！！！！（一上午没了）</li>\\n</ul>","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}');export{e as data};
