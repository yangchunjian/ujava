const e=JSON.parse('{"key":"v-022b7e19","path":"/standard/project.html","title":"规范工程","lang":"zh-CN","frontmatter":{"title":"规范工程","icon":"laptop-code","category":["设计规范"],"tag":["规范"],"description":"(一) 应用分层 1.【推荐】根据业务架构实践，结合业界分层规范与流行技术框架分析，推荐分层结构如图所示，默认上层依赖于下层，箭头关系表示可直接依赖，如：开放 API 层可以依赖于 Web 层（Controller 层），也可以直接依赖于 Service 层，依此类推： img.png ⚫ 开放 API 层：可直接封装 Service 接口暴露成 RPC 接口；通过 Web 封装成 http 接口；网关控制层等。 ⚫ 终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移动端展示等。 ⚫ Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。 ⚫ Service 层：相对具体的业务逻辑服务层。 ⚫ Manager 层：通用业务处理层，它有如下特征 1）对第三方平台封装的层，预处理返回结果及转化异常信息，适配上层接口。 2）对 Service 层通用能力的下沉，如缓存方案、中间件通用处理。 3）与 DAO 层交互，对多个 DAO 的组合复用。 ⚫ DAO 层：数据访问层，与底层 MySQL、Oracle、Hbase、OceanBase等进行数据交互。 ⚫ 第三方服务：包括其它部门 RPC 服务接口，基础平台，其它公司的 HTTP 接口，如淘宝开放平台、支付宝付款服务、 高德地图服务等。 ⚫ 外部数据接口：外部（应用）数据存储服务提供的接口，多见于数据迁移场景中。","head":[["meta",{"property":"og:url","content":"https://ujava.cn/standard/project.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"规范工程"}],["meta",{"property":"og:description","content":"(一) 应用分层 1.【推荐】根据业务架构实践，结合业界分层规范与流行技术框架分析，推荐分层结构如图所示，默认上层依赖于下层，箭头关系表示可直接依赖，如：开放 API 层可以依赖于 Web 层（Controller 层），也可以直接依赖于 Service 层，依此类推： img.png ⚫ 开放 API 层：可直接封装 Service 接口暴露成 RPC 接口；通过 Web 封装成 http 接口；网关控制层等。 ⚫ 终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移动端展示等。 ⚫ Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。 ⚫ Service 层：相对具体的业务逻辑服务层。 ⚫ Manager 层：通用业务处理层，它有如下特征 1）对第三方平台封装的层，预处理返回结果及转化异常信息，适配上层接口。 2）对 Service 层通用能力的下沉，如缓存方案、中间件通用处理。 3）与 DAO 层交互，对多个 DAO 的组合复用。 ⚫ DAO 层：数据访问层，与底层 MySQL、Oracle、Hbase、OceanBase等进行数据交互。 ⚫ 第三方服务：包括其它部门 RPC 服务接口，基础平台，其它公司的 HTTP 接口，如淘宝开放平台、支付宝付款服务、 高德地图服务等。 ⚫ 外部数据接口：外部（应用）数据存储服务提供的接口，多见于数据迁移场景中。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-15T03:32:25.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:tag","content":"规范"}],["meta",{"property":"article:modified_time","content":"2024-04-15T03:32:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"规范工程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-15T03:32:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"(一) 应用分层","slug":"一-应用分层","link":"#一-应用分层","children":[]},{"level":2,"title":"(二) 二方库依赖","slug":"二-二方库依赖","link":"#二-二方库依赖","children":[]},{"level":2,"title":"(三) 服务器","slug":"三-服务器","link":"#三-服务器","children":[]}],"git":{"createdTime":1697622608000,"updatedTime":1713151945000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":7}]},"readingTime":{"minutes":8.95,"words":2686},"filePathRelative":"standard/project.md","localizedDate":"2023年10月18日","excerpt":"<h2> (一) 应用分层</h2>\\n<h4> 1.【推荐】根据业务架构实践，结合业界分层规范与流行技术框架分析，推荐分层结构如图所示，默认上层依赖于下层，箭头关系表示可直接依赖，如：开放 API 层可以依赖于 Web 层（Controller 层），也可以直接依赖于 Service 层，依此类推：</h4>\\n<figure><figcaption>img.png</figcaption></figure>\\n<ul>\\n<li>\\n<p>⚫ 开放 API 层：可直接封装 Service 接口暴露成 RPC 接口；通过 Web 封装成 http 接口；网关控制层等。</p>\\n</li>\\n<li>\\n<p>⚫ 终端显示层：各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移动端展示等。</p>\\n</li>\\n<li>\\n<p>⚫ Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</p>\\n</li>\\n<li>\\n<p>⚫ Service 层：相对具体的业务逻辑服务层。</p>\\n</li>\\n<li>\\n<p>⚫ Manager 层：通用业务处理层，它有如下特征</p>\\n</li>\\n<li>\\n<p>1）对第三方平台封装的层，预处理返回结果及转化异常信息，适配上层接口。</p>\\n</li>\\n<li>\\n<p>2）对 Service 层通用能力的下沉，如缓存方案、中间件通用处理。</p>\\n</li>\\n<li>\\n<p>3）与 DAO 层交互，对多个 DAO 的组合复用。</p>\\n</li>\\n<li>\\n<p>⚫ DAO 层：数据访问层，与底层 MySQL、Oracle、Hbase、OceanBase等进行数据交互。</p>\\n</li>\\n<li>\\n<p>⚫ 第三方服务：包括其它部门 RPC 服务接口，基础平台，其它公司的 HTTP 接口，如淘宝开放平台、支付宝付款服务、 高德地图服务等。</p>\\n</li>\\n<li>\\n<p>⚫ 外部数据接口：外部（应用）数据存储服务提供的接口，多见于数据迁移场景中。</p>\\n</li>\\n</ul>","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}');export{e as data};
