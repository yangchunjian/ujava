import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as e,c as o,a as t,b as n,d as p,e as c}from"./app-8a5cd404.js";const i={},r={href:"https://www.nowcoder.com/exam/oj?page=1&tab=SQL%E7%AF%87&topicId=240",target:"_blank",rel:"noopener noreferrer"},l=c(`<p>较难或者困难的题目可以根据自身实际情况和面试需要来决定是否要跳过。</p><h2 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> 聚合函数</h2><h3 id="sql-类别高难度试卷得分的截断平均值-较难" tabindex="-1"><a class="header-anchor" href="#sql-类别高难度试卷得分的截断平均值-较难" aria-hidden="true">#</a> SQL 类别高难度试卷得分的截断平均值（较难）</h3><p><strong>描述</strong>： 牛客的运营同学想要查看大家在 SQL 类别中高难度试卷的得分情况。</p><p>请你帮她从<code>exam_record</code>数据表中计算所有用户完成 SQL 类别高难度试卷得分的截断平均值（去掉一个最大值和一个最小值后的平均值）。</p><p>示例数据：<code>examination_info</code>（<code>exam_id</code> 试卷 ID, tag 试卷类别, <code>difficulty</code> 试卷难度, <code>duration</code> 考试时长, <code>release_time</code> 发布时间）</p><table><thead><tr><th>id</th><th>exam_id</th><th>tag</th><th>difficulty</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>1</td><td>9001</td><td>SQL</td><td>hard</td><td>60</td><td>2020-01-01 10:00:00</td></tr><tr><td>2</td><td>9002</td><td>算法</td><td>medium</td><td>80</td><td>2020-08-02 10:00:00</td></tr></tbody></table><p>示例数据：<code>exam_record</code>（uid 用户 ID, exam_id 试卷 ID, start_time 开始作答时间, submit_time 交卷时间, score 得分）</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2020-01-02 09:01:01</td><td>2020-01-02 09:21:01</td><td>80</td></tr><tr><td>2</td><td>1001</td><td>9001</td><td>2021-05-02 10:01:01</td><td>2021-05-02 10:30:01</td><td>81</td></tr><tr><td>3</td><td>1001</td><td>9001</td><td>2021-06-02 19:01:01</td><td>2021-06-02 19:31:01</td><td>84</td></tr><tr><td>4</td><td>1001</td><td>9002</td><td>2021-09-05 19:01:01</td><td>2021-09-05 19:40:01</td><td>89</td></tr><tr><td>5</td><td>1001</td><td>9001</td><td>2021-09-02 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>6</td><td>1001</td><td>9002</td><td>2021-09-01 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>7</td><td>1002</td><td>9002</td><td>2021-02-02 19:01:01</td><td>2021-02-02 19:30:01</td><td>87</td></tr><tr><td>8</td><td>1002</td><td>9001</td><td>2021-05-05 18:01:01</td><td>2021-05-05 18:59:02</td><td>90</td></tr><tr><td>9</td><td>1003</td><td>9001</td><td>2021-09-07 12:01:01</td><td>2021-09-07 10:31:01</td><td>50</td></tr><tr><td>10</td><td>1004</td><td>9001</td><td>2021-09-06 10:01:01</td><td>(NULL)</td><td>(NULL)</td></tr></tbody></table><p>根据输入你的查询结果如下：</p><table><thead><tr><th>tag</th><th>difficulty</th><th>clip_avg_score</th></tr></thead><tbody><tr><td>SQL</td><td>hard</td><td>81.7</td></tr></tbody></table><p>从<code>examination_info</code>表可知，试卷 9001 为高难度 SQL 试卷，该试卷被作答的得分有[80,81,84,90,50]，去除最高分和最低分后为[80,81,84]，平均分为 81.6666667，保留一位小数后为 81.7</p><p><strong>输入描述：</strong></p><p>输入数据中至少有 3 个有效分数</p><p><strong>思路一：</strong> 要找出高难度 sql 试卷，肯定需要联 examination_info 这张表，然后找出高难度的课程，由 examination_info 得知，高难度 sql 的 exam_id 为 9001，那么等下就以 exam_id = 9001 作为条件去查询；</p><p>先找出 9001 号考试 <code>select * from exam_record where exam_id = 9001</code></p><p>然后，找出最高分 <code>select max(score) 最高分 from exam_record where exam_id = 9001</code></p><p>接着，找出最低分 <code>select min(score) 最低分 from exam_record where exam_id = 9001</code></p><p>在查询出来的分数结果集当中，去掉最高分和最低分，最直观能想到的就是 NOT IN 或者 用 NOT EXISTS 也行，这里以 NOT IN 来做</p><p>首先将主体写出来<code>select tag, difficulty, round(avg(score), 1) clip_avg_score from examination_info info INNER JOIN exam_record record</code></p><p><strong>小 tips</strong> : MYSQL 的 <code>ROUND()</code> 函数 ,<code>ROUND(X)</code>返回参数 X 最近似的整数 <code>ROUND(X,D)</code>返回 X ,其值保留到小数点后 D 位,第 D 位的保留方式为四舍五入。</p><p>再将上面的 &quot;碎片&quot; 语句拼凑起来即可， 注意在 NOT IN 中两个子查询用 UNION ALL 来关联，用 union 把 max 和 min 的结果集中在一行当中，这样形成一列多行的效果。</p><p><strong>答案一：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> tag<span class="token punctuation">,</span> difficulty<span class="token punctuation">,</span> <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> clip_avg_score
	<span class="token keyword">FROM</span> examination_info info  <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> exam_record record
		<span class="token keyword">WHERE</span> info<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> record<span class="token punctuation">.</span>exam_id
			<span class="token operator">AND</span>  record<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> <span class="token number">9001</span>
				<span class="token operator">AND</span> record<span class="token punctuation">.</span>score <span class="token operator">NOT</span> <span class="token operator">IN</span><span class="token punctuation">(</span>
					<span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
						<span class="token keyword">FROM</span> exam_record
							<span class="token keyword">WHERE</span> exam_id <span class="token operator">=</span> <span class="token number">9001</span>
								<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
					<span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
						<span class="token keyword">FROM</span> exam_record
							<span class="token keyword">WHERE</span> exam_id <span class="token operator">=</span> <span class="token number">9001</span>
				<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是最直观，也是最容易想到的解法，但是还有待改进，这算是投机取巧过关，其实严格按照题目要求应该这么写：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> tag<span class="token punctuation">,</span>
       difficulty<span class="token punctuation">,</span>
       <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> clip_avg_score
<span class="token keyword">FROM</span> examination_info info
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> exam_record record
<span class="token keyword">WHERE</span> info<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> record<span class="token punctuation">.</span>exam_id
  <span class="token operator">AND</span> record<span class="token punctuation">.</span>exam_id <span class="token operator">=</span>
    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> examination_info<span class="token punctuation">.</span>exam_id
     <span class="token keyword">FROM</span> examination_info
     <span class="token keyword">WHERE</span> tag <span class="token operator">=</span> <span class="token string">&#39;SQL&#39;</span>
       <span class="token operator">AND</span> difficulty <span class="token operator">=</span> <span class="token string">&#39;hard&#39;</span> <span class="token punctuation">)</span>
  <span class="token operator">AND</span> record<span class="token punctuation">.</span>score <span class="token operator">NOT</span> <span class="token operator">IN</span>
    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
     <span class="token keyword">FROM</span> exam_record
     <span class="token keyword">WHERE</span> exam_id <span class="token operator">=</span>
         <span class="token punctuation">(</span><span class="token keyword">SELECT</span> examination_info<span class="token punctuation">.</span>exam_id
          <span class="token keyword">FROM</span> examination_info
          <span class="token keyword">WHERE</span> tag <span class="token operator">=</span> <span class="token string">&#39;SQL&#39;</span>
            <span class="token operator">AND</span> difficulty <span class="token operator">=</span> <span class="token string">&#39;hard&#39;</span> <span class="token punctuation">)</span>
     <span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
     <span class="token keyword">FROM</span> exam_record
     <span class="token keyword">WHERE</span> exam_id <span class="token operator">=</span>
         <span class="token punctuation">(</span><span class="token keyword">SELECT</span> examination_info<span class="token punctuation">.</span>exam_id
          <span class="token keyword">FROM</span> examination_info
          <span class="token keyword">WHERE</span> tag <span class="token operator">=</span> <span class="token string">&#39;SQL&#39;</span>
            <span class="token operator">AND</span> difficulty <span class="token operator">=</span> <span class="token string">&#39;hard&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而你会发现，重复的语句非常多，所以可以利用<code>WITH</code>来抽取公共部分</p><p><strong><code>WITH</code> 子句介绍</strong>：</p><p><code>WITH</code> 子句，也称为公共表表达式（Common Table Expression，CTE），是在 SQL 查询中定义临时表的方式。它可以让我们在查询中创建一个临时命名的结果集，并且可以在同一查询中引用该结果集。</p><p>基本用法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> cte_name <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> columnN<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token punctuation">(</span>
    <span class="token comment">-- 查询体</span>
    <span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span>
<span class="token comment">-- 主查询</span>
<span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> cte_name
<span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WITH</code> 子句由以下几个部分组成：</p><ul><li><code>cte_name</code>: 给临时表起一个名称，可以在主查询中引用。</li><li><code>(column1, column2, ..., columnN)</code>: 可选，指定临时表的列名。</li><li><code>AS</code>: 必需，表示开始定义临时表。</li><li><code>CTE 查询体</code>: 实际的查询语句，用于定义临时表中的数据。</li></ul><p><code>WITH</code> 子句的主要用途之一是增强查询的可读性和可维护性，尤其在涉及多个嵌套子查询或需要重复使用相同的查询逻辑时。通过将这些逻辑放在一个命名的临时表中，我们可以更清晰地组织查询，并消除重复代码。</p><p>此外，<code>WITH</code> 子句还可以在复杂的查询中实现递归查询。递归查询允许我们在单个查询中执行对同一表的多次迭代，逐步构建结果集。这在处理层次结构数据、组织结构和树状结构等场景中非常有用。</p><p><strong>小细节</strong>：MySQL 5.7 版本以及之前的版本不支持在 <code>WITH</code> 子句中直接使用别名。</p><p>下面是改进后的答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">WITH</span> t1 <span class="token keyword">AS</span>
  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> record<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>
          info<span class="token punctuation">.</span>tag<span class="token punctuation">,</span>
          info<span class="token punctuation">.</span>difficulty
   <span class="token keyword">FROM</span> exam_record record
   <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> examination_info info <span class="token keyword">ON</span> record<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> info<span class="token punctuation">.</span>exam_id
   <span class="token keyword">WHERE</span> info<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token string">&quot;SQL&quot;</span>
     <span class="token operator">AND</span> info<span class="token punctuation">.</span>difficulty <span class="token operator">=</span> <span class="token string">&quot;hard&quot;</span> <span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> tag<span class="token punctuation">,</span>
       difficulty<span class="token punctuation">,</span>
       <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> t1
<span class="token keyword">WHERE</span> score <span class="token operator">NOT</span> <span class="token operator">IN</span>
    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
     <span class="token keyword">FROM</span> t1
     <span class="token keyword">UNION</span> <span class="token keyword">SELECT</span> <span class="token function">min</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
     <span class="token keyword">FROM</span> t1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>思路二：</strong></p><ul><li>筛选 SQL 高难度试卷：<code>where tag=&quot;SQL&quot; and difficulty=&quot;hard&quot;</code></li><li>计算截断平均值：<code>(和-最大值-最小值) / (总个数-2)</code>: <ul><li><code>(sum(score) - max(score) - min(score)) / (count(score) - 2)</code></li><li>有一个缺点就是，如果最大值和最小值有多个，这个方法就很难筛选出来, 但是题目中说了-----&gt;<strong><code>去掉一个最大值和一个最小值后的平均值</code></strong>, 所以这里可以用这个公式。</li></ul></li></ul><p><strong>答案二：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> info<span class="token punctuation">.</span>tag<span class="token punctuation">,</span>
       info<span class="token punctuation">.</span>difficulty<span class="token punctuation">,</span>
       <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token operator">-</span> <span class="token function">MIN</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token operator">-</span> <span class="token function">MAX</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">COUNT</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> clip_avg_score
<span class="token keyword">FROM</span> examination_info info<span class="token punctuation">,</span>
     exam_record record
<span class="token keyword">WHERE</span> info<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> record<span class="token punctuation">.</span>exam_id
  <span class="token operator">AND</span> info<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token string">&quot;SQL&quot;</span>
  <span class="token operator">AND</span> info<span class="token punctuation">.</span>difficulty <span class="token operator">=</span> <span class="token string">&quot;hard&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="统计作答次数" tabindex="-1"><a class="header-anchor" href="#统计作答次数" aria-hidden="true">#</a> 统计作答次数</h3><p>有一个试卷作答记录表 <code>exam_record</code>，请从中统计出总作答次数 <code>total_pv</code>、试卷已完成作答数 <code>complete_pv</code>、已完成的试卷数 <code>complete_exam_cnt</code>。</p><p>示例数据 <code>exam_record</code> 表（<code>uid</code> 用户 ID, <code>exam_id</code> 试卷 ID, <code>start_time</code> 开始作答时间, <code>submit_time</code> 交卷时间, <code>score</code> 得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2020-01-02 09:01:01</td><td>2020-01-02 09:21:01</td><td>80</td></tr><tr><td>2</td><td>1001</td><td>9001</td><td>2021-05-02 10:01:01</td><td>2021-05-02 10:30:01</td><td>81</td></tr><tr><td>3</td><td>1001</td><td>9001</td><td>2021-06-02 19:01:01</td><td>2021-06-02 19:31:01</td><td>84</td></tr><tr><td>4</td><td>1001</td><td>9002</td><td>2021-09-05 19:01:01</td><td>2021-09-05 19:40:01</td><td>89</td></tr><tr><td>5</td><td>1001</td><td>9001</td><td>2021-09-02 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>6</td><td>1001</td><td>9002</td><td>2021-09-01 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>7</td><td>1002</td><td>9002</td><td>2021-02-02 19:01:01</td><td>2021-02-02 19:30:01</td><td>87</td></tr><tr><td>8</td><td>1002</td><td>9001</td><td>2021-05-05 18:01:01</td><td>2021-05-05 18:59:02</td><td>90</td></tr><tr><td>9</td><td>1003</td><td>9001</td><td>2021-09-07 12:01:01</td><td>2021-09-07 10:31:01</td><td>50</td></tr><tr><td>10</td><td>1004</td><td>9001</td><td>2021-09-06 10:01:01</td><td>(NULL)</td><td>(NULL)</td></tr></tbody></table><p>示例输出：</p><table><thead><tr><th>total_pv</th><th>complete_pv</th><th>complete_exam_cnt</th></tr></thead><tbody><tr><td>11</td><td>7</td><td>2</td></tr></tbody></table><p>解释：表示截止当前，有 11 次试卷作答记录，已完成的作答次数为 7 次（中途退出的为未完成状态，其交卷时间和份数为 NULL），已完成的试卷有 9001 和 9002 两份。</p><p><strong>思路</strong>： 这题一看到统计次数，肯定第一时间就要想到用<code>COUNT</code>这个函数来解决，问题是要统计不同的记录，该怎么来写？使用子查询就能解决这个题目(这题用 case when 也能写出来，解法类似，逻辑不同而已)；首先在做这个题之前，让我们先来了解一下<code>COUNT</code>的基本用法；</p><p><code>COUNT()</code> 函数的基本语法如下所示：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token function">COUNT</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>expression</code> 可以是列名、表达式、常量或通配符。下面是一些常见的用法示例：</p><ol><li>计算表中所有行的数量：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>计算特定列非空（不为 NULL）值的数量：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>计算满足条件的行数：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>结合 <code>GROUP BY</code> 使用，计算分组后每个组的行数：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> column_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>计算不同列组合的唯一组合数：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> column_name1<span class="token punctuation">,</span> column_name2<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在使用 <code>COUNT()</code> 函数时，如果不指定任何参数或者使用 <code>COUNT(*)</code>，将会计算所有行的数量。而如果使用列名，则只会计算该列非空值的数量。</p><p>另外，<code>COUNT()</code> 函数的结果是一个整数值。即使结果是零，也不会返回 NULL，这点需要谨记。</p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
	<span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> total_pv<span class="token punctuation">,</span>
	<span class="token punctuation">(</span> <span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> exam_record <span class="token keyword">WHERE</span> submit_time <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">)</span> complete_pv<span class="token punctuation">,</span>
	<span class="token punctuation">(</span> <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> exam_id<span class="token punctuation">,</span> score <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token operator">OR</span> <span class="token boolean">NULL</span> <span class="token punctuation">)</span> <span class="token keyword">FROM</span> exam_record <span class="token punctuation">)</span> complete_exam_cnt
<span class="token keyword">FROM</span>
	exam_record
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里着重说一下<code>COUNT( DISTINCT exam_id, score IS NOT NULL OR NULL )</code>这一句，判断 score 是否为 null ，如果是即为真，如果不是返回 null；注意这里如果不加 <code>or null</code> 在不是 null 的情况下只会返回 false 也就是返回 0；</p><p><code>COUNT</code>本身是不可以对多列求行数的，<code>distinct</code>的加入是的多列成为一个整体，可以求出现的行数了;<code>count distinct</code>在计算时只返回非 null 的行, 这个也要注意；</p><p>另外通过本题 get 到了------&gt;count 加条件常用句式<code>count( 列判断 or null)</code></p><h3 id="得分不小于平均分的最低分" tabindex="-1"><a class="header-anchor" href="#得分不小于平均分的最低分" aria-hidden="true">#</a> 得分不小于平均分的最低分</h3><p><strong>描述</strong>： 请从试卷作答记录表中找到 SQL 试卷得分不小于该类试卷平均得分的用户最低得分。</p><p>示例数据 exam_record 表（uid 用户 ID, exam_id 试卷 ID, start_time 开始作答时间, submit_time 交卷时间, score 得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2020-01-02 09:01:01</td><td>2020-01-02 09:21:01</td><td>80</td></tr><tr><td>2</td><td>1002</td><td>9001</td><td>2021-09-05 19:01:01</td><td>2021-09-05 19:40:01</td><td>89</td></tr><tr><td>3</td><td>1002</td><td>9002</td><td>2021-09-02 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>4</td><td>1002</td><td>9003</td><td>2021-09-01 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>5</td><td>1002</td><td>9001</td><td>2021-02-02 19:01:01</td><td>2021-02-02 19:30:01</td><td>87</td></tr><tr><td>6</td><td>1002</td><td>9002</td><td>2021-05-05 18:01:01</td><td>2021-05-05 18:59:02</td><td>90</td></tr><tr><td>7</td><td>1003</td><td>9002</td><td>2021-02-06 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>8</td><td>1003</td><td>9003</td><td>2021-09-07 10:01:01</td><td>2021-09-07 10:31:01</td><td>86</td></tr><tr><td>9</td><td>1004</td><td>9003</td><td>2021-09-06 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr></tbody></table><p><code>examination_info</code> 表（<code>exam_id</code> 试卷 ID, <code>tag</code> 试卷类别, <code>difficulty</code> 试卷难度, <code>duration</code> 考试时长, <code>release_time</code> 发布时间）</p><table><thead><tr><th>id</th><th>exam_id</th><th>tag</th><th>difficulty</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>1</td><td>9001</td><td>SQL</td><td>hard</td><td>60</td><td>2020-01-01 10:00:00</td></tr><tr><td>2</td><td>9002</td><td>SQL</td><td>easy</td><td>60</td><td>2020-02-01 10:00:00</td></tr><tr><td>3</td><td>9003</td><td>算法</td><td>medium</td><td>80</td><td>2020-08-02 10:00:00</td></tr></tbody></table><p>示例输出数据：</p><table><thead><tr><th>min_score_over_avg</th></tr></thead><tbody><tr><td>87</td></tr></tbody></table><p><strong>解释</strong>：试卷 9001 和 9002 为 SQL 类别，作答这两份试卷的得分有[80,89,87,90]，平均分为 86.5，不小于平均分的最小分数为 87</p><p><strong>思路</strong>：这类题目第一眼看确实很复杂， 因为不知道从哪入手，但是当我们仔细读题审题后，要学会抓住题干中的关键信息。以本题为例：<code>请从试卷作答记录表中找到SQL试卷得分不小于该类试卷平均得分的用户最低得分。</code>你能一眼从中提取哪些有效信息来作为解题思路？</p><p>第一条：找到<mark>SQL</mark>试卷得分</p><p>第二条：该类试卷<mark>平均得分</mark></p><p>第三条：该类试卷的<mark>用户最低得分</mark></p><p>然后中间的 “桥梁” 就是<mark>不小于</mark></p><p>将条件拆分后，先逐步完成</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 找出tag为‘SQL’的得分   【80, 89,87,90】</span>
<span class="token comment">-- 再算出这一组的平均得分</span>
<span class="token keyword">select</span>  <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span>  examination_info info <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> exam_record record
	<span class="token keyword">where</span> info<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> record<span class="token punctuation">.</span>exam_id
	<span class="token operator">and</span> tag<span class="token operator">=</span> <span class="token string">&#39;SQL&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再找出该类试卷的最低得分，接着将结果集<code>【80, 89,87,90】</code> 去和平均分数作比较，方可得出最终答案。</p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">AS</span> min_score_over_avg
<span class="token keyword">FROM</span> examination_info info
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> exam_record record
<span class="token keyword">WHERE</span> info<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> record<span class="token punctuation">.</span>exam_id
  <span class="token operator">AND</span> tag<span class="token operator">=</span> <span class="token string">&#39;SQL&#39;</span>
  <span class="token operator">AND</span> score <span class="token operator">&gt;=</span>
    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
     <span class="token keyword">FROM</span> examination_info info
     <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> exam_record record
     <span class="token keyword">WHERE</span> info<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> record<span class="token punctuation">.</span>exam_id
       <span class="token operator">AND</span> tag<span class="token operator">=</span> <span class="token string">&#39;SQL&#39;</span> <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实这类题目给出的要求看似很 “绕”，但其实仔细梳理一遍，将大条件拆分成小条件，逐个拆分完以后，最后将所有条件拼凑起来。反正只要记住：<strong>抓主干，理分支</strong>，问题便迎刃而解。</p><h2 id="分组查询" tabindex="-1"><a class="header-anchor" href="#分组查询" aria-hidden="true">#</a> 分组查询</h2><h3 id="平均活跃天数和月活人数" tabindex="-1"><a class="header-anchor" href="#平均活跃天数和月活人数" aria-hidden="true">#</a> 平均活跃天数和月活人数</h3><p><strong>描述</strong>：用户在牛客试卷作答区作答记录存储在表 <code>exam_record</code> 中，内容如下：</p><p><code>exam_record</code> 表（<code>uid</code> 用户 ID, <code>exam_id</code> 试卷 ID, <code>start_time</code> 开始作答时间, <code>submit_time</code> 交卷时间, <code>score</code> 得分）</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2021-07-02 09:01:01</td><td>2021-07-02 09:21:01</td><td>80</td></tr><tr><td>2</td><td>1002</td><td>9001</td><td>2021-09-05 19:01:01</td><td>2021-09-05 19:40:01</td><td>81</td></tr><tr><td>3</td><td>1002</td><td>9002</td><td>2021-09-02 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>4</td><td>1002</td><td>9003</td><td>2021-09-01 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>5</td><td>1002</td><td>9001</td><td>2021-07-02 19:01:01</td><td>2021-07-02 19:30:01</td><td>82</td></tr><tr><td>6</td><td>1002</td><td>9002</td><td>2021-07-05 18:01:01</td><td>2021-07-05 18:59:02</td><td>90</td></tr><tr><td>7</td><td>1003</td><td>9002</td><td>2021-07-06 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>8</td><td>1003</td><td>9003</td><td>2021-09-07 10:01:01</td><td>2021-09-07 10:31:01</td><td>86</td></tr><tr><td>9</td><td>1004</td><td>9003</td><td>2021-09-06 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>10</td><td>1002</td><td>9003</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>81</td></tr><tr><td>11</td><td>1005</td><td>9001</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>88</td></tr><tr><td>12</td><td>1006</td><td>9002</td><td>2021-09-02 12:11:01</td><td>2021-09-02 12:31:01</td><td>89</td></tr><tr><td>13</td><td>1007</td><td>9002</td><td>2020-09-02 12:11:01</td><td>2020-09-02 12:31:01</td><td>89</td></tr></tbody></table><p>请计算 2021 年每个月里试卷作答区用户平均月活跃天数 <code>avg_active_days</code> 和月度活跃人数 <code>mau</code>，上面数据的示例输出如下：</p><table><thead><tr><th>month</th><th>avg_active_days</th><th>mau</th></tr></thead><tbody><tr><td>202107</td><td>1.50</td><td>2</td></tr><tr><td>202109</td><td>1.25</td><td>4</td></tr></tbody></table><p><strong>解释</strong>：2021 年 7 月有 2 人活跃，共活跃了 3 天（1001 活跃 1 天，1002 活跃 2 天），平均活跃天数 1.5；2021 年 9 月有 4 人活跃，共活跃了 5 天，平均活跃天数 1.25，结果保留 2 位小数。</p><p>注：此处活跃指有<mark>交卷</mark>行为。</p><p><strong>思路</strong>：读完题先注意高亮部分；一般求天数和月活跃人数马上就要想到相关的日期函数；这一题我们同样来进行拆分，把问题细化再解决；首先求活跃人数，肯定要用到<code>COUNT()</code>，那这里首先就有一个坑，不知道大家注意了没有？用户 1002 在 9 月份做了两种不同的试卷，所以这里要注意去重，不然在统计的时候，活跃人数是错的；第二个就是要知道日期的格式化，如上表，题目要求以<code>202107</code>这种日期格式展现，要用到<code>DATE_FORMAT</code>来进行格式化。</p><p>基本用法：</p><p><code>DATE_FORMAT(date_value, format)</code></p><ul><li><code>date_value</code> 参数是待格式化的日期或时间值。</li><li><code>format</code> 参数是指定的日期或时间格式（这个和 Java 里面的日期格式一样）。</li></ul><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> DATE_FORMAT<span class="token punctuation">(</span>submit_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m&#39;</span><span class="token punctuation">)</span> <span class="token keyword">MONTH</span><span class="token punctuation">,</span>
                                        <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> UID<span class="token punctuation">,</span> DATE_FORMAT<span class="token punctuation">(</span>submit_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m%d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> UID<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> avg_active_days<span class="token punctuation">,</span>
                                        <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> UID<span class="token punctuation">)</span> mau
<span class="token keyword">FROM</span> exam_record
<span class="token keyword">WHERE</span> <span class="token keyword">YEAR</span> <span class="token punctuation">(</span>submit_time<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2021</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">MONTH</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里多说一句, 使用<code>COUNT(DISTINCT uid, DATE_FORMAT(submit_time, &#39;%Y%m%d&#39;))</code> 可以统计在 <code>uid</code> 列和 <code>submit_time</code> 列按照年份、月份和日期进行格式化后的组合值的数量。</p><h3 id="月总刷题数和日均刷题数" tabindex="-1"><a class="header-anchor" href="#月总刷题数和日均刷题数" aria-hidden="true">#</a> 月总刷题数和日均刷题数</h3><p><strong>描述</strong>：现有一张题目练习记录表 <code>practice_record</code>，示例内容如下：</p><table><thead><tr><th>id</th><th>uid</th><th>question_id</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>8001</td><td>2021-08-02 11:41:01</td><td>60</td></tr><tr><td>2</td><td>1002</td><td>8001</td><td>2021-09-02 19:30:01</td><td>50</td></tr><tr><td>3</td><td>1002</td><td>8001</td><td>2021-09-02 19:20:01</td><td>70</td></tr><tr><td>4</td><td>1002</td><td>8002</td><td>2021-09-02 19:38:01</td><td>70</td></tr><tr><td>5</td><td>1003</td><td>8002</td><td>2021-08-01 19:38:01</td><td>80</td></tr></tbody></table><p>请从中统计出 2021 年每个月里用户的月总刷题数 <code>month_q_cnt</code> 和日均刷题数 <code>avg_day_q_cnt</code>（按月份升序排序）以及该年的总体情况，示例数据输出如下：</p><table><thead><tr><th>submit_month</th><th>month_q_cnt</th><th>avg_day_q_cnt</th></tr></thead><tbody><tr><td>202108</td><td>2</td><td>0.065</td></tr><tr><td>202109</td><td>3</td><td>0.100</td></tr><tr><td>2021 汇总</td><td>5</td><td>0.161</td></tr></tbody></table><p><strong>解释</strong>：2021 年 8 月共有 2 次刷题记录，日均刷题数为 2/31=0.065（保留 3 位小数）；2021 年 9 月共有 3 次刷题记录，日均刷题数为 3/30=0.100；2021 年共有 5 次刷题记录（年度汇总平均无实际意义，这里我们按照 31 天来算 5/31=0.161）</p><blockquote><p>牛客已经采用最新的 Mysql 版本，如果您运行结果出现错误：ONLY_FULL_GROUP_BY，意思是：对于 GROUP BY 聚合操作，如果在 SELECT 中的列，没有在 GROUP BY 中出现，那么这个 SQL 是不合法的，因为列不在 GROUP BY 从句中，也就是说查出来的列必须在 group by 后面出现否则就会报错，或者这个字段出现在聚合函数里面。</p></blockquote><p><strong>思路：</strong></p><p>看到实例数据就要马上联想到相关的函数，比如<code>submit_month</code>就要用到<code>DATE_FORMAT</code>来格式化日期。然后查出每月的刷题数量。</p><p>每月的刷题数量</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">MONTH</span> <span class="token punctuation">(</span> submit_time <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span> question_id <span class="token punctuation">)</span>
<span class="token keyword">FROM</span>
	practice_record
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
	<span class="token keyword">MONTH</span> <span class="token punctuation">(</span>submit_time<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着第三列这里要用到<code>DAY(LAST_DAY(date_value))</code>函数来查找给定日期的月份中的天数。</p><p>示例代码如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DAY</span><span class="token punctuation">(</span>LAST_DAY<span class="token punctuation">(</span><span class="token string">&#39;2023-07-08&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> days_in_month<span class="token punctuation">;</span>
<span class="token comment">-- 输出：31</span>

<span class="token keyword">SELECT</span> <span class="token keyword">DAY</span><span class="token punctuation">(</span>LAST_DAY<span class="token punctuation">(</span><span class="token string">&#39;2023-02-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> days_in_month<span class="token punctuation">;</span>
<span class="token comment">-- 输出：28 (闰年中的二月份)</span>

<span class="token keyword">SELECT</span> <span class="token keyword">DAY</span><span class="token punctuation">(</span>LAST_DAY<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> days_in_current_month<span class="token punctuation">;</span>
<span class="token comment">-- 输出：31 （当前月份的天数）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>LAST_DAY()</code> 函数获取给定日期的当月最后一天，然后使用 <code>DAY()</code> 函数提取该日期的天数。这样就能获得指定月份的天数。</p><p>需要注意的是，<code>LAST_DAY()</code> 函数返回的是日期值，而 <code>DAY()</code> 函数用于提取日期值中的天数部分。</p><p>有了上述的分析之后，即可马上写出答案，这题复杂就复杂在处理日期上，其中的逻辑并不难。</p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> DATE_FORMAT<span class="token punctuation">(</span>submit_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m&#39;</span><span class="token punctuation">)</span> submit_month<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span>question_id<span class="token punctuation">)</span> month_q_cnt<span class="token punctuation">,</span>
       <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">COUNT</span><span class="token punctuation">(</span>question_id<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">DAY</span> <span class="token punctuation">(</span>LAST_DAY<span class="token punctuation">(</span>submit_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> avg_day_q_cnt
<span class="token keyword">FROM</span> practice_record
<span class="token keyword">WHERE</span> DATE_FORMAT<span class="token punctuation">(</span>submit_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y&#39;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&#39;2021&#39;</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> submit_month
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> <span class="token string">&#39;2021汇总&#39;</span> <span class="token keyword">AS</span> submit_month<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span>question_id<span class="token punctuation">)</span> month_q_cnt<span class="token punctuation">,</span>
       <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">COUNT</span><span class="token punctuation">(</span>question_id<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> avg_day_q_cnt
<span class="token keyword">FROM</span> practice_record
<span class="token keyword">WHERE</span> DATE_FORMAT<span class="token punctuation">(</span>submit_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y&#39;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&#39;2021&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> submit_month
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实例数据输出中因为最后一行需要得出汇总数据，所以这里要 <code>UNION ALL</code>加到结果集中；别忘了最后要排序！</p><h3 id="未完成试卷数大于-1-的有效用户-较难" tabindex="-1"><a class="header-anchor" href="#未完成试卷数大于-1-的有效用户-较难" aria-hidden="true">#</a> 未完成试卷数大于 1 的有效用户（较难）</h3><p><strong>描述</strong>：现有试卷作答记录表 <code>exam_record</code>（<code>uid</code> 用户 ID, <code>exam_id</code> 试卷 ID, <code>start_time</code> 开始作答时间, <code>submit_time</code> 交卷时间, <code>score</code> 得分），示例数据如下：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2021-07-02 09:01:01</td><td>2021-07-02 09:21:01</td><td>80</td></tr><tr><td>2</td><td>1002</td><td>9001</td><td>2021-09-05 19:01:01</td><td>2021-09-05 19:40:01</td><td>81</td></tr><tr><td>3</td><td>1002</td><td>9002</td><td>2021-09-02 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>4</td><td>1002</td><td>9003</td><td>2021-09-01 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>5</td><td>1002</td><td>9001</td><td>2021-07-02 19:01:01</td><td>2021-07-02 19:30:01</td><td>82</td></tr><tr><td>6</td><td>1002</td><td>9002</td><td>2021-07-05 18:01:01</td><td>2021-07-05 18:59:02</td><td>90</td></tr><tr><td>7</td><td>1003</td><td>9002</td><td>2021-07-06 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>8</td><td>1003</td><td>9003</td><td>2021-09-07 10:01:01</td><td>2021-09-07 10:31:01</td><td>86</td></tr><tr><td>9</td><td>1004</td><td>9003</td><td>2021-09-06 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>10</td><td>1002</td><td>9003</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>81</td></tr><tr><td>11</td><td>1005</td><td>9001</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>88</td></tr><tr><td>12</td><td>1006</td><td>9002</td><td>2021-09-02 12:11:01</td><td>2021-09-02 12:31:01</td><td>89</td></tr><tr><td>13</td><td>1007</td><td>9002</td><td>2020-09-02 12:11:01</td><td>2020-09-02 12:31:01</td><td>89</td></tr></tbody></table><p>还有一张试卷信息表 <code>examination_info</code>（<code>exam_id</code> 试卷 ID, <code>tag</code> 试卷类别, <code>difficulty</code> 试卷难度, <code>duration</code> 考试时长, <code>release_time</code> 发布时间），示例数据如下：</p><table><thead><tr><th>id</th><th>exam_id</th><th>tag</th><th>difficulty</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>1</td><td>9001</td><td>SQL</td><td>hard</td><td>60</td><td>2020-01-01 10:00:00</td></tr><tr><td>2</td><td>9002</td><td>SQL</td><td>easy</td><td>60</td><td>2020-02-01 10:00:00</td></tr><tr><td>3</td><td>9003</td><td>算法</td><td>medium</td><td>80</td><td>2020-08-02 10:00:00</td></tr></tbody></table><p>请统计 2021 年每个未完成试卷作答数大于 1 的有效用户的数据（有效用户指完成试卷作答数至少为 1 且未完成数小于 5），输出用户 ID、未完成试卷作答数、完成试卷作答数、作答过的试卷 tag 集合，按未完成试卷数量由多到少排序。示例数据的输出结果如下：</p><table><thead><tr><th>uid</th><th>incomplete_cnt</th><th>complete_cnt</th><th>detail</th></tr></thead><tbody><tr><td>1002</td><td>2</td><td>4</td><td>2021-09-01:算法;2021-07-02:SQL;2021-09-02:SQL;2021-09-05:SQL;2021-07-05:SQL</td></tr></tbody></table><p><strong>解释</strong>：2021 年的作答记录中，除了 1004，其他用户均满足有效用户定义，但只有 1002 未完成试卷数大于 1，因此只输出 1002，detail 中是 1002 作答过的试卷{日期:tag}集合，日期和 tag 间用 <strong>:</strong> 连接，多元素间用 <strong>;</strong> 连接。</p><p><strong>思路：</strong></p><p>仔细读题后，分析出：首先要联表，因为后面要输出<code>tag</code>；</p><p>筛选出 2021 年的数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> exam_record er
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> examination_info ei <span class="token keyword">ON</span> er<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> ei<span class="token punctuation">.</span>exam_id
<span class="token keyword">WHERE</span> <span class="token keyword">YEAR</span> <span class="token punctuation">(</span>er<span class="token punctuation">.</span>start_time<span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">2021</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 uid 进行分组，然后对每个用户进行条件进行判断，题目中要求<code>完成试卷数至少为1,未完成试卷数要大于1，小于5</code></p><p>那么等会儿写 sql 的时候条件应该是：<code>未完成 &gt; 1 and 已完成 &gt;=1 and 未完成 &lt; 5</code></p><p>因为最后要用到字符串的拼接，而且还要组合拼接，这个可以用<code>GROUP_CONCAT</code>函数，下面简单介绍一下该函数的用法：</p><p>基本格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>GROUP_CONCAT<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">DISTINCT</span><span class="token punctuation">]</span> expr <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> {unsigned_integer <span class="token operator">|</span> col_name <span class="token operator">|</span> expr} <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>             <span class="token punctuation">[</span>SEPARATOR sep<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>expr</code>：要连接的列或表达式。</li><li><code>DISTINCT</code>：可选参数，用于去重。当指定了 <code>DISTINCT</code>，相同的值只会出现一次。</li><li><code>ORDER BY</code>：可选参数，用于排序连接后的值。可以选择升序 (<code>ASC</code>) 或降序 (<code>DESC</code>) 排序。</li><li><code>SEPARATOR sep</code>：可选参数，用于设置连接后的值的分隔符。（本题要用这个参数设置 ; 号 ）</li></ul><p><code>GROUP_CONCAT()</code> 函数常用于 <code>GROUP BY</code> 子句中，将一组行的值连接为一个字符串，并在结果集中以聚合的形式返回。</p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>uid<span class="token punctuation">,</span>
       <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span>
               <span class="token keyword">WHEN</span> a<span class="token punctuation">.</span>submit_time <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token keyword">THEN</span> <span class="token number">1</span>
           <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> incomplete_cnt<span class="token punctuation">,</span>
       <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token keyword">CASE</span>
               <span class="token keyword">WHEN</span> a<span class="token punctuation">.</span>submit_time <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">THEN</span> <span class="token number">1</span>
           <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> complete_cnt<span class="token punctuation">,</span>
       GROUP_CONCAT<span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> CONCAT<span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">(</span>a<span class="token punctuation">.</span>start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y-%m-%d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;:&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>tag<span class="token punctuation">)</span>
                    <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> start_time SEPARATOR <span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> detail
<span class="token keyword">FROM</span> exam_record a
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> examination_info b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> b<span class="token punctuation">.</span>exam_id
<span class="token keyword">WHERE</span> <span class="token keyword">YEAR</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>start_time<span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">2021</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>uid
<span class="token keyword">HAVING</span> incomplete_cnt <span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token operator">AND</span> complete_cnt <span class="token operator">&gt;=</span> <span class="token number">1</span>
<span class="token operator">AND</span> incomplete_cnt <span class="token operator">&lt;</span> <span class="token number">5</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> incomplete_cnt <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>SUM(CASE WHEN a.submit_time IS NULL THEN 1 END)</code> 统计了每个用户未完成的记录数量。</li><li><code>SUM(CASE WHEN a.submit_time IS NOT NULL THEN 1 END)</code> 统计了每个用户已完成的记录数量。</li><li><code>GROUP_CONCAT(DISTINCT CONCAT(DATE_FORMAT(a.start_time, &#39;%Y-%m-%d&#39;), &#39;:&#39;, b.tag) ORDER BY a.start_time SEPARATOR &#39;;&#39;)</code> 将每个用户的考试日期和标签以逗号分隔的形式连接成一个字符串，并按考试开始时间进行排序。</li></ul><h2 id="嵌套子查询" tabindex="-1"><a class="header-anchor" href="#嵌套子查询" aria-hidden="true">#</a> 嵌套子查询</h2><h3 id="月均完成试卷数不小于-3-的用户爱作答的类别-较难" tabindex="-1"><a class="header-anchor" href="#月均完成试卷数不小于-3-的用户爱作答的类别-较难" aria-hidden="true">#</a> 月均完成试卷数不小于 3 的用户爱作答的类别（较难）</h3><p><strong>描述</strong>：现有试卷作答记录表 <code>exam_record</code>（<code>uid</code>：用户 ID, <code>exam_id</code>：试卷 ID, <code>start_time</code>：开始作答时间, <code>submit_time</code>：交卷时间，没提交的话为 NULL, <code>score</code>：得分），示例数据如下：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2021-07-02 09:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>2</td><td>1002</td><td>9003</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:21:01</td><td>60</td></tr><tr><td>3</td><td>1002</td><td>9002</td><td>2021-09-02 12:01:01</td><td>2021-09-02 12:31:01</td><td>70</td></tr><tr><td>4</td><td>1002</td><td>9001</td><td>2021-09-05 19:01:01</td><td>2021-09-05 19:40:01</td><td>81</td></tr><tr><td>5</td><td>1002</td><td>9002</td><td>2021-07-06 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>6</td><td>1003</td><td>9003</td><td>2021-09-07 10:01:01</td><td>2021-09-07 10:31:01</td><td>86</td></tr><tr><td>7</td><td>1003</td><td>9003</td><td>2021-09-08 12:01:01</td><td>2021-09-08 12:11:01</td><td>40</td></tr><tr><td>8</td><td>1003</td><td>9001</td><td>2021-09-08 13:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>9</td><td>1003</td><td>9002</td><td>2021-09-08 14:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>10</td><td>1003</td><td>9003</td><td>2021-09-08 15:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>11</td><td>1005</td><td>9001</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>88</td></tr><tr><td>12</td><td>1005</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>88</td></tr><tr><td>13</td><td>1005</td><td>9002</td><td>2021-09-02 12:11:01</td><td>2021-09-02 12:31:01</td><td>89</td></tr></tbody></table><p>试卷信息表 <code>examination_info</code>（<code>exam_id</code>：试卷 ID, <code>tag</code>：试卷类别, <code>difficulty</code>：试卷难度, <code>duration</code>：考试时长, <code>release_time</code>：发布时间），示例数据如下：</p><table><thead><tr><th>id</th><th>exam_id</th><th>tag</th><th>difficulty</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>1</td><td>9001</td><td>SQL</td><td>hard</td><td>60</td><td>2020-01-01 10:00:00</td></tr><tr><td>2</td><td>9002</td><td>C++</td><td>easy</td><td>60</td><td>2020-02-01 10:00:00</td></tr><tr><td>3</td><td>9003</td><td>算法</td><td>medium</td><td>80</td><td>2020-08-02 10:00:00</td></tr></tbody></table><p>请从表中统计出 “当月均完成试卷数”不小于 3 的用户们爱作答的类别及作答次数，按次数降序输出，示例输出如下：</p><table><thead><tr><th>tag</th><th>tag_cnt</th></tr></thead><tbody><tr><td>C++</td><td>4</td></tr><tr><td>SQL</td><td>2</td></tr><tr><td>算法</td><td>1</td></tr></tbody></table><p><strong>解释</strong>：用户 1002 和 1005 在 2021 年 09 月的完成试卷数目均为 3，其他用户均小于 3；然后用户 1002 和 1005 作答过的试卷 tag 分布结果按作答次数降序排序依次为 C++、SQL、算法。</p><p><strong>思路</strong>：这题考察联合子查询，重点在于<code>月均回答&gt;=3</code>, 但是个人认为这里没有表述清楚，应该直接说查 9 月的就容易理解多了；这里不是每个月都要&gt;=3 或者是所有答题次数/答题月份。不要理解错误了。</p><p>先查询出哪些用户月均答题大于三次</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> UID
<span class="token keyword">FROM</span> exam_record record
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> UID<span class="token punctuation">,</span>
         <span class="token keyword">MONTH</span> <span class="token punctuation">(</span>start_time<span class="token punctuation">)</span>
<span class="token keyword">HAVING</span> <span class="token function">count</span><span class="token punctuation">(</span>submit_time<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这一步之后再进行深入，只要能理解上一步(我的意思是不被题目中的月均所困扰)，然后再套一个子查询，查哪些用户包含其中，然后查出题目中所需的列即可。记得排序！！</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> tag<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span> <span class="token keyword">AS</span> tag_cnt
<span class="token keyword">FROM</span> exam_record record
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> examination_info info <span class="token keyword">ON</span> record<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> info<span class="token punctuation">.</span>exam_id
<span class="token keyword">WHERE</span> UID <span class="token operator">IN</span>
    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> UID
     <span class="token keyword">FROM</span> exam_record record
     <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> UID<span class="token punctuation">,</span>
              <span class="token keyword">MONTH</span> <span class="token punctuation">(</span>start_time<span class="token punctuation">)</span>
     <span class="token keyword">HAVING</span> <span class="token function">count</span><span class="token punctuation">(</span>submit_time<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> tag
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> tag_cnt <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="试卷发布当天作答人数和平均分" tabindex="-1"><a class="header-anchor" href="#试卷发布当天作答人数和平均分" aria-hidden="true">#</a> 试卷发布当天作答人数和平均分</h3><p><strong>描述</strong>：现有用户信息表 <code>user_info</code>（<code>uid</code> 用户 ID，<code>nick_name</code> 昵称, <code>achievement</code> 成就值, <code>level</code> 等级, <code>job</code> 职业方向, <code>register_time</code> 注册时间），示例数据如下：</p><table><thead><tr><th>id</th><th>uid</th><th>nick_name</th><th>achievement</th><th>level</th><th>job</th><th>register_time</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>牛客 1 号</td><td>3100</td><td>7</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>2</td><td>1002</td><td>牛客 2 号</td><td>2100</td><td>6</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>3</td><td>1003</td><td>牛客 3 号</td><td>1500</td><td>5</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>4</td><td>1004</td><td>牛客 4 号</td><td>1100</td><td>4</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>5</td><td>1005</td><td>牛客 5 号</td><td>1600</td><td>6</td><td>C++</td><td>2020-01-01 10:00:00</td></tr><tr><td>6</td><td>1006</td><td>牛客 6 号</td><td>3000</td><td>6</td><td>C++</td><td>2020-01-01 10:00:00</td></tr></tbody></table><p><strong>释义</strong>：用户 1001 昵称为牛客 1 号，成就值为 3100，用户等级是 7 级，职业方向为算法，注册时间 2020-01-01 10:00:00</p><p>试卷信息表 <code>examination_info</code>（<code>exam_id</code> 试卷 ID, <code>tag</code> 试卷类别, <code>difficulty</code> 试卷难度, <code>duration</code> 考试时长, <code>release_time</code> 发布时间） 示例数据如下：</p><table><thead><tr><th>id</th><th>exam_id</th><th>tag</th><th>difficulty</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>1</td><td>9001</td><td>SQL</td><td>hard</td><td>60</td><td>2021-09-01 06:00:00</td></tr><tr><td>2</td><td>9002</td><td>C++</td><td>easy</td><td>60</td><td>2020-02-01 10:00:00</td></tr><tr><td>3</td><td>9003</td><td>算法</td><td>medium</td><td>80</td><td>2020-08-02 10:00:00</td></tr></tbody></table><p>试卷作答记录表 <code>exam_record</code>（<code>uid</code> 用户 ID, <code>exam_id</code> 试卷 ID, <code>start_time</code> 开始作答时间, <code>submit_time</code> 交卷时间, <code>score</code> 得分） 示例数据如下：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2021-07-02 09:01:01</td><td>2021-09-01 09:41:01</td><td>70</td></tr><tr><td>2</td><td>1002</td><td>9003</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:21:01</td><td>60</td></tr><tr><td>3</td><td>1002</td><td>9002</td><td>2021-09-02 12:01:01</td><td>2021-09-02 12:31:01</td><td>70</td></tr><tr><td>4</td><td>1002</td><td>9001</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:40:01</td><td>80</td></tr><tr><td>5</td><td>1002</td><td>9003</td><td>2021-08-01 12:01:01</td><td>2021-08-01 12:21:01</td><td>60</td></tr><tr><td>6</td><td>1002</td><td>9002</td><td>2021-08-02 12:01:01</td><td>2021-08-02 12:31:01</td><td>70</td></tr><tr><td>7</td><td>1002</td><td>9001</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:40:01</td><td>85</td></tr><tr><td>8</td><td>1002</td><td>9002</td><td>2021-07-06 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>9</td><td>1003</td><td>9002</td><td>2021-09-07 10:01:01</td><td>2021-09-07 10:31:01</td><td>86</td></tr><tr><td>10</td><td>1003</td><td>9003</td><td>2021-09-08 12:01:01</td><td>2021-09-08 12:11:01</td><td>40</td></tr><tr><td>11</td><td>1003</td><td>9003</td><td>2021-09-01 13:01:01</td><td>2021-09-01 13:41:01</td><td>70</td></tr><tr><td>12</td><td>1003</td><td>9001</td><td>2021-09-08 14:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>13</td><td>1003</td><td>9002</td><td>2021-09-08 15:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>14</td><td>1005</td><td>9001</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>90</td></tr><tr><td>15</td><td>1005</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>88</td></tr><tr><td>16</td><td>1005</td><td>9002</td><td>2021-09-02 12:11:01</td><td>2021-09-02 12:31:01</td><td>89</td></tr></tbody></table><p>请计算每张 SQL 类别试卷发布后，当天 5 级以上的用户作答的人数 <code>uv</code> 和平均分 <code>avg_score</code>，按人数降序，相同人数的按平均分升序，示例数据结果输出如下：</p><table><thead><tr><th>exam_id</th><th>uv</th><th>avg_score</th></tr></thead><tbody><tr><td>9001</td><td>3</td><td>81.3</td></tr></tbody></table><p>解释：只有一张 SQL 类别的试卷，试卷 ID 为 9001，发布当天（2021-09-01）有 1001、1002、1003、1005 作答过，但是 1003 是 5 级用户，其他 3 位为 5 级以上，他们三的得分有[70,80,85,90]，平均分为 81.3（保留 1 位小数）。</p><p><strong>思路</strong>：这题看似很复杂，但是先逐步将“外边”条件拆分，然后合拢到一起，答案就出来，多表查询反正记住：由外向里，抽丝剥茧。</p><p>先把三种表连起来，同时给定一些条件，比如题目中要求<code>等级&gt; 5</code>的用户，那么可以先查出来</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> u_info<span class="token punctuation">.</span>uid
<span class="token keyword">FROM</span> examination_info e_info
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> exam_record record
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> user_info u_info
<span class="token keyword">WHERE</span> e_info<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> record<span class="token punctuation">.</span>exam_id
  <span class="token operator">AND</span> u_info<span class="token punctuation">.</span>uid <span class="token operator">=</span> record<span class="token punctuation">.</span>uid
  <span class="token operator">AND</span> u_info<span class="token punctuation">.</span><span class="token keyword">LEVEL</span> <span class="token operator">&gt;</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着注意题目中要求：<code>每张sql类别试卷发布后，当天作答用户</code>，注意其中的<mark>当天</mark>，那我们马上就要想到要用到时间的比较。</p><p>对试卷发布日期和开始考试日期进行比较：<code>DATE(e_info.release_time) = DATE(record.start_time)</code>；不用担心<code>submit_time</code> 为 null 的问题，后续在 where 中会给过滤掉。</p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> record<span class="token punctuation">.</span>exam_id <span class="token keyword">AS</span> exam_id<span class="token punctuation">,</span>
       <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> u_info<span class="token punctuation">.</span>uid<span class="token punctuation">)</span> <span class="token keyword">AS</span> uv<span class="token punctuation">,</span>
       <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>u_info<span class="token punctuation">.</span>uid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_score
<span class="token keyword">FROM</span> examination_info e_info
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> exam_record record
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> user_info u_info
<span class="token keyword">WHERE</span> e_info<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> record<span class="token punctuation">.</span>exam_id
  <span class="token operator">AND</span> u_info<span class="token punctuation">.</span>uid <span class="token operator">=</span> record<span class="token punctuation">.</span>uid
  <span class="token operator">AND</span> <span class="token keyword">DATE</span> <span class="token punctuation">(</span>e_info<span class="token punctuation">.</span>release_time<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">DATE</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>start_time<span class="token punctuation">)</span>
  <span class="token operator">AND</span> submit_time <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
  <span class="token operator">AND</span> tag <span class="token operator">=</span> <span class="token string">&#39;SQL&#39;</span>
  <span class="token operator">AND</span> u_info<span class="token punctuation">.</span><span class="token keyword">LEVEL</span> <span class="token operator">&gt;</span> <span class="token number">5</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> record<span class="token punctuation">.</span>exam_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> uv <span class="token keyword">DESC</span><span class="token punctuation">,</span>
         avg_score <span class="token keyword">ASC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意最后的分组排序！先按人数排，若一致，按平均分排。</p><h3 id="作答试卷得分大于过-80-的人的用户等级分布" tabindex="-1"><a class="header-anchor" href="#作答试卷得分大于过-80-的人的用户等级分布" aria-hidden="true">#</a> 作答试卷得分大于过 80 的人的用户等级分布</h3><p><strong>描述</strong>：</p><p>现有用户信息表 <code>user_info</code>（<code>uid</code> 用户 ID，<code>nick_name</code> 昵称, <code>achievement</code> 成就值, <code>level</code> 等级, <code>job</code> 职业方向, <code>register_time</code> 注册时间）：</p><table><thead><tr><th>id</th><th>uid</th><th>nick_name</th><th>achievement</th><th>level</th><th>job</th><th>register_time</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>牛客 1 号</td><td>3100</td><td>7</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>2</td><td>1002</td><td>牛客 2 号</td><td>2100</td><td>6</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>3</td><td>1003</td><td>牛客 3 号</td><td>1500</td><td>5</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>4</td><td>1004</td><td>牛客 4 号</td><td>1100</td><td>4</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>5</td><td>1005</td><td>牛客 5 号</td><td>1600</td><td>6</td><td>C++</td><td>2020-01-01 10:00:00</td></tr><tr><td>6</td><td>1006</td><td>牛客 6 号</td><td>3000</td><td>6</td><td>C++</td><td>2020-01-01 10:00:00</td></tr></tbody></table><p>试卷信息表 <code>examination_info</code>（<code>exam_id</code> 试卷 ID, <code>tag</code> 试卷类别, <code>difficulty</code> 试卷难度, <code>duration</code> 考试时长, <code>release_time</code> 发布时间）：</p><table><thead><tr><th>id</th><th>exam_id</th><th>tag</th><th>difficulty</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>1</td><td>9001</td><td>SQL</td><td>hard</td><td>60</td><td>2021-09-01 06:00:00</td></tr><tr><td>2</td><td>9002</td><td>C++</td><td>easy</td><td>60</td><td>2021-09-01 06:00:00</td></tr><tr><td>3</td><td>9003</td><td>算法</td><td>medium</td><td>80</td><td>2021-09-01 10:00:00</td></tr></tbody></table><p>试卷作答信息表 <code>exam_record</code>（<code>uid</code> 用户 ID, <code>exam_id</code> 试卷 ID, <code>start_time</code> 开始作答时间, <code>submit_time</code> 交卷时间, <code>score</code> 得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2021-09-01 09:01:01</td><td>2021-09-01 09:41:01</td><td>79</td></tr><tr><td>2</td><td>1002</td><td>9003</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:21:01</td><td>60</td></tr><tr><td>3</td><td>1002</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>70</td></tr><tr><td>4</td><td>1002</td><td>9001</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:40:01</td><td>80</td></tr><tr><td>5</td><td>1002</td><td>9003</td><td>2021-08-01 12:01:01</td><td>2021-08-01 12:21:01</td><td>60</td></tr><tr><td>6</td><td>1002</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>70</td></tr><tr><td>7</td><td>1002</td><td>9001</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:40:01</td><td>85</td></tr><tr><td>8</td><td>1002</td><td>9002</td><td>2021-09-01 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>9</td><td>1003</td><td>9002</td><td>2021-09-07 10:01:01</td><td>2021-09-07 10:31:01</td><td>86</td></tr><tr><td>10</td><td>1003</td><td>9003</td><td>2021-09-08 12:01:01</td><td>2021-09-08 12:11:01</td><td>40</td></tr><tr><td>11</td><td>1003</td><td>9003</td><td>2021-09-01 13:01:01</td><td>2021-09-01 13:41:01</td><td>81</td></tr><tr><td>12</td><td>1003</td><td>9001</td><td>2021-09-01 14:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>13</td><td>1003</td><td>9002</td><td>2021-09-08 15:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>14</td><td>1005</td><td>9001</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>90</td></tr><tr><td>15</td><td>1005</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>88</td></tr><tr><td>16</td><td>1005</td><td>9002</td><td>2021-09-02 12:11:01</td><td>2021-09-02 12:31:01</td><td>89</td></tr></tbody></table><p>统计作答 SQL 类别的试卷得分大于过 80 的人的用户等级分布，按数量降序排序（保证数量都不同）。示例数据结果输出如下：</p><table><thead><tr><th>level</th><th>level_cnt</th></tr></thead><tbody><tr><td>6</td><td>2</td></tr><tr><td>5</td><td>1</td></tr></tbody></table><p>解释：9001 为 SQL 类试卷，作答该试卷大于 80 分的人有 1002、1003、1005 共 3 人，6 级两人，5 级一人。</p><p>**思路：**这题和上一题都是一样的数据，只是查询条件改变了而已，上一题理解了，这题分分钟做出来。</p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> u_info<span class="token punctuation">.</span><span class="token keyword">LEVEL</span> <span class="token keyword">AS</span> <span class="token keyword">LEVEL</span><span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span>u_info<span class="token punctuation">.</span>uid<span class="token punctuation">)</span> <span class="token keyword">AS</span> level_cnt
<span class="token keyword">FROM</span> examination_info e_info
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> exam_record record
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> user_info u_info
<span class="token keyword">WHERE</span> e_info<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> record<span class="token punctuation">.</span>exam_id
  <span class="token operator">AND</span> u_info<span class="token punctuation">.</span>uid <span class="token operator">=</span> record<span class="token punctuation">.</span>uid
  <span class="token operator">AND</span> record<span class="token punctuation">.</span>score <span class="token operator">&gt;</span> <span class="token number">80</span>
  <span class="token operator">AND</span> submit_time <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
  <span class="token operator">AND</span> tag <span class="token operator">=</span> <span class="token string">&#39;SQL&#39;</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token keyword">LEVEL</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> level_cnt <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="合并查询" tabindex="-1"><a class="header-anchor" href="#合并查询" aria-hidden="true">#</a> 合并查询</h2><h3 id="每个题目和每份试卷被作答的人数和次数" tabindex="-1"><a class="header-anchor" href="#每个题目和每份试卷被作答的人数和次数" aria-hidden="true">#</a> 每个题目和每份试卷被作答的人数和次数</h3><p><strong>描述</strong>：</p><p>现有试卷作答记录表 exam_record（uid 用户 ID, exam_id 试卷 ID, start_time 开始作答时间, submit_time 交卷时间, score 得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2021-09-01 09:01:01</td><td>2021-09-01 09:41:01</td><td>81</td></tr><tr><td>2</td><td>1002</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>70</td></tr><tr><td>3</td><td>1002</td><td>9001</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:40:01</td><td>80</td></tr><tr><td>4</td><td>1002</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>70</td></tr><tr><td>5</td><td>1004</td><td>9001</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:40:01</td><td>85</td></tr><tr><td>6</td><td>1002</td><td>9002</td><td>2021-09-01 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr></tbody></table><p>题目练习表 practice_record（uid 用户 ID, question_id 题目 ID, submit_time 提交时间, score 得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>question_id</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>8001</td><td>2021-08-02 11:41:01</td><td>60</td></tr><tr><td>2</td><td>1002</td><td>8001</td><td>2021-09-02 19:30:01</td><td>50</td></tr><tr><td>3</td><td>1002</td><td>8001</td><td>2021-09-02 19:20:01</td><td>70</td></tr><tr><td>4</td><td>1002</td><td>8002</td><td>2021-09-02 19:38:01</td><td>70</td></tr><tr><td>5</td><td>1003</td><td>8001</td><td>2021-08-02 19:38:01</td><td>70</td></tr><tr><td>6</td><td>1003</td><td>8001</td><td>2021-08-02 19:48:01</td><td>90</td></tr><tr><td>7</td><td>1003</td><td>8002</td><td>2021-08-01 19:38:01</td><td>80</td></tr></tbody></table><p>请统计每个题目和每份试卷被作答的人数和次数，分别按照&quot;试卷&quot;和&quot;题目&quot;的 uv &amp; pv 降序显示，示例数据结果输出如下：</p><table><thead><tr><th>tid</th><th>uv</th><th>pv</th></tr></thead><tbody><tr><td>9001</td><td>3</td><td>3</td></tr><tr><td>9002</td><td>1</td><td>3</td></tr><tr><td>8001</td><td>3</td><td>5</td></tr><tr><td>8002</td><td>2</td><td>2</td></tr></tbody></table><p><strong>解释</strong>：“试卷”有 3 人共练习 3 次试卷 9001，1 人作答 3 次 9002；“刷题”有 3 人刷 5 次 8001，有 2 人刷 2 次 8002</p><p><strong>思路</strong>：这题的难点和易错点在于<code>UNOIN</code>和<code>ORDER BY</code> 同时使用的问题</p><p>有以下几种情况：使用<code>union</code>和多个<code>order by</code>不加括号，报错！</p><p><code>order by</code>在<code>union</code>连接的子句中不起作用；</p><p>比如不加括号：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> exam_id <span class="token keyword">AS</span> tid<span class="token punctuation">,</span>
       <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> UID<span class="token punctuation">)</span> <span class="token keyword">AS</span> uv<span class="token punctuation">,</span>
       <span class="token function">COUNT</span><span class="token punctuation">(</span>UID<span class="token punctuation">)</span> <span class="token keyword">AS</span> pv
<span class="token keyword">FROM</span> exam_record
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> exam_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> uv <span class="token keyword">DESC</span><span class="token punctuation">,</span>
         pv <span class="token keyword">DESC</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> question_id <span class="token keyword">AS</span> tid<span class="token punctuation">,</span>
       <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> UID<span class="token punctuation">)</span> <span class="token keyword">AS</span> uv<span class="token punctuation">,</span>
       <span class="token function">COUNT</span><span class="token punctuation">(</span>UID<span class="token punctuation">)</span> <span class="token keyword">AS</span> pv
<span class="token keyword">FROM</span> practice_record
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> question_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> uv <span class="token keyword">DESC</span><span class="token punctuation">,</span>
         pv <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接报语法错误，如果没有括号，只能有一个<code>order by</code></p><p>还有一种<code>order by</code>不起作用的情况，但是能在子句的子句中起作用，这里的解决方案就是在外面再套一层查询。</p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span>
  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> exam_id <span class="token keyword">AS</span> tid<span class="token punctuation">,</span>
          <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> exam_record<span class="token punctuation">.</span>uid<span class="token punctuation">)</span> uv<span class="token punctuation">,</span>
          <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> pv
   <span class="token keyword">FROM</span> exam_record
   <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> exam_id
   <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> uv <span class="token keyword">DESC</span><span class="token punctuation">,</span> pv <span class="token keyword">DESC</span><span class="token punctuation">)</span> t1
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span>
  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> question_id <span class="token keyword">AS</span> tid<span class="token punctuation">,</span>
          <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> practice_record<span class="token punctuation">.</span>uid<span class="token punctuation">)</span> uv<span class="token punctuation">,</span>
          <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> pv
   <span class="token keyword">FROM</span> practice_record
   <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> question_id
   <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> uv <span class="token keyword">DESC</span><span class="token punctuation">,</span> pv <span class="token keyword">DESC</span><span class="token punctuation">)</span> t2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分别满足两个活动的人" tabindex="-1"><a class="header-anchor" href="#分别满足两个活动的人" aria-hidden="true">#</a> 分别满足两个活动的人</h3><p><strong>描述</strong>： 为了促进更多用户在牛客平台学习和刷题进步，我们会经常给一些既活跃又表现不错的用户发放福利。假使以前我们有两拨运营活动，分别给每次试卷得分都能到 85 分的人（activity1）、至少有一次用了一半时间就完成高难度试卷且分数大于 80 的人（activity2）发了福利券。</p><p>现在，需要你一次性将这两个活动满足的人筛选出来，交给运营同学。请写出一个 SQL 实现：输出 2021 年里，所有每次试卷得分都能到 85 分的人以及至少有一次用了一半时间就完成高难度试卷且分数大于 80 的人的 id 和活动号，按用户 ID 排序输出。</p><p>现有试卷信息表 <code>examination_info</code>（<code>exam_id</code> 试卷 ID, <code>tag</code> 试卷类别, <code>difficulty</code> 试卷难度, <code>duration</code> 考试时长, <code>release_time</code> 发布时间）：</p><table><thead><tr><th>id</th><th>exam_id</th><th>tag</th><th>difficulty</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>1</td><td>9001</td><td>SQL</td><td>hard</td><td>60</td><td>2021-09-01 06:00:00</td></tr><tr><td>2</td><td>9002</td><td>C++</td><td>easy</td><td>60</td><td>2021-09-01 06:00:00</td></tr><tr><td>3</td><td>9003</td><td>算法</td><td>medium</td><td>80</td><td>2021-09-01 10:00:00</td></tr></tbody></table><p>试卷作答记录表 <code>exam_record</code>（<code>uid</code> 用户 ID, <code>exam_id</code> 试卷 ID, <code>start_time</code> 开始作答时间, <code>submit_time</code> 交卷时间, <code>score</code> 得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2021-09-01 09:01:01</td><td>2021-09-01 09:31:00</td><td>81</td></tr><tr><td>2</td><td>1002</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>70</td></tr><tr><td>3</td><td>1003</td><td>9001</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:40:01</td><td><strong>86</strong></td></tr><tr><td>4</td><td>1003</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>89</td></tr><tr><td>5</td><td>1004</td><td>9001</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:30:01</td><td>85</td></tr></tbody></table><p>示例数据输出结果：</p><table><thead><tr><th>uid</th><th>activity</th></tr></thead><tbody><tr><td>1001</td><td>activity2</td></tr><tr><td>1003</td><td>activity1</td></tr><tr><td>1004</td><td>activity1</td></tr><tr><td>1004</td><td>activity2</td></tr></tbody></table><p><strong>解释</strong>：用户 1001 最小分数 81 不满足活动 1，但 29 分 59 秒完成了 60 分钟长的试卷得分 81，满足活动 2；1003 最小分数 86 满足活动 1，完成时长都大于试卷时长的一半，不满足活动 2；用户 1004 刚好用了一半时间（30 分钟整）完成了试卷得分 85，满足活动 1 和活动 2。</p><p><strong>思路</strong>： 这一题需要涉及到时间的减法，需要用到 <code>TIMESTAMPDIFF()</code> 函数计算两个时间戳之间的分钟差值。</p><p>下面我们来看一下基本用法</p><p>示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>TIMESTAMPDIFF<span class="token punctuation">(</span><span class="token keyword">MINUTE</span><span class="token punctuation">,</span> start_time<span class="token punctuation">,</span> end_time<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>TIMESTAMPDIFF()</code> 函数的第一个参数是时间单位，这里我们选择 <code>MINUTE</code> 表示返回分钟差值。第二个参数是较早的时间戳，第三个参数是较晚的时间戳。函数会返回它们之间的分钟差值</p><p>了解了这个函数的用法之后，我们再回过头来看<code>activity1</code>的要求，求分数大于 85 即可，那我们还是先把这个写出来，后续思路就会清晰很多</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> UID
<span class="token keyword">FROM</span> exam_record
<span class="token keyword">WHERE</span> score <span class="token operator">&gt;=</span> <span class="token number">85</span>
  <span class="token operator">AND</span> <span class="token keyword">YEAR</span> <span class="token punctuation">(</span>start_time<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&#39;2021&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据条件 2，接着写出<code>在一半时间内完成高难度试卷且分数大于80的人</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> UID
<span class="token keyword">FROM</span> examination_info info
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> exam_record record
<span class="token keyword">WHERE</span> info<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> record<span class="token punctuation">.</span>exam_id
  <span class="token operator">AND</span> <span class="token punctuation">(</span>TIMESTAMPDIFF<span class="token punctuation">(</span><span class="token keyword">MINUTE</span><span class="token punctuation">,</span> start_time<span class="token punctuation">,</span> submit_time<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span>duration <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token operator">AND</span> difficulty <span class="token operator">=</span> <span class="token string">&#39;hard&#39;</span>
  <span class="token operator">AND</span> score <span class="token operator">&gt;=</span> <span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再把两者<code>UNION</code> 起来即可。（这里特别要注意括号问题和<code>order by</code>位置，具体用法在上一篇中已提及）</p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> UID UID<span class="token punctuation">,</span>
                    <span class="token string">&#39;activity1&#39;</span> activity
<span class="token keyword">FROM</span> exam_record
<span class="token keyword">WHERE</span> UID <span class="token operator">not</span> <span class="token operator">in</span>
    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> UID
     <span class="token keyword">FROM</span> exam_record
     <span class="token keyword">WHERE</span> score<span class="token operator">&lt;</span><span class="token number">85</span>
       <span class="token operator">AND</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>submit_time<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2021</span> <span class="token punctuation">)</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> UID UID<span class="token punctuation">,</span>
                    <span class="token string">&#39;activity2&#39;</span> activity
<span class="token keyword">FROM</span> exam_record e_r
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> examination_info e_i <span class="token keyword">ON</span> e_r<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> e_i<span class="token punctuation">.</span>exam_id
<span class="token keyword">WHERE</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>submit_time<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2021</span>
  <span class="token operator">AND</span> difficulty <span class="token operator">=</span> <span class="token string">&#39;hard&#39;</span>
  <span class="token operator">AND</span> TIMESTAMPDIFF<span class="token punctuation">(</span><span class="token keyword">SECOND</span><span class="token punctuation">,</span> start_time<span class="token punctuation">,</span> submit_time<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> duration <span class="token operator">*</span><span class="token number">30</span>
  <span class="token operator">AND</span> score<span class="token operator">&gt;</span><span class="token number">80</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> UID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="连接查询" tabindex="-1"><a class="header-anchor" href="#连接查询" aria-hidden="true">#</a> 连接查询</h2><h3 id="满足条件的用户的试卷完成数和题目练习数-困难" tabindex="-1"><a class="header-anchor" href="#满足条件的用户的试卷完成数和题目练习数-困难" aria-hidden="true">#</a> 满足条件的用户的试卷完成数和题目练习数（困难）</h3><p><strong>描述</strong>：</p><p>现有用户信息表 user_info（uid 用户 ID，nick_name 昵称, achievement 成就值, level 等级, job 职业方向, register_time 注册时间）：</p><table><thead><tr><th>id</th><th>uid</th><th>nick_name</th><th>achievement</th><th>level</th><th>job</th><th>register_time</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>牛客 1 号</td><td>3100</td><td>7</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>2</td><td>1002</td><td>牛客 2 号</td><td>2300</td><td>7</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>3</td><td>1003</td><td>牛客 3 号</td><td>2500</td><td>7</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>4</td><td>1004</td><td>牛客 4 号</td><td>1200</td><td>5</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>5</td><td>1005</td><td>牛客 5 号</td><td>1600</td><td>6</td><td>C++</td><td>2020-01-01 10:00:00</td></tr><tr><td>6</td><td>1006</td><td>牛客 6 号</td><td>2000</td><td>6</td><td>C++</td><td>2020-01-01 10:00:00</td></tr></tbody></table><p>试卷信息表 examination_info（exam_id 试卷 ID, tag 试卷类别, difficulty 试卷难度, duration 考试时长, release_time 发布时间）：</p><table><thead><tr><th>id</th><th>exam_id</th><th>tag</th><th>difficulty</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>1</td><td>9001</td><td>SQL</td><td>hard</td><td>60</td><td>2021-09-01 06:00:00</td></tr><tr><td>2</td><td>9002</td><td>C++</td><td>hard</td><td>60</td><td>2021-09-01 06:00:00</td></tr><tr><td>3</td><td>9003</td><td>算法</td><td>medium</td><td>80</td><td>2021-09-01 10:00:00</td></tr></tbody></table><p>试卷作答记录表 exam_record（uid 用户 ID, exam_id 试卷 ID, start_time 开始作答时间, submit_time 交卷时间, score 得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2021-09-01 09:01:01</td><td>2021-09-01 09:31:00</td><td>81</td></tr><tr><td>2</td><td>1002</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>81</td></tr><tr><td>3</td><td>1003</td><td>9001</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:40:01</td><td>86</td></tr><tr><td>4</td><td>1003</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:51</td><td>89</td></tr><tr><td>5</td><td>1004</td><td>9001</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:30:01</td><td>85</td></tr><tr><td>6</td><td>1005</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:02</td><td>85</td></tr><tr><td>7</td><td>1006</td><td>9003</td><td>2021-09-07 10:01:01</td><td>2021-09-07 10:21:01</td><td>84</td></tr><tr><td>8</td><td>1006</td><td>9001</td><td>2021-09-07 10:01:01</td><td>2021-09-07 10:21:01</td><td>80</td></tr></tbody></table><p>题目练习记录表 practice_record（uid 用户 ID, question_id 题目 ID, submit_time 提交时间, score 得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>question_id</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>8001</td><td>2021-08-02 11:41:01</td><td>60</td></tr><tr><td>2</td><td>1002</td><td>8001</td><td>2021-09-02 19:30:01</td><td>50</td></tr><tr><td>3</td><td>1002</td><td>8001</td><td>2021-09-02 19:20:01</td><td>70</td></tr><tr><td>4</td><td>1002</td><td>8002</td><td>2021-09-02 19:38:01</td><td>70</td></tr><tr><td>5</td><td>1004</td><td>8001</td><td>2021-08-02 19:38:01</td><td>70</td></tr><tr><td>6</td><td>1004</td><td>8002</td><td>2021-08-02 19:48:01</td><td>90</td></tr><tr><td>7</td><td>1001</td><td>8002</td><td>2021-08-02 19:38:01</td><td>70</td></tr><tr><td>8</td><td>1004</td><td>8002</td><td>2021-08-02 19:48:01</td><td>90</td></tr><tr><td>9</td><td>1004</td><td>8002</td><td>2021-08-02 19:58:01</td><td>94</td></tr><tr><td>10</td><td>1004</td><td>8003</td><td>2021-08-02 19:38:01</td><td>70</td></tr><tr><td>11</td><td>1004</td><td>8003</td><td>2021-08-02 19:48:01</td><td>90</td></tr><tr><td>12</td><td>1004</td><td>8003</td><td>2021-08-01 19:38:01</td><td>80</td></tr></tbody></table><p>请你找到高难度 SQL 试卷得分平均值大于 80 并且是 7 级的红名大佬，统计他们的 2021 年试卷总完成次数和题目总练习次数，只保留 2021 年有试卷完成记录的用户。结果按试卷完成数升序，按题目练习数降序。</p><p>示例数据输出如下：</p><table><thead><tr><th>uid</th><th>exam_cnt</th><th>question_cnt</th></tr></thead><tbody><tr><td>1001</td><td>1</td><td>2</td></tr><tr><td>1003</td><td>2</td><td>0</td></tr></tbody></table><p>解释：用户 1001、1003、1004、1006 满足高难度 SQL 试卷得分平均值大于 80，但只有 1001、1003 是 7 级红名大佬；1001 完成了 1 次试卷 1001，练习了 2 次题目；1003 完成了 2 次试卷 9001、9002，未练习题目（因此计数为 0）</p><p><strong>思路：</strong></p><p>先将条件进行初步筛选，比如先查出做过高难度 sql 试卷的用户</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
	record<span class="token punctuation">.</span>uid
<span class="token keyword">FROM</span>
	exam_record record
	<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> examination_info e_info <span class="token keyword">ON</span> record<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> e_info<span class="token punctuation">.</span>exam_id
	<span class="token keyword">JOIN</span> user_info u_info <span class="token keyword">ON</span> record<span class="token punctuation">.</span>uid <span class="token operator">=</span> u_info<span class="token punctuation">.</span>uid
<span class="token keyword">WHERE</span>
	e_info<span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token string">&#39;SQL&#39;</span>
	<span class="token operator">AND</span> e_info<span class="token punctuation">.</span>difficulty <span class="token operator">=</span> <span class="token string">&#39;hard&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后根据题目要求，接着再往里叠条件即可；</p><p>但是这里又要注意：</p><p>第一：不能<code>YEAR(submit_time)= 2021</code>这个条件放到最后，要在<code>ON</code>条件里，因为左连接存在返回左表全部行，右表为 null 的情形，放在 <code>JOIN</code>条件的 <code>ON</code> 子句中的目的是为了确保在连接两个表时，只有满足年份条件的记录会进行连接。这样可以避免其他年份的记录被包含在结果中。即 1001 做过 2021 年的试卷，但没有练习过，如果把条件放到最后，就会排除掉这种情况。</p><p>第二，必须是<code>COUNT(distinct er.exam_id) exam_cnt, COUNT(distinct pr.id) question_cnt，</code>要加 distinct，因为有左连接产生很多重复值。</p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> er<span class="token punctuation">.</span>uid <span class="token keyword">AS</span> UID<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> er<span class="token punctuation">.</span>exam_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> exam_cnt<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> pr<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">AS</span> question_cnt
<span class="token keyword">FROM</span> exam_record er
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> practice_record pr <span class="token keyword">ON</span> er<span class="token punctuation">.</span>uid <span class="token operator">=</span> pr<span class="token punctuation">.</span>uid
<span class="token operator">AND</span> <span class="token keyword">YEAR</span> <span class="token punctuation">(</span>er<span class="token punctuation">.</span>submit_time<span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">2021</span>
<span class="token operator">AND</span> <span class="token keyword">YEAR</span> <span class="token punctuation">(</span>pr<span class="token punctuation">.</span>submit_time<span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">2021</span>
<span class="token keyword">WHERE</span> er<span class="token punctuation">.</span>uid <span class="token operator">IN</span>
    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> er<span class="token punctuation">.</span>uid
     <span class="token keyword">FROM</span> exam_record er
     <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> examination_info ei <span class="token keyword">ON</span> er<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> ei<span class="token punctuation">.</span>exam_id
     <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> user_info ui <span class="token keyword">ON</span> er<span class="token punctuation">.</span>uid <span class="token operator">=</span> ui<span class="token punctuation">.</span>uid
     <span class="token keyword">WHERE</span> tag <span class="token operator">=</span> <span class="token string">&#39;SQL&#39;</span>
       <span class="token operator">AND</span> difficulty <span class="token operator">=</span> <span class="token string">&#39;hard&#39;</span>
       <span class="token operator">AND</span> <span class="token keyword">LEVEL</span> <span class="token operator">=</span> <span class="token number">7</span>
     <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> er<span class="token punctuation">.</span>uid
     <span class="token keyword">HAVING</span> <span class="token function">avg</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">80</span><span class="token punctuation">)</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> er<span class="token punctuation">.</span>uid
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> exam_cnt<span class="token punctuation">,</span>
         question_cnt <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可能细心的小伙伴会发现，为什么明明将条件限制了<code>tag = &#39;SQL&#39; AND difficulty = &#39;hard&#39;</code>，但是用户 1003 仍然能查出两条考试记录，其中一条的考试<code>tag</code>为 <code>C++</code>; 这是由于<code>LEFT JOIN</code>的特性，即使没有与右表匹配的行，左表的所有记录仍然会被保留。</p><h3 id="每个-6-7-级用户活跃情况-困难" tabindex="-1"><a class="header-anchor" href="#每个-6-7-级用户活跃情况-困难" aria-hidden="true">#</a> 每个 6/7 级用户活跃情况（困难）</h3><p><strong>描述</strong>：</p><p>现有用户信息表 <code>user_info</code>（<code>uid</code> 用户 ID，<code>nick_name</code> 昵称, <code>achievement</code> 成就值, <code>level</code> 等级, <code>job</code> 职业方向, <code>register_time</code> 注册时间）：</p><table><thead><tr><th>id</th><th>uid</th><th>nick_name</th><th>achievement</th><th>level</th><th>job</th><th>register_time</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>牛客 1 号</td><td>3100</td><td>7</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>2</td><td>1002</td><td>牛客 2 号</td><td>2300</td><td>7</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>3</td><td>1003</td><td>牛客 3 号</td><td>2500</td><td>7</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>4</td><td>1004</td><td>牛客 4 号</td><td>1200</td><td>5</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>5</td><td>1005</td><td>牛客 5 号</td><td>1600</td><td>6</td><td>C++</td><td>2020-01-01 10:00:00</td></tr><tr><td>6</td><td>1006</td><td>牛客 6 号</td><td>2600</td><td>7</td><td>C++</td><td>2020-01-01 10:00:00</td></tr></tbody></table><p>试卷信息表 <code>examination_info</code>（<code>exam_id</code> 试卷 ID, <code>tag</code> 试卷类别, <code>difficulty</code> 试卷难度, <code>duration</code> 考试时长, <code>release_time</code> 发布时间）：</p><table><thead><tr><th>id</th><th>exam_id</th><th>tag</th><th>difficulty</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>1</td><td>9001</td><td>SQL</td><td>hard</td><td>60</td><td>2021-09-01 06:00:00</td></tr><tr><td>2</td><td>9002</td><td>C++</td><td>easy</td><td>60</td><td>2021-09-01 06:00:00</td></tr><tr><td>3</td><td>9003</td><td>算法</td><td>medium</td><td>80</td><td>2021-09-01 10:00:00</td></tr></tbody></table><p>试卷作答记录表 <code>exam_record</code>（<code>uid</code> 用户 ID, <code>exam_id</code> 试卷 ID, <code>start_time</code> 开始作答时间, <code>submit_time</code> 交卷时间, <code>score</code> 得分）：</p><table><thead><tr><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1001</td><td>9001</td><td>2021-09-01 09:01:01</td><td>2021-09-01 09:31:00</td><td>78</td></tr><tr><td>1001</td><td>9001</td><td>2021-09-01 09:01:01</td><td>2021-09-01 09:31:00</td><td>81</td></tr><tr><td>1005</td><td>9001</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:30:01</td><td>85</td></tr><tr><td>1005</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:02</td><td>85</td></tr><tr><td>1006</td><td>9003</td><td>2021-09-07 10:01:01</td><td>2021-09-07 10:21:59</td><td>84</td></tr><tr><td>1006</td><td>9001</td><td>2021-09-07 10:01:01</td><td>2021-09-07 10:21:01</td><td>81</td></tr><tr><td>1002</td><td>9001</td><td>2020-09-01 13:01:01</td><td>2020-09-01 13:41:01</td><td>81</td></tr><tr><td>1005</td><td>9001</td><td>2021-09-01 14:01:01</td><td>(NULL)</td><td>(NULL)</td></tr></tbody></table><p>题目练习记录表 <code>practice_record</code>（<code>uid</code> 用户 ID, <code>question_id</code> 题目 ID, <code>submit_time</code> 提交时间, <code>score</code> 得分）：</p><table><thead><tr><th>uid</th><th>question_id</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1001</td><td>8001</td><td>2021-08-02 11:41:01</td><td>60</td></tr><tr><td>1004</td><td>8001</td><td>2021-08-02 19:38:01</td><td>70</td></tr><tr><td>1004</td><td>8002</td><td>2021-08-02 19:48:01</td><td>90</td></tr><tr><td>1001</td><td>8002</td><td>2021-08-02 19:38:01</td><td>70</td></tr><tr><td>1004</td><td>8002</td><td>2021-08-02 19:48:01</td><td>90</td></tr><tr><td>1006</td><td>8002</td><td>2021-08-04 19:58:01</td><td>94</td></tr><tr><td>1006</td><td>8003</td><td>2021-08-03 19:38:01</td><td>70</td></tr><tr><td>1006</td><td>8003</td><td>2021-08-02 19:48:01</td><td>90</td></tr><tr><td>1006</td><td>8003</td><td>2020-08-01 19:38:01</td><td>80</td></tr></tbody></table><p>请统计每个 6/7 级用户总活跃月份数、2021 年活跃天数、2021 年试卷作答活跃天数、2021 年答题活跃天数，按照总活跃月份数、2021 年活跃天数降序排序。由示例数据结果输出如下：</p><table><thead><tr><th>uid</th><th>act_month_total</th><th>act_days_2021</th><th>act_days_2021_exam</th></tr></thead><tbody><tr><td>1006</td><td>3</td><td>4</td><td>1</td></tr><tr><td>1001</td><td>2</td><td>2</td><td>1</td></tr><tr><td>1005</td><td>1</td><td>1</td><td>1</td></tr><tr><td>1002</td><td>1</td><td>0</td><td>0</td></tr><tr><td>1003</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><p><strong>解释</strong>：6/7 级用户共有 5 个，其中 1006 在 202109、202108、202008 共 3 个月活跃过，2021 年活跃的日期有 20210907、20210804、20210803、20210802 共 4 天，2021 年在试卷作答区 20210907 活跃 1 天，在题目练习区活跃了 3 天。</p><p><strong>思路：</strong></p><p>这题的关键在于<code>CASE WHEN THEN</code>的使用，不然要写很多的<code>left join</code> 因为会产生很多的结果集。</p><p><code>CASE WHEN THEN</code>语句是一种条件表达式，用于在 SQL 中根据条件执行不同的操作或返回不同的结果。</p><p>语法结构如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CASE</span>
    <span class="token keyword">WHEN</span> condition1 <span class="token keyword">THEN</span> result1
    <span class="token keyword">WHEN</span> condition2 <span class="token keyword">THEN</span> result2
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">ELSE</span> result
<span class="token keyword">END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个结构中，可以根据需要添加多个<code>WHEN</code>子句，每个<code>WHEN</code>子句后面跟着一个条件（condition）和一个结果（result）。条件可以是任何逻辑表达式，如果满足条件，将返回对应的结果。</p><p>最后的<code>ELSE</code>子句是可选的，用于指定当所有前面的条件都不满足时的默认返回结果。如果没有提供<code>ELSE</code>子句，则默认返回<code>NULL</code>。</p><p>例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> score<span class="token punctuation">,</span>
    <span class="token keyword">CASE</span>
        <span class="token keyword">WHEN</span> score <span class="token operator">&gt;=</span> <span class="token number">90</span> <span class="token keyword">THEN</span> <span class="token string">&#39;优秀&#39;</span>
        <span class="token keyword">WHEN</span> score <span class="token operator">&gt;=</span> <span class="token number">80</span> <span class="token keyword">THEN</span> <span class="token string">&#39;良好&#39;</span>
        <span class="token keyword">WHEN</span> score <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token keyword">THEN</span> <span class="token string">&#39;及格&#39;</span>
        <span class="token keyword">ELSE</span> <span class="token string">&#39;不及格&#39;</span>
    <span class="token keyword">END</span> <span class="token keyword">AS</span> grade
<span class="token keyword">FROM</span> student_scores<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述示例中，根据学生成绩（score）的不同范围，使用 CASE WHEN THEN 语句返回相应的等级（grade）。如果成绩大于等于 90，则返回&quot;优秀&quot;；如果成绩大于等于 80，则返回&quot;良好&quot;；如果成绩大于等于 60，则返回&quot;及格&quot;；否则返回&quot;不及格&quot;。</p><p>那了解到了上述的用法之后，回过头看看该题，要求列出不同的活跃天数。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> act_month<span class="token punctuation">)</span> <span class="token keyword">as</span> act_month_total<span class="token punctuation">,</span>
<span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token keyword">year</span><span class="token punctuation">(</span>act_time<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">&#39;2021&#39;</span><span class="token keyword">then</span> act_day <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> act_days_2021<span class="token punctuation">,</span>
<span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token keyword">year</span><span class="token punctuation">(</span>act_time<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">&#39;2021&#39;</span> <span class="token operator">and</span> tag<span class="token operator">=</span><span class="token string">&#39;exam&#39;</span> <span class="token keyword">then</span> act_day <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> act_days_2021_exam<span class="token punctuation">,</span>
<span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token keyword">year</span><span class="token punctuation">(</span>act_time<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">&#39;2021&#39;</span> <span class="token operator">and</span> tag<span class="token operator">=</span><span class="token string">&#39;question&#39;</span><span class="token keyword">then</span> act_day <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> act_days_2021_question
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 tag 是先给标记，方便对查询进行区分，将考试和答题分开。</p><p>找出试卷作答区的用户</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
		uid<span class="token punctuation">,</span>
		exam_id <span class="token keyword">AS</span> ans_id<span class="token punctuation">,</span>
		start_time <span class="token keyword">AS</span> act_time<span class="token punctuation">,</span>
		date_format<span class="token punctuation">(</span> start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m&#39;</span> <span class="token punctuation">)</span> <span class="token keyword">AS</span> act_month<span class="token punctuation">,</span>
		date_format<span class="token punctuation">(</span> start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m%d&#39;</span> <span class="token punctuation">)</span> <span class="token keyword">AS</span> act_day<span class="token punctuation">,</span>
		<span class="token string">&#39;exam&#39;</span> <span class="token keyword">AS</span> tag
	<span class="token keyword">FROM</span>
		exam_record
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>紧接着就是答题作答区的用户</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
		uid<span class="token punctuation">,</span>
		question_id <span class="token keyword">AS</span> ans_id<span class="token punctuation">,</span>
		submit_time <span class="token keyword">AS</span> act_time<span class="token punctuation">,</span>
		date_format<span class="token punctuation">(</span> submit_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m&#39;</span> <span class="token punctuation">)</span> <span class="token keyword">AS</span> act_month<span class="token punctuation">,</span>
		date_format<span class="token punctuation">(</span> submit_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m%d&#39;</span> <span class="token punctuation">)</span> <span class="token keyword">AS</span> act_day<span class="token punctuation">,</span>
		<span class="token string">&#39;question&#39;</span> <span class="token keyword">AS</span> tag
	<span class="token keyword">FROM</span>
		practice_record
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后将两个结果进行<code>UNION</code> 最后别忘了将结果进行排序 （这题有点类似于分治法的思想）</p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> user_info<span class="token punctuation">.</span>uid<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> act_month<span class="token punctuation">)</span> <span class="token keyword">AS</span> act_month_total<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> <span class="token keyword">CASE</span>
                          <span class="token keyword">WHEN</span> <span class="token keyword">YEAR</span> <span class="token punctuation">(</span>act_time<span class="token punctuation">)</span><span class="token operator">=</span> <span class="token string">&#39;2021&#39;</span> <span class="token keyword">THEN</span> act_day
                      <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> act_days_2021<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> <span class="token keyword">CASE</span>
                          <span class="token keyword">WHEN</span> <span class="token keyword">YEAR</span> <span class="token punctuation">(</span>act_time<span class="token punctuation">)</span><span class="token operator">=</span> <span class="token string">&#39;2021&#39;</span>
                               <span class="token operator">AND</span> tag <span class="token operator">=</span> <span class="token string">&#39;exam&#39;</span> <span class="token keyword">THEN</span> act_day
                      <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> act_days_2021_exam<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> <span class="token keyword">CASE</span>
                          <span class="token keyword">WHEN</span> <span class="token keyword">YEAR</span> <span class="token punctuation">(</span>act_time<span class="token punctuation">)</span><span class="token operator">=</span> <span class="token string">&#39;2021&#39;</span>
                               <span class="token operator">AND</span> tag <span class="token operator">=</span> <span class="token string">&#39;question&#39;</span> <span class="token keyword">THEN</span> act_day
                      <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> act_days_2021_question
<span class="token keyword">FROM</span>
  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> UID<span class="token punctuation">,</span>
          exam_id <span class="token keyword">AS</span> ans_id<span class="token punctuation">,</span>
          start_time <span class="token keyword">AS</span> act_time<span class="token punctuation">,</span>
          date_format<span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> act_month<span class="token punctuation">,</span>
          date_format<span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m%d&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> act_day<span class="token punctuation">,</span>
          <span class="token string">&#39;exam&#39;</span> <span class="token keyword">AS</span> tag
   <span class="token keyword">FROM</span> exam_record
   <span class="token keyword">UNION</span> <span class="token keyword">ALL</span> <span class="token keyword">SELECT</span> UID<span class="token punctuation">,</span>
                    question_id <span class="token keyword">AS</span> ans_id<span class="token punctuation">,</span>
                    submit_time <span class="token keyword">AS</span> act_time<span class="token punctuation">,</span>
                    date_format<span class="token punctuation">(</span>submit_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> act_month<span class="token punctuation">,</span>
                    date_format<span class="token punctuation">(</span>submit_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m%d&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> act_day<span class="token punctuation">,</span>
                    <span class="token string">&#39;question&#39;</span> <span class="token keyword">AS</span> tag
   <span class="token keyword">FROM</span> practice_record<span class="token punctuation">)</span> total
<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> user_info <span class="token keyword">ON</span> total<span class="token punctuation">.</span>uid <span class="token operator">=</span> user_info<span class="token punctuation">.</span>uid
<span class="token keyword">WHERE</span> user_info<span class="token punctuation">.</span><span class="token keyword">LEVEL</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>
                          <span class="token number">7</span><span class="token punctuation">)</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> user_info<span class="token punctuation">.</span>uid
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> act_month_total <span class="token keyword">DESC</span><span class="token punctuation">,</span>
         act_days_2021 <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,294);function u(k,m){const s=d("ExternalLinkIcon");return e(),o("div",null,[t("blockquote",null,[t("p",null,[n("题目来源于："),t("a",r,[n("牛客题霸 - SQL 进阶挑战"),p(s)])])]),l])}const h=a(i,[["render",u],["__file","sql-questions-03.html.vue"]]);export{h as default};
