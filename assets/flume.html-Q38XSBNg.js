import{_ as l,c as n,a,o as t}from"./app-BggTsAex.js";const i="/assets/img_145-BU64DR9Q.png",s="/assets/img_146-jKprCP0i.png",o="/assets/img_147-C-TWOYnd.png",r="/assets/img_148-ChXfFFP5.png",c="/assets/img_149-C43c2lvZ.png",m="/assets/img_150-DpgwBqXM.png",u="/assets/img_151-B92TJkwd.png",p={};function h(g,e){return t(),n("div",null,e[0]||(e[0]=[a('<h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h3><ol><li>Flume最早是Cloudera提供的日志收集系统，后贡献给Apache</li><li>Flume是一个高可用的，高可靠的 、健壮性，分布式的海量日志采集、聚合和传输的系统</li><li>Flume支持在日志系统中定制各类数据发送方，用于收集数据(source)</li><li>Flume提供对数据进行简单处理，并写到各种数据接受方(可定制)的能力(sink)。</li></ol><h3 id="版本" tabindex="-1"><a class="header-anchor" href="#版本"><span>版本</span></a></h3><ol start="5"><li>Flume0.9X：又称Flume-og，老版本的flume，需要引入zookeeper集群管理，性能也较低（单线程工作）</li><li>Flume1.X：又称Flume-ng。新版本需要引入zookeeper，和flume-og不兼容</li></ol><h3 id="flume的特性" tabindex="-1"><a class="header-anchor" href="#flume的特性"><span>Flume的特性</span></a></h3><ol start="7"><li>可靠性：事务型的数据传递，保证数据的可靠性。一个日志交给flume来处理，不会出现此日志丢失或未被处理的情况</li><li>可恢复性：通道可以以内存或文件的方式实现，内存更快，但不可恢复。文件较慢但提供了可恢复性</li></ol><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h3><h4 id="一、flume总体架构图" tabindex="-1"><a class="header-anchor" href="#一、flume总体架构图"><span>一、Flume总体架构图</span></a></h4><figure><img src="'+i+'" alt="img_145.png" tabindex="0" loading="lazy"><figcaption>img_145.png</figcaption></figure><h4 id="二、event-事件" tabindex="-1"><a class="header-anchor" href="#二、event-事件"><span>二、event 事件</span></a></h4><ol><li>event的相关概念：Flume的核心是把数据从数据源(source)收集过来，在将收集到的数据送到指定的目的地(sink)。为了保证输送的过程一定成功，在送到目的地(sink)之前，会先缓存数据(channel),待数据真正到达目的地(sink)后，flume在删除自己缓存的数据</li><li>在整个数据的传输的过程中，流动的是event，即事务保证是在event级别进行的。event将传输的数据进行封装，是flume传输数据的基本单位，如果是文本文件，通常是一行记录，event也是事务的基本单位。event从source，流向channel，再到sink，本身为一个字节数组，并可携带headers(头信息)信息。event代表着一个数据的最小完整单元，从外部数据源来，向外部的目的地去。简而言之，在Flume中，每一条日志就会封装成一个event对象</li><li>一个完整的event包括：event headers、event body、event信息(即文本文件中的单行记录)，如下所以：<br><img src="'+s+'" alt="img_146.png" loading="lazy"></li></ol><p>其中event信息就是flume收集到的日记记录</p><h4 id="三、flume的运行机制" tabindex="-1"><a class="header-anchor" href="#三、flume的运行机制"><span>三、Flume的运行机制</span></a></h4><ol start="4"><li>flume运行的核心就是agent，agent本身是一个Java进程</li><li>agent里面包含3个核心的组件：source—&gt;channel—&gt;sink，类似生产者、仓库、消费者的架构</li><li>source：source组件是专门用来收集数据的，可以处理各种类型、各种格式的日志数据，包括avro、thrift、exec、jms、spooling directory、netcat、sequence generator、syslog、http、legacy、自定义等</li><li>channel：source组件把数据收集来以后，临时存放在channel中，即channel组件在agent中是专门用来存放临时数据的——对采集到的数据进行简单的缓存，可以存放在memory、jdbc、file等等</li><li>sink：sink组件是用于把数据发送到目的地的组件，目的地包括hdfs、logger、avro、thrift、ipc、file、null、hbase、solr、自定义。</li><li>一个完整的工作流程：source不断的接收数据，将数据封装成一个一个的event，然后将event发送给channel，chanel作为一个缓冲区会临时存放这些event数据，随后sink会将channel中的event数据发送到指定的地方—-例如HDFS等</li><li>注：只有在sink将channel中的数据成功发送出去之后，channel才会将临时event数据进行删除，这种机制保证了数据传输的可靠性与安全性。</li></ol><h4 id="四、flume的复杂流动" tabindex="-1"><a class="header-anchor" href="#四、flume的复杂流动"><span>四、Flume的复杂流动</span></a></h4><ul><li><p>多个agent的数据流（多级流动）<br><img src="'+o+'" alt="img_147.png" loading="lazy"></p></li><li><p>数据流合并（扇入流）<br> 在做日志收集的时候一个常见的场景就是，大量的生产日志的客户端发送数据到少量的附属于存储子系统的消费者agent。例如，从数百个web服务器中收集日志，它们发送数据到十几个负责将数据写入HDFS集群的agent<br><img src="'+r+'" alt="img_148.png" loading="lazy"></p><p>这个可在Flume中可以实现，需要配置大量第一层的agent，每一个agent都有一个avro sink，让它们都指向同一个agent的avro source（强调一下，在这样一个场景下你也可以使用thrift source/sink/client）。在第二层agent上的source将收到的event合并到一个channel中，event被一个sink消费到它的最终的目的地</p></li><li><p>数据流复用（扇出流）<br> Flume支持多路输出event流到一个或多个目的地。这是靠定义一个多路数据流实现的，它可以实现复制和选择性路由一个event到一个或者多个channel<br><img src="'+c+'" alt="img_149.png" loading="lazy"></p><p>上面的例子展示了agent foo中source扇出数据流到三个不同的channel，这个扇出可以是复制或者多路输出。在复制数据流的情况下，每一个event被发送所有的三个channel；在多路输出的情况下，一个event被发送到一部分可用的channel中，它们是根据event的属性和预先配置的值选择channel的。 这些映射关系应该被填写在agent的配置文件中</p></li></ul><h2 id="事务机制" tabindex="-1"><a class="header-anchor" href="#事务机制"><span>事务机制</span></a></h2><h3 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述"><span>一、概述</span></a></h3><ol><li>Flume的事务机制与可靠性保证的实现，最核心的组件是Channel（通道）。如果没有Channel组件，而紧靠Source与Sink组件是无从谈起的</li><li>文件通道指的是将事件存储到代理（Agent）本地文件系统中的通道。虽然要比内存通道慢一些，不过它却提供了持久化的存储路径，可以应对大多数情况，它应该用在数据流中不允许出现缺口的场合</li><li>File channel虽然提供了持久化，但是其性能较差，吞吐量会受到一定的限制。相反，memory channel则牺牲可靠性换取吞吐量。当然，如果机器断电重启，则无法恢复。在实际应用中，大多数企业都是选择内存通道，因为在通过flume收集海量数据场景下，使用FileChannel所带来的性能下降是很大的甚至是无法忍受的</li></ol><h3 id="二、put事务流程" tabindex="-1"><a class="header-anchor" href="#二、put事务流程"><span>二、put事务流程</span></a></h3><figure><img src="'+m+'" alt="img_150.png" tabindex="0" loading="lazy"><figcaption>img_150.png</figcaption></figure><ol start="4"><li>doPut:将批数据先写入临时缓冲区putList（Linkedblockingdequeue)</li><li>doCommit:检查channel内存队列是否足够合并。</li><li>doRollback:channel内存队列空间不足，回滚，等待内存通道的容量满足合并</li><li>putList就是一个临时的缓冲区，数据会先put到putList，最后由commit方法会检查channel是否有足够的缓冲区，有则合并到channel的队列</li></ol><h3 id="三、take事务" tabindex="-1"><a class="header-anchor" href="#三、take事务"><span>三、Take事务</span></a></h3><figure><img src="'+u+'" alt="img_151.png" tabindex="0" loading="lazy"><figcaption>img_151.png</figcaption></figure><ol start="8"><li>doTake:先将数据取到临时缓冲区takeList(linkedBlockingDequeue)</li><li>将数据发送到下一个节点</li><li>doCommit:如果数据全部发送成功，则清除临时缓冲区takeList</li><li>doRollback:数据发送过程中如果出现异常，rollback将临时缓冲区takeList中的数据归还给channel内存队列</li></ol>',25)]))}const f=l(p,[["render",h],["__file","flume.html.vue"]]),k=JSON.parse('{"path":"/assembly/flume.html","title":"组件Flume","lang":"zh-CN","frontmatter":{"title":"组件Flume","icon":"laptop-code","category":["设计组件"],"tag":["组件"],"description":"概述 Flume最早是Cloudera提供的日志收集系统，后贡献给Apache Flume是一个高可用的，高可靠的 、健壮性，分布式的海量日志采集、聚合和传输的系统 Flume支持在日志系统中定制各类数据发送方，用于收集数据(source) Flume提供对数据进行简单处理，并写到各种数据接受方(可定制)的能力(sink)。 版本 Flume0.9X：...","head":[["meta",{"property":"og:url","content":"https://ujava.cn/assembly/flume.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"组件Flume"}],["meta",{"property":"og:description","content":"概述 Flume最早是Cloudera提供的日志收集系统，后贡献给Apache Flume是一个高可用的，高可靠的 、健壮性，分布式的海量日志采集、聚合和传输的系统 Flume支持在日志系统中定制各类数据发送方，用于收集数据(source) Flume提供对数据进行简单处理，并写到各种数据接受方(可定制)的能力(sink)。 版本 Flume0.9X：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-29T14:26:33.000Z"}],["meta",{"property":"article:tag","content":"组件"}],["meta",{"property":"article:modified_time","content":"2024-09-29T14:26:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组件Flume\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-29T14:26:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":3,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":3,"title":"版本","slug":"版本","link":"#版本","children":[]},{"level":3,"title":"Flume的特性","slug":"flume的特性","link":"#flume的特性","children":[]},{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"事务机制","slug":"事务机制","link":"#事务机制","children":[{"level":3,"title":"一、概述","slug":"一、概述","link":"#一、概述","children":[]},{"level":3,"title":"二、put事务流程","slug":"二、put事务流程","link":"#二、put事务流程","children":[]},{"level":3,"title":"三、Take事务","slug":"三、take事务","link":"#三、take事务","children":[]}]}],"git":{"createdTime":1713232406000,"updatedTime":1727619993000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":2}]},"readingTime":{"minutes":5.95,"words":1784},"filePathRelative":"assembly/flume.md","localizedDate":"2024年4月16日","excerpt":"<h3>概述</h3>\\n<ol>\\n<li>Flume最早是Cloudera提供的日志收集系统，后贡献给Apache</li>\\n<li>Flume是一个高可用的，高可靠的 、健壮性，分布式的海量日志采集、聚合和传输的系统</li>\\n<li>Flume支持在日志系统中定制各类数据发送方，用于收集数据(source)</li>\\n<li>Flume提供对数据进行简单处理，并写到各种数据接受方(可定制)的能力(sink)。</li>\\n</ol>\\n<h3>版本</h3>\\n<ol start=\\"5\\">\\n<li>Flume0.9X：又称Flume-og，老版本的flume，需要引入zookeeper集群管理，性能也较低（单线程工作）</li>\\n<li>Flume1.X：又称Flume-ng。新版本需要引入zookeeper，和flume-og不兼容</li>\\n</ol>","autoDesc":true}');export{f as comp,k as data};
