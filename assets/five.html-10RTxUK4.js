const e=JSON.parse('{"key":"v-15c2f60a","path":"/principle/five.html","title":"设计原理:从指令到软件","lang":"zh-CN","frontmatter":{"title":"设计原理:从指令到软件","icon":"laptop-code","category":["设计原理"],"description":"简介 软件的构造，本质上就是组件与组合。组件是实现了特定功能的逻辑单元（程序），组合则是将“小组件集成为大组件，将大组件集成为整个应用系统”的联结方式。只要学过编程语言的人，大抵是会构造或大或小的组件的，那么组合结构就决定了程序是如何构成或优雅或拙劣的软件的。本文想探讨下软件是如何组合起来的。 路线图 img_6.png 基本构造元素 指令 计算机的使命是计算和处理数据，而处理数据的最小单位就是指令。指令完成不可细分的原子的计算功能。也可以说，指令就是用于构造软件的原子组件。","head":[["meta",{"property":"og:url","content":"https://ujava.cn/principle/five.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"设计原理:从指令到软件"}],["meta",{"property":"og:description","content":"简介 软件的构造，本质上就是组件与组合。组件是实现了特定功能的逻辑单元（程序），组合则是将“小组件集成为大组件，将大组件集成为整个应用系统”的联结方式。只要学过编程语言的人，大抵是会构造或大或小的组件的，那么组合结构就决定了程序是如何构成或优雅或拙劣的软件的。本文想探讨下软件是如何组合起来的。 路线图 img_6.png 基本构造元素 指令 计算机的使命是计算和处理数据，而处理数据的最小单位就是指令。指令完成不可细分的原子的计算功能。也可以说，指令就是用于构造软件的原子组件。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-01T03:13:51.000Z"}],["meta",{"property":"article:author","content":"ujava"}],["meta",{"property":"article:modified_time","content":"2024-03-01T03:13:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计原理:从指令到软件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-01T03:13:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ujava\\",\\"url\\":\\"https://ujava.cn\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"路线图","slug":"路线图","link":"#路线图","children":[]},{"level":2,"title":"基本构造元素","slug":"基本构造元素","link":"#基本构造元素","children":[]},{"level":2,"title":"组合","slug":"组合","link":"#组合","children":[]},{"level":2,"title":"面向对象","slug":"面向对象","link":"#面向对象","children":[]},{"level":2,"title":"并发","slug":"并发","link":"#并发","children":[]},{"level":2,"title":"通信","slug":"通信","link":"#通信","children":[]},{"level":2,"title":"组合过程","slug":"组合过程","link":"#组合过程","children":[]},{"level":2,"title":"算法是核心","slug":"算法是核心","link":"#算法是核心","children":[]}],"git":{"createdTime":1698915086000,"updatedTime":1709262831000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":2}]},"readingTime":{"minutes":13.85,"words":4155},"filePathRelative":"principle/five.md","localizedDate":"2023年11月2日","excerpt":"<h2> 简介</h2>\\n<p>软件的构造，本质上就是组件与组合。组件是实现了特定功能的逻辑单元（程序），组合则是将“小组件集成为大组件，将大组件集成为整个应用系统”的联结方式。只要学过编程语言的人，大抵是会构造或大或小的组件的，那么组合结构就决定了程序是如何构成或优雅或拙劣的软件的。本文想探讨下软件是如何组合起来的。</p>\\n<h2> 路线图</h2>\\n<figure><figcaption>img_6.png</figcaption></figure>\\n<h2> 基本构造元素</h2>\\n<h4> 指令</h4>\\n<p>计算机的使命是计算和处理数据，而处理数据的最小单位就是指令。指令完成不可细分的原子的计算功能。也可以说，指令就是用于构造软件的原子组件。</p>","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}');export{e as data};
