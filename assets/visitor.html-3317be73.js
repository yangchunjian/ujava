import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as t,e as l}from"./app-33618723.js";const a={},o=l('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>Java访问者模式是一种行为型设计模式，它允许你在不修改对象结构的前提下定义新的操作。访问者模式将对象结构和操作分离开来，使得操作可以独立地应用于对象结构中的元素。在访问者模式中，有两个主要角色：访问者和元素。访问者定义了对元素进行操作的方法，而元素则提供了接受访问者的方法。</p><p>访问者模式适用于以下场景：</p><ul><li>对象结构比较稳定，但经常需要在此对象结构上定义新的操作。</li><li>需要对一个对象结构中的对象进行很多不同的且不相关的操作，而不希望这些操作“污染”这些对象的类。</li><li>对象结构中对象的类很少改变，但经常需要在这些对象上定义新的操作。</li><li>需要在运行时根据对象的类型执行不同的操作。</li><li>需要对对象结构中的所有对象进行某种类型的处理，但是对象所采取的处理方式根据对象类型不同而异。</li><li>常见的使用访问者模式的场景包括：编译器的语法分析、XML文档解析、静态分析器、模型验证器、模型转换器等。</li></ul>',4),r=[o];function c(s,n){return e(),t("div",null,r)}const h=i(a,[["render",c],["__file","visitor.html.vue"]]);export{h as default};
