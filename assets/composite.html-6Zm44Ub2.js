import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c as t,e as i}from"./app-7R9YjZx9.js";const c={},l=i('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><strong>介绍</strong>：组合模式是一种结构型设计模式，它允许你将对象组合成<code>树形结构以表示“部分-整体”的层次结构</code>。这种模式使得客户端可以统一对待单个对象和对象组合。组合模式所应用的就是树形结构以表达“部分/整体”的层次结构。主要是用来处理树形结构数据，<code>与其说是一种设计模式，倒不如说是对业务场景的一种数据结构和算法的抽象</code>。在组合模式中，有两种基本类型的对象：叶节点和组合节点。叶节点表示树形结构中的单个对象，而组合节点则表示树形结构中的对象组合。组合节点可以包含其他组合节点和/或叶节点，形成一个递归的树形结构。</p><p><strong>场景</strong>：</p><ul><li>1.适用于处理树形结构</li><li>2.忽略差异 : 希望客户端<code>可以忽略 组合对象 与 单个对象 的差异</code></li></ul><p><code>SpringMVC框架中，Security Oauth2框架中</code></p><p><strong>优点</strong>：</p><ul><li>1.定义层次 : 清楚地 定义 分层次 的 复杂对象 , 表示 对象 的 全部 或 部分 层次</li><li>2.忽略层次 : 让 客户端 忽略 层次之间的差异 , 方便对 整个层次结构 进行控制</li><li>3.简化客户端代码</li><li>4.符合开闭原则</li></ul><p><strong>不足</strong>：</p><ul><li>1.限制类型复杂 : <code>限制类型时 , 比较复杂</code></li><li>2.使设计变得更加抽象</li></ul>',9),r=[l];function s(n,d){return o(),t("div",null,r)}const _=e(c,[["render",s],["__file","composite.html.vue"]]);export{_ as default};
