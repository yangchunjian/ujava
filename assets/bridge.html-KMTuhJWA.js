import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c as t,e as r}from"./app-Y2Q4D6Ih.js";const i={},l=r('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><strong>介绍</strong>：桥接模式是一种将<strong>抽象化和实现化解耦</strong>的设计模式。它使用了封装、聚合以及继承等基本技术，将两个独立变化的维度通过抽象化的方式进行桥接，从而降低了它们之间的耦合度，使得系统更加灵活。将抽象部分与它的实现部分分离，使它们都可以独立地变化。<code>是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度</code>。</p><p><strong>场景</strong>：</p><ul><li>1.抽象和具体实现之间 , 需要增加更多灵活性的情况。</li><li>2.不希望使用继承 , 或 因多层继承导致系统类的个数增加。</li><li>3.一个类存在 2 个或更多的 独立变化维度 , 并且这些维度都需要独立扩展。<code>源码中JDBC 规范和不同数据库厂商驱动都用的桥接模式</code></li></ul><p><strong>优点</strong>：</p><ul><li>1.抽象与实现分离，扩展能力强</li><li>2.符合开闭原则</li><li>3.符合合成复用原则</li><li>4.实现细节透明化</li></ul><p><strong>不足</strong>：由于聚合关系建立在抽象层，要求开发者针对抽象化进行设计与编程，能正确地识别出系统中两个独立变化的维度，这<code>增加了系统的理解与设计难度</code></p>',7),n=[l];function s(c,d){return o(),t("div",null,n)}const p=e(i,[["render",s],["__file","bridge.html.vue"]]);export{p as default};
