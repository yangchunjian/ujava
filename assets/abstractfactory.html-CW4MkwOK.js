const t=JSON.parse('{"key":"v-559f7b68","path":"/design/create/abstractfactory.html","title":"抽象工厂模式","lang":"zh-CN","frontmatter":{"title":"抽象工厂模式","icon":"laptop-code","category":["设计模式"],"tag":["设计模式"],"description":"概述 介绍： 通过定义一个创建对象的接口来创建对象，但将具体实现的决定留给子类来决定。在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。 场景： 1.客户端（应用层）不依赖与产品类示例如何被创建、实现等细节 2.强调一系列相关的产品对象（数据同一产品族）一起使用创建对象需要大量的重复代码 3.提供一个产品类的库，所有的产品以同样的接口出现，使得客户端不依赖于具体实现","head":[["meta",{"property":"og:url","content":"https://ujava.cn/design/create/abstractfactory.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"抽象工厂模式"}],["meta",{"property":"og:description","content":"概述 介绍： 通过定义一个创建对象的接口来创建对象，但将具体实现的决定留给子类来决定。在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。 场景： 1.客户端（应用层）不依赖与产品类示例如何被创建、实现等细节 2.强调一系列相关的产品对象（数据同一产品族）一起使用创建对象需要大量的重复代码 3.提供一个产品类的库，所有的产品以同样的接口出现，使得客户端不依赖于具体实现"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-25T09:52:59.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:modified_time","content":"2024-04-25T09:52:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"抽象工厂模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-25T09:52:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"具体示例","slug":"具体示例","link":"#具体示例","children":[]}],"git":{"createdTime":1696751184000,"updatedTime":1714038779000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":5}]},"readingTime":{"minutes":2.17,"words":650},"filePathRelative":"design/create/abstractfactory.md","localizedDate":"2023年10月8日","excerpt":"<h2> 概述</h2>\\n<p><strong>介绍</strong>：</p>\\n<p>通过定义一个创建对象的接口来创建对象，但将具体实现的决定留给子类来决定。在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。<strong>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</strong>。</p>\\n<p><strong>场景</strong>：</p>\\n<ul>\\n<li>1.客户端（应用层）不依赖与产品类示例如何被创建、实现等细节</li>\\n<li>2.强调一系列相关的产品对象（数据同一产品族）一起使用创建对象需要大量的重复代码</li>\\n<li>3.提供一个产品类的库，所有的产品以同样的接口出现，使得客户端不依赖于具体实现</li>\\n</ul>","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}');export{t as data};
