import{_ as s,o as a,c as t,a as e}from"./app-Burlz-KF.js";const p={};function c(o,n){return a(),t("div",null,n[0]||(n[0]=[e(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p><strong>介绍</strong>：享元模式（Flyweight Pattern）是一种结构型设计模式，它通过共享对象来减少内存使用和对象创建的开销。享元模式属于对象型模式，它通过创建一个享元工厂来管理共享对象，并在需要时返回已经存在的对象，从而减少对象的创建和销毁次数。又称轻量级模式，<code>是对象池的一种实现</code>。所谓“享元”，<strong>顾名思义就是被共享的单元</strong>。享元模式的意图是<strong>复用对象，节省内存</strong>，前提是享元对象是不可变对象。运用共享技术有效地支持大量细粒度的对象。</p><p><strong>场景</strong>：</p><ul><li>1.常常应用于系统底层的开发，以便解决系统的性能问题。</li><li>2.系统有大量相似的对象、需要缓存池的场景。</li></ul><p>String类，Interger,Long等基本包装类中</p><p><strong>优点</strong>：</p><ul><li>1.减少对象的创建 ，降低内存中对象的数量 ，降低系统的内存 ，提高效率；</li><li>2.减少内存之外的其它资源占用。</li></ul><p><strong>不足</strong>：</p><ul><li>1.关注内、外部状态、关注线程安全问题；</li><li>2.使系统、程序复杂化</li></ul><h2 id="具体示例" tabindex="-1"><a class="header-anchor" href="#具体示例"><span>具体示例</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 享元接口</span>
<span class="token keyword">interface</span> <span class="token class-name">Flyweight</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token keyword">int</span> extrinsicState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token comment">// 具体的享元类</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteFlyweight</span> <span class="token keyword">implements</span> <span class="token class-name">Flyweight</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Character</span> intrinsicState<span class="token punctuation">;</span>
 
    <span class="token keyword">public</span> <span class="token class-name">ConcreteFlyweight</span><span class="token punctuation">(</span><span class="token class-name">Character</span> intrinsicState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>intrinsicState <span class="token operator">=</span> intrinsicState<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token keyword">int</span> extrinsicState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Intrinsic State: &quot;</span> <span class="token operator">+</span> intrinsicState <span class="token operator">+</span> <span class="token string">&quot; Extrinsic State: &quot;</span> <span class="token operator">+</span> extrinsicState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token comment">// 享元工厂</span>
<span class="token keyword">class</span> <span class="token class-name">FlyweightFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Flyweight</span><span class="token punctuation">&gt;</span></span> flyweights <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token keyword">public</span> <span class="token class-name">Flyweight</span> <span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token class-name">Character</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Flyweight</span> flyweight <span class="token operator">=</span> flyweights<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flyweight <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            flyweight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteFlyweight</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            flyweights<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> flyweight<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> flyweight<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyweightPatternDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FlyweightFactory</span> flyweightFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlyweightFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token class-name">Flyweight</span> flyweightA <span class="token operator">=</span> flyweightFactory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        flyweightA<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token class-name">Flyweight</span> flyweightB <span class="token operator">=</span> flyweightFactory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        flyweightB<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token class-name">Flyweight</span> flyweightC <span class="token operator">=</span> flyweightFactory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        flyweightC<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">// 由于&#39;a&#39;已经被创建并存储在工厂中，所以这里返回的是同一个对象</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flyweightA <span class="token operator">==</span> flyweightC<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，FlyweightFactory类充当了享元工厂的角色，它维护了一个共享对象的Map。当请求一个共享对象时，如果对象已经存在于Map中，它将被重用，否则将创建一个新的对象并加入到Map中。通过这种方式，可以有效地复用和共享大量相似对象的数据。</p>`,12)]))}const i=s(p,[["render",c],["__file","flyweight.html.vue"]]),u=JSON.parse('{"path":"/design/structure/flyweight.html","title":"享元模式","lang":"zh-CN","frontmatter":{"title":"享元模式","icon":"laptop-code","category":["设计模式"],"tag":["设计模式"],"description":"概述 介绍：享元模式（Flyweight Pattern）是一种结构型设计模式，它通过共享对象来减少内存使用和对象创建的开销。享元模式属于对象型模式，它通过创建一个享元工厂来管理共享对象，并在需要时返回已经存在的对象，从而减少对象的创建和销毁次数。又称轻量级模式，是对象池的一种实现。所谓“享元”，顾名思义就是被共享的单元。享元模式的意图是复用对象，节省...","head":[["meta",{"property":"og:url","content":"https://ujava.cn/design/structure/flyweight.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"享元模式"}],["meta",{"property":"og:description","content":"概述 介绍：享元模式（Flyweight Pattern）是一种结构型设计模式，它通过共享对象来减少内存使用和对象创建的开销。享元模式属于对象型模式，它通过创建一个享元工厂来管理共享对象，并在需要时返回已经存在的对象，从而减少对象的创建和销毁次数。又称轻量级模式，是对象池的一种实现。所谓“享元”，顾名思义就是被共享的单元。享元模式的意图是复用对象，节省..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-25T09:52:59.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:modified_time","content":"2024-04-25T09:52:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"享元模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-25T09:52:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"具体示例","slug":"具体示例","link":"#具体示例","children":[]}],"git":{"createdTime":1696751184000,"updatedTime":1714038779000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":5}]},"readingTime":{"minutes":1.91,"words":574},"filePathRelative":"design/structure/flyweight.md","localizedDate":"2023年10月8日","excerpt":"<h2>概述</h2>\\n<p><strong>介绍</strong>：享元模式（Flyweight Pattern）是一种结构型设计模式，它通过共享对象来减少内存使用和对象创建的开销。享元模式属于对象型模式，它通过创建一个享元工厂来管理共享对象，并在需要时返回已经存在的对象，从而减少对象的创建和销毁次数。又称轻量级模式，<code>是对象池的一种实现</code>。所谓“享元”，<strong>顾名思义就是被共享的单元</strong>。享元模式的意图是<strong>复用对象，节省内存</strong>，前提是享元对象是不可变对象。运用共享技术有效地支持大量细粒度的对象。</p>\\n<p><strong>场景</strong>：</p>","autoDesc":true}');export{i as comp,u as data};
