const t=JSON.parse('{"key":"v-5874ef7c","path":"/design/structure/flyweight.html","title":"享元模式","lang":"zh-CN","frontmatter":{"title":"享元模式","index":false,"icon":"laptop-code","category":["设计模式"],"description":"概述 介绍：享元模式（Flyweight Pattern）是一种结构型设计模式，它通过共享对象来减少内存使用和对象创建的开销。享元模式属于对象型模式，它通过创建一个享元工厂来管理共享对象，并在需要时返回已经存在的对象，从而减少对象的创建和销毁次数。又称轻量级模式，是对象池的一种实现。所谓“享元”，顾名思义就是被共享的单元。享元模式的意图是复用对象，节省...","head":[["meta",{"property":"og:url","content":"https://ujava.cn/design/structure/flyweight.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"享元模式"}],["meta",{"property":"og:description","content":"概述 介绍：享元模式（Flyweight Pattern）是一种结构型设计模式，它通过共享对象来减少内存使用和对象创建的开销。享元模式属于对象型模式，它通过创建一个享元工厂来管理共享对象，并在需要时返回已经存在的对象，从而减少对象的创建和销毁次数。又称轻量级模式，是对象池的一种实现。所谓“享元”，顾名思义就是被共享的单元。享元模式的意图是复用对象，节省..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-12T12:18:57.000Z"}],["meta",{"property":"article:author","content":"ujava"}],["meta",{"property":"article:modified_time","content":"2023-10-12T12:18:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"享元模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-10-12T12:18:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ujava\\",\\"url\\":\\"https://ujava.cn\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]}],"git":{"createdTime":1696751184000,"updatedTime":1697113137000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":2}]},"readingTime":{"minutes":1.07,"words":322},"filePathRelative":"design/structure/flyweight.md","localizedDate":"2023年10月8日","autoDesc":true}');export{t as data};
