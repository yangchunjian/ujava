const t=JSON.parse('{"key":"v-97e8e36e","path":"/design/action/state.html","title":"状态模式","lang":"zh-CN","frontmatter":{"title":"状态模式","index":false,"icon":"laptop-code","category":["设计模式"],"description":"概述 Java状态模式是一种行为型设计模式，它允许对象在内部状态改变时改变它的行为。状态模式将状态封装成独立的类，并将请求委托给当前状态对象，从而实现状态的切换和状态行为的变化。 使用状态模式的场景包括： 当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时。; 当一个对象需要根据状态改变它的数据和方法时。; 当一个对象需要在多个状...","head":[["meta",{"property":"og:url","content":"https://ujava.cn/design/action/state.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"状态模式"}],["meta",{"property":"og:description","content":"概述 Java状态模式是一种行为型设计模式，它允许对象在内部状态改变时改变它的行为。状态模式将状态封装成独立的类，并将请求委托给当前状态对象，从而实现状态的切换和状态行为的变化。 使用状态模式的场景包括： 当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时。; 当一个对象需要根据状态改变它的数据和方法时。; 当一个对象需要在多个状..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-07T10:53:31.000Z"}],["meta",{"property":"article:author","content":"ujava"}],["meta",{"property":"article:modified_time","content":"2023-10-07T10:53:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"状态模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-10-07T10:53:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ujava\\",\\"url\\":\\"https://ujava.cn\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]}],"git":{"createdTime":1696676011000,"updatedTime":1696676011000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":1}]},"readingTime":{"minutes":0.87,"words":261},"filePathRelative":"design/action/state.md","localizedDate":"2023年10月7日","autoDesc":true}');export{t as data};
