const e=JSON.parse('{"key":"v-6b2362c4","path":"/highfreq/consider.html","title":"设计考量","lang":"zh-CN","frontmatter":{"title":"设计考量","icon":"laptop-code","category":["设计高频"],"tag":["高频"],"description":"简介 1、系统拆分 有句古话 “牵一发而动全身”。 面对一个庞然大物，如果没有一个合理的分工分层。任何一个小小失误都会被无限放大，酿成巨大灾难。 万物相通，回到我们的软件架构。 早前的系统都是单体系统，比如电商业务，会员、商品、订单、物流、营销等模块都堆积在一个系统。每到节假日搞个大促活动，系统扩容时，一扩全扩，一挂全挂。只要一个接口出了问题，整个系统都不可用。 “鸡蛋不能放在一个篮子里”，这种连带风险换谁都承受不起。 因此，系统拆分 成了更多人的选择。 慢慢的就有了我们现在看到的微服务架构，将一个复杂的业务域按核心边缘业务/DDD的思想拆分成若干子系统，每个子系统负责专属的业务功能，做好垂直化建设，各个子系统之间做好边界隔离，降低风险蔓延。","head":[["meta",{"property":"og:url","content":"https://ujava.cn/highfreq/consider.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"设计考量"}],["meta",{"property":"og:description","content":"简介 1、系统拆分 有句古话 “牵一发而动全身”。 面对一个庞然大物，如果没有一个合理的分工分层。任何一个小小失误都会被无限放大，酿成巨大灾难。 万物相通，回到我们的软件架构。 早前的系统都是单体系统，比如电商业务，会员、商品、订单、物流、营销等模块都堆积在一个系统。每到节假日搞个大促活动，系统扩容时，一扩全扩，一挂全挂。只要一个接口出了问题，整个系统都不可用。 “鸡蛋不能放在一个篮子里”，这种连带风险换谁都承受不起。 因此，系统拆分 成了更多人的选择。 慢慢的就有了我们现在看到的微服务架构，将一个复杂的业务域按核心边缘业务/DDD的思想拆分成若干子系统，每个子系统负责专属的业务功能，做好垂直化建设，各个子系统之间做好边界隔离，降低风险蔓延。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-03T03:00:03.000Z"}],["meta",{"property":"article:author","content":"ujava"}],["meta",{"property":"article:tag","content":"高频"}],["meta",{"property":"article:modified_time","content":"2024-03-03T03:00:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计考量\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-03T03:00:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ujava\\",\\"url\\":\\"https://ujava.cn\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"1、系统拆分","slug":"_1、系统拆分","link":"#_1、系统拆分","children":[]},{"level":2,"title":"2、解耦","slug":"_2、解耦","link":"#_2、解耦","children":[]},{"level":2,"title":"3、异步","slug":"_3、异步","link":"#_3、异步","children":[]},{"level":2,"title":"4、重试","slug":"_4、重试","link":"#_4、重试","children":[]},{"level":2,"title":"5、补偿","slug":"_5、补偿","link":"#_5、补偿","children":[]},{"level":2,"title":"6、备份","slug":"_6、备份","link":"#_6、备份","children":[]},{"level":2,"title":"7、多活策略","slug":"_7、多活策略","link":"#_7、多活策略","children":[]},{"level":2,"title":"8、隔离","slug":"_8、隔离","link":"#_8、隔离","children":[]},{"level":2,"title":"9、限流","slug":"_9、限流","link":"#_9、限流","children":[]},{"level":2,"title":"10、熔断","slug":"_10、熔断","link":"#_10、熔断","children":[]},{"level":2,"title":"11、降级","slug":"_11、降级","link":"#_11、降级","children":[]}],"git":{"createdTime":1700036277000,"updatedTime":1709434803000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":4}]},"readingTime":{"minutes":15.49,"words":4646},"filePathRelative":"highfreq/consider.md","localizedDate":"2023年11月15日","excerpt":"<h2> 简介</h2>\\n<h2> 1、系统拆分</h2>\\n<p>有句古话 “牵一发而动全身”。</p>\\n<p>面对一个庞然大物，如果没有一个合理的分工分层。任何一个小小失误都会被无限放大，酿成巨大灾难。</p>\\n<p>万物相通，回到我们的软件架构。</p>\\n<p>早前的系统都是单体系统，比如电商业务，会员、商品、订单、物流、营销等模块都堆积在一个系统。每到节假日搞个大促活动，系统扩容时，一扩全扩，一挂全挂。只要一个接口出了问题，整个系统都不可用。</p>\\n<p>“鸡蛋不能放在一个篮子里”，这种连带风险换谁都承受不起。</p>\\n<p>因此，系统拆分 成了更多人的选择。</p>\\n<p>慢慢的就有了我们现在看到的微服务架构，将一个复杂的业务域按核心边缘业务/DDD的思想拆分成若干子系统，每个子系统负责专属的业务功能，做好垂直化建设，各个子系统之间做好边界隔离，降低风险蔓延。</p>","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}');export{e as data};
