import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as p,c as i,a,b as n,d as e,e as t}from"./app-8a5cd404.js";const r={},l=t('<p>MySQL 字符编码集中有两套 UTF-8 编码实现：<strong><code>utf8</code></strong> 和 <strong><code>utf8mb4</code></strong>。</p><p>如果使用 <strong><code>utf8</code></strong> 的话，存储 emoji 符号和一些比较复杂的汉字、繁体字就会出错。</p><p>为什么会这样呢？这篇文章可以从源头给你解答。</p><h2 id="何为字符集" tabindex="-1"><a class="header-anchor" href="#何为字符集" aria-hidden="true">#</a> 何为字符集？</h2><p>字符是各种文字和符号的统称，包括各个国家文字、标点符号、表情、数字等等。 <strong>字符集</strong> 就是一系列字符的集合。字符集的种类较多，每个字符集可以表示的字符范围通常不同，就比如说有些字符集是无法表示汉字的。</p><p><strong>计算机只能存储二进制的数据，那英文、汉字、表情等字符应该如何存储呢？</strong></p><p>我们要将这些字符和二进制的数据一一对应起来，比如说字符“a”对应“01100001”，反之，“01100001”对应 “a”。我们将字符对应二进制数据的过程称为&quot;<strong>字符编码</strong>&quot;，反之，二进制数据解析成字符的过程称为“<strong>字符解码</strong>”。</p><h2 id="有哪些常见的字符集" tabindex="-1"><a class="header-anchor" href="#有哪些常见的字符集" aria-hidden="true">#</a> 有哪些常见的字符集？</h2><p>常见的字符集有 ASCII、GB2312、GBK、UTF-8......。</p><p>不同的字符集的主要区别在于：</p><ul><li>可以表示的字符范围</li><li>编码方式</li></ul><h3 id="ascii" tabindex="-1"><a class="header-anchor" href="#ascii" aria-hidden="true">#</a> ASCII</h3><p><strong>ASCII</strong> (<strong>A</strong>merican <strong>S</strong>tandard <strong>C</strong>ode for <strong>I</strong>nformation <strong>I</strong>nterchange，美国信息交换标准代码) 是一套主要用于现代美国英语的字符集（这也是 ASCII 字符集的局限性所在）。</p><p><strong>为什么 ASCII 字符集没有考虑到中文等其他字符呢？</strong> 因为计算机是美国人发明的，当时，计算机的发展还处于比较雏形的时代，还未在其他国家大规模使用。因此，美国发布 ASCII 字符集的时候没有考虑兼容其他国家的语言。</p><p>ASCII 字符集至今为止共定义了 128 个字符，其中有 33 个控制字符（比如回车、删除）无法显示。</p><p>一个 ASCII 码长度是一个字节也就是 8 个 bit，比如“a”对应的 ASCII 码是“01100001”。不过，最高位是 0 仅仅作为校验位，其余 7 位使用 0 和 1 进行组合，所以，ASCII 字符集可以定义 128（2^7）个字符。</p><p>由于，ASCII 码可以表示的字符实在是太少了。后来，人们对其进行了扩展得到了 <strong>ASCII 扩展字符集</strong> 。ASCII 扩展字符集使用 8 位（bits）表示一个字符，所以，ASCII 扩展字符集可以定义 256（2^8）个字符。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/csdn/c1c6375d08ca268690cef2b13591a5b4.png" alt="ASCII字符编码" tabindex="0" loading="lazy"><figcaption>ASCII字符编码</figcaption></figure><h3 id="gb2312" tabindex="-1"><a class="header-anchor" href="#gb2312" aria-hidden="true">#</a> GB2312</h3><p>我们上面说了，ASCII 字符集是一种现代美国英语适用的字符集。因此，很多国家都捣鼓了一个适合自己国家语言的字符集。</p><p>GB2312 字符集是一种对汉字比较友好的字符集，共收录 6700 多个汉字，基本涵盖了绝大部分常用汉字。不过，GB2312 字符集不支持绝大部分的生僻字和繁体字。</p><p>对于英语字符，GB2312 编码和 ASCII 码是相同的，1 字节编码即可。对于非英字符，需要 2 字节编码。</p><h3 id="gbk" tabindex="-1"><a class="header-anchor" href="#gbk" aria-hidden="true">#</a> GBK</h3><p>GBK 字符集可以看作是 GB2312 字符集的扩展，兼容 GB2312 字符集，共收录了 20000 多个汉字。</p><p>GBK 中 K 是汉语拼音 Kuo Zhan（扩展）中的“Kuo”的首字母。</p><h3 id="gb18030" tabindex="-1"><a class="header-anchor" href="#gb18030" aria-hidden="true">#</a> GB18030</h3><p>GB18030 完全兼容 GB2312 和 GBK 字符集，纳入中国国内少数民族的文字，且收录了日韩汉字，是目前为止最全面的汉字字符集，共收录汉字 70000 多个。</p><h3 id="big5" tabindex="-1"><a class="header-anchor" href="#big5" aria-hidden="true">#</a> BIG5</h3><p>BIG5 主要针对的是繁体中文，收录了 13000 多个汉字。</p><h3 id="unicode-utf-8-编码" tabindex="-1"><a class="header-anchor" href="#unicode-utf-8-编码" aria-hidden="true">#</a> Unicode &amp; UTF-8 编码</h3><p>为了更加适合本国语言，诞生了很多种字符集。</p><p>我们上面也说了不同的字符集可以表示的字符范围以及编码规则存在差异。这就导致了一个非常严重的问题：<strong>使用错误的编码方式查看一个包含字符的文件就会产生乱码现象。</strong></p><p>就比如说你使用 UTF-8 编码方式打开 GB2312 编码格式的文件就会出现乱码。示例：“牛”这个汉字 GB2312 编码后的十六进制数值为 “C5A3”，而 “C5A3” 用 UTF-8 解码之后得到的却是 “ţ”。</p>',33),d={href:"https://www.haomeili.net/HanZi/ZiFuBianMaZhuanHuan",target:"_blank",rel:"noopener noreferrer"},u=t(`<figure><img src="https://oss.javaguide.cn/github/javaguide/csdn/836c49b117ee4408871b0020b74c991d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这样我们就搞懂了乱码的本质：<strong>编码和解码时用了不同或者不兼容的字符集</strong> 。</p><figure><img src="https://oss.javaguide.cn/javaguide/a8808cbabeea49caa3af27d314fa3c02-1.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为了解决这个问题，人们就想：“如果我们能够有一种字符集将世界上所有的字符都纳入其中就好了！”。</p><p>然后，<strong>Unicode</strong> 带着这个使命诞生了。</p><p>Unicode 字符集中包含了世界上几乎所有已知的字符。不过，Unicode 字符集并没有规定如何存储这些字符（也就是如何使用二进制数据表示这些字符）。</p><p>然后，就有了 <strong>UTF-8</strong>（<strong>8</strong>-bit <strong>U</strong>nicode <strong>T</strong>ransformation <strong>F</strong>ormat）。类似的还有 UTF-16、 UTF-32。</p><p>UTF-8 使用 1 到 4 个字节为每个字符编码， UTF-16 使用 2 或 4 个字节为每个字符编码，UTF-32 固定位 4 个字节为每个字符编码。</p><p>UTF-8 可以根据不同的符号自动选择编码的长短，像英文字符只需要 1 个字节就够了，这一点 ASCII 字符集一样 。因此，对于英语字符，UTF-8 编码和 ASCII 码是相同的。</p><p>UTF-32 的规则最简单，不过缺陷也比较明显，对于英文字母这类字符消耗的空间是 UTF-8 的 4 倍之多。</p><p><strong>UTF-8</strong> 是目前使用最广的一种字符编码。</p><figure><img src="https://oss.javaguide.cn/javaguide/1280px-Utf8webgrowth.svg.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="mysql-字符集" tabindex="-1"><a class="header-anchor" href="#mysql-字符集" aria-hidden="true">#</a> MySQL 字符集</h2><p>MySQL 支持很多种字符编码的方式，比如 UTF-8、GB2312、GBK、BIG5。</p><h3 id="查看支持的字符集" tabindex="-1"><a class="header-anchor" href="#查看支持的字符集" aria-hidden="true">#</a> 查看支持的字符集</h3><p>你可以通过 <code>SHOW CHARSET</code> 命令来查看，支持 like 和 where 子句。</p><figure><img src="https://oss.javaguide.cn/javaguide/image-20211008164229671.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="默认字符集" tabindex="-1"><a class="header-anchor" href="#默认字符集" aria-hidden="true">#</a> 默认字符集</h3><p>在 MySQL5.7 中，默认字符集是 <code>latin1</code> ；在 MySQL8.0 中，默认字符集是 <code>utf8mb4</code></p><h3 id="字符集的层次级别" tabindex="-1"><a class="header-anchor" href="#字符集的层次级别" aria-hidden="true">#</a> 字符集的层次级别</h3><p>MySQL 中的字符集有以下的层次级别：</p><ul><li><code>server</code>（MySQL 实例级别）</li><li><code>database</code>（库级别）</li><li><code>table</code>（表级别）</li><li><code>column</code>（字段级别）</li></ul><p>它们的优先级可以简单的认为是从上往下依次增大，也即 <code>column</code> 的优先级会大于 <code>table</code> 等其余层次的。如指定 MySQL 实例级别字符集是<code>utf8mb4</code>，指定某个表字符集是<code>latin1</code>，那么这个表的所有字段如果不指定的话，编码就是<code>latin1</code>。</p><h4 id="server" tabindex="-1"><a class="header-anchor" href="#server" aria-hidden="true">#</a> server</h4><p>不同版本的 MySQL 其 <code>server</code> 级别的字符集默认值不同，在 MySQL5.7 中，其默认值是 <code>latin1</code> ；在 MySQL8.0 中，其默认值是 <code>utf8mb4</code> 。</p><p>当然也可以通过在启动 <code>mysqld</code> 时指定 <code>--character-set-server</code> 来设置 <code>server</code> 级别的字符集。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqld
mysqld --character-set-server<span class="token operator">=</span>utf8mb4
mysqld --character-set-server<span class="token operator">=</span>utf8mb4 <span class="token punctuation">\\</span>
  --collation-server<span class="token operator">=</span>utf8mb4_0900_ai_ci
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者如果你是通过源码构建的方式启动的 MySQL，你可以在 <code>cmake</code> 命令中指定选项：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cmake <span class="token builtin class-name">.</span> <span class="token parameter variable">-DDEFAULT_CHARSET</span><span class="token operator">=</span>latin1
或者
cmake <span class="token builtin class-name">.</span> <span class="token parameter variable">-DDEFAULT_CHARSET</span><span class="token operator">=</span>latin1 <span class="token punctuation">\\</span>
  <span class="token parameter variable">-DDEFAULT_COLLATION</span><span class="token operator">=</span>latin1_german1_ci
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，你也可以在运行时改变 <code>character_set_server</code> 的值，从而达到修改 <code>server</code> 级别的字符集的目的。</p>`,30),k=a("code",null,"server",-1),h={href:"https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-charsets.html",target:"_blank",rel:"noopener noreferrer"},m=t(`<h4 id="database" tabindex="-1"><a class="header-anchor" href="#database" aria-hidden="true">#</a> database</h4><p><code>database</code> 级别的字符集是我们在创建数据库和修改数据库时指定的：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db_name
    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token punctuation">]</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> charset_name<span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token punctuation">]</span> <span class="token keyword">COLLATE</span> collation_name<span class="token punctuation">]</span>

<span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> db_name
    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token punctuation">]</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> charset_name<span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token punctuation">]</span> <span class="token keyword">COLLATE</span> collation_name<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如前面所说，如果在执行上述语句时未指定字符集，那么 MySQL 将会使用 <code>server</code> 级别的字符集。</p><p>可以通过下面的方式查看某个数据库的字符集：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">USE</span> db_name<span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> @<span class="token variable">@character_set_database</span><span class="token punctuation">,</span> @<span class="token variable">@collation_database</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> DEFAULT_CHARACTER_SET_NAME<span class="token punctuation">,</span> DEFAULT_COLLATION_NAME
<span class="token keyword">FROM</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>SCHEMATA <span class="token keyword">WHERE</span> SCHEMA_NAME <span class="token operator">=</span> <span class="token string">&#39;db_name&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="table" tabindex="-1"><a class="header-anchor" href="#table" aria-hidden="true">#</a> table</h4><p><code>table</code> 级别的字符集是在创建表和修改表时指定的：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tbl_name <span class="token punctuation">(</span>column_list<span class="token punctuation">)</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token punctuation">]</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> charset_name<span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token keyword">COLLATE</span> collation_name<span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tbl_name
    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token keyword">DEFAULT</span><span class="token punctuation">]</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> charset_name<span class="token punctuation">]</span>
    <span class="token punctuation">[</span><span class="token keyword">COLLATE</span> collation_name<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在创建表和修改表时未指定字符集，那么将会使用 <code>database</code> 级别的字符集。</p><h4 id="column" tabindex="-1"><a class="header-anchor" href="#column" aria-hidden="true">#</a> column</h4><p><code>column</code> 级别的字符集同样是在创建表和修改表时指定的，只不过它是定义在列中。下面是个例子：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t1
<span class="token punctuation">(</span>
    col1 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
      <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> latin1
      <span class="token keyword">COLLATE</span> latin1_german1_ci
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果未指定列级别的字符集，那么将会使用表级别的字符集。</p><h3 id="连接字符集" tabindex="-1"><a class="header-anchor" href="#连接字符集" aria-hidden="true">#</a> 连接字符集</h3><p>前面说到了字符集的层次级别，它们是和存储相关的。而连接字符集涉及的是和 MySQL 服务器的通信。</p><p>连接字符集与下面这几个变量息息相关：</p><ul><li><code>character_set_client</code> ：描述了客户端发送给服务器的 SQL 语句使用的是什么字符集。</li><li><code>character_set_connection</code> ：描述了服务器接收到 SQL 语句时使用什么字符集进行翻译。</li><li><code>character_set_results</code> ：描述了服务器返回给客户端的结果使用的是什么字符集。</li></ul><p>它们的值可以通过下面的 SQL 语句查询：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> performance_schema<span class="token punctuation">.</span>session_variables
<span class="token keyword">WHERE</span> VARIABLE_NAME <span class="token operator">IN</span> <span class="token punctuation">(</span>
<span class="token string">&#39;character_set_client&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;character_set_connection&#39;</span><span class="token punctuation">,</span>
<span class="token string">&#39;character_set_results&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;collation_connection&#39;</span>
<span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> VARIABLE_NAME<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">SESSION</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;character\\_set\\_%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果要想修改前面提到的几个变量的值，有以下方式：</p><p>1、修改配置文件</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code>[mysql]
<span class="token comment"># 只针对MySQL客户端程序</span>
<span class="token key attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token value attr-value">utf8mb4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、使用 SQL 语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">set</span> names utf8mb4
<span class="token comment"># 或者一个个进行修改</span>
<span class="token comment"># SET character_set_client = utf8mb4;</span>
<span class="token comment"># SET character_set_results = utf8mb4;</span>
<span class="token comment"># SET collation_connection = utf8mb4;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jdbc-对连接字符集的影响" tabindex="-1"><a class="header-anchor" href="#jdbc-对连接字符集的影响" aria-hidden="true">#</a> jdbc 对连接字符集的影响</h3><p>不知道你们有没有碰到过存储 emoji 表情正常，但是使用类似 Navicat 之类的软件的进行查询的时候，发现 emoji 表情变成了问号的情况。这个问题很有可能就是 jdbc 驱动引起的。</p><p>根据前面的内容，我们知道连接字符集也是会影响我们存储的数据的，而 jdbc 驱动会影响连接字符集。</p><p><code>mysql-connector-java</code> （jdbc 驱动）主要通过这几个属性影响连接字符集：</p><ul><li><code>characterEncoding</code></li><li><code>characterSetResults</code></li></ul><p>以 <code>DataGrip 2023.1.2</code> 来说，在它配置数据源的高级对话框中，可以看到 <code>characterSetResults</code> 的默认值是 <code>utf8</code> ，在使用 <code>mysql-connector-java 8.0.25</code> 时，连接字符集最后会被设置成 <code>utf8mb3</code> 。那么这种情况下 emoji 表情就会被显示为问号，并且当前版本驱动还不支持把 <code>characterSetResults</code> 设置为 <code>utf8mb4</code> ，不过换成 <code>mysql-connector-java driver 8.0.29</code> 却是允许的。</p>`,33),v={href:"https://stackoverflow.com/questions/54815419/datagrip-mysql-stores-emojis-correctly-but-displays-them-as",target:"_blank",rel:"noopener noreferrer"},g=t('<h3 id="utf-8-使用" tabindex="-1"><a class="header-anchor" href="#utf-8-使用" aria-hidden="true">#</a> UTF-8 使用</h3><p>通常情况下，我们建议使用 UTF-8 作为默认的字符编码方式。</p><p>不过，这里有一个小坑。</p><p>MySQL 字符编码集中有两套 UTF-8 编码实现：</p><ul><li><strong><code>utf8</code></strong>：<code>utf8</code>编码只支持<code>1-3</code>个字节 。 在 <code>utf8</code> 编码中，中文是占 3 个字节，其他数字、英文、符号占一个字节。但 emoji 符号占 4 个字节，一些较复杂的文字、繁体字也是 4 个字节。</li><li><strong><code>utf8mb4</code></strong>：UTF-8 的完整实现，正版！最多支持使用 4 个字节表示字符，因此，可以用来存储 emoji 符号。</li></ul><p><strong>为什么有两套 UTF-8 编码实现呢？</strong> 原因如下：</p><figure><img src="https://oss.javaguide.cn/javaguide/image-20211008164542347.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因此，如果你需要存储<code>emoji</code>类型的数据或者一些比较复杂的文字、繁体字到 MySQL 数据库的话，数据库的编码一定要指定为<code>utf8mb4</code> 而不是<code>utf8</code> ，要不然存储的时候就会报错了。</p><p>演示一下吧！（环境：MySQL 5.7+）</p><p>建表语句如下，我们指定数据库 CHARSET 为 <code>utf8</code> 。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb3 <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb3 <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>phone<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb3 <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb3 <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们执行下面的 insert 语句插入数据到数据库时，果然报错！</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>phone<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token keyword">VALUES</span>\n <span class="token punctuation">(</span><span class="token string">&#39;A00003&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;guide哥😘😘😘&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;181631312312&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错信息如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Incorrect string value: &#39;\\xF0\\x9F\\x98\\x98\\xF0\\x9F...&#39; for column &#39;name&#39; at row 1\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',16),b={href:"https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html",target:"_blank",rel:"noopener noreferrer"},f={href:"http://cenalulu.github.io/linux/character-encoding/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://zh.wikipedia.org/wiki/Unicode",target:"_blank",rel:"noopener noreferrer"},y={href:"https://zh.wikipedia.org/wiki/GB_2312",target:"_blank",rel:"noopener noreferrer"},A={href:"https://zh.wikipedia.org/wiki/UTF-8",target:"_blank",rel:"noopener noreferrer"},w={href:"https://zh.wikipedia.org/wiki/GB_18030",target:"_blank",rel:"noopener noreferrer"},E={href:"https://dev.mysql.com/doc/refman/8.0/en/charset.html",target:"_blank",rel:"noopener noreferrer"},T={href:"https://dev.mysql.com/doc/refman/5.7/en/charset.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-charsets.html",target:"_blank",rel:"noopener noreferrer"};function L(C,I){const s=c("ExternalLinkIcon");return p(),i("div",null,[l,a("p",null,[n("你可以通过这个网站在线进行编码和解码："),a("a",d,[n("https://www.haomeili.net/HanZi/ZiFuBianMaZhuanHuan"),e(s)])]),u,a("p",null,[k,n(" 级别的字符集是 MySQL 服务器的全局设置，它不仅会作为创建或修改数据库时的默认字符集（如果没有指定其他字符集），还会影响到客户端和服务器之间的连接字符集，具体可以查看 "),a("a",h,[n("MySQL Connector/J 8.0 - 6.7 Using Character Sets and Unicode"),e(s)]),n("。")]),m,a("p",null,[n("具体可以看一下 StackOverflow 的 "),a("a",v,[n("DataGrip MySQL stores emojis correctly but displays them as?"),e(s)]),n("这个回答。")]),g,a("ul",null,[a("li",null,[n("字符集和字符编码（Charset & Encoding）："),a("a",b,[n("https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html"),e(s)])]),a("li",null,[n("十分钟搞清字符集和字符编码："),a("a",f,[n("http://cenalulu.github.io/linux/character-encoding/"),e(s)])]),a("li",null,[n("Unicode-维基百科："),a("a",_,[n("https://zh.wikipedia.org/wiki/Unicode"),e(s)])]),a("li",null,[n("GB2312-维基百科："),a("a",y,[n("https://zh.wikipedia.org/wiki/GB_2312"),e(s)])]),a("li",null,[n("UTF-8-维基百科："),a("a",A,[n("https://zh.wikipedia.org/wiki/UTF-8"),e(s)])]),a("li",null,[n("GB18030-维基百科: "),a("a",w,[n("https://zh.wikipedia.org/wiki/GB_18030"),e(s)])]),a("li",null,[n("MySQL8 文档："),a("a",E,[n("https://dev.mysql.com/doc/refman/8.0/en/charset.html"),e(s)])]),a("li",null,[n("MySQL5.7 文档："),a("a",T,[n("https://dev.mysql.com/doc/refman/5.7/en/charset.html"),e(s)])]),a("li",null,[n("MySQL Connector/J 文档："),a("a",S,[n("https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-charsets.html"),e(s)])])])])}const q=o(r,[["render",L],["__file","character-set.html.vue"]]);export{q as default};
