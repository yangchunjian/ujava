const t=JSON.parse('{"key":"v-942c7fac","path":"/design/create/factory.html","title":"工厂模式","lang":"zh-CN","frontmatter":{"title":"工厂模式","index":false,"icon":"laptop-code","category":["设计模式"],"description":"概述 通过一个工厂类来实现对象的创建，而无需直接暴露对象的创建逻辑给客户端。 简单工厂模式的优点在于客户端无需了解具体产品类的创建细节，只需通过工厂类来创建对象，并且工厂类可以根据客户端的需求来动态创建不同类型的对象。但是缺点也比较明显，如果需要创建的产品类数量较多，则工厂类的代码会变得很臃肿，不便于维护。","head":[["meta",{"property":"og:url","content":"https://ujava.cn/design/create/factory.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"工厂模式"}],["meta",{"property":"og:description","content":"概述 通过一个工厂类来实现对象的创建，而无需直接暴露对象的创建逻辑给客户端。 简单工厂模式的优点在于客户端无需了解具体产品类的创建细节，只需通过工厂类来创建对象，并且工厂类可以根据客户端的需求来动态创建不同类型的对象。但是缺点也比较明显，如果需要创建的产品类数量较多，则工厂类的代码会变得很臃肿，不便于维护。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-08T07:46:24.000Z"}],["meta",{"property":"article:author","content":"ujava"}],["meta",{"property":"article:modified_time","content":"2023-10-08T07:46:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工厂模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-10-08T07:46:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ujava\\",\\"url\\":\\"https://ujava.cn\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]}],"git":{"createdTime":1696751184000,"updatedTime":1696751184000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":1}]},"readingTime":{"minutes":0.53,"words":158},"filePathRelative":"design/create/factory.md","localizedDate":"2023年10月8日","autoDesc":true}');export{t as data};
