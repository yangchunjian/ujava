const n=JSON.parse(`{"key":"v-4cb45f44","path":"/synthesis/mysqllocksql.html","title":"MySQL死锁SQL","lang":"zh-CN","frontmatter":{"title":"MySQL死锁SQL","icon":"laptop-code","category":["设计高频"],"tag":["高频"],"description":"在MySQL中，死锁通常发生在多个事务相互占用对方需要的资源，导致每个事务都在等待其他事务释放资源时无法向前推进。 解决死锁问题通常需要调整事务的隔离级别、保持事务尽可能短、避免事务中的锁竞争、使用索引来加快查询速度，并确保应用程序能够处理事务回滚。 以下是一个简单的例子，演示如何通过索引来减少死锁的可能性： 假设有两个表&nbsp;orders&nbsp;和&nbsp;inventory，以下SQL可能导致死锁： -- 事务A BEGIN; UPDATE orders SET status = 'shipped' WHERE order_id = 100; UPDATE inventory SET quantity = quantity - 1 WHERE product_id = 5; COMMIT; -- 事务B BEGIN; UPDATE inventory SET quantity = quantity - 1 WHERE product_id = 5; UPDATE orders SET status = 'shipped' WHERE order_id = 100; COMMIT;","head":[["meta",{"property":"og:url","content":"https://ujava.cn/synthesis/mysqllocksql.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"MySQL死锁SQL"}],["meta",{"property":"og:description","content":"在MySQL中，死锁通常发生在多个事务相互占用对方需要的资源，导致每个事务都在等待其他事务释放资源时无法向前推进。 解决死锁问题通常需要调整事务的隔离级别、保持事务尽可能短、避免事务中的锁竞争、使用索引来加快查询速度，并确保应用程序能够处理事务回滚。 以下是一个简单的例子，演示如何通过索引来减少死锁的可能性： 假设有两个表&nbsp;orders&nbsp;和&nbsp;inventory，以下SQL可能导致死锁： -- 事务A BEGIN; UPDATE orders SET status = 'shipped' WHERE order_id = 100; UPDATE inventory SET quantity = quantity - 1 WHERE product_id = 5; COMMIT; -- 事务B BEGIN; UPDATE inventory SET quantity = quantity - 1 WHERE product_id = 5; UPDATE orders SET status = 'shipped' WHERE order_id = 100; COMMIT;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-24T02:36:00.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:tag","content":"高频"}],["meta",{"property":"article:modified_time","content":"2024-04-24T02:36:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL死锁SQL\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-24T02:36:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[],"git":{"createdTime":1713926160000,"updatedTime":1713926160000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":1}]},"readingTime":{"minutes":1.2,"words":360},"filePathRelative":"synthesis/mysqllocksql.md","localizedDate":"2024年4月24日","excerpt":"<p>在MySQL中，死锁通常发生在多个事务相互占用对方需要的资源，导致每个事务都在等待其他事务释放资源时无法向前推进。</p>\\n<p>解决死锁问题通常需要调整事务的隔离级别、保持事务尽可能短、避免事务中的锁竞争、使用索引来加快查询速度，并确保应用程序能够处理事务回滚。</p>\\n<p>以下是一个简单的例子，演示如何通过索引来减少死锁的可能性：</p>\\n<p>假设有两个表&nbsp;<code>orders</code>&nbsp;和&nbsp;<code>inventory</code>，以下SQL可能导致死锁：</p>\\n<div class=\\"language-sql line-numbers-mode\\" data-ext=\\"sql\\"><pre class=\\"language-sql\\"><code><span class=\\"token comment\\">-- 事务A</span>\\n<span class=\\"token keyword\\">BEGIN</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">UPDATE</span> orders <span class=\\"token keyword\\">SET</span> <span class=\\"token keyword\\">status</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'shipped'</span> <span class=\\"token keyword\\">WHERE</span> order_id <span class=\\"token operator\\">=</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">UPDATE</span> inventory <span class=\\"token keyword\\">SET</span> quantity <span class=\\"token operator\\">=</span> quantity <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span> <span class=\\"token keyword\\">WHERE</span> product_id <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">COMMIT</span><span class=\\"token punctuation\\">;</span>\\n \\n<span class=\\"token comment\\">-- 事务B</span>\\n<span class=\\"token keyword\\">BEGIN</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">UPDATE</span> inventory <span class=\\"token keyword\\">SET</span> quantity <span class=\\"token operator\\">=</span> quantity <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span> <span class=\\"token keyword\\">WHERE</span> product_id <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">UPDATE</span> orders <span class=\\"token keyword\\">SET</span> <span class=\\"token keyword\\">status</span> <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'shipped'</span> <span class=\\"token keyword\\">WHERE</span> order_id <span class=\\"token operator\\">=</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">COMMIT</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}`);export{n as data};
