import{_ as s,o as a,c as e,a as i}from"./app-FDWMjT07.js";const l="/assets/img_139-Dx6EJPag.png",t="/assets/img_140-Bsu_vvpm.png",p="/assets/img_141-KbZtR7RT.png",o="/assets/img_142-DlvAIH_3.png",c="/assets/img_143-BxmmY3Ev.png",r="/assets/img_144-CDCFZGgl.png",u="/assets/img_145-CYc9IPn8.png",d="/assets/img_146-EaSVIGNb.png",g={};function m(k,n){return a(),e("div",null,n[0]||(n[0]=[i('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>MySQL服务器处理查询请求的整个过程：</p><ul><li>客户端发送SQL强求给服务器</li><li>服务器检查是否可以在查询缓存中命中该SQL</li><li>服务器端进行SQL解析，预处理，再由优化器生成对应的执行计划</li><li>根据执行计划，调用存储引擎API来查询数据</li><li>将结果返回给客户端<br> 查询性能低下最基本的原因是访问的数据太多。</li></ul><h2 id="一、如何优化慢查询" tabindex="-1"><a class="header-anchor" href="#一、如何优化慢查询"><span>一、如何优化慢查询？</span></a></h2><p>1，首先开启慢查询日志：</p><ul><li>long_query_time（多长时间视为慢查询）</li><li>slow_query_log（是否开启了慢查询日志，off表示未开启）</li><li>slow_query_log_file（慢查询日志存放的位置）</li></ul><p>2.慢查询优化思路：<br><img src="'+l+'" alt="img_139.png" loading="lazy"></p><figure><img src="'+t+'" alt="img_140.png" tabindex="0" loading="lazy"><figcaption>img_140.png</figcaption></figure><figure><img src="'+p+'" alt="img_141.png" tabindex="0" loading="lazy"><figcaption>img_141.png</figcaption></figure><figure><img src="'+o+'" alt="img_142.png" tabindex="0" loading="lazy"><figcaption>img_142.png</figcaption></figure><p>3，分析慢查询语句，来进行相应的优化</p><ul><li>①建立索引</li><li>②减少表之间的关联</li><li>③优化sql，尽量让sql很快定位数据，不要让sql做全表查询，应该走索引，把数据量大的表排在前面</li><li>④简化查询字段，没用的字段不要，已经对返回结果的控制，尽量返回少量数据</li></ul><h2 id="二、数据库优化的方法" tabindex="-1"><a class="header-anchor" href="#二、数据库优化的方法"><span>二、数据库优化的方法：</span></a></h2><p>1，SQL语句优化：</p><ul><li>①应该尽量避免在where子句中使用！=或者&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描</li><li>②应尽量避免在where子句中对字段进行null值判断，否则将导致引擎放弃使用而进行全表扫描</li><li>③很多时候，用exits代替in是一个很好的选择</li><li>④用where子句替代having子句，因为having只会在检索出所有记录之后才对结果集进行过滤</li></ul><p>2，索引优化：</p><ul><li>①为经常出现在关键字order by，group by，distinct后面的字段，建立索引</li><li>②为经常用作where查询选择的字段，建立索引</li><li>③在经常用作表连接的属性上建立索引</li><li>④更新非常频繁的字段不适合建立索引</li></ul><p>3，数据库结构优化：</p><ul><li>①范式优化（如消除冗余，节省空间）</li><li>②反范式化优化（适当增加冗余）</li><li>③拆分表（不同分区的数据可以指定保存在处于不同磁盘上的数据文件里）</li><li>④拆分又分为垂直拆分和水平拆分</li></ul><p>4，服务器硬件优化（对花钱）</p><h2 id="三、mysql查询优化-0其实这个概念比较偏小-上一道题的概念比较偏大" tabindex="-1"><a class="header-anchor" href="#三、mysql查询优化-0其实这个概念比较偏小-上一道题的概念比较偏大"><span>三、MySQL查询优化（0其实这个概念比较偏小，上一道题的概念比较偏大）：</span></a></h2><ul><li>应该尽量避免全表扫描，首先应考虑哎where及order by涉及的列上建索引</li><li>尽量避免在where子句中对字段进行null值判断</li><li>尽量避免在where子句中使用or来连接条件</li><li>尽量避免在where子句中使用！=或&lt;&gt;操作符</li><li>in和not in也要慎用</li><li>%aa%应尽量避免</li><li>尽量避免在where子句中对字段进行表达式操作</li><li>在where子句中使用参数慎用</li><li>尽量避免在where子句中进行函数操作</li><li>不要在where子句中的“=”左边进行函数算术运算或其他表达式运算</li><li>若使用复合索引，则必须使用到该索引中的第一个字段作为条件时才能保证系统使用索引</li><li>不要写无意义的查询，select…from…where 0=1</li><li>用exists代替in是一个很好的选择</li><li>建立索引时要慎重（并不是越多越好）</li><li>应尽量避免更新cluster（索引数据列）</li><li>尽量使用数字型字段（尽量不要设计为字符型）</li><li>尽量使用varchar/nvaechar代替char/nchar，因为变长字段存储空间小</li><li>尽量避免select * from t</li><li>尽量使用表变量来代替临时表</li></ul><h2 id="四、为什么like以-开头索引会失效" tabindex="-1"><a class="header-anchor" href="#四、为什么like以-开头索引会失效"><span>四、为什么Like以%开头索引会失效 ？</span></a></h2><p>like失效的原因：</p><ul><li>%在右：由于B+树的索引顺序，是按照首字母的大小进行排序，%号在右的匹配又是匹配首字母，所以可以在B+树上进行有序的查找，查找首字母符合要求的数据。</li><li>%在左：是匹配字符串尾部的数据，我们上面说了排序规则，尾部的字母是没有顺序的，所以不能按照索引顺序查询，就用不到索引。</li><li>两个%号：这个查询任意位置的字母满足条件即可，只有首字母是进行索引排序的，其他位置的字母都是相对无序的，所以查找任意位置的字母是用不上索引的。</li></ul><p>解决%出现在左边索引失效的方法，使用覆盖索引。</p><h2 id="五、select-为什么禁止使用" tabindex="-1"><a class="header-anchor" href="#五、select-为什么禁止使用"><span>五、select * 为什么禁止使用？</span></a></h2><p>为了说明这个问题，我们需要建一个表:</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user_innodb<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n<span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>gender<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n<span class="token identifier"><span class="token punctuation">`</span>phone<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">-----主键索引</span>\n<span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>IDX_NAME_PHONE<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>phone<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token comment">-----name和phone的联合索引</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_ai_ci<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们创建了一个存储引擎为InnoDB的表user_innodb，并设置id为主键，另外为name和phone创建了联合索引，最后向表中随机初始化了500W+条数据。</p><p>InnoDB会自动为主键id创建一棵名为主键索引（又叫做聚簇索引）的B+树，这个B+树的最重要的特点就是叶子节点包含了完整的用户记录，大概长这个样子：</p><figure><img src="'+c+`" alt="img_143.png" tabindex="0" loading="lazy"><figcaption>img_143.png</figcaption></figure><p>如果我们执行这个语句：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_innodb <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;蝉沐风&#39;</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用EXPLAIN查看一下语句的执行计划：</p><figure><img src="`+r+'" alt="img_144.png" tabindex="0" loading="lazy"><figcaption>img_144.png</figcaption></figure><p>发现这个SQL语句会使用到IDX_NAME_PHONE索引，这是一个二级索引。二级索引的叶子节点长这个样子：</p><figure><img src="'+u+`" alt="img_145.png" tabindex="0" loading="lazy"><figcaption>img_145.png</figcaption></figure><p>InnoDB存储引擎会根据搜索条件在该二级索引的叶子节点中找到name为蝉沐风的记录，但是二级索引中只记录了name、phone和主键id字段（谁让我们用的是SELECT *呢），因此InnoDB需要拿着主键id去主键索引中查找这一条完整的记录，这个过程叫做回表。</p><p>想一下，如果二级索引的叶子节点上有我们想要的所有数据，是不是就不需要回表了呢？是的，这就是覆盖索引。</p><p>举个例子，我们恰好只想搜索name、phone以及主键字段。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span>  phone <span class="token keyword">FROM</span> user_innodb <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&quot;蝉沐风&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用EXPLAIN查看一下语句的执行计划：</p><figure><img src="`+d+'" alt="img_146.png" tabindex="0" loading="lazy"><figcaption>img_146.png</figcaption></figure><p>可以看到Extra一列显示Using index，表示我们的查询列表以及搜索条件中只包含属于某个索引的列，也就是使用了覆盖索引，能够直接摒弃回表操作，大幅度提高查询效率。</p><p>小总结及问题：</p><p>1.select * from 表 where name = “蝉沐风” 与 select id,name,gender,phone from 表 where name = “蝉沐风” 效率一样吗？</p><p>答：一样；因为只是在name和phone建立了联合索引，根据上面的分析，<br> 可以看到二级索引中的树的情况，叶子节点中只有name、phone、id ;<br> 但是叶子节点中没有gender这个字段 ，<br> 想要获得这个gender字段，必须根据二级索引得到id，<br> 然后根据id去查主键索引得到id，name、gender、phone等所有字段。<br> select * 也是类似的。所以两个的效率是一样的。</p>',48)]))}const y=s(g,[["render",m],["__file","mysqlslow.html.vue"]]),_=JSON.parse('{"path":"/synthesis/mysqlslow.html","title":"MySQL慢查询","lang":"zh-CN","frontmatter":{"title":"MySQL慢查询","icon":"laptop-code","category":["设计综合"],"tag":["综合"],"description":"简介 MySQL服务器处理查询请求的整个过程： 客户端发送SQL强求给服务器 服务器检查是否可以在查询缓存中命中该SQL 服务器端进行SQL解析，预处理，再由优化器生成对应的执行计划 根据执行计划，调用存储引擎API来查询数据 将结果返回给客户端 查询性能低下最基本的原因是访问的数据太多。 一、如何优化慢查询？ 1，首先开启慢查询日志： long_qu...","head":[["meta",{"property":"og:url","content":"https://ujava.cn/synthesis/mysqlslow.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"MySQL慢查询"}],["meta",{"property":"og:description","content":"简介 MySQL服务器处理查询请求的整个过程： 客户端发送SQL强求给服务器 服务器检查是否可以在查询缓存中命中该SQL 服务器端进行SQL解析，预处理，再由优化器生成对应的执行计划 根据执行计划，调用存储引擎API来查询数据 将结果返回给客户端 查询性能低下最基本的原因是访问的数据太多。 一、如何优化慢查询？ 1，首先开启慢查询日志： long_qu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-15T11:10:22.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:tag","content":"综合"}],["meta",{"property":"article:modified_time","content":"2024-04-15T11:10:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL慢查询\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-15T11:10:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"一、如何优化慢查询？","slug":"一、如何优化慢查询","link":"#一、如何优化慢查询","children":[]},{"level":2,"title":"二、数据库优化的方法：","slug":"二、数据库优化的方法","link":"#二、数据库优化的方法","children":[]},{"level":2,"title":"三、MySQL查询优化（0其实这个概念比较偏小，上一道题的概念比较偏大）：","slug":"三、mysql查询优化-0其实这个概念比较偏小-上一道题的概念比较偏大","link":"#三、mysql查询优化-0其实这个概念比较偏小-上一道题的概念比较偏大","children":[]},{"level":2,"title":"四、为什么Like以%开头索引会失效 ？","slug":"四、为什么like以-开头索引会失效","link":"#四、为什么like以-开头索引会失效","children":[]},{"level":2,"title":"五、select * 为什么禁止使用？","slug":"五、select-为什么禁止使用","link":"#五、select-为什么禁止使用","children":[]}],"git":{"createdTime":1713179422000,"updatedTime":1713179422000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":1}]},"readingTime":{"minutes":6.15,"words":1846},"filePathRelative":"synthesis/mysqlslow.md","localizedDate":"2024年4月15日","excerpt":"<h2>简介</h2>\\n<p>MySQL服务器处理查询请求的整个过程：</p>\\n<ul>\\n<li>客户端发送SQL强求给服务器</li>\\n<li>服务器检查是否可以在查询缓存中命中该SQL</li>\\n<li>服务器端进行SQL解析，预处理，再由优化器生成对应的执行计划</li>\\n<li>根据执行计划，调用存储引擎API来查询数据</li>\\n<li>将结果返回给客户端<br>\\n查询性能低下最基本的原因是访问的数据太多。</li>\\n</ul>\\n<h2>一、如何优化慢查询？</h2>\\n<p>1，首先开启慢查询日志：</p>\\n<ul>\\n<li>long_query_time（多长时间视为慢查询）</li>\\n<li>slow_query_log（是否开启了慢查询日志，off表示未开启）</li>\\n<li>slow_query_log_file（慢查询日志存放的位置）</li>\\n</ul>","autoDesc":true}');export{y as comp,_ as data};
