import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as r,c as o,e}from"./app-KHN5AJ1P.js";const s={},l=e('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><strong>介绍</strong>：策略模式是一种行为型设计模式，它允许您定义一系列算法，将每个算法封装起来，并使它们可以互换使用。这种模式使得算法可以独立于使用它们的客户端而变化。在Java中，策略模式通常由一个接口和多个实现该接口的类组成。客户端将使用该接口来调用算法，而不是直接调用实现类。这样，客户端就可以在运行时选择不同的算法实现，而不需要修改代码。定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。简单理解，<strong>应该是对于同一个业务功能，在不同的场景需求下提供不同的实现逻辑，来达到动态切换业务算法，满足不同场景的目的</strong>。同时它也有另外的好处，即优化代码结构，使其脱离大量逻辑判断，对外只提供 Context上下文，让算法与实际业务代码解耦，对使用者屏蔽底层实现逻辑</p><p><strong>场景</strong>：</p><ul><li>1.业务代码需要根据场景不同，切换不同的实现逻辑</li><li>2.避免使用多重条件判断。</li></ul><p>策略模式在 JDK 中，ThreadPoolExecutor 类。TreeMap中</p><p><strong>优点</strong>：</p><ul><li>1.<strong>算法可以自由切换</strong>。</li><li>2.扩展可变部分，子类实现模板父类的某些细节，有助于模板父类的扩展</li><li>3.扩展性良好</li></ul><p><strong>不足</strong>：</p><ul><li>1.策略类会增多</li><li>2.<strong>所有策略类都需要对外暴露</strong></li></ul>',9),n=[l];function i(a,c){return r(),o("div",null,n)}const _=t(s,[["render",i],["__file","strategy.html.vue"]]);export{_ as default};
