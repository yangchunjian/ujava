import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as i,e as o}from"./app-a5e67f7b.js";const r={},s=o('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><strong>介绍</strong>：如果有多个对象有机会处理请求，<strong>责任链可使请求的发送者和接受者解耦，请求沿着责任链传递，直到有一个对象处理了它为止</strong></p><p><strong>场景</strong>：</p><ul><li>1.多个对象可以处理同一个请求，但具体由哪个对象处理则在运行时动态决定。</li><li><ol start="2"><li>在请求处理者不明确的情况下向对个对象中的一个提交一个请求。</li></ol></li><li><ol start="3"><li>需要<strong>动态处理一组对象处理请求</strong>。</li></ol></li></ul><p>常用在框架开发中，用来<strong>实现过滤器、拦截器</strong>功能，让框架的使用者在不需要修改框架源码的情况下，添加新的过滤、拦截功能。 Servlet 中的过滤器 Filter</p><p><strong>优点</strong>：</p><ul><li>1.<strong>解耦</strong> : 请求的 发送者 和 接收者 解耦 ; 接收者 是 请求的处理者 ;</li><li>2.<strong>动态组合</strong> : 责任链 可以 动态组合 , 使用配置 设置责任链的 顺序及 是否出现 ; <strong>可以随时对责任链排序 , 随时增加拆除责任链中的某个请求对象</strong> ;</li></ul><p><strong>不足</strong>：</p><ul><li>1.性能 : 如果 责任链 太长 , 或责任链中请求的 处理时间过长 , 可能会 影响性能 ;</li><li>2.个数 : 责任链 可能过多 ;</li></ul><p>责任链模式是一种行为设计模式，它允许将请求沿着处理链进行传递，直到有一个处理程序处理它为止。在Java中实现责任链模式通常需要以下几个步骤：</p><ul><li>定义一个处理器接口，该接口包含一个处理请求的方法。</li><li>创建一个抽象处理器类，它实现处理器接口，并包含一个指向下一个处理器的引用。</li><li>创建具体的处理器类，它们继承自抽象处理器类，并实现处理请求的方法。</li><li>在客户端代码中，创建处理器链，并将请求发送到链的第一个处理器。</li></ul>',11),n=[s];function e(a,g){return t(),i("div",null,n)}const _=l(r,[["render",e],["__file","responsibility.html.vue"]]);export{_ as default};
