import{_ as e,o as t,c as r,a as n}from"./app-oR4Dtrgs.js";const o={};function s(i,a){return t(),r("div",null,a[0]||(a[0]=[n('<h4 id="_1-pojo-plain-ordinary-java-object-在本规约中-pojo-专指只有-setter-getter-tostring-的简单类-包括do-dto-bo-vo-等。" tabindex="-1"><a class="header-anchor" href="#_1-pojo-plain-ordinary-java-object-在本规约中-pojo-专指只有-setter-getter-tostring-的简单类-包括do-dto-bo-vo-等。"><span>1. POJO（Plain Ordinary Java Object）：在本规约中，POJO 专指只有 setter / getter / toString 的简单类，包括DO / DTO / BO / VO 等。</span></a></h4><h4 id="_2-do-data-object-阿里巴巴专指数据库表一-一对应的-pojo-类。此对象与数据库表结构一-一对应-通过-dao-层向上传输数据源对象。" tabindex="-1"><a class="header-anchor" href="#_2-do-data-object-阿里巴巴专指数据库表一-一对应的-pojo-类。此对象与数据库表结构一-一对应-通过-dao-层向上传输数据源对象。"><span>2. DO（Data Object）：阿里巴巴专指数据库表一 一对应的 POJO 类。此对象与数据库表结构一 一对应，通过 DAO 层向上传输数据源对象。</span></a></h4><h4 id="_3-po-persistent-object-也指数据库表一-一对应的-pojo-类。此对象与数据库表结构一-一对应-通过-dao-层向上传输数据源对象。" tabindex="-1"><a class="header-anchor" href="#_3-po-persistent-object-也指数据库表一-一对应的-pojo-类。此对象与数据库表结构一-一对应-通过-dao-层向上传输数据源对象。"><span>3. PO（Persistent Object）：也指数据库表一 一对应的 POJO 类。此对象与数据库表结构一 一对应，通过 DAO 层向上传输数据源对象。</span></a></h4><h4 id="_4-dto-data-transfer-object-数据传输对象-service-或-manager-向外传输的对象。" tabindex="-1"><a class="header-anchor" href="#_4-dto-data-transfer-object-数据传输对象-service-或-manager-向外传输的对象。"><span>4. DTO（Data Transfer Object ）：数据传输对象，Service 或 Manager 向外传输的对象。</span></a></h4><h4 id="_5-bo-business-object-业务对象-可以由-service-层输出的封装业务逻辑的对象。" tabindex="-1"><a class="header-anchor" href="#_5-bo-business-object-业务对象-可以由-service-层输出的封装业务逻辑的对象。"><span>5. BO（Business Object）：业务对象，可以由 Service 层输出的封装业务逻辑的对象。</span></a></h4><h4 id="_6-query-数据查询对象-各层接收上层的查询请求。注意超过-2-个参数的查询封装-禁止使用-map-类来传输。" tabindex="-1"><a class="header-anchor" href="#_6-query-数据查询对象-各层接收上层的查询请求。注意超过-2-个参数的查询封装-禁止使用-map-类来传输。"><span>6. Query：数据查询对象，各层接收上层的查询请求。注意超过 2 个参数的查询封装，禁止使用 Map 类来传输。</span></a></h4><h4 id="_7-vo-view-object-显示层对象-通常是-web-向模板渲染引擎层传输的对象。" tabindex="-1"><a class="header-anchor" href="#_7-vo-view-object-显示层对象-通常是-web-向模板渲染引擎层传输的对象。"><span>7. VO（View Object）：显示层对象，通常是 Web 向模板渲染引擎层传输的对象。</span></a></h4><h4 id="_8-cas-compare-and-swap-解决多线程并行情况下使用锁造成性能损耗的一种机制-这是硬件实现的原子操作。" tabindex="-1"><a class="header-anchor" href="#_8-cas-compare-and-swap-解决多线程并行情况下使用锁造成性能损耗的一种机制-这是硬件实现的原子操作。"><span>8. CAS（Compare And Swap）：解决多线程并行情况下使用锁造成性能损耗的一种机制，这是硬件实现的原子操作。</span></a></h4><p>CAS 操作包含三个操作数：内存位置、预期原值和新值。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。</p><h4 id="_9-gav-groupid、artifactid、version-maven-坐标-是用来唯一标识-jar-包。" tabindex="-1"><a class="header-anchor" href="#_9-gav-groupid、artifactid、version-maven-坐标-是用来唯一标识-jar-包。"><span>9. GAV（GroupId、ArtifactId、Version）：Maven 坐标，是用来唯一标识 jar 包。</span></a></h4><h4 id="_10-oop-object-oriented-programming-本文泛指类、对象的编程处理方式。" tabindex="-1"><a class="header-anchor" href="#_10-oop-object-oriented-programming-本文泛指类、对象的编程处理方式。"><span>10. OOP（Object Oriented Programming）：本文泛指类、对象的编程处理方式。</span></a></h4><h4 id="_11-aqs-abstractqueuedsynchronizer-利用先进先出队列实现的底层同步工具类-它是很多上层同步实现类的基础-比如-reentrantlock、countdownlatch、semaphore-等-它们通过继承-aqs-实现其模版方法-然后将-aqs子类作为同步组件的内部类-通常命名为-sync。" tabindex="-1"><a class="header-anchor" href="#_11-aqs-abstractqueuedsynchronizer-利用先进先出队列实现的底层同步工具类-它是很多上层同步实现类的基础-比如-reentrantlock、countdownlatch、semaphore-等-它们通过继承-aqs-实现其模版方法-然后将-aqs子类作为同步组件的内部类-通常命名为-sync。"><span>11. AQS（AbstractQueuedSynchronizer）：利用先进先出队列实现的底层同步工具类，它是很多上层同步实现类的基础，比如：ReentrantLock、CountDownLatch、Semaphore 等，它们通过继承 AQS 实现其模版方法，然后将 AQS子类作为同步组件的内部类，通常命名为 Sync。</span></a></h4><h4 id="_12-orm-object-relation-mapping-对象关系映射-对象领域模型与底层数据之间的转换-本文泛指-ibatis-mybatis-等框架。" tabindex="-1"><a class="header-anchor" href="#_12-orm-object-relation-mapping-对象关系映射-对象领域模型与底层数据之间的转换-本文泛指-ibatis-mybatis-等框架。"><span>12. ORM（Object Relation Mapping）：对象关系映射，对象领域模型与底层数据之间的转换，本文泛指 iBATIS，mybatis 等框架。</span></a></h4><h4 id="_13-npe-java-lang-nullpointerexception-空指针异常。" tabindex="-1"><a class="header-anchor" href="#_13-npe-java-lang-nullpointerexception-空指针异常。"><span>13. NPE（java.lang.NullPointerException）：空指针异常。</span></a></h4><h4 id="_14-oom-out-of-memory-源于-java-lang-outofmemoryerror-当-jvm-没有足够的内存来为对象分配空间并且垃圾回收器也无法回收空间时-系统出现的严重状况。" tabindex="-1"><a class="header-anchor" href="#_14-oom-out-of-memory-源于-java-lang-outofmemoryerror-当-jvm-没有足够的内存来为对象分配空间并且垃圾回收器也无法回收空间时-系统出现的严重状况。"><span>14. OOM（Out Of Memory）：源于 java.lang.OutOfMemoryError，当 JVM 没有足够的内存来为对象分配空间并且垃圾回收器也无法回收空间时，系统出现的严重状况。</span></a></h4><h4 id="_15-gmt-greenwich-mean-time-指位于英国伦敦郊区的皇家格林尼治天文台的标准时间-因为本初子午线被定义在通过那里的经线。地球每天的自转是有些不规则的-而且正在缓慢减速-现在的标准时间是协调世界时-utc-它由原子钟提供。" tabindex="-1"><a class="header-anchor" href="#_15-gmt-greenwich-mean-time-指位于英国伦敦郊区的皇家格林尼治天文台的标准时间-因为本初子午线被定义在通过那里的经线。地球每天的自转是有些不规则的-而且正在缓慢减速-现在的标准时间是协调世界时-utc-它由原子钟提供。"><span>15. GMT（Greenwich Mean Time）：指位于英国伦敦郊区的皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。地球每天的自转是有些不规则的，而且正在缓慢减速，现在的标准时间是协调世界时（UTC），它由原子钟提供。</span></a></h4><h4 id="_16-一方库-本工程内部子项目模块依赖的库-jar-包-。" tabindex="-1"><a class="header-anchor" href="#_16-一方库-本工程内部子项目模块依赖的库-jar-包-。"><span>16. 一方库：本工程内部子项目模块依赖的库（jar 包）。</span></a></h4><h4 id="_17-二方库-公司内部发布到中央仓库-可供公司内部其它应用依赖的库-jar-包-。" tabindex="-1"><a class="header-anchor" href="#_17-二方库-公司内部发布到中央仓库-可供公司内部其它应用依赖的库-jar-包-。"><span>17. 二方库：公司内部发布到中央仓库，可供公司内部其它应用依赖的库（jar 包）。</span></a></h4><h4 id="_18-三方库-公司之外的开源库-jar-包-。" tabindex="-1"><a class="header-anchor" href="#_18-三方库-公司之外的开源库-jar-包-。"><span>18. 三方库：公司之外的开源库（jar 包）。</span></a></h4>',19)]))}const p=e(o,[["render",s],["__file","noun.html.vue"]]),h=JSON.parse('{"path":"/standard/noun.html","title":"规范名词","lang":"zh-CN","frontmatter":{"title":"规范名词","icon":"laptop-code","category":["设计规范"],"tag":["规范"],"description":"1. POJO（Plain Ordinary Java Object）：在本规约中，POJO 专指只有 setter / getter / toString 的简单类，包括DO / DTO / BO / VO 等。 2. DO（Data Object）：阿里巴巴专指数据库表一 一对应的 POJO 类。此对象与数据库表结构一 一对应，通过 DAO 层向上...","head":[["meta",{"property":"og:url","content":"https://ujava.cn/standard/noun.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"规范名词"}],["meta",{"property":"og:description","content":"1. POJO（Plain Ordinary Java Object）：在本规约中，POJO 专指只有 setter / getter / toString 的简单类，包括DO / DTO / BO / VO 等。 2. DO（Data Object）：阿里巴巴专指数据库表一 一对应的 POJO 类。此对象与数据库表结构一 一对应，通过 DAO 层向上..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-15T03:32:25.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:tag","content":"规范"}],["meta",{"property":"article:modified_time","content":"2024-04-15T03:32:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"规范名词\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-15T03:32:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[],"git":{"createdTime":1697622608000,"updatedTime":1713151945000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":6}]},"readingTime":{"minutes":2.41,"words":723},"filePathRelative":"standard/noun.md","localizedDate":"2023年10月18日","excerpt":"<h4>1. POJO（Plain Ordinary Java Object）：在本规约中，POJO 专指只有 setter / getter / toString 的简单类，包括DO / DTO / BO / VO 等。</h4>\\n<h4>2. DO（Data Object）：阿里巴巴专指数据库表一 一对应的 POJO 类。此对象与数据库表结构一 一对应，通过 DAO 层向上传输数据源对象。</h4>\\n<h4>3. PO（Persistent Object）：也指数据库表一 一对应的 POJO 类。此对象与数据库表结构一 一对应，通过 DAO 层向上传输数据源对象。</h4>\\n<h4>4. DTO（Data Transfer Object ）：数据传输对象，Service 或 Manager 向外传输的对象。</h4>","autoDesc":true}');export{p as comp,h as data};
