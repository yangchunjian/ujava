import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o,c as t,e as r}from"./app-34ed5cde.js";const i={},c=r('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><strong>介绍</strong>：建造者模式是一种创建型设计模式，它允许您通过一步一步地构建复杂对象来创建不同类型的对象。它使用一个建造者类来封装对象的创建过程并将其分解为多个简单的步骤。这使得您可以通过更改这些步骤来创建不同类型的对象。 <code>用来创建复杂对象</code>，可以通过设置不同的可选参数，“定制化”地创建不同的对象。与工厂模式不同的是，建造者的目的在于把复杂构造过程从不同对象展现中抽离出来，使得同样的构造工序可以展现出不同的产品对象。<code>建造者模式注重零部件的组装过程，而工厂方法模式更注重零部件的创建过程</code>，但两者可以结合使用</p><p><strong>场景</strong>：创建组装复杂对象。StringBuilder 类中提供了 append() 方法，这就是一种链式创建对象的方法，开放构造步骤，最后调用 toString() 方法就可以获得一个完整的对象。MyBatis 中 SqlSessionFactoryBuiler 类用到了建造者模式</p><p><strong>优点</strong>：</p><ul><li>1.各个具体的<code>建造者相互独立，有利于系统的扩展</code></li><li>2.客户端不必知道产品内部组成的细节，便于<code>控制细节风险</code></li></ul><p><strong>不足</strong>：</p><ul><li>1.产品的组成部分必须相同，这限制了其使用范围</li><li>2.如果产品的内部变化复杂，该模式会增加很多的建造者类</li></ul>',7),n=[c];function l(s,d){return o(),t("div",null,n)}const p=e(i,[["render",l],["__file","builder.html.vue"]]);export{p as default};
