import{_ as s,c as a,a as i,o as e}from"./app-C8q9BFR2.js";const l="/assets/img_179-DfC_q1v7.png",p="/assets/img_180-CUoievPL.png",t="/assets/img_181-C_HiXozt.png",r="/assets/img_182-DTMVM8mv.png",c="/assets/img_183-CBGiUgF-.png",d="/assets/img_184-CNn54dTv.png",o="/assets/img_185-B0ETGN3r.png",m="/assets/img_186-CJ_6vIJN.png",g="/assets/img_187-BGFYVOCx.png",v="/assets/img_188-3taCHeMd.png",b="/assets/img_189-C54Se4dN.png",u="/assets/img_190-4YHp6GGb.png",h="/assets/img_191-CR8XdXn0.png",_={};function x(k,n){return e(),a("div",null,n[0]||(n[0]=[i(`<h2 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念"><span>基础概念</span></a></h2><p>概述 首先我们要知道什么是XXL-JOB？</p><p>官方简介：XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用</p><p>XXL-JOB的有点特性：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> 1、简单：支持通过Web页面对任务进行CRUD操作，操作简单，一分钟上手；</span></span>
<span class="line"><span> 2、动态：支持动态修改任务状态、启动/停止任务，以及终止运行中任务，即时生效；</span></span>
<span class="line"><span> 3、调度中心HA（中心式）：调度采用中心式设计，“调度中心”自研调度组件并支持集群部署，可保证调度中心HA；</span></span>
<span class="line"><span> 4、执行器HA（分布式）：任务分布式执行，任务&quot;执行器&quot;支持集群部署，可保证任务执行HA；</span></span>
<span class="line"><span> 5、注册中心: 执行器会周期性自动注册任务, 调度中心将会自动发现注册的任务并触发执行。同时，也支持手动录入执行器地址；</span></span>
<span class="line"><span> 6、弹性扩容缩容：一旦有新执行器机器上线或者下线，下次调度时将会重新分配任务；</span></span>
<span class="line"><span> 7、路由策略：执行器集群部署时提供丰富的路由策略，包括：第一个、最后一个、轮询、随机、一致性HASH、最不经常使用、最近最久未使用、故障转移、忙碌转移等；</span></span>
<span class="line"><span> 8、故障转移：任务路由策略选择&quot;故障转移&quot;情况下，如果执行器集群中某一台机器故障，将会自动Failover切换到一台正常的执行器发送调度请求。</span></span>
<span class="line"><span> 9、阻塞处理策略：调度过于密集执行器来不及处理时的处理策略，策略包括：单机串行（默认）、丢弃后续调度、覆盖之前调度；</span></span>
<span class="line"><span> 10、任务超时控制：支持自定义任务超时时间，任务运行超时将会主动中断任务；</span></span>
<span class="line"><span> 11、任务失败重试：支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；其中分片任务支持分片粒度的失败重试；</span></span>
<span class="line"><span> 12、任务失败告警；默认提供邮件方式失败告警，同时预留扩展接口，可方便的扩展短信、钉钉等告警方式；</span></span>
<span class="line"><span> 13、分片广播任务：执行器集群部署时，任务路由策略选择&quot;分片广播&quot;情况下，一次任务调度将会广播触发集群中所有执行器执行一次任务，可根据分片参数开发分片任务；</span></span>
<span class="line"><span> 14、动态分片：分片广播任务以执行器为维度进行分片，支持动态扩容执行器集群从而动态增加分片数量，协同进行业务处理；在进行大数据量业务操作时可显著提升任务处理能力和速度。</span></span>
<span class="line"><span> 15、事件触发：除了&quot;Cron方式&quot;和&quot;任务依赖方式&quot;触发任务执行之外，支持基于事件的触发任务方式。调度中心提供触发任务单次执行的API服务，可根据业务事件灵活触发</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>…</p><p>是目前主流的分布式任务调度平台，许多公司的产品业务都有XXL-JOB的接入</p><p>使用 首先从GitHub上面将项目clone下来，如果网络问题导致速度慢也可以从Gitee上面拉取</p><ul><li><p>GitHub地址：<a href="https://github.com/xuxueli/xxl-job" target="_blank" rel="noopener noreferrer">https://github.com/xuxueli/xxl-job</a></p></li><li><p>Gitee地址：<a href="https://gitee.com/xuxueli0323/xxl-job" target="_blank" rel="noopener noreferrer">https://gitee.com/xuxueli0323/xxl-job</a></p></li></ul><p>我从GitHub上面进行克隆<br><img src="`+l+'" alt="img_179.png" loading="lazy"></p><p>下载好之后将压缩包解压，然后通过IDEA打开，将Maven编译好后项目结构如下<br><img src="'+p+'" alt="img_180.png" loading="lazy"></p><p>然后运行自带的tables_xxl_job.sql文件，在Navcation中去运行，生成需要的表<br><img src="'+t+'" alt="img_181.png" loading="lazy"></p><p>得到需要的基础表<br><img src="'+r+'" alt="img_182.png" loading="lazy"><br> 打开xxl-job-admin模块，在application.properties中进行后台的配置<br><img src="'+c+'" alt="img_183.png" loading="lazy"></p><figure><img src="'+d+`" alt="img_184.png" tabindex="0" loading="lazy"><figcaption>img_184.png</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>注意在数据库地址哪里加上时区属性，否则乱码</span></span>
<span class="line"><span></span></span>
<span class="line"><span>spring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl_job?Unicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>然后我们启动XxlJobAdminApplication类，访问<a href="http://localhost:8080/xxl-job-admin" target="_blank" rel="noopener noreferrer">http://localhost:8080/xxl-job-admin</a></li><li>默认账户admn，密码123456</li></ul><figure><img src="`+o+'" alt="img_185.png" tabindex="0" loading="lazy"><figcaption>img_185.png</figcaption></figure><p>进来就可以看到主界面了<br><img src="'+m+'" alt="img_186.png" loading="lazy"></p><p>定位到springboot模块下的jobhandler层下面<br><img src="'+g+`" alt="img_187.png" loading="lazy"></p><p>然后我们编写一个自己的定时任务来测试</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>package com.xxl.job.executor.service.jobhandler;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import com.xxl.job.core.biz.model.ReturnT;</span></span>
<span class="line"><span>import com.xxl.job.core.handler.IJobHandler;</span></span>
<span class="line"><span>import com.xxl.job.core.handler.annotation.JobHandler;</span></span>
<span class="line"><span>import org.springframework.stereotype.Component;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author fueen</span></span>
<span class="line"><span> * 编写自己的定时任务Handler</span></span>
<span class="line"><span> * 继承IJobHandler</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@JobHandler(value = &quot;MyJobHandler&quot;)</span></span>
<span class="line"><span>@Component</span></span>
<span class="line"><span>public class MyJobHandler extends IJobHandler {</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 重写execute方法，里面执行相应的功能</span></span>
<span class="line"><span>     * @param param</span></span>
<span class="line"><span>     * @return</span></span>
<span class="line"><span>     * @throws Exception</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public ReturnT&lt;String&gt; execute(String param) throws Exception {</span></span>
<span class="line"><span>        System.out.println(&quot;我们不能失去信仰&quot;);</span></span>
<span class="line"><span>        return SUCCESS;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在任务管理里面新增任务<br><img src="`+v+'" alt="img_188.png" loading="lazy"></p><figure><img src="'+b+'" alt="img_189.png" tabindex="0" loading="lazy"><figcaption>img_189.png</figcaption></figure><p>然后在找到刚刚添加的任务，点击操作里面的启动<br><img src="'+u+'" alt="img_190.png" loading="lazy"></p><p>可以看到结果，刚刚编写的代码已经被执行了<br><img src="'+h+`" alt="img_191.png" loading="lazy"></p><p>关于XXL-JOB的基本使用就到这里了，如果在项目中去集成也很简单</p><p>在项目中引入依赖</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>  &lt;groupId&gt;com.xuxueli&lt;/groupId&gt;</span></span>
<span class="line"><span>  &lt;artifactId&gt;xxl-job-core&lt;/artifactId&gt;</span></span>
<span class="line"><span>  &lt;version&gt;2.0.1&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将xxl-job-executor-sample-springboot这个模块下的XxlJobConfig复制一份到项目中，然后将相关配置设置好即可</p>`,29)]))}const X=s(_,[["render",x],["__file","xxljob.html.vue"]]),f=JSON.parse('{"path":"/assembly/xxljob.html","title":"组件XXL-JOB","lang":"zh-CN","frontmatter":{"title":"组件XXL-JOB","icon":"laptop-code","category":["设计组件"],"tag":["组件"],"description":"基础概念 概述 首先我们要知道什么是XXL-JOB？ 官方简介：XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用 XXL-JOB的有点特性： … 是目前主流的分布式任务调度平台，许多公司的产品业务都有XXL-JOB的接入 使用 首先从GitHub上面将项目clo...","head":[["meta",{"property":"og:url","content":"https://ujava.cn/assembly/xxljob.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"组件XXL-JOB"}],["meta",{"property":"og:description","content":"基础概念 概述 首先我们要知道什么是XXL-JOB？ 官方简介：XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用 XXL-JOB的有点特性： … 是目前主流的分布式任务调度平台，许多公司的产品业务都有XXL-JOB的接入 使用 首先从GitHub上面将项目clo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-29T14:47:37.000Z"}],["meta",{"property":"article:tag","content":"组件"}],["meta",{"property":"article:modified_time","content":"2024-09-29T14:47:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组件XXL-JOB\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-29T14:47:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"基础概念","slug":"基础概念","link":"#基础概念","children":[]}],"git":{"createdTime":1727621000000,"updatedTime":1727621257000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":2}]},"readingTime":{"minutes":4.46,"words":1338},"filePathRelative":"assembly/xxljob.md","localizedDate":"2024年9月29日","excerpt":"<h2>基础概念</h2>\\n<p>概述  首先我们要知道什么是XXL-JOB？</p>\\n<p>官方简介：XXL-JOB是一个分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用</p>\\n<p>XXL-JOB的有点特性：</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span> 1、简单：支持通过Web页面对任务进行CRUD操作，操作简单，一分钟上手；</span></span>\\n<span class=\\"line\\"><span> 2、动态：支持动态修改任务状态、启动/停止任务，以及终止运行中任务，即时生效；</span></span>\\n<span class=\\"line\\"><span> 3、调度中心HA（中心式）：调度采用中心式设计，“调度中心”自研调度组件并支持集群部署，可保证调度中心HA；</span></span>\\n<span class=\\"line\\"><span> 4、执行器HA（分布式）：任务分布式执行，任务\\"执行器\\"支持集群部署，可保证任务执行HA；</span></span>\\n<span class=\\"line\\"><span> 5、注册中心: 执行器会周期性自动注册任务, 调度中心将会自动发现注册的任务并触发执行。同时，也支持手动录入执行器地址；</span></span>\\n<span class=\\"line\\"><span> 6、弹性扩容缩容：一旦有新执行器机器上线或者下线，下次调度时将会重新分配任务；</span></span>\\n<span class=\\"line\\"><span> 7、路由策略：执行器集群部署时提供丰富的路由策略，包括：第一个、最后一个、轮询、随机、一致性HASH、最不经常使用、最近最久未使用、故障转移、忙碌转移等；</span></span>\\n<span class=\\"line\\"><span> 8、故障转移：任务路由策略选择\\"故障转移\\"情况下，如果执行器集群中某一台机器故障，将会自动Failover切换到一台正常的执行器发送调度请求。</span></span>\\n<span class=\\"line\\"><span> 9、阻塞处理策略：调度过于密集执行器来不及处理时的处理策略，策略包括：单机串行（默认）、丢弃后续调度、覆盖之前调度；</span></span>\\n<span class=\\"line\\"><span> 10、任务超时控制：支持自定义任务超时时间，任务运行超时将会主动中断任务；</span></span>\\n<span class=\\"line\\"><span> 11、任务失败重试：支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；其中分片任务支持分片粒度的失败重试；</span></span>\\n<span class=\\"line\\"><span> 12、任务失败告警；默认提供邮件方式失败告警，同时预留扩展接口，可方便的扩展短信、钉钉等告警方式；</span></span>\\n<span class=\\"line\\"><span> 13、分片广播任务：执行器集群部署时，任务路由策略选择\\"分片广播\\"情况下，一次任务调度将会广播触发集群中所有执行器执行一次任务，可根据分片参数开发分片任务；</span></span>\\n<span class=\\"line\\"><span> 14、动态分片：分片广播任务以执行器为维度进行分片，支持动态扩容执行器集群从而动态增加分片数量，协同进行业务处理；在进行大数据量业务操作时可显著提升任务处理能力和速度。</span></span>\\n<span class=\\"line\\"><span> 15、事件触发：除了\\"Cron方式\\"和\\"任务依赖方式\\"触发任务执行之外，支持基于事件的触发任务方式。调度中心提供触发任务单次执行的API服务，可根据业务事件灵活触发</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{X as comp,f as data};
