const t=JSON.parse('{"key":"v-18dc7548","path":"/principle/callback.html","title":"回调","lang":"zh-CN","frontmatter":{"title":"回调","icon":"laptop-code","category":["设计原理"],"description":"简介 回调是强大的编程模式之一。 它可以实现调用反转，在子函数中调用高层的函数（通常是由高层函数来调用底层的子函数）， 获得更灵活的调用关系。通常用于框架、代码复用等场合。 在这里， 函数可以作为参数传入子函数，可以由子函数进行调用和返回。回调函数可以用 Java 的接口， 或者 C/C++ 的函数指针来实现， 而在 Javascript / LISP 中， 函数是一种通用对象，具有很大的灵活性。 动机 调用者 A 想要调用函数 B， 但并不知道具体的 B 应该是哪一个，由 A 的调用者将 函数B 作为参数传入给调用者 A。 函数B 称为回调函数， B 函数的调用称为回调。","head":[["meta",{"property":"og:url","content":"https://ujava.cn/principle/callback.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"回调"}],["meta",{"property":"og:description","content":"简介 回调是强大的编程模式之一。 它可以实现调用反转，在子函数中调用高层的函数（通常是由高层函数来调用底层的子函数）， 获得更灵活的调用关系。通常用于框架、代码复用等场合。 在这里， 函数可以作为参数传入子函数，可以由子函数进行调用和返回。回调函数可以用 Java 的接口， 或者 C/C++ 的函数指针来实现， 而在 Javascript / LISP 中， 函数是一种通用对象，具有很大的灵活性。 动机 调用者 A 想要调用函数 B， 但并不知道具体的 B 应该是哪一个，由 A 的调用者将 函数B 作为参数传入给调用者 A。 函数B 称为回调函数， B 函数的调用称为回调。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-15T03:25:51.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:modified_time","content":"2024-04-15T03:25:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"回调\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-15T03:25:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"动机","slug":"动机","link":"#动机","children":[]},{"level":2,"title":"缘起","slug":"缘起","link":"#缘起","children":[]},{"level":2,"title":"禁忌","slug":"禁忌","link":"#禁忌","children":[]}],"git":{"createdTime":1699527103000,"updatedTime":1713151551000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":4}]},"readingTime":{"minutes":2.87,"words":860},"filePathRelative":"principle/callback.md","localizedDate":"2023年11月9日","excerpt":"<h2> 简介</h2>\\n<p>回调是强大的编程模式之一。 它可以实现调用反转，在子函数中调用高层的函数（通常是由高层函数来调用底层的子函数），<br>\\n获得更灵活的调用关系。通常用于框架、代码复用等场合。 在这里， 函数可以作为参数传入子函数，可以由子函数进行调用和返回。回调函数可以用<br>\\nJava 的接口， 或者 C/C++ 的函数指针来实现， 而在 Javascript / LISP 中， 函数是一种通用对象，具有很大的灵活性。</p>\\n<h2> 动机</h2>\\n<p>调用者 A 想要调用函数 B， 但并不知道具体的 B 应该是哪一个，由 A 的调用者将 函数B 作为参数传入给调用者 A。 函数B 称为回调函数，<br>\\nB 函数的调用称为回调。</p>","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}');export{t as data};
