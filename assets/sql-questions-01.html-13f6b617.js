import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as e,c as o,a as t,b as s,d as c,e as r}from"./app-8a5cd404.js";const p={},l={href:"https://www.nowcoder.com/exam/oj?page=1&tab=SQL%E7%AF%87&topicId=298",target:"_blank",rel:"noopener noreferrer"},i=r(`<h2 id="检索数据" tabindex="-1"><a class="header-anchor" href="#检索数据" aria-hidden="true">#</a> 检索数据</h2><p><code>SELECT</code> 用于从数据库中查询数据。</p><h3 id="从-customers-表中检索所有的-id" tabindex="-1"><a class="header-anchor" href="#从-customers-表中检索所有的-id" aria-hidden="true">#</a> 从 Customers 表中检索所有的 ID</h3><p>现有表 <code>Customers</code> 如下：</p><table><thead><tr><th>cust_id</th></tr></thead><tbody><tr><td>A</td></tr><tr><td>B</td></tr><tr><td>C</td></tr></tbody></table><p>编写 SQL 语句，从 <code>Customers</code> 表中检索所有的 <code>cust_id</code>。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_id
<span class="token keyword">FROM</span> Customers
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检索并列出已订购产品的清单" tabindex="-1"><a class="header-anchor" href="#检索并列出已订购产品的清单" aria-hidden="true">#</a> 检索并列出已订购产品的清单</h3><p>表 <code>OrderItems</code> 含有非空的列 <code>prod_id</code> 代表商品 id，包含了所有已订购的商品（有些已被订购多次）。</p><table><thead><tr><th>prod_id</th></tr></thead><tbody><tr><td>a1</td></tr><tr><td>a2</td></tr><tr><td>a3</td></tr><tr><td>a4</td></tr><tr><td>a5</td></tr><tr><td>a6</td></tr><tr><td>a7</td></tr></tbody></table><p>编写 SQL 语句，检索并列出所有已订购商品（<code>prod_id</code>）的去重后的清单。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> prod_id
<span class="token keyword">FROM</span> OrderItems
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>知识点：<code>DISTINCT</code> 用于返回列中的唯一不同值。</p><h3 id="检索所有列" tabindex="-1"><a class="header-anchor" href="#检索所有列" aria-hidden="true">#</a> 检索所有列</h3><p>现在有 <code>Customers</code> 表（表中含有列 <code>cust_id</code> 代表客户 id，<code>cust_name</code> 代表客户姓名）</p><table><thead><tr><th>cust_id</th><th>cust_name</th></tr></thead><tbody><tr><td>a1</td><td>andy</td></tr><tr><td>a2</td><td>ben</td></tr><tr><td>a3</td><td>tony</td></tr><tr><td>a4</td><td>tom</td></tr><tr><td>a5</td><td>an</td></tr><tr><td>a6</td><td>lee</td></tr><tr><td>a7</td><td>hex</td></tr></tbody></table><p>需要编写 SQL 语句，检索所有列。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span> cust_name
<span class="token keyword">FROM</span> Customers
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="排序检索数据" tabindex="-1"><a class="header-anchor" href="#排序检索数据" aria-hidden="true">#</a> 排序检索数据</h2><p><code>ORDER BY</code> 用于对结果集按照一个列或者多个列进行排序。默认按照升序对记录进行排序，如果需要按照降序对记录进行排序，可以使用 <code>DESC</code> 关键字。</p><h3 id="检索顾客名称并且排序" tabindex="-1"><a class="header-anchor" href="#检索顾客名称并且排序" aria-hidden="true">#</a> 检索顾客名称并且排序</h3><p>有表 <code>Customers</code>，<code>cust_id</code> 代表客户 id，<code>cust_name</code> 代表客户姓名。</p><table><thead><tr><th>cust_id</th><th>cust_name</th></tr></thead><tbody><tr><td>a1</td><td>andy</td></tr><tr><td>a2</td><td>ben</td></tr><tr><td>a3</td><td>tony</td></tr><tr><td>a4</td><td>tom</td></tr><tr><td>a5</td><td>an</td></tr><tr><td>a6</td><td>lee</td></tr><tr><td>a7</td><td>hex</td></tr></tbody></table><p>从 <code>Customers</code> 中检索所有的顾客名称（<code>cust_name</code>），并按从 Z 到 A 的顺序显示结果。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name
<span class="token keyword">FROM</span> Customers
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cust_name <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对顾客-id-和日期排序" tabindex="-1"><a class="header-anchor" href="#对顾客-id-和日期排序" aria-hidden="true">#</a> 对顾客 ID 和日期排序</h3><p>有 <code>Orders</code> 表：</p><table><thead><tr><th>cust_id</th><th>order_num</th><th>order_date</th></tr></thead><tbody><tr><td>andy</td><td>aaaa</td><td>2021-01-01 00:00:00</td></tr><tr><td>andy</td><td>bbbb</td><td>2021-01-01 12:00:00</td></tr><tr><td>bob</td><td>cccc</td><td>2021-01-10 12:00:00</td></tr><tr><td>dick</td><td>dddd</td><td>2021-01-11 00:00:00</td></tr></tbody></table><p>编写 SQL 语句，从 <code>Orders</code> 表中检索顾客 ID（<code>cust_id</code>）和订单号（<code>order_num</code>），并先按顾客 ID 对结果进行排序，再按订单日期倒序排列。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 根据列名排序</span>
<span class="token comment"># 注意：是 order_date 降序，而不是 order_num</span>
<span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span> order_num
<span class="token keyword">FROM</span> Orders
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cust_id<span class="token punctuation">,</span>order_date <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>知识点：<code>order by</code> 对多列排序的时候，先排序的列放前面，后排序的列放后面。并且，不同的列可以有不同的排序规则。</p><h3 id="按照数量和价格排序" tabindex="-1"><a class="header-anchor" href="#按照数量和价格排序" aria-hidden="true">#</a> 按照数量和价格排序</h3><p>假设有一个 <code>OrderItems</code> 表：</p><table><thead><tr><th>quantity</th><th>item_price</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>10</td><td>1003</td></tr><tr><td>2</td><td>500</td></tr></tbody></table><p>编写 SQL 语句，显示 <code>OrderItems</code> 表中的数量（<code>quantity</code>）和价格（<code>item_price</code>），并按数量由多到少、价格由高到低排序。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> quantity<span class="token punctuation">,</span> item_price
<span class="token keyword">FROM</span> OrderItems
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> quantity <span class="token keyword">DESC</span><span class="token punctuation">,</span>item_price <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检查-sql-语句" tabindex="-1"><a class="header-anchor" href="#检查-sql-语句" aria-hidden="true">#</a> 检查 SQL 语句</h3><p>有 <code>Vendors</code> 表：</p><table><thead><tr><th>vend_name</th></tr></thead><tbody><tr><td>海底捞</td></tr><tr><td>小龙坎</td></tr><tr><td>大龙燚</td></tr></tbody></table><p>下面的 SQL 语句有问题吗？尝试将它改正确，使之能够正确运行，并且返回结果根据<code>vend_name</code> 逆序排列。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_name<span class="token punctuation">,</span>
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> vend_name <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改正后：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_name
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>知识点：</p><ul><li>逗号作用是用来隔开列与列之间的。</li><li>ORDER BY 是有 BY 的，需要撰写完整，且位置正确。</li></ul><h2 id="过滤数据" tabindex="-1"><a class="header-anchor" href="#过滤数据" aria-hidden="true">#</a> 过滤数据</h2><p><code>WHERE</code> 可以过滤返回的数据。</p><p>下面的运算符可以在 <code>WHERE</code> 子句中使用：</p><table><thead><tr><th style="text-align:left;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">=</td><td style="text-align:left;">等于</td></tr><tr><td style="text-align:left;">&lt;&gt;</td><td style="text-align:left;">不等于。 <strong>注释：</strong> 在 SQL 的一些版本中，该操作符可被写成 !=</td></tr><tr><td style="text-align:left;">&gt;</td><td style="text-align:left;">大于</td></tr><tr><td style="text-align:left;">&lt;</td><td style="text-align:left;">小于</td></tr><tr><td style="text-align:left;">&gt;=</td><td style="text-align:left;">大于等于</td></tr><tr><td style="text-align:left;">&lt;=</td><td style="text-align:left;">小于等于</td></tr><tr><td style="text-align:left;">BETWEEN</td><td style="text-align:left;">在某个范围内</td></tr><tr><td style="text-align:left;">LIKE</td><td style="text-align:left;">搜索某种模式</td></tr><tr><td style="text-align:left;">IN</td><td style="text-align:left;">指定针对某个列的多个可能值</td></tr></tbody></table><h3 id="返回固定价格的产品" tabindex="-1"><a class="header-anchor" href="#返回固定价格的产品" aria-hidden="true">#</a> 返回固定价格的产品</h3><p>有表 <code>Products</code>：</p><table><thead><tr><th>prod_id</th><th>prod_name</th><th>prod_price</th></tr></thead><tbody><tr><td>a0018</td><td>sockets</td><td>9.49</td></tr><tr><td>a0019</td><td>iphone13</td><td>600</td></tr><tr><td>b0018</td><td>gucci t-shirts</td><td>1000</td></tr></tbody></table><p>【问题】从 <code>Products</code> 表中检索产品 ID（<code>prod_id</code>）和产品名称（<code>prod_name</code>），只返回价格为 9.49 美元的产品。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_price <span class="token operator">=</span> <span class="token number">9.49</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回更高价格的产品" tabindex="-1"><a class="header-anchor" href="#返回更高价格的产品" aria-hidden="true">#</a> 返回更高价格的产品</h3><p>有表 <code>Products</code>：</p><table><thead><tr><th>prod_id</th><th>prod_name</th><th>prod_price</th></tr></thead><tbody><tr><td>a0018</td><td>sockets</td><td>9.49</td></tr><tr><td>a0019</td><td>iphone13</td><td>600</td></tr><tr><td>b0019</td><td>gucci t-shirts</td><td>1000</td></tr></tbody></table><p>【问题】编写 SQL 语句，从 <code>Products</code> 表中检索产品 ID（<code>prod_id</code>）和产品名称（<code>prod_name</code>），只返回价格为 9 美元或更高的产品。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_price <span class="token operator">&gt;=</span> <span class="token number">9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回产品并且按照价格排序" tabindex="-1"><a class="header-anchor" href="#返回产品并且按照价格排序" aria-hidden="true">#</a> 返回产品并且按照价格排序</h3><p>有表 <code>Products</code>：</p><table><thead><tr><th>prod_id</th><th>prod_name</th><th>prod_price</th></tr></thead><tbody><tr><td>a0011</td><td>egg</td><td>3</td></tr><tr><td>a0019</td><td>sockets</td><td>4</td></tr><tr><td>b0019</td><td>coffee</td><td>15</td></tr></tbody></table><p>【问题】编写 SQL 语句，返回 <code>Products</code> 表中所有价格在 3 美元到 6 美元之间的产品的名称（<code>prod_name</code>）和价格（<code>prod_price</code>），然后按价格对结果进行排序。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_price <span class="token operator">BETWEEN</span> <span class="token number">3</span> <span class="token operator">AND</span> <span class="token number">6</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_price

<span class="token comment"># 或者</span>
<span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_price <span class="token operator">&gt;=</span> <span class="token number">3</span> <span class="token operator">AND</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">6</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_price
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回更多的产品" tabindex="-1"><a class="header-anchor" href="#返回更多的产品" aria-hidden="true">#</a> 返回更多的产品</h3><p><code>OrderItems</code> 表含有：订单号 <code>order_num</code>，<code>quantity</code>产品数量</p><table><thead><tr><th>order_num</th><th>quantity</th></tr></thead><tbody><tr><td>a1</td><td>105</td></tr><tr><td>a2</td><td>1100</td></tr><tr><td>a2</td><td>200</td></tr><tr><td>a4</td><td>1121</td></tr><tr><td>a5</td><td>10</td></tr><tr><td>a2</td><td>19</td></tr><tr><td>a7</td><td>5</td></tr></tbody></table><p>【问题】从 <code>OrderItems</code> 表中检索出所有不同且不重复的订单号（<code>order_num</code>），其中每个订单都要包含 100 个或更多的产品。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_num
<span class="token keyword">FROM</span> OrderItems
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> order_num
<span class="token keyword">HAVING</span> <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="高级数据过滤" tabindex="-1"><a class="header-anchor" href="#高级数据过滤" aria-hidden="true">#</a> 高级数据过滤</h2><p><code>AND</code> 和 <code>OR</code> 运算符用于基于一个以上的条件对记录进行过滤，两者可以结合使用。<code>AND</code> 必须 2 个条件都成立，<code>OR</code>只要 2 个条件中的一个成立即可。</p><h3 id="检索供应商名称" tabindex="-1"><a class="header-anchor" href="#检索供应商名称" aria-hidden="true">#</a> 检索供应商名称</h3><p><code>Vendors</code> 表有字段供应商名称（<code>vend_name</code>）、供应商国家（<code>vend_country</code>）、供应商州（<code>vend_state</code>）</p><table><thead><tr><th>vend_name</th><th>vend_country</th><th>vend_state</th></tr></thead><tbody><tr><td>apple</td><td>USA</td><td>CA</td></tr><tr><td>vivo</td><td>CNA</td><td>shenzhen</td></tr><tr><td>huawei</td><td>CNA</td><td>xian</td></tr></tbody></table><p>【问题】编写 SQL 语句，从 <code>Vendors</code> 表中检索供应商名称（<code>vend_name</code>），仅返回加利福尼亚州的供应商（这需要按国家[USA]和州[CA]进行过滤，没准其他国家也存在一个 CA）</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_name
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">WHERE</span> vend_country <span class="token operator">=</span> <span class="token string">&#39;USA&#39;</span> <span class="token operator">AND</span> vend_state <span class="token operator">=</span> <span class="token string">&#39;CA&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检索并列出已订购产品的清单-1" tabindex="-1"><a class="header-anchor" href="#检索并列出已订购产品的清单-1" aria-hidden="true">#</a> 检索并列出已订购产品的清单</h3><p><code>OrderItems</code> 表包含了所有已订购的产品（有些已被订购多次）。</p><table><thead><tr><th>prod_id</th><th>order_num</th><th>quantity</th></tr></thead><tbody><tr><td>BR01</td><td>a1</td><td>105</td></tr><tr><td>BR02</td><td>a2</td><td>1100</td></tr><tr><td>BR02</td><td>a2</td><td>200</td></tr><tr><td>BR03</td><td>a4</td><td>1121</td></tr><tr><td>BR017</td><td>a5</td><td>10</td></tr><tr><td>BR02</td><td>a2</td><td>19</td></tr><tr><td>BR017</td><td>a7</td><td>5</td></tr></tbody></table><p>【问题】编写 SQL 语句，查找所有订购了数量至少 100 个的 <code>BR01</code>、<code>BR02</code> 或 <code>BR03</code> 的订单。你需要返回 <code>OrderItems</code> 表的订单号（<code>order_num</code>）、产品 ID（<code>prod_id</code>）和数量（<code>quantity</code>），并按产品 ID 和数量进行过滤。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span> prod_id<span class="token punctuation">,</span> quantity
<span class="token keyword">FROM</span> OrderItems
<span class="token keyword">WHERE</span> prod_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">&#39;BR01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;BR02&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;BR03&#39;</span><span class="token punctuation">)</span> <span class="token operator">AND</span> quantity <span class="token operator">&gt;=</span> <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回所有价格在-3-美元到-6-美元之间的产品的名称和价格" tabindex="-1"><a class="header-anchor" href="#返回所有价格在-3-美元到-6-美元之间的产品的名称和价格" aria-hidden="true">#</a> 返回所有价格在 3 美元到 6 美元之间的产品的名称和价格</h3><p>有表 <code>Products</code>：</p><table><thead><tr><th>prod_id</th><th>prod_name</th><th>prod_price</th></tr></thead><tbody><tr><td>a0011</td><td>egg</td><td>3</td></tr><tr><td>a0019</td><td>sockets</td><td>4</td></tr><tr><td>b0019</td><td>coffee</td><td>15</td></tr></tbody></table><p>【问题】编写 SQL 语句，返回所有价格在 3 美元到 6 美元之间的产品的名称（<code>prod_name</code>）和价格（<code>prod_price</code>），使用 AND 操作符，然后按价格对结果进行升序排序。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_price
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_price <span class="token operator">&gt;=</span> <span class="token number">3</span> <span class="token operator">and</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">6</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_price
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检查-sql-语句-1" tabindex="-1"><a class="header-anchor" href="#检查-sql-语句-1" aria-hidden="true">#</a> 检查 SQL 语句</h3><p>供应商表 <code>Vendors</code> 有字段供应商名称 <code>vend_name</code>、供应商国家 <code>vend_country</code>、供应商省份 <code>vend_state</code></p><table><thead><tr><th>vend_name</th><th>vend_country</th><th>vend_state</th></tr></thead><tbody><tr><td>apple</td><td>USA</td><td>CA</td></tr><tr><td>vivo</td><td>CNA</td><td>shenzhen</td></tr><tr><td>huawei</td><td>CNA</td><td>xian</td></tr></tbody></table><p>【问题】修改正确下面 sql，使之正确返回。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_name
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name
<span class="token keyword">WHERE</span> vend_country <span class="token operator">=</span> <span class="token string">&#39;USA&#39;</span> <span class="token operator">AND</span> vend_state <span class="token operator">=</span> <span class="token string">&#39;CA&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改后：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_name
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">WHERE</span> vend_country <span class="token operator">=</span> <span class="token string">&#39;USA&#39;</span> <span class="token operator">AND</span> vend_state <span class="token operator">=</span> <span class="token string">&#39;CA&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ORDER BY</code> 语句必须放在 <code>WHERE</code> 之后。</p><h2 id="用通配符进行过滤" tabindex="-1"><a class="header-anchor" href="#用通配符进行过滤" aria-hidden="true">#</a> 用通配符进行过滤</h2><p>SQL 通配符必须与 <code>LIKE</code> 运算符一起使用</p><p>在 SQL 中，可使用以下通配符：</p><table><thead><tr><th style="text-align:left;">通配符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>%</code></td><td style="text-align:left;">代表零个或多个字符</td></tr><tr><td style="text-align:left;"><code>_</code></td><td style="text-align:left;">仅替代一个字符</td></tr><tr><td style="text-align:left;"><code>[charlist]</code></td><td style="text-align:left;">字符列中的任何单一字符</td></tr><tr><td style="text-align:left;"><code>[^charlist]</code> 或者 <code>[!charlist]</code></td><td style="text-align:left;">不在字符列中的任何单一字符</td></tr></tbody></table><h3 id="检索产品名称和描述-一" tabindex="-1"><a class="header-anchor" href="#检索产品名称和描述-一" aria-hidden="true">#</a> 检索产品名称和描述（一）</h3><p><code>Products</code> 表如下：</p><table><thead><tr><th>prod_name</th><th>prod_desc</th></tr></thead><tbody><tr><td>a0011</td><td>usb</td></tr><tr><td>a0019</td><td>iphone13</td></tr><tr><td>b0019</td><td>gucci t-shirts</td></tr><tr><td>c0019</td><td>gucci toy</td></tr><tr><td>d0019</td><td>lego toy</td></tr></tbody></table><p>【问题】编写 SQL 语句，从 <code>Products</code> 表中检索产品名称（<code>prod_name</code>）和描述（<code>prod_desc</code>），仅返回描述中包含 <code>toy</code> 一词的产品名称。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_desc
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_desc <span class="token operator">LIKE</span> <span class="token string">&#39;%toy%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检索产品名称和描述-二" tabindex="-1"><a class="header-anchor" href="#检索产品名称和描述-二" aria-hidden="true">#</a> 检索产品名称和描述（二）</h3><p><code>Products</code> 表如下：</p><table><thead><tr><th>prod_name</th><th>prod_desc</th></tr></thead><tbody><tr><td>a0011</td><td>usb</td></tr><tr><td>a0019</td><td>iphone13</td></tr><tr><td>b0019</td><td>gucci t-shirts</td></tr><tr><td>c0019</td><td>gucci toy</td></tr><tr><td>d0019</td><td>lego toy</td></tr></tbody></table><p>【问题】编写 SQL 语句，从 <code>Products</code> 表中检索产品名称（<code>prod_name</code>）和描述（<code>prod_desc</code>），仅返回描述中未出现 <code>toy</code> 一词的产品，最后按”产品名称“对结果进行排序。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_desc
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_desc <span class="token operator">NOT</span> <span class="token operator">LIKE</span> <span class="token string">&#39;%toy%&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检索产品名称和描述-三" tabindex="-1"><a class="header-anchor" href="#检索产品名称和描述-三" aria-hidden="true">#</a> 检索产品名称和描述（三）</h3><p><code>Products</code> 表如下：</p><table><thead><tr><th>prod_name</th><th>prod_desc</th></tr></thead><tbody><tr><td>a0011</td><td>usb</td></tr><tr><td>a0019</td><td>iphone13</td></tr><tr><td>b0019</td><td>gucci t-shirts</td></tr><tr><td>c0019</td><td>gucci toy</td></tr><tr><td>d0019</td><td>lego carrots toy</td></tr></tbody></table><p>【问题】编写 SQL 语句，从 <code>Products</code> 表中检索产品名称（<code>prod_name</code>）和描述（<code>prod_desc</code>），仅返回描述中同时出现 <code>toy</code> 和 <code>carrots</code> 的产品。有好几种方法可以执行此操作，但对于这个挑战题，请使用 <code>AND</code> 和两个 <code>LIKE</code> 比较。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_desc
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_desc <span class="token operator">LIKE</span> <span class="token string">&#39;%toy%&#39;</span> <span class="token operator">AND</span> prod_desc <span class="token operator">LIKE</span> <span class="token string">&quot;%carrots%&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检索产品名称和描述-四" tabindex="-1"><a class="header-anchor" href="#检索产品名称和描述-四" aria-hidden="true">#</a> 检索产品名称和描述（四）</h3><p><code>Products</code> 表如下：</p><table><thead><tr><th>prod_name</th><th>prod_desc</th></tr></thead><tbody><tr><td>a0011</td><td>usb</td></tr><tr><td>a0019</td><td>iphone13</td></tr><tr><td>b0019</td><td>gucci t-shirts</td></tr><tr><td>c0019</td><td>gucci toy</td></tr><tr><td>d0019</td><td>lego toy carrots</td></tr></tbody></table><p>【问题】编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回在描述中以<strong>先后顺序</strong>同时出现 toy 和 carrots 的产品。提示：只需要用带有三个 <code>%</code> 符号的 <code>LIKE</code> 即可。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> prod_desc
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_desc <span class="token operator">LIKE</span> <span class="token string">&#39;%toy%carrots%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建计算字段" tabindex="-1"><a class="header-anchor" href="#创建计算字段" aria-hidden="true">#</a> 创建计算字段</h2><h3 id="别名" tabindex="-1"><a class="header-anchor" href="#别名" aria-hidden="true">#</a> 别名</h3><p>别名的常见用法是在检索出的结果中重命名表的列字段（为了符合特定的报表要求或客户需求）。有表 <code>Vendors</code> 代表供应商信息，<code>vend_id</code> 供应商 id、<code>vend_name</code> 供应商名称、<code>vend_address</code> 供应商地址、<code>vend_city</code> 供应商城市。</p><table><thead><tr><th>vend_id</th><th>vend_name</th><th>vend_address</th><th>vend_city</th></tr></thead><tbody><tr><td>a001</td><td>tencent cloud</td><td>address1</td><td>shenzhen</td></tr><tr><td>a002</td><td>huawei cloud</td><td>address2</td><td>dongguan</td></tr><tr><td>a003</td><td>aliyun cloud</td><td>address3</td><td>hangzhou</td></tr><tr><td>a003</td><td>netease cloud</td><td>address4</td><td>guangzhou</td></tr></tbody></table><p>【问题】编写 SQL 语句，从 <code>Vendors</code> 表中检索 <code>vend_id</code>、<code>vend_name</code>、<code>vend_address</code> 和 <code>vend_city</code>，将 <code>vend_name</code> 重命名为 <code>vname</code>，将 <code>vend_city</code> 重命名为 <code>vcity</code>，将 <code>vend_address</code> 重命名为 <code>vaddress</code>，按供应商名称对结果进行升序排序。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> vend_name <span class="token keyword">AS</span> vname<span class="token punctuation">,</span> vend_address <span class="token keyword">AS</span> vaddress<span class="token punctuation">,</span> vend_city <span class="token keyword">AS</span> vcity
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vname
<span class="token comment"># as 可以省略</span>
<span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> vend_name vname<span class="token punctuation">,</span> vend_address vaddress<span class="token punctuation">,</span> vend_city vcity
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打折" tabindex="-1"><a class="header-anchor" href="#打折" aria-hidden="true">#</a> 打折</h3><p>我们的示例商店正在进行打折促销，所有产品均降价 10%。<code>Products</code> 表包含 <code>prod_id</code> 产品 id、<code>prod_price</code> 产品价格。</p><p>【问题】编写 SQL 语句，从 <code>Products</code> 表中返回 <code>prod_id</code>、<code>prod_price</code> 和 <code>sale_price</code>。<code>sale_price</code> 是一个包含促销价格的计算字段。提示：可以乘以 0.9，得到原价的 90%（即 10%的折扣）。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> prod_price<span class="token punctuation">,</span> prod_price <span class="token operator">*</span> <span class="token number">0.9</span> <span class="token keyword">AS</span> sale_price
<span class="token keyword">FROM</span> Products
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<code>sale_price</code> 是对计算结果的命名，而不是原有的列名。</p><h2 id="使用函数处理数据" tabindex="-1"><a class="header-anchor" href="#使用函数处理数据" aria-hidden="true">#</a> 使用函数处理数据</h2><h3 id="顾客登录名" tabindex="-1"><a class="header-anchor" href="#顾客登录名" aria-hidden="true">#</a> 顾客登录名</h3><p>我们的商店已经上线了，正在创建顾客账户。所有用户都需要登录名，默认登录名是其名称和所在城市的组合。</p><p>给出 <code>Customers</code> 表 如下：</p><table><thead><tr><th>cust_id</th><th>cust_name</th><th>cust_contact</th><th>cust_city</th></tr></thead><tbody><tr><td>a1</td><td>Andy Li</td><td>Andy Li</td><td>Oak Park</td></tr><tr><td>a2</td><td>Ben Liu</td><td>Ben Liu</td><td>Oak Park</td></tr><tr><td>a3</td><td>Tony Dai</td><td>Tony Dai</td><td>Oak Park</td></tr><tr><td>a4</td><td>Tom Chen</td><td>Tom Chen</td><td>Oak Park</td></tr><tr><td>a5</td><td>An Li</td><td>An Li</td><td>Oak Park</td></tr><tr><td>a6</td><td>Lee Chen</td><td>Lee Chen</td><td>Oak Park</td></tr><tr><td>a7</td><td>Hex Liu</td><td>Hex Liu</td><td>Oak Park</td></tr></tbody></table><p>【问题】编写 SQL 语句，返回顾客 ID（<code>cust_id</code>）、顾客名称（<code>cust_name</code>）和登录名（<code>user_login</code>），其中登录名全部为大写字母，并由顾客联系人的前两个字符（<code>cust_contact</code>）和其所在城市的前三个字符（<code>cust_city</code>）组成。提示：需要使用函数、拼接和别名。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span> cust_name<span class="token punctuation">,</span> UPPER<span class="token punctuation">(</span>CONCAT<span class="token punctuation">(</span>SUBSTRING<span class="token punctuation">(</span>cust_contact<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SUBSTRING<span class="token punctuation">(</span>cust_city<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> user_login
<span class="token keyword">FROM</span> Customers
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>知识点：</p><ul><li><p>截取函数<code>SUBSTRING()</code>：截取字符串，<code>substring(str ,n ,m)</code>（n 表示起始截取位置，m 表示要截取的字符个数）表示返回字符串 str 从第 n 个字符开始截取 m 个字符；</p></li><li><p>拼接函数<code>CONCAT()</code>：将两个或多个字符串连接成一个字符串，select concat(A,B)：连接字符串 A 和 B。</p></li><li><p>大写函数 <code>UPPER()</code>：将指定字符串转换为大写。</p></li></ul><h3 id="返回-2020-年-1-月的所有订单的订单号和订单日期" tabindex="-1"><a class="header-anchor" href="#返回-2020-年-1-月的所有订单的订单号和订单日期" aria-hidden="true">#</a> 返回 2020 年 1 月的所有订单的订单号和订单日期</h3><p><code>Orders</code> 订单表如下：</p><table><thead><tr><th>order_num</th><th>order_date</th></tr></thead><tbody><tr><td>a0001</td><td>2020-01-01 00:00:00</td></tr><tr><td>a0002</td><td>2020-01-02 00:00:00</td></tr><tr><td>a0003</td><td>2020-01-01 12:00:00</td></tr><tr><td>a0004</td><td>2020-02-01 00:00:00</td></tr><tr><td>a0005</td><td>2020-03-01 00:00:00</td></tr></tbody></table><p>【问题】编写 SQL 语句，返回 2020 年 1 月的所有订单的订单号（<code>order_num</code>）和订单日期（<code>order_date</code>），并按订单日期升序排序</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span> order_date
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> <span class="token keyword">month</span><span class="token punctuation">(</span>order_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&#39;01&#39;</span> <span class="token operator">AND</span> <span class="token keyword">YEAR</span><span class="token punctuation">(</span>order_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&#39;2020&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> order_date
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以用通配符来做：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span> order_date
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> order_date <span class="token operator">LIKE</span> <span class="token string">&#39;2020-01%&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> order_date
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>知识点：</p><ul><li>日期格式：<code>YYYY-MM-DD</code></li><li>时间格式：<code>HH:MM:SS</code></li></ul><p>日期和时间处理相关的常用函数：</p><table><thead><tr><th>函 数</th><th>说 明</th></tr></thead><tbody><tr><td><code>ADDDATE()</code></td><td>增加一个日期（天、周等）</td></tr><tr><td><code>ADDTIME()</code></td><td>增加一个时间（时、分等）</td></tr><tr><td><code>CURDATE()</code></td><td>返回当前日期</td></tr><tr><td><code>CURTIME()</code></td><td>返回当前时间</td></tr><tr><td><code>DATE()</code></td><td>返回日期时间的日期部分</td></tr><tr><td><code>DATEDIFF</code></td><td>计算两个日期之差</td></tr><tr><td><code>DATE_FORMAT()</code></td><td>返回一个格式化的日期或时间串</td></tr><tr><td><code>DAY()</code></td><td>返回一个日期的天数部分</td></tr><tr><td><code>DAYOFWEEK()</code></td><td>对于一个日期，返回对应的星期几</td></tr><tr><td><code>HOUR()</code></td><td>返回一个时间的小时部分</td></tr><tr><td><code>MINUTE()</code></td><td>返回一个时间的分钟部分</td></tr><tr><td><code>MONTH()</code></td><td>返回一个日期的月份部分</td></tr><tr><td><code>NOW()</code></td><td>返回当前日期和时间</td></tr><tr><td><code>SECOND()</code></td><td>返回一个时间的秒部分</td></tr><tr><td><code>TIME()</code></td><td>返回一个日期时间的时间部分</td></tr><tr><td><code>YEAR()</code></td><td>返回一个日期的年份部分</td></tr></tbody></table><h2 id="汇总数据" tabindex="-1"><a class="header-anchor" href="#汇总数据" aria-hidden="true">#</a> 汇总数据</h2><p>汇总数据相关的函数：</p><table><thead><tr><th>函 数</th><th>说 明</th></tr></thead><tbody><tr><td><code>AVG()</code></td><td>返回某列的平均值</td></tr><tr><td><code>COUNT()</code></td><td>返回某列的行数</td></tr><tr><td><code>MAX()</code></td><td>返回某列的最大值</td></tr><tr><td><code>MIN()</code></td><td>返回某列的最小值</td></tr><tr><td><code>SUM()</code></td><td>返回某列值之和</td></tr></tbody></table><h3 id="确定已售出产品的总数" tabindex="-1"><a class="header-anchor" href="#确定已售出产品的总数" aria-hidden="true">#</a> 确定已售出产品的总数</h3><p><code>OrderItems</code> 表代表售出的产品，<code>quantity</code> 代表售出商品数量。</p><table><thead><tr><th>quantity</th></tr></thead><tbody><tr><td>10</td></tr><tr><td>100</td></tr><tr><td>1000</td></tr><tr><td>10001</td></tr><tr><td>2</td></tr><tr><td>15</td></tr></tbody></table><p>【问题】编写 SQL 语句，确定已售出产品的总数。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">Sum</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> items_ordered
<span class="token keyword">FROM</span> OrderItems
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="确定已售出产品项-br01-的总数" tabindex="-1"><a class="header-anchor" href="#确定已售出产品项-br01-的总数" aria-hidden="true">#</a> 确定已售出产品项 BR01 的总数</h3><p><code>OrderItems</code> 表代表售出的产品，<code>quantity</code> 代表售出商品数量，产品项为 <code>prod_id</code>。</p><table><thead><tr><th>quantity</th><th>prod_id</th></tr></thead><tbody><tr><td>10</td><td>AR01</td></tr><tr><td>100</td><td>AR10</td></tr><tr><td>1000</td><td>BR01</td></tr><tr><td>10001</td><td>BR010</td></tr></tbody></table><p>【问题】修改创建的语句，确定已售出产品项（<code>prod_id</code>）为&quot;BR01&quot;的总数。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">Sum</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> items_ordered
<span class="token keyword">FROM</span> OrderItems
<span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">&#39;BR01&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="确定-products-表中价格不超过-10-美元的最贵产品的价格" tabindex="-1"><a class="header-anchor" href="#确定-products-表中价格不超过-10-美元的最贵产品的价格" aria-hidden="true">#</a> 确定 Products 表中价格不超过 10 美元的最贵产品的价格</h3><p><code>Products</code> 表如下，<code>prod_price</code> 代表商品的价格。</p><table><thead><tr><th>prod_price</th></tr></thead><tbody><tr><td>9.49</td></tr><tr><td>600</td></tr><tr><td>1000</td></tr></tbody></table><p>【问题】编写 SQL 语句，确定 <code>Products</code> 表中价格不超过 10 美元的最贵产品的价格（<code>prod_price</code>）。将计算所得的字段命名为 <code>max_price</code>。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">Max</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_price
<span class="token keyword">FROM</span> Products
<span class="token keyword">WHERE</span> prod_price <span class="token operator">&lt;=</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分组数据" tabindex="-1"><a class="header-anchor" href="#分组数据" aria-hidden="true">#</a> 分组数据</h2><p><code>GROUP BY</code>：</p><ul><li><code>GROUP BY</code> 子句将记录分组到汇总行中。</li><li><code>GROUP BY</code> 为每个组返回一个记录。</li><li><code>GROUP BY</code> 通常还涉及聚合<code>COUNT</code>，<code>MAX</code>，<code>SUM</code>，<code>AVG</code> 等。</li><li><code>GROUP BY</code> 可以按一列或多列进行分组。</li><li><code>GROUP BY</code> 按分组字段进行排序后，<code>ORDER BY</code> 可以以汇总字段来进行排序。</li></ul><p><code>HAVING</code>：</p><ul><li><code>HAVING</code> 用于对汇总的 <code>GROUP BY</code> 结果进行过滤。</li><li><code>HAVING</code> 必须要与 <code>GROUP BY</code> 连用。</li><li><code>WHERE</code> 和 <code>HAVING</code> 可以在相同的查询中。</li></ul><p><code>HAVING</code> vs <code>WHERE</code>：</p><ul><li><code>WHERE</code>：过滤指定的行，后面不能加聚合函数（分组函数）。</li><li><code>HAVING</code>：过滤分组，必须要与 <code>GROUP BY</code> 连用，不能单独使用。</li></ul><h3 id="返回每个订单号各有多少行数" tabindex="-1"><a class="header-anchor" href="#返回每个订单号各有多少行数" aria-hidden="true">#</a> 返回每个订单号各有多少行数</h3><p><code>OrderItems</code> 表包含每个订单的每个产品</p><table><thead><tr><th>order_num</th></tr></thead><tbody><tr><td>a002</td></tr><tr><td>a002</td></tr><tr><td>a002</td></tr><tr><td>a004</td></tr><tr><td>a007</td></tr></tbody></table><p>【问题】编写 SQL 语句，返回每个订单号（<code>order_num</code>）各有多少行数（<code>order_lines</code>），并按 <code>order_lines</code> 对结果进行升序排序。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span> <span class="token function">Count</span><span class="token punctuation">(</span>order_num<span class="token punctuation">)</span> <span class="token keyword">AS</span> order_lines
<span class="token keyword">FROM</span> OrderItems
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> order_num
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> order_lines
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>知识点：</p><ol><li><code>count(*)</code>,<code>count(列名)</code>都可以，区别在于，<code>count(列名)</code>是统计非 NULL 的行数；</li><li><code>order by</code> 最后执行，所以可以使用列别名；</li><li>分组聚合一定不要忘记加上 <code>group by</code> ,不然只会有一行结果。</li></ol><h3 id="每个供应商成本最低的产品" tabindex="-1"><a class="header-anchor" href="#每个供应商成本最低的产品" aria-hidden="true">#</a> 每个供应商成本最低的产品</h3><p>有 <code>Products</code> 表，含有字段 <code>prod_price</code> 代表产品价格，<code>vend_id</code> 代表供应商 id</p><table><thead><tr><th>vend_id</th><th>prod_price</th></tr></thead><tbody><tr><td>a0011</td><td>100</td></tr><tr><td>a0019</td><td>0.1</td></tr><tr><td>b0019</td><td>1000</td></tr><tr><td>b0019</td><td>6980</td></tr><tr><td>b0019</td><td>20</td></tr></tbody></table><p>【问题】编写 SQL 语句，返回名为 <code>cheapest_item</code> 的字段，该字段包含每个供应商成本最低的产品（使用 <code>Products</code> 表中的 <code>prod_price</code>），然后从最低成本到最高成本对结果进行升序排序。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> <span class="token function">Min</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> cheapest_item
<span class="token keyword">FROM</span> Products
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> vend_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cheapest_item
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回订单数量总和不小于-100-的所有订单的订单号" tabindex="-1"><a class="header-anchor" href="#返回订单数量总和不小于-100-的所有订单的订单号" aria-hidden="true">#</a> 返回订单数量总和不小于 100 的所有订单的订单号</h3><p><code>OrderItems</code> 代表订单商品表，包括：订单号 <code>order_num</code> 和订单数量 <code>quantity</code>。</p><table><thead><tr><th>order_num</th><th>quantity</th></tr></thead><tbody><tr><td>a1</td><td>105</td></tr><tr><td>a2</td><td>1100</td></tr><tr><td>a2</td><td>200</td></tr><tr><td>a4</td><td>1121</td></tr><tr><td>a5</td><td>10</td></tr><tr><td>a2</td><td>19</td></tr><tr><td>a7</td><td>5</td></tr></tbody></table><p>【问题】请编写 SQL 语句，返回订单数量总和不小于 100 的所有订单号，最后结果按照订单号升序排序。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 直接聚合</span>
<span class="token keyword">SELECT</span> order_num
<span class="token keyword">FROM</span> OrderItems
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> order_num
<span class="token keyword">HAVING</span> <span class="token function">Sum</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">100</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> order_num

<span class="token comment"># 子查询</span>
<span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>order_num
<span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span> <span class="token function">Sum</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> sum_num
    <span class="token keyword">FROM</span> OrderItems
    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> order_num
    <span class="token keyword">HAVING</span> sum_num <span class="token operator">&gt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> a
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>order_num
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>知识点：</p><ul><li><code>where</code>：过滤过滤指定的行，后面不能加聚合函数（分组函数）。</li><li><code>having</code>：过滤分组，与 <code>group by</code> 连用，不能单独使用。</li></ul><h3 id="计算总和" tabindex="-1"><a class="header-anchor" href="#计算总和" aria-hidden="true">#</a> 计算总和</h3><p><code>OrderItems</code> 表代表订单信息，包括字段：订单号 <code>order_num</code> 和 <code>item_price</code> 商品售出价格、<code>quantity</code> 商品数量。</p><table><thead><tr><th>order_num</th><th>item_price</th><th>quantity</th></tr></thead><tbody><tr><td>a1</td><td>10</td><td>105</td></tr><tr><td>a2</td><td>1</td><td>1100</td></tr><tr><td>a2</td><td>1</td><td>200</td></tr><tr><td>a4</td><td>2</td><td>1121</td></tr><tr><td>a5</td><td>5</td><td>10</td></tr><tr><td>a2</td><td>1</td><td>19</td></tr><tr><td>a7</td><td>7</td><td>5</td></tr></tbody></table><p>【问题】编写 SQL 语句，根据订单号聚合，返回订单总价不小于 1000 的所有订单号，最后的结果按订单号进行升序排序。</p><p>提示：总价 = item_price 乘以 quantity</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span> <span class="token function">Sum</span><span class="token punctuation">(</span>item_price <span class="token operator">*</span> quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> total_price
<span class="token keyword">FROM</span> OrderItems
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> order_num
<span class="token keyword">HAVING</span> total_price <span class="token operator">&gt;=</span> <span class="token number">1000</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> order_num
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检查-sql-语句-2" tabindex="-1"><a class="header-anchor" href="#检查-sql-语句-2" aria-hidden="true">#</a> 检查 SQL 语句</h3><p><code>OrderItems</code> 表含有 <code>order_num</code> 订单号</p><table><thead><tr><th>order_num</th></tr></thead><tbody><tr><td>a002</td></tr><tr><td>a002</td></tr><tr><td>a002</td></tr><tr><td>a004</td></tr><tr><td>a007</td></tr></tbody></table><p>【问题】将下面代码修改正确后执行</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> items
<span class="token keyword">FROM</span> OrderItems
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> items
<span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> items<span class="token punctuation">,</span> order_num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改后：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> items
<span class="token keyword">FROM</span> OrderItems
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> order_num
<span class="token keyword">HAVING</span> items <span class="token operator">&gt;=</span> <span class="token number">3</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> items<span class="token punctuation">,</span> order_num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用子查询" tabindex="-1"><a class="header-anchor" href="#使用子查询" aria-hidden="true">#</a> 使用子查询</h2><p>子查询是嵌套在较大查询中的 SQL 查询，也称内部查询或内部选择，包含子查询的语句也称为外部查询或外部选择。简单来说，子查询就是指将一个 <code>SELECT</code> 查询（子查询）的结果作为另一个 SQL 语句（主查询）的数据来源或者判断条件。</p><p>子查询可以嵌入 <code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code> 语句中，也可以和 <code>=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>IN</code>、<code>BETWEEN</code>、<code>EXISTS</code> 等运算符一起使用。</p><p>子查询常用在 <code>WHERE</code> 子句和 <code>FROM</code> 子句后边：</p><ul><li>当用于 <code>WHERE</code> 子句时，根据不同的运算符，子查询可以返回单行单列、多行单列、单行多列数据。子查询就是要返回能够作为 WHERE 子句查询条件的值。</li><li>当用于 <code>FROM</code> 子句时，一般返回多行多列数据，相当于返回一张临时表，这样才符合 <code>FROM</code> 后面是表的规则。这种做法能够实现多表联合查询。</li></ul><blockquote><p>注意：MySQL 数据库从 4.1 版本才开始支持子查询，早期版本是不支持的。</p></blockquote><p>用于 <code>WHERE</code> 子句的子查询的基本语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name <span class="token punctuation">[</span><span class="token punctuation">,</span> column_name <span class="token punctuation">]</span>
<span class="token keyword">FROM</span> table1 <span class="token punctuation">[</span><span class="token punctuation">,</span> table2 <span class="token punctuation">]</span>
<span class="token keyword">WHERE</span> column_name operator
<span class="token punctuation">(</span><span class="token keyword">SELECT</span> column_name <span class="token punctuation">[</span><span class="token punctuation">,</span> column_name <span class="token punctuation">]</span>
<span class="token keyword">FROM</span> table1 <span class="token punctuation">[</span><span class="token punctuation">,</span> table2 <span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token keyword">WHERE</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>子查询需要放在括号<code>( )</code>内。</li><li><code>operator</code> 表示用于 <code>WHERE</code> 子句的运算符，可以是比较运算符（如 <code>=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;&gt;</code> 等）或逻辑运算符（如 <code>IN</code>, <code>NOT IN</code>, <code>EXISTS</code>, <code>NOT EXISTS</code> 等），具体根据需求来确定。</li></ul><p>用于 <code>FROM</code> 子句的子查询的基本语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name <span class="token punctuation">[</span><span class="token punctuation">,</span> column_name <span class="token punctuation">]</span>
<span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> column_name <span class="token punctuation">[</span><span class="token punctuation">,</span> column_name <span class="token punctuation">]</span>
      <span class="token keyword">FROM</span> table1 <span class="token punctuation">[</span><span class="token punctuation">,</span> table2 <span class="token punctuation">]</span>
      <span class="token punctuation">[</span><span class="token keyword">WHERE</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> temp_table_name <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token keyword">JOIN</span> <span class="token keyword">type</span> <span class="token keyword">JOIN</span> table_name <span class="token keyword">ON</span> condition<span class="token punctuation">]</span>
<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>用于 <code>FROM</code> 的子查询返回的结果相当于一张临时表，所以需要使用 AS 关键字为该临时表起一个名字。</li><li>子查询需要放在括号 <code>( )</code> 内。</li><li>可以指定多个临时表名，并使用 <code>JOIN</code> 语句连接这些表。</li></ul><h3 id="返回购买价格为-10-美元或以上产品的顾客列表" tabindex="-1"><a class="header-anchor" href="#返回购买价格为-10-美元或以上产品的顾客列表" aria-hidden="true">#</a> 返回购买价格为 10 美元或以上产品的顾客列表</h3><p><code>OrderItems</code> 表示订单商品表，含有字段订单号：<code>order_num</code>、订单价格：<code>item_price</code>；<code>Orders</code> 表代表订单信息表，含有顾客 <code>id：cust_id</code> 和订单号：<code>order_num</code></p><p><code>OrderItems</code> 表:</p><table><thead><tr><th>order_num</th><th>item_price</th></tr></thead><tbody><tr><td>a1</td><td>10</td></tr><tr><td>a2</td><td>1</td></tr><tr><td>a2</td><td>1</td></tr><tr><td>a4</td><td>2</td></tr><tr><td>a5</td><td>5</td></tr><tr><td>a2</td><td>1</td></tr><tr><td>a7</td><td>7</td></tr></tbody></table><p><code>Orders</code> 表：</p><table><thead><tr><th>order_num</th><th>cust_id</th></tr></thead><tbody><tr><td>a1</td><td>cust10</td></tr><tr><td>a2</td><td>cust1</td></tr><tr><td>a2</td><td>cust1</td></tr><tr><td>a4</td><td>cust2</td></tr><tr><td>a5</td><td>cust5</td></tr><tr><td>a2</td><td>cust1</td></tr><tr><td>a7</td><td>cust7</td></tr></tbody></table><p>【问题】使用子查询，返回购买价格为 10 美元或以上产品的顾客列表，结果无需排序。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_id
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> order_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> order_num
    <span class="token keyword">FROM</span> OrderItems
    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> order_num
    <span class="token keyword">HAVING</span> <span class="token function">Sum</span><span class="token punctuation">(</span>item_price<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="确定哪些订单购买了-prod-id-为-br01-的产品-一" tabindex="-1"><a class="header-anchor" href="#确定哪些订单购买了-prod-id-为-br01-的产品-一" aria-hidden="true">#</a> 确定哪些订单购买了 prod_id 为 BR01 的产品（一）</h3><p>表 <code>OrderItems</code> 代表订单商品信息表，<code>prod_id</code> 为产品 id；<code>Orders</code> 表代表订单表有 <code>cust_id</code> 代表顾客 id 和订单日期 <code>order_date</code></p><p><code>OrderItems</code> 表：</p><table><thead><tr><th>prod_id</th><th>order_num</th></tr></thead><tbody><tr><td>BR01</td><td>a0001</td></tr><tr><td>BR01</td><td>a0002</td></tr><tr><td>BR02</td><td>a0003</td></tr><tr><td>BR02</td><td>a0013</td></tr></tbody></table><p><code>Orders</code> 表：</p><table><thead><tr><th>order_num</th><th>cust_id</th><th>order_date</th></tr></thead><tbody><tr><td>a0001</td><td>cust10</td><td>2022-01-01 00:00:00</td></tr><tr><td>a0002</td><td>cust1</td><td>2022-01-01 00:01:00</td></tr><tr><td>a0003</td><td>cust1</td><td>2022-01-02 00:00:00</td></tr><tr><td>a0013</td><td>cust2</td><td>2022-01-01 00:20:00</td></tr></tbody></table><p>【问题】</p><p>编写 SQL 语句，使用子查询来确定哪些订单（在 <code>OrderItems</code> 中）购买了 <code>prod_id</code> 为 &quot;BR01&quot; 的产品，然后从 <code>Orders</code> 表中返回每个产品对应的顾客 ID（<code>cust_id</code>）和订单日期（<code>order_date</code>），按订购日期对结果进行升序排序。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 写法 1：子查询</span>
<span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span>order_date
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> order_num <span class="token operator">IN</span>
    <span class="token punctuation">(</span><span class="token keyword">SELECT</span> order_num
     <span class="token keyword">FROM</span> OrderItems
     <span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">&#39;BR01&#39;</span> <span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> order_date<span class="token punctuation">;</span>

<span class="token comment"># 写法 2: 连接表</span>
<span class="token keyword">SELECT</span> b<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> b<span class="token punctuation">.</span>order_date
<span class="token keyword">FROM</span> OrderItems a<span class="token punctuation">,</span>Orders b
<span class="token keyword">WHERE</span> a<span class="token punctuation">.</span>order_num <span class="token operator">=</span> b<span class="token punctuation">.</span>order_num <span class="token operator">AND</span> a<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> <span class="token string">&#39;BR01&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> order_date
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回购买-prod-id-为-br01-的产品的所有顾客的电子邮件-一" tabindex="-1"><a class="header-anchor" href="#返回购买-prod-id-为-br01-的产品的所有顾客的电子邮件-一" aria-hidden="true">#</a> 返回购买 prod_id 为 BR01 的产品的所有顾客的电子邮件（一）</h3><p>你想知道订购 BR01 产品的日期，有表 <code>OrderItems</code> 代表订单商品信息表，<code>prod_id</code> 为产品 id；<code>Orders</code> 表代表订单表有 <code>cust_id</code> 代表顾客 id 和订单日期 <code>order_date</code>；<code>Customers</code> 表含有 <code>cust_email</code> 顾客邮件和 <code>cust_id</code> 顾客 id</p><p><code>OrderItems</code> 表：</p><table><thead><tr><th>prod_id</th><th>order_num</th></tr></thead><tbody><tr><td>BR01</td><td>a0001</td></tr><tr><td>BR01</td><td>a0002</td></tr><tr><td>BR02</td><td>a0003</td></tr><tr><td>BR02</td><td>a0013</td></tr></tbody></table><p><code>Orders</code> 表：</p><table><thead><tr><th>order_num</th><th>cust_id</th><th>order_date</th></tr></thead><tbody><tr><td>a0001</td><td>cust10</td><td>2022-01-01 00:00:00</td></tr><tr><td>a0002</td><td>cust1</td><td>2022-01-01 00:01:00</td></tr><tr><td>a0003</td><td>cust1</td><td>2022-01-02 00:00:00</td></tr><tr><td>a0013</td><td>cust2</td><td>2022-01-01 00:20:00</td></tr></tbody></table><p><code>Customers</code> 表代表顾客信息，<code>cust_id</code> 为顾客 id，<code>cust_email</code> 为顾客 email</p><table><thead><tr><th>cust_id</th><th>cust_email</th></tr></thead><tbody><tr><td>cust10</td><td><a href="mailto:cust10@cust.com">cust10@cust.com</a></td></tr><tr><td>cust1</td><td><a href="mailto:cust1@cust.com">cust1@cust.com</a></td></tr><tr><td>cust2</td><td><a href="mailto:cust2@cust.com">cust2@cust.com</a></td></tr></tbody></table><p>【问题】返回购买 <code>prod_id</code> 为 <code>BR01</code> 的产品的所有顾客的电子邮件（<code>Customers</code> 表中的 <code>cust_email</code>），结果无需排序。</p><p>提示：这涉及 <code>SELECT</code> 语句，最内层的从 <code>OrderItems</code> 表返回 <code>order_num</code>，中间的从 <code>Customers</code> 表返回 <code>cust_id</code>。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 写法 1：子查询</span>
<span class="token keyword">SELECT</span> cust_email
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> cust_id
    <span class="token keyword">FROM</span> Orders
    <span class="token keyword">WHERE</span> order_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> order_num
        <span class="token keyword">FROM</span> OrderItems
        <span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">&#39;BR01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 写法 2: 连接表（inner join）</span>
<span class="token keyword">SELECT</span> c<span class="token punctuation">.</span>cust_email
<span class="token keyword">FROM</span> OrderItems a<span class="token punctuation">,</span>Orders b<span class="token punctuation">,</span>Customers c
<span class="token keyword">WHERE</span> a<span class="token punctuation">.</span>order_num <span class="token operator">=</span> b<span class="token punctuation">.</span>order_num <span class="token operator">AND</span> b<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> c<span class="token punctuation">.</span>cust_id <span class="token operator">AND</span> a<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> <span class="token string">&#39;BR01&#39;</span>

<span class="token comment"># 写法 3：连接表（left join）</span>
<span class="token keyword">SELECT</span> c<span class="token punctuation">.</span>cust_email
<span class="token keyword">FROM</span> Orders a <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span>
  OrderItems b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>order_num <span class="token operator">=</span> b<span class="token punctuation">.</span>order_num <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span>
  Customers c <span class="token keyword">ON</span> a<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> c<span class="token punctuation">.</span>cust_id
<span class="token keyword">WHERE</span> b<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> <span class="token string">&#39;BR01&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回每个顾客不同订单的总金额" tabindex="-1"><a class="header-anchor" href="#返回每个顾客不同订单的总金额" aria-hidden="true">#</a> 返回每个顾客不同订单的总金额</h3><p>我们需要一个顾客 ID 列表，其中包含他们已订购的总金额。</p><p><code>OrderItems</code> 表代表订单信息，<code>OrderItems</code> 表有订单号：<code>order_num</code> 和商品售出价格：<code>item_price</code>、商品数量：<code>quantity</code>。</p><table><thead><tr><th>order_num</th><th>item_price</th><th>quantity</th></tr></thead><tbody><tr><td>a0001</td><td>10</td><td>105</td></tr><tr><td>a0002</td><td>1</td><td>1100</td></tr><tr><td>a0002</td><td>1</td><td>200</td></tr><tr><td>a0013</td><td>2</td><td>1121</td></tr><tr><td>a0003</td><td>5</td><td>10</td></tr><tr><td>a0003</td><td>1</td><td>19</td></tr><tr><td>a0003</td><td>7</td><td>5</td></tr></tbody></table><p><code>Orders</code> 表订单号：<code>order_num</code>、顾客 id：<code>cust_id</code></p><table><thead><tr><th>order_num</th><th>cust_id</th></tr></thead><tbody><tr><td>a0001</td><td>cust10</td></tr><tr><td>a0002</td><td>cust1</td></tr><tr><td>a0003</td><td>cust1</td></tr><tr><td>a0013</td><td>cust2</td></tr></tbody></table><p>【问题】</p><p>编写 SQL 语句，返回顾客 ID（<code>Orders</code> 表中的 <code>cust_id</code>），并使用子查询返回 <code>total_ordered</code> 以便返回每个顾客的订单总数，将结果按金额从大到小排序。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 写法 1：子查询</span>
<span class="token keyword">SELECT</span> o<span class="token punctuation">.</span>cust_id <span class="token keyword">AS</span> cust_id<span class="token punctuation">,</span> tb<span class="token punctuation">.</span>total_ordered <span class="token keyword">AS</span> total_ordered
<span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> order_num<span class="token punctuation">,</span> <span class="token function">Sum</span><span class="token punctuation">(</span>item_price <span class="token operator">*</span> quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> total_ordered
    <span class="token keyword">FROM</span> OrderItems
    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> order_num<span class="token punctuation">)</span> <span class="token keyword">AS</span> tb<span class="token punctuation">,</span>
  Orders o
<span class="token keyword">WHERE</span> tb<span class="token punctuation">.</span>order_num <span class="token operator">=</span> o<span class="token punctuation">.</span>order_num
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> total_ordered <span class="token keyword">DESC</span>

<span class="token comment"># 写法 2：连接表</span>
<span class="token keyword">SELECT</span> b<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span> <span class="token function">Sum</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>quantity <span class="token operator">*</span> a<span class="token punctuation">.</span>item_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> total_ordered
<span class="token keyword">FROM</span> OrderItems a<span class="token punctuation">,</span>Orders b
<span class="token keyword">WHERE</span> a<span class="token punctuation">.</span>order_num <span class="token operator">=</span> b<span class="token punctuation">.</span>order_num
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> total_ordered <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="从-products-表中检索所有的产品名称以及对应的销售总数" tabindex="-1"><a class="header-anchor" href="#从-products-表中检索所有的产品名称以及对应的销售总数" aria-hidden="true">#</a> 从 Products 表中检索所有的产品名称以及对应的销售总数</h3><p><code>Products</code> 表中检索所有的产品名称：<code>prod_name</code>、产品 id：<code>prod_id</code></p><table><thead><tr><th>prod_id</th><th>prod_name</th></tr></thead><tbody><tr><td>a0001</td><td>egg</td></tr><tr><td>a0002</td><td>sockets</td></tr><tr><td>a0013</td><td>coffee</td></tr><tr><td>a0003</td><td>cola</td></tr></tbody></table><p><code>OrderItems</code> 代表订单商品表，订单产品：<code>prod_id</code>、售出数量：<code>quantity</code></p><table><thead><tr><th>prod_id</th><th>quantity</th></tr></thead><tbody><tr><td>a0001</td><td>105</td></tr><tr><td>a0002</td><td>1100</td></tr><tr><td>a0002</td><td>200</td></tr><tr><td>a0013</td><td>1121</td></tr><tr><td>a0003</td><td>10</td></tr><tr><td>a0003</td><td>19</td></tr><tr><td>a0003</td><td>5</td></tr></tbody></table><p>【问题】</p><p>编写 SQL 语句，从 <code>Products</code> 表中检索所有的产品名称（<code>prod_name</code>），以及名为 <code>quant_sold</code> 的计算列，其中包含所售产品的总数（在 <code>OrderItems</code> 表上使用子查询和 <code>SUM(quantity)</code> 检索）。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 写法 1：子查询</span>
<span class="token keyword">SELECT</span> p<span class="token punctuation">.</span>prod_name<span class="token punctuation">,</span> tb<span class="token punctuation">.</span>quant_sold
<span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> <span class="token function">Sum</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> quant_sold
    <span class="token keyword">FROM</span> OrderItems
    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> prod_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> tb<span class="token punctuation">,</span>
  Products p
<span class="token keyword">WHERE</span> tb<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> p<span class="token punctuation">.</span>prod_id

<span class="token comment"># 写法 2：连接表</span>
<span class="token keyword">SELECT</span> p<span class="token punctuation">.</span>prod_name<span class="token punctuation">,</span> <span class="token function">Sum</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> quant_sold
<span class="token keyword">FROM</span> Products p<span class="token punctuation">,</span>
  OrderItems o
<span class="token keyword">WHERE</span> p<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> o<span class="token punctuation">.</span>prod_id
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> p<span class="token punctuation">.</span>prod_name（这里不能用 p<span class="token punctuation">.</span>prod_id，会报错）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="连接表" tabindex="-1"><a class="header-anchor" href="#连接表" aria-hidden="true">#</a> 连接表</h2><p>JOIN 是“连接”的意思，顾名思义，SQL JOIN 子句用于将两个或者多个表联合起来进行查询。</p><p>连接表时需要在每个表中选择一个字段，并对这些字段的值进行比较，值相同的两条记录将合并为一条。<strong>连接表的本质就是将不同表的记录合并起来，形成一张新表。当然，这张新表只是临时的，它仅存在于本次查询期间</strong>。</p><p>使用 <code>JOIN</code> 连接两个表的基本语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> table1<span class="token punctuation">.</span>column1<span class="token punctuation">,</span> table2<span class="token punctuation">.</span>column2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">FROM</span> table1
<span class="token keyword">JOIN</span> table2
<span class="token keyword">ON</span> table1<span class="token punctuation">.</span>common_column1 <span class="token operator">=</span> table2<span class="token punctuation">.</span>common_column2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>table1.common_column1 = table2.common_column2</code> 是连接条件，只有满足此条件的记录才会合并为一行。您可以使用多个运算符来连接表，例如 =、&gt;、&lt;、&lt;&gt;、&lt;=、&gt;=、!=、<code>between</code>、<code>like</code> 或者 <code>not</code>，但是最常见的是使用 =。</p><p>当两个表中有同名的字段时，为了帮助数据库引擎区分是哪个表的字段，在书写同名字段名时需要加上表名。当然，如果书写的字段名在两个表中是唯一的，也可以不使用以上格式，只写字段名即可。</p><p>另外，如果两张表的关联字段名相同，也可以使用 <code>USING</code>子句来代替 <code>ON</code>，举个例子：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># join....on</span>
<span class="token keyword">SELECT</span> c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_num
<span class="token keyword">FROM</span> Customers c
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Orders o
<span class="token keyword">ON</span> c<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> o<span class="token punctuation">.</span>cust_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c<span class="token punctuation">.</span>cust_name

<span class="token comment"># 如果两张表的关联字段名相同，也可以使用USING子句：JOIN....USING()</span>
<span class="token keyword">SELECT</span> c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_num
<span class="token keyword">FROM</span> Customers c
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Orders o
<span class="token keyword">USING</span><span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c<span class="token punctuation">.</span>cust_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>ON</code> 和 <code>WHERE</code> 的区别</strong>：</p><ul><li>连接表时，SQL 会根据连接条件生成一张新的临时表。<code>ON</code> 就是连接条件，它决定临时表的生成。</li><li><code>WHERE</code> 是在临时表生成以后，再对临时表中的数据进行过滤，生成最终的结果集，这个时候已经没有 JOIN-ON 了。</li></ul><p>所以总结来说就是：<strong>SQL 先根据 ON 生成一张临时表，然后再根据 WHERE 对临时表进行筛选</strong>。</p><p>SQL 允许在 <code>JOIN</code> 左边加上一些修饰性的关键词，从而形成不同类型的连接，如下表所示：</p><table><thead><tr><th>连接类型</th><th>说明</th></tr></thead><tbody><tr><td>INNER JOIN 内连接</td><td>（默认连接方式）只有当两个表都存在满足条件的记录时才会返回行。</td></tr><tr><td>LEFT JOIN / LEFT OUTER JOIN 左(外)连接</td><td>返回左表中的所有行，即使右表中没有满足条件的行也是如此。</td></tr><tr><td>RIGHT JOIN / RIGHT OUTER JOIN 右(外)连接</td><td>返回右表中的所有行，即使左表中没有满足条件的行也是如此。</td></tr><tr><td>FULL JOIN / FULL OUTER JOIN 全(外)连接</td><td>只要其中有一个表存在满足条件的记录，就返回行。</td></tr><tr><td>SELF JOIN</td><td>将一个表连接到自身，就像该表是两个表一样。为了区分两个表，在 SQL 语句中需要至少重命名一个表。</td></tr><tr><td>CROSS JOIN</td><td>交叉连接，从两个或者多个连接表中返回记录集的笛卡尔积。</td></tr></tbody></table><p>下图展示了 LEFT JOIN、RIGHT JOIN、INNER JOIN、OUTER JOIN 相关的 7 种用法。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/csdn/d1794312b448516831369f869814ab39.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果不加任何修饰词，只写 <code>JOIN</code>，那么默认为 <code>INNER JOIN</code></p><p>对于 <code>INNER JOIN</code> 来说，还有一种隐式的写法，称为 “<strong>隐式内连接</strong>”，也就是没有 <code>INNER JOIN</code> 关键字，使用 <code>WHERE</code> 语句实现内连接的功能</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 隐式内连接</span>
<span class="token keyword">SELECT</span> c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_num
<span class="token keyword">FROM</span> Customers c<span class="token punctuation">,</span>Orders o
<span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> o<span class="token punctuation">.</span>cust_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c<span class="token punctuation">.</span>cust_name

<span class="token comment"># 显式内连接</span>
<span class="token keyword">SELECT</span> c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_num
<span class="token keyword">FROM</span> Customers c
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Orders o
<span class="token keyword">USING</span><span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c<span class="token punctuation">.</span>cust_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回顾客名称和相关订单号" tabindex="-1"><a class="header-anchor" href="#返回顾客名称和相关订单号" aria-hidden="true">#</a> 返回顾客名称和相关订单号</h3><p><code>Customers</code> 表有字段顾客名称 <code>cust_name</code>、顾客 id <code>cust_id</code></p><table><thead><tr><th>cust_id</th><th>cust_name</th></tr></thead><tbody><tr><td>cust10</td><td>andy</td></tr><tr><td>cust1</td><td>ben</td></tr><tr><td>cust2</td><td>tony</td></tr><tr><td>cust22</td><td>tom</td></tr><tr><td>cust221</td><td>an</td></tr><tr><td>cust2217</td><td>hex</td></tr></tbody></table><p><code>Orders</code> 订单信息表，含有字段 <code>order_num</code> 订单号、<code>cust_id</code> 顾客 id</p><table><thead><tr><th>order_num</th><th>cust_id</th></tr></thead><tbody><tr><td>a1</td><td>cust10</td></tr><tr><td>a2</td><td>cust1</td></tr><tr><td>a3</td><td>cust2</td></tr><tr><td>a4</td><td>cust22</td></tr><tr><td>a5</td><td>cust221</td></tr><tr><td>a7</td><td>cust2217</td></tr></tbody></table><p>【问题】编写 SQL 语句，返回 <code>Customers</code> 表中的顾客名称（<code>cust_name</code>）和 <code>Orders</code> 表中的相关订单号（<code>order_num</code>），并按顾客名称再按订单号对结果进行升序排序。你可以尝试用两个不同的写法，一个使用简单的等连接语法，另外一个使用 INNER JOIN。</p><p>答案：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 隐式内连接</span>
<span class="token keyword">SELECT</span> c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_num
<span class="token keyword">FROM</span> Customers c<span class="token punctuation">,</span>Orders o
<span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> o<span class="token punctuation">.</span>cust_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span>o<span class="token punctuation">.</span>order_num

<span class="token comment"># 显式内连接</span>
<span class="token keyword">SELECT</span> c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_num
<span class="token keyword">FROM</span> Customers c
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Orders o
<span class="token keyword">USING</span><span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span>o<span class="token punctuation">.</span>order_num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回顾客名称和相关订单号以及每个订单的总价" tabindex="-1"><a class="header-anchor" href="#返回顾客名称和相关订单号以及每个订单的总价" aria-hidden="true">#</a> 返回顾客名称和相关订单号以及每个订单的总价</h3><p><code>Customers</code> 表有字段，顾客名称：<code>cust_name</code>、顾客 id：<code>cust_id</code></p><table><thead><tr><th>cust_id</th><th>cust_name</th></tr></thead><tbody><tr><td>cust10</td><td>andy</td></tr><tr><td>cust1</td><td>ben</td></tr><tr><td>cust2</td><td>tony</td></tr><tr><td>cust22</td><td>tom</td></tr><tr><td>cust221</td><td>an</td></tr><tr><td>cust2217</td><td>hex</td></tr></tbody></table><p><code>Orders</code> 订单信息表，含有字段，订单号：<code>order_num</code>、顾客 id：<code>cust_id</code></p><table><thead><tr><th>order_num</th><th>cust_id</th></tr></thead><tbody><tr><td>a1</td><td>cust10</td></tr><tr><td>a2</td><td>cust1</td></tr><tr><td>a3</td><td>cust2</td></tr><tr><td>a4</td><td>cust22</td></tr><tr><td>a5</td><td>cust221</td></tr><tr><td>a7</td><td>cust2217</td></tr></tbody></table><p><code>OrderItems</code> 表有字段，商品订单号：<code>order_num</code>、商品数量：<code>quantity</code>、商品价格：<code>item_price</code></p><table><thead><tr><th>order_num</th><th>quantity</th><th>item_price</th></tr></thead><tbody><tr><td>a1</td><td>1000</td><td>10</td></tr><tr><td>a2</td><td>200</td><td>10</td></tr><tr><td>a3</td><td>10</td><td>15</td></tr><tr><td>a4</td><td>25</td><td>50</td></tr><tr><td>a5</td><td>15</td><td>25</td></tr><tr><td>a7</td><td>7</td><td>7</td></tr></tbody></table><p>【问题】除了返回顾客名称和订单号，返回 <code>Customers</code> 表中的顾客名称（<code>cust_name</code>）和 <code>Orders</code> 表中的相关订单号（<code>order_num</code>），添加第三列 <code>OrderTotal</code>，其中包含每个订单的总价，并按顾客名称再按订单号对结果进行升序排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 简单的等连接语法</span>
<span class="token keyword">SELECT</span> c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_num<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>quantity <span class="token operator">*</span> item_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> OrderTotal
<span class="token keyword">FROM</span> Customers c<span class="token punctuation">,</span>Orders o<span class="token punctuation">,</span>OrderItems oi
<span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> o<span class="token punctuation">.</span>cust_id <span class="token operator">AND</span> o<span class="token punctuation">.</span>order_num <span class="token operator">=</span> oi<span class="token punctuation">.</span>order_num
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_num
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_num
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，可能有小伙伴会这样写：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span> o<span class="token punctuation">.</span>order_num<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>quantity <span class="token operator">*</span> item_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> OrderTotal
<span class="token keyword">FROM</span> Customers c<span class="token punctuation">,</span>Orders o<span class="token punctuation">,</span>OrderItems oi
<span class="token keyword">WHERE</span> c<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> o<span class="token punctuation">.</span>cust_id <span class="token operator">AND</span> o<span class="token punctuation">.</span>order_num <span class="token operator">=</span> oi<span class="token punctuation">.</span>order_num
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> c<span class="token punctuation">.</span>cust_name
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> c<span class="token punctuation">.</span>cust_name<span class="token punctuation">,</span>o<span class="token punctuation">.</span>order_num
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是错误的！只对 <code>cust_name</code> 进行聚类确实符合题意，但是不符合 <code>GROUP BY</code> 的语法。</p><p>select 语句中，如果没有 <code>GROUP BY</code> 语句，那么 <code>cust_name</code>、<code>order_num</code> 会返回若干个值，而 <code>sum(quantity * item_price)</code> 只返回一个值，通过 <code>group by</code> <code>cust_name</code> 可以让 <code>cust_name</code> 和 <code>sum(quantity * item_price)</code> 一一对应起来，或者说<strong>聚类</strong>，所以同样的，也要对 <code>order_num</code> 进行聚类。</p><blockquote><p><strong>一句话，select 中的字段要么都聚类，要么都不聚类</strong></p></blockquote><h3 id="确定哪些订单购买了-prod-id-为-br01-的产品-二" tabindex="-1"><a class="header-anchor" href="#确定哪些订单购买了-prod-id-为-br01-的产品-二" aria-hidden="true">#</a> 确定哪些订单购买了 prod_id 为 BR01 的产品（二）</h3><p>表 <code>OrderItems</code> 代表订单商品信息表，<code>prod_id</code> 为产品 id；<code>Orders</code> 表代表订单表有 <code>cust_id</code> 代表顾客 id 和订单日期 <code>order_date</code></p><p><code>OrderItems</code> 表：</p><table><thead><tr><th>prod_id</th><th>order_num</th></tr></thead><tbody><tr><td>BR01</td><td>a0001</td></tr><tr><td>BR01</td><td>a0002</td></tr><tr><td>BR02</td><td>a0003</td></tr><tr><td>BR02</td><td>a0013</td></tr></tbody></table><p><code>Orders</code> 表：</p><table><thead><tr><th>order_num</th><th>cust_id</th><th>order_date</th></tr></thead><tbody><tr><td>a0001</td><td>cust10</td><td>2022-01-01 00:00:00</td></tr><tr><td>a0002</td><td>cust1</td><td>2022-01-01 00:01:00</td></tr><tr><td>a0003</td><td>cust1</td><td>2022-01-02 00:00:00</td></tr><tr><td>a0013</td><td>cust2</td><td>2022-01-01 00:20:00</td></tr></tbody></table><p>【问题】</p><p>编写 SQL 语句，使用子查询来确定哪些订单（在 <code>OrderItems</code> 中）购买了 <code>prod_id</code> 为 &quot;BR01&quot; 的产品，然后从 <code>Orders</code> 表中返回每个产品对应的顾客 ID（<code>cust_id</code>）和订单日期（<code>order_date</code>），按订购日期对结果进行升序排序。</p><p>提示：这一次使用连接和简单的等连接语法。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 写法 1：子查询</span>
<span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span> order_date
<span class="token keyword">FROM</span> Orders
<span class="token keyword">WHERE</span> order_num <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> order_num
    <span class="token keyword">FROM</span> OrderItems
    <span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">&#39;BR01&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> order_date

<span class="token comment"># 写法 2：连接表 inner join</span>
<span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span> order_date
<span class="token keyword">FROM</span> Orders o <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>
  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> order_num
    <span class="token keyword">FROM</span> OrderItems
    <span class="token keyword">WHERE</span> prod_id <span class="token operator">=</span> <span class="token string">&#39;BR01&#39;</span><span class="token punctuation">)</span> tb <span class="token keyword">ON</span> o<span class="token punctuation">.</span>order_num <span class="token operator">=</span> tb<span class="token punctuation">.</span>order_num
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> order_date

<span class="token comment"># 写法 3：写法 2 的简化版</span>
<span class="token keyword">SELECT</span> cust_id<span class="token punctuation">,</span> order_date
<span class="token keyword">FROM</span> Orders
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> OrderItems <span class="token keyword">USING</span><span class="token punctuation">(</span>order_num<span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> OrderItems<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> <span class="token string">&#39;BR01&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> order_date
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回购买-prod-id-为-br01-的产品的所有顾客的电子邮件-二" tabindex="-1"><a class="header-anchor" href="#返回购买-prod-id-为-br01-的产品的所有顾客的电子邮件-二" aria-hidden="true">#</a> 返回购买 prod_id 为 BR01 的产品的所有顾客的电子邮件（二）</h3><p>有表 <code>OrderItems</code> 代表订单商品信息表，<code>prod_id</code> 为产品 id；<code>Orders</code> 表代表订单表有 <code>cust_id</code> 代表顾客 id 和订单日期 <code>order_date</code>；<code>Customers</code> 表含有 <code>cust_email</code> 顾客邮件和 cust_id 顾客 id</p><p><code>OrderItems</code> 表：</p><table><thead><tr><th>prod_id</th><th>order_num</th></tr></thead><tbody><tr><td>BR01</td><td>a0001</td></tr><tr><td>BR01</td><td>a0002</td></tr><tr><td>BR02</td><td>a0003</td></tr><tr><td>BR02</td><td>a0013</td></tr></tbody></table><p><code>Orders</code> 表：</p><table><thead><tr><th>order_num</th><th>cust_id</th><th>order_date</th></tr></thead><tbody><tr><td>a0001</td><td>cust10</td><td>2022-01-01 00:00:00</td></tr><tr><td>a0002</td><td>cust1</td><td>2022-01-01 00:01:00</td></tr><tr><td>a0003</td><td>cust1</td><td>2022-01-02 00:00:00</td></tr><tr><td>a0013</td><td>cust2</td><td>2022-01-01 00:20:00</td></tr></tbody></table><p><code>Customers</code> 表代表顾客信息，<code>cust_id</code> 为顾客 id，<code>cust_email</code> 为顾客 email</p><table><thead><tr><th>cust_id</th><th>cust_email</th></tr></thead><tbody><tr><td>cust10</td><td><a href="mailto:cust10@cust.com">cust10@cust.com</a></td></tr><tr><td>cust1</td><td><a href="mailto:cust1@cust.com">cust1@cust.com</a></td></tr><tr><td>cust2</td><td><a href="mailto:cust2@cust.com">cust2@cust.com</a></td></tr></tbody></table><p>【问题】返回购买 <code>prod_id</code> 为 BR01 的产品的所有顾客的电子邮件（<code>Customers</code> 表中的 <code>cust_email</code>），结果无需排序。</p><p>提示：涉及到 <code>SELECT</code> 语句，最内层的从 <code>OrderItems</code> 表返回 <code>order_num</code>，中间的从 <code>Customers</code> 表返回 <code>cust_id</code>，但是必须使用 INNER JOIN 语法。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_email
<span class="token keyword">FROM</span> Customers
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Orders <span class="token keyword">using</span><span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span>
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> OrderItems <span class="token keyword">using</span><span class="token punctuation">(</span>order_num<span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> OrderItems<span class="token punctuation">.</span>prod_id <span class="token operator">=</span> <span class="token string">&#39;BR01&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="确定最佳顾客的另一种方式-二" tabindex="-1"><a class="header-anchor" href="#确定最佳顾客的另一种方式-二" aria-hidden="true">#</a> 确定最佳顾客的另一种方式（二）</h3><p><code>OrderItems</code> 表代表订单信息，确定最佳顾客的另一种方式是看他们花了多少钱，<code>OrderItems</code> 表有订单号 <code>order_num</code> 和 <code>item_price</code> 商品售出价格、<code>quantity</code> 商品数量</p><table><thead><tr><th>order_num</th><th>item_price</th><th>quantity</th></tr></thead><tbody><tr><td>a1</td><td>10</td><td>105</td></tr><tr><td>a2</td><td>1</td><td>1100</td></tr><tr><td>a2</td><td>1</td><td>200</td></tr><tr><td>a4</td><td>2</td><td>1121</td></tr><tr><td>a5</td><td>5</td><td>10</td></tr><tr><td>a2</td><td>1</td><td>19</td></tr><tr><td>a7</td><td>7</td><td>5</td></tr></tbody></table><p><code>Orders</code> 表含有字段 <code>order_num</code> 订单号、<code>cust_id</code> 顾客 id</p><table><thead><tr><th>order_num</th><th>cust_id</th></tr></thead><tbody><tr><td>a1</td><td>cust10</td></tr><tr><td>a2</td><td>cust1</td></tr><tr><td>a3</td><td>cust2</td></tr><tr><td>a4</td><td>cust22</td></tr><tr><td>a5</td><td>cust221</td></tr><tr><td>a7</td><td>cust2217</td></tr></tbody></table><p>顾客表 <code>Customers</code> 有字段 <code>cust_id</code> 客户 id、<code>cust_name</code> 客户姓名</p><table><thead><tr><th>cust_id</th><th>cust_name</th></tr></thead><tbody><tr><td>cust10</td><td>andy</td></tr><tr><td>cust1</td><td>ben</td></tr><tr><td>cust2</td><td>tony</td></tr><tr><td>cust22</td><td>tom</td></tr><tr><td>cust221</td><td>an</td></tr><tr><td>cust2217</td><td>hex</td></tr></tbody></table><p>【问题】编写 SQL 语句，返回订单总价不小于 1000 的客户名称和总额（<code>OrderItems</code> 表中的 <code>order_num</code>）。</p><p>提示：需要计算总和（<code>item_price</code> 乘以 <code>quantity</code>）。按总额对结果进行排序，请使用 <code>INNER JOIN</code>语法。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>item_price <span class="token operator">*</span> quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> total_price
<span class="token keyword">FROM</span> Customers
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Orders <span class="token keyword">USING</span><span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span>
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> OrderItems <span class="token keyword">USING</span><span class="token punctuation">(</span>order_num<span class="token punctuation">)</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> cust_name
<span class="token keyword">HAVING</span> total_price <span class="token operator">&gt;=</span> <span class="token number">1000</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> total_price
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建高级连接" tabindex="-1"><a class="header-anchor" href="#创建高级连接" aria-hidden="true">#</a> 创建高级连接</h2><h3 id="检索每个顾客的名称和所有的订单号-一" tabindex="-1"><a class="header-anchor" href="#检索每个顾客的名称和所有的订单号-一" aria-hidden="true">#</a> 检索每个顾客的名称和所有的订单号（一）</h3><p><code>Customers</code> 表代表顾客信息含有顾客 id <code>cust_id</code> 和 顾客名称 <code>cust_name</code></p><table><thead><tr><th>cust_id</th><th>cust_name</th></tr></thead><tbody><tr><td>cust10</td><td>andy</td></tr><tr><td>cust1</td><td>ben</td></tr><tr><td>cust2</td><td>tony</td></tr><tr><td>cust22</td><td>tom</td></tr><tr><td>cust221</td><td>an</td></tr><tr><td>cust2217</td><td>hex</td></tr></tbody></table><p><code>Orders</code> 表代表订单信息含有订单号 <code>order_num</code> 和顾客 id <code>cust_id</code></p><table><thead><tr><th>order_num</th><th>cust_id</th></tr></thead><tbody><tr><td>a1</td><td>cust10</td></tr><tr><td>a2</td><td>cust1</td></tr><tr><td>a3</td><td>cust2</td></tr><tr><td>a4</td><td>cust22</td></tr><tr><td>a5</td><td>cust221</td></tr><tr><td>a7</td><td>cust2217</td></tr></tbody></table><p>【问题】使用 INNER JOIN 编写 SQL 语句，检索每个顾客的名称（<code>Customers</code> 表中的 <code>cust_name</code>）和所有的订单号（<code>Orders</code> 表中的 <code>order_num</code>），最后根据顾客姓名 <code>cust_name</code> 升序返回。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> order_num
<span class="token keyword">FROM</span> Customers
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Orders
<span class="token keyword">USING</span><span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cust_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检索每个顾客的名称和所有的订单号-二" tabindex="-1"><a class="header-anchor" href="#检索每个顾客的名称和所有的订单号-二" aria-hidden="true">#</a> 检索每个顾客的名称和所有的订单号（二）</h3><p><code>Orders</code> 表代表订单信息含有订单号 <code>order_num</code> 和顾客 id <code>cust_id</code></p><table><thead><tr><th>order_num</th><th>cust_id</th></tr></thead><tbody><tr><td>a1</td><td>cust10</td></tr><tr><td>a2</td><td>cust1</td></tr><tr><td>a3</td><td>cust2</td></tr><tr><td>a4</td><td>cust22</td></tr><tr><td>a5</td><td>cust221</td></tr><tr><td>a7</td><td>cust2217</td></tr></tbody></table><p><code>Customers</code> 表代表顾客信息含有顾客 id <code>cust_id</code> 和 顾客名称 <code>cust_name</code></p><table><thead><tr><th>cust_id</th><th>cust_name</th></tr></thead><tbody><tr><td>cust10</td><td>andy</td></tr><tr><td>cust1</td><td>ben</td></tr><tr><td>cust2</td><td>tony</td></tr><tr><td>cust22</td><td>tom</td></tr><tr><td>cust221</td><td>an</td></tr><tr><td>cust2217</td><td>hex</td></tr><tr><td>cust40</td><td>ace</td></tr></tbody></table><p>【问题】检索每个顾客的名称（<code>Customers</code> 表中的 <code>cust_name</code>）和所有的订单号（Orders 表中的 <code>order_num</code>），列出所有的顾客，即使他们没有下过订单。最后根据顾客姓名 <code>cust_name</code> 升序返回。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> order_num
<span class="token keyword">FROM</span> Customers
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> Orders
<span class="token keyword">USING</span><span class="token punctuation">(</span>cust_id<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cust_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回产品名称和与之相关的订单号" tabindex="-1"><a class="header-anchor" href="#返回产品名称和与之相关的订单号" aria-hidden="true">#</a> 返回产品名称和与之相关的订单号</h3><p><code>Products</code> 表为产品信息表含有字段 <code>prod_id</code> 产品 id、<code>prod_name</code> 产品名称</p><table><thead><tr><th>prod_id</th><th>prod_name</th></tr></thead><tbody><tr><td>a0001</td><td>egg</td></tr><tr><td>a0002</td><td>sockets</td></tr><tr><td>a0013</td><td>coffee</td></tr><tr><td>a0003</td><td>cola</td></tr><tr><td>a0023</td><td>soda</td></tr></tbody></table><p><code>OrderItems</code> 表为订单信息表含有字段 <code>order_num</code> 订单号和产品 id <code>prod_id</code></p><table><thead><tr><th>prod_id</th><th>order_num</th></tr></thead><tbody><tr><td>a0001</td><td>a105</td></tr><tr><td>a0002</td><td>a1100</td></tr><tr><td>a0002</td><td>a200</td></tr><tr><td>a0013</td><td>a1121</td></tr><tr><td>a0003</td><td>a10</td></tr><tr><td>a0003</td><td>a19</td></tr><tr><td>a0003</td><td>a5</td></tr></tbody></table><p>【问题】使用外连接（left join、 right join、full join）联结 <code>Products</code> 表和 <code>OrderItems</code> 表，返回产品名称（<code>prod_name</code>）和与之相关的订单号（<code>order_num</code>）的列表，并按照产品名称升序排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> order_num
<span class="token keyword">FROM</span> Products
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> OrderItems
<span class="token keyword">USING</span><span class="token punctuation">(</span>prod_id<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="返回产品名称和每一项产品的总订单数" tabindex="-1"><a class="header-anchor" href="#返回产品名称和每一项产品的总订单数" aria-hidden="true">#</a> 返回产品名称和每一项产品的总订单数</h3><p><code>Products</code> 表为产品信息表含有字段 <code>prod_id</code> 产品 id、<code>prod_name</code> 产品名称</p><table><thead><tr><th>prod_id</th><th>prod_name</th></tr></thead><tbody><tr><td>a0001</td><td>egg</td></tr><tr><td>a0002</td><td>sockets</td></tr><tr><td>a0013</td><td>coffee</td></tr><tr><td>a0003</td><td>cola</td></tr><tr><td>a0023</td><td>soda</td></tr></tbody></table><p><code>OrderItems</code> 表为订单信息表含有字段 <code>order_num</code> 订单号和产品 id <code>prod_id</code></p><table><thead><tr><th>prod_id</th><th>order_num</th></tr></thead><tbody><tr><td>a0001</td><td>a105</td></tr><tr><td>a0002</td><td>a1100</td></tr><tr><td>a0002</td><td>a200</td></tr><tr><td>a0013</td><td>a1121</td></tr><tr><td>a0003</td><td>a10</td></tr><tr><td>a0003</td><td>a19</td></tr><tr><td>a0003</td><td>a5</td></tr></tbody></table><p>【问题】</p><p>使用 OUTER JOIN 联结 <code>Products</code> 表和 <code>OrderItems</code> 表，返回产品名称（<code>prod_name</code>）和每一项产品的总订单数（不是订单号），并按产品名称升序排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_name<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>order_num<span class="token punctuation">)</span> <span class="token keyword">AS</span> orders
<span class="token keyword">FROM</span> Products
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> OrderItems
<span class="token keyword">USING</span><span class="token punctuation">(</span>prod_id<span class="token punctuation">)</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> prod_name
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列出供应商及其可供产品的数量" tabindex="-1"><a class="header-anchor" href="#列出供应商及其可供产品的数量" aria-hidden="true">#</a> 列出供应商及其可供产品的数量</h3><p>有 <code>Vendors</code> 表含有 <code>vend_id</code> （供应商 id）</p><table><thead><tr><th>vend_id</th></tr></thead><tbody><tr><td>a0002</td></tr><tr><td>a0013</td></tr><tr><td>a0003</td></tr><tr><td>a0010</td></tr></tbody></table><p>有 <code>Products</code> 表含有 <code>vend_id</code>（供应商 id）和 prod_id（供应产品 id）</p><table><thead><tr><th>vend_id</th><th>prod_id</th></tr></thead><tbody><tr><td>a0001</td><td>egg</td></tr><tr><td>a0002</td><td>prod_id_iphone</td></tr><tr><td>a00113</td><td>prod_id_tea</td></tr><tr><td>a0003</td><td>prod_id_vivo phone</td></tr><tr><td>a0010</td><td>prod_id_huawei phone</td></tr></tbody></table><p>【问题】列出供应商（<code>Vendors</code> 表中的 <code>vend_id</code>）及其可供产品的数量，包括没有产品的供应商。你需要使用 OUTER JOIN 和 COUNT()聚合函数来计算 <code>Products</code> 表中每种产品的数量，最后根据 vend_id 升序排序。</p><p>注意：<code>vend_id</code> 列会显示在多个表中，因此在每次引用它时都需要完全限定它。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>prod_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> prod_id
<span class="token keyword">FROM</span> Vendors
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> Products
<span class="token keyword">USING</span><span class="token punctuation">(</span>vend_id<span class="token punctuation">)</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> vend_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> vend_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组合查询" tabindex="-1"><a class="header-anchor" href="#组合查询" aria-hidden="true">#</a> 组合查询</h2><p><code>UNION</code> 运算符将两个或更多查询的结果组合起来，并生成一个结果集，其中包含来自 <code>UNION</code> 中参与查询的提取行。</p><p><code>UNION</code> 基本规则：</p><ul><li>所有查询的列数和列顺序必须相同。</li><li>每个查询中涉及表的列的数据类型必须相同或兼容。</li><li>通常返回的列名取自第一个查询。</li></ul><p>默认地，<code>UNION</code> 操作符选取不同的值。如果允许重复的值，请使用 <code>UNION ALL</code>。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table1
<span class="token keyword">UNION</span> <span class="token keyword">ALL</span>
<span class="token keyword">SELECT</span> column_name<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>UNION</code> 结果集中的列名总是等于 <code>UNION</code> 中第一个 <code>SELECT</code> 语句中的列名。</p><p><code>JOIN</code> vs <code>UNION</code>：</p><ul><li><code>JOIN</code> 中连接表的列可能不同，但在 <code>UNION</code> 中，所有查询的列数和列顺序必须相同。</li><li><code>UNION</code> 将查询之后的行放在一起（垂直放置），但 <code>JOIN</code> 将查询之后的列放在一起（水平放置），即它构成一个笛卡尔积。</li></ul><h3 id="将两个-select-语句结合起来-一" tabindex="-1"><a class="header-anchor" href="#将两个-select-语句结合起来-一" aria-hidden="true">#</a> 将两个 SELECT 语句结合起来（一）</h3><p>表 <code>OrderItems</code> 包含订单产品信息，字段 <code>prod_id</code> 代表产品 id、<code>quantity</code> 代表产品数量</p><table><thead><tr><th>prod_id</th><th>quantity</th></tr></thead><tbody><tr><td>a0001</td><td>105</td></tr><tr><td>a0002</td><td>100</td></tr><tr><td>a0002</td><td>200</td></tr><tr><td>a0013</td><td>1121</td></tr><tr><td>a0003</td><td>10</td></tr><tr><td>a0003</td><td>19</td></tr><tr><td>a0003</td><td>5</td></tr><tr><td>BNBG</td><td>10002</td></tr></tbody></table><p>【问题】将两个 <code>SELECT</code> 语句结合起来，以便从 <code>OrderItems</code> 表中检索产品 id（<code>prod_id</code>）和 <code>quantity</code>。其中，一个 <code>SELECT</code> 语句过滤数量为 100 的行，另一个 <code>SELECT</code> 语句过滤 id 以 BNBG 开头的产品，最后按产品 id 对结果进行升序排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> quantity
<span class="token keyword">FROM</span> OrderItems
<span class="token keyword">WHERE</span> quantity <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> quantity
<span class="token keyword">FROM</span> OrderItems
<span class="token keyword">WHERE</span> prod_id <span class="token operator">LIKE</span> <span class="token string">&#39;BNBG%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="将两个-select-语句结合起来-二" tabindex="-1"><a class="header-anchor" href="#将两个-select-语句结合起来-二" aria-hidden="true">#</a> 将两个 SELECT 语句结合起来（二）</h3><p>表 <code>OrderItems</code> 包含订单产品信息，字段 <code>prod_id</code> 代表产品 id、<code>quantity</code> 代表产品数量。</p><table><thead><tr><th>prod_id</th><th>quantity</th></tr></thead><tbody><tr><td>a0001</td><td>105</td></tr><tr><td>a0002</td><td>100</td></tr><tr><td>a0002</td><td>200</td></tr><tr><td>a0013</td><td>1121</td></tr><tr><td>a0003</td><td>10</td></tr><tr><td>a0003</td><td>19</td></tr><tr><td>a0003</td><td>5</td></tr><tr><td>BNBG</td><td>10002</td></tr></tbody></table><p>【问题】将两个 <code>SELECT</code> 语句结合起来，以便从 <code>OrderItems</code> 表中检索产品 id（<code>prod_id</code>）和 <code>quantity</code>。其中，一个 <code>SELECT</code> 语句过滤数量为 100 的行，另一个 <code>SELECT</code> 语句过滤 id 以 BNBG 开头的产品，最后按产品 id 对结果进行升序排序。 注意：<strong>这次仅使用单个 SELECT 语句。</strong></p><p>答案：</p><p>要求只用一条 select 语句，那就用 <code>or</code> 不用 <code>union</code> 了。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> prod_id<span class="token punctuation">,</span> quantity
<span class="token keyword">FROM</span> OrderItems
<span class="token keyword">WHERE</span> quantity <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">OR</span> prod_id <span class="token operator">LIKE</span> <span class="token string">&#39;BNBG%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合-products-表中的产品名称和-customers-表中的顾客名称" tabindex="-1"><a class="header-anchor" href="#组合-products-表中的产品名称和-customers-表中的顾客名称" aria-hidden="true">#</a> 组合 Products 表中的产品名称和 Customers 表中的顾客名称</h3><p><code>Products</code> 表含有字段 <code>prod_name</code> 代表产品名称</p><table><thead><tr><th>prod_name</th></tr></thead><tbody><tr><td>flower</td></tr><tr><td>rice</td></tr><tr><td>ring</td></tr><tr><td>umbrella</td></tr></tbody></table><p>Customers 表代表顾客信息，cust_name 代表顾客名称</p><table><thead><tr><th>cust_name</th></tr></thead><tbody><tr><td>andy</td></tr><tr><td>ben</td></tr><tr><td>tony</td></tr><tr><td>tom</td></tr><tr><td>an</td></tr><tr><td>lee</td></tr><tr><td>hex</td></tr></tbody></table><p>【问题】编写 SQL 语句，组合 <code>Products</code> 表中的产品名称（<code>prod_name</code>）和 <code>Customers</code> 表中的顾客名称（<code>cust_name</code>）并返回，然后按产品名称对结果进行升序排序。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># UNION 结果集中的列名总是等于 UNION 中第一个 SELECT 语句中的列名。</span>
<span class="token keyword">SELECT</span> prod_name
<span class="token keyword">FROM</span> Products
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> cust_name
<span class="token keyword">FROM</span> Customers
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> prod_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检查-sql-语句-3" tabindex="-1"><a class="header-anchor" href="#检查-sql-语句-3" aria-hidden="true">#</a> 检查 SQL 语句</h3><p>表 <code>Customers</code> 含有字段 <code>cust_name</code> 顾客名、<code>cust_contact</code> 顾客联系方式、<code>cust_state</code> 顾客州、<code>cust_email</code> 顾客 <code>email</code></p><table><thead><tr><th>cust_name</th><th>cust_contact</th><th>cust_state</th><th>cust_email</th></tr></thead><tbody><tr><td>cust10</td><td>8695192</td><td>MI</td><td><a href="mailto:cust10@cust.com">cust10@cust.com</a></td></tr><tr><td>cust1</td><td>8695193</td><td>MI</td><td><a href="mailto:cust1@cust.com">cust1@cust.com</a></td></tr><tr><td>cust2</td><td>8695194</td><td>IL</td><td><a href="mailto:cust2@cust.com">cust2@cust.com</a></td></tr></tbody></table><p>【问题】修正下面错误的 SQL</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_state <span class="token operator">=</span> <span class="token string">&#39;MI&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cust_name<span class="token punctuation">;</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_state <span class="token operator">=</span> <span class="token string">&#39;IL&#39;</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cust_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修正后：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_state <span class="token operator">=</span> <span class="token string">&#39;MI&#39;</span>
<span class="token keyword">UNION</span>
<span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_state <span class="token operator">=</span> <span class="token string">&#39;IL&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cust_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>union</code> 组合查询时，只能使用一条 <code>order by</code> 字句，他必须位于最后一条 <code>select</code> 语句之后</p><p>或者直接用 <code>or</code> 来做：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> cust_name<span class="token punctuation">,</span> cust_contact<span class="token punctuation">,</span> cust_email
<span class="token keyword">FROM</span> Customers
<span class="token keyword">WHERE</span> cust_state <span class="token operator">=</span> <span class="token string">&#39;MI&#39;</span> <span class="token operator">or</span> cust_state <span class="token operator">=</span> <span class="token string">&#39;IL&#39;</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cust_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,444);function u(k,m){const n=d("ExternalLinkIcon");return e(),o("div",null,[t("blockquote",null,[t("p",null,[s("题目来源于："),t("a",l,[s("牛客题霸 - SQL 必知必会"),c(n)])])]),i])}const h=a(p,[["render",u],["__file","sql-questions-01.html.vue"]]);export{h as default};
