const e=JSON.parse('{"key":"v-50d3646a","path":"/assembly/dubbo.html","title":"组件Dubbo","lang":"zh-CN","frontmatter":{"title":"组件Dubbo","icon":"laptop-code","category":["设计组件"],"tag":["组件"],"description":"1、Dubbo的基本介绍 Dubbo 是阿里巴巴公司开源的一个高性能、轻量级的 Java RPC 框架。 它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。 1.1、基本概念 img_15.png 服务提供者**（Provider）**：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。 服务消费者**（Consumer）**:&nbsp;调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。 注册中心**（Registry）**：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者 监控中心**（Monitor）**：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心","head":[["meta",{"property":"og:url","content":"https://ujava.cn/assembly/dubbo.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"组件Dubbo"}],["meta",{"property":"og:description","content":"1、Dubbo的基本介绍 Dubbo 是阿里巴巴公司开源的一个高性能、轻量级的 Java RPC 框架。 它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。 1.1、基本概念 img_15.png 服务提供者**（Provider）**：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。 服务消费者**（Consumer）**:&nbsp;调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。 注册中心**（Registry）**：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者 监控中心**（Monitor）**：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-16T09:04:18.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:tag","content":"组件"}],["meta",{"property":"article:modified_time","content":"2024-04-16T09:04:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组件Dubbo\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-16T09:04:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"1、Dubbo的基本介绍","slug":"_1、dubbo的基本介绍","link":"#_1、dubbo的基本介绍","children":[{"level":3,"title":"1.1、基本概念","slug":"_1-1、基本概念","link":"#_1-1、基本概念","children":[]},{"level":3,"title":"1.2、RPC","slug":"_1-2、rpc","link":"#_1-2、rpc","children":[]}]},{"level":2,"title":"2、zookeeper（注册中心）","slug":"_2、zookeeper-注册中心","link":"#_2、zookeeper-注册中心","children":[{"level":3,"title":"2.1、zookeeper 下载","slug":"_2-1、zookeeper-下载","link":"#_2-1、zookeeper-下载","children":[]},{"level":3,"title":"2.2、zookeper安装使用（window版）","slug":"_2-2、zookeper安装使用-window版","link":"#_2-2、zookeper安装使用-window版","children":[]},{"level":3,"title":"2.3、zookeper安装使用（Linux版）","slug":"_2-3、zookeper安装使用-linux版","link":"#_2-3、zookeper安装使用-linux版","children":[]}]},{"level":2,"title":"3、提供者消费者示例","slug":"_3、提供者消费者示例","link":"#_3、提供者消费者示例","children":[{"level":3,"title":"3.1、spring搭建dubbo示例","slug":"_3-1、spring搭建dubbo示例","link":"#_3-1、spring搭建dubbo示例","children":[]},{"level":3,"title":"3.2、springboot搭建dubbo示例","slug":"_3-2、springboot搭建dubbo示例","link":"#_3-2、springboot搭建dubbo示例","children":[]}]},{"level":2,"title":"4、zookeeper管理控制台（dubbo-admin）","slug":"_4、zookeeper管理控制台-dubbo-admin","link":"#_4、zookeeper管理控制台-dubbo-admin","children":[{"level":3,"title":"4.1、dubbo-admin的安装使用","slug":"_4-1、dubbo-admin的安装使用","link":"#_4-1、dubbo-admin的安装使用","children":[]},{"level":3,"title":"4.2、dubbo-admin的基本使用","slug":"_4-2、dubbo-admin的基本使用","link":"#_4-2、dubbo-admin的基本使用","children":[]}]}],"git":{"createdTime":1713232406000,"updatedTime":1713258258000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":2}]},"readingTime":{"minutes":12.25,"words":3676},"filePathRelative":"assembly/dubbo.md","localizedDate":"2024年4月16日","excerpt":"<h2> 1、Dubbo的基本介绍</h2>\\n<p>Dubbo 是阿里巴巴公司开源的一个高性能、轻量级的 Java RPC 框架。 它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p>\\n<h3> 1.1、基本概念</h3>\\n<figure><figcaption>img_15.png</figcaption></figure>\\n<ul>\\n<li><strong>服务提供者</strong>**（<strong><strong>Provider</strong></strong>）**：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</li>\\n<li><strong>服务消费者</strong>**（<strong><strong>Consumer</strong></strong>）**:&nbsp;调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>\\n<li><strong>注册中心</strong>**（<strong><strong>Registry</strong></strong>）**：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</li>\\n<li><strong>监控中心</strong>**（<strong><strong>Monitor</strong></strong>）**：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</li>\\n</ul>","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}');export{e as data};
