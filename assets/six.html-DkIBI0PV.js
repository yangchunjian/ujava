import{_ as a,o as t,c as r,a as n}from"./app-DRbSOarZ.js";const p={};function i(s,e){return t(),r("div",null,e[0]||(e[0]=[n('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>架构模式是系统组件及组件交互的模式，决定了处理数据和领域对象的全局控制结构。组件化是使用架构模式的前提。</p><h2 id="模式清单" tabindex="-1"><a class="header-anchor" href="#模式清单"><span>模式清单</span></a></h2><h4 id="分层模式" tabindex="-1"><a class="header-anchor" href="#分层模式"><span>分层模式</span></a></h4><p>分层模式：<br> 将应用划分为多个层次，定义各层的接口、任务抽象及消息格式，以及各层之间的通信与交互。业务系统通常会划分为业务逻辑层、服务层、领域层、数据层。网络栈协议是分层模式的典型应用。应用分层模式时，为确保系统可维护性，通常第j+1层只依赖于第j层的接口和服务；在性能场合下，可能会有跨层依赖的情况；应对特殊场景的设计中，会有“第j层的服务依赖于第j+1层的服务”的反向依赖关系。可参阅《面向模式的软件架构：模式系统》第2.2.1节。</p><h4 id="restful模式" tabindex="-1"><a class="header-anchor" href="#restful模式"><span>RESTFUL模式</span></a></h4><p>RESTFul模式：适合资源构建与共享的可伸缩的架构模式，适合于构建API接口。全局规范一致的资源逻辑命名、寻址、返回码定义，关注资源与数据而非行为或服务；无状态的声明式的请求；对客户端隐藏实现细节；通用的数据返回格式(<br> JSON)，跨语言与平台；使用名词而非动词作为路径名。 可参阅《架构之美》第5章：“Web：面向资源的架构”。</p><h4 id="mvc模式" tabindex="-1"><a class="header-anchor" href="#mvc模式"><span>MVC模式</span></a></h4><p>MVC模式：“模型-视图-控制”， 经典的WebUI架构模式，控制处理请求从而更新模型和返回视图，模型更新驱动视图更新，视图请求控制处理。经典的JavaMVC框架有<br> Struts2, SpringMVC, 前端MVC框架有Extjs4.</p><h4 id="插件模式" tabindex="-1"><a class="header-anchor" href="#插件模式"><span>插件模式</span></a></h4><p>插件模式：设计了可扩展的插件接口及插件交互机制，开发者只要遵循规范编写和调试具体的插件并融入到系统，即可为系统增加新功能和新特性。使用插件模式的系统有<br> Eclipse, Emacs, Firefox, Chrome 等。</p><h4 id="订阅-消费模式" tabindex="-1"><a class="header-anchor" href="#订阅-消费模式"><span>订阅-消费模式</span></a></h4><p>订阅-消费模式：<br> 大型互联网应用中几乎都存在订阅和消费业务表更新或业务消息推送的子系统。订阅-消费模式需要高稳定可用的消息中间件，并仔细评估消息延迟对用户活动造成的影响。新品消息推送、商品消费订阅、发货提醒等，我们正处于一个“消息/通知的订阅-推送-被消费”的移动互联网时代里。</p><h4 id="pipeline模式" tabindex="-1"><a class="header-anchor" href="#pipeline模式"><span>Pipeline模式</span></a></h4><p>管道-过滤器-处理器链：一个请求沿着管道连接的处理链，依次由链上的过滤器、拦截器、处理器进行处理并返回。JavaWeb应用的Servlet架构模式是“过滤器-处理器链”的典型应用；UnixShell<br> 则是“管道-过滤器-重定向”结构的典型应用。</p><h4 id="事件驱动模式" tabindex="-1"><a class="header-anchor" href="#事件驱动模式"><span>事件驱动模式</span></a></h4><p>事件驱动模式： 在系统内定义一系列的组件、事件及监听器，组件发生变化时触发事件，通知相应的监听器处理事件更新组件，进而触发新的事件，如此循环直至手动终止系统或系统崩溃。适用于GUI应用开发。</p><h4 id="actor模式" tabindex="-1"><a class="header-anchor" href="#actor模式"><span>Actor模式</span></a></h4><p>Actor模型：<br> 基于事件驱动的分布式的、异步并发的、可伸缩的、有故障恢复能力的大型消息处理架构。</p><h4 id="规则-工作流模式" tabindex="-1"><a class="header-anchor" href="#规则-工作流模式"><span>规则-工作流模式</span></a></h4><p>规则-工作流模式： 将系统分析成一系列的工作流节点以及规则的解析匹配，使用规则引擎来控制和运行，通过添加规则及规则流，实现可扩展性和可配置性。</p>',21)]))}const h=a(p,[["render",i],["__file","six.html.vue"]]),o=JSON.parse('{"path":"/principle/six.html","title":"架构模式","lang":"zh-CN","frontmatter":{"title":"架构模式","icon":"laptop-code","category":["设计原理"],"description":"简介 架构模式是系统组件及组件交互的模式，决定了处理数据和领域对象的全局控制结构。组件化是使用架构模式的前提。 模式清单 分层模式 分层模式： 将应用划分为多个层次，定义各层的接口、任务抽象及消息格式，以及各层之间的通信与交互。业务系统通常会划分为业务逻辑层、服务层、领域层、数据层。网络栈协议是分层模式的典型应用。应用分层模式时，为确保系统可维护性，通...","head":[["meta",{"property":"og:url","content":"https://ujava.cn/principle/six.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"架构模式"}],["meta",{"property":"og:description","content":"简介 架构模式是系统组件及组件交互的模式，决定了处理数据和领域对象的全局控制结构。组件化是使用架构模式的前提。 模式清单 分层模式 分层模式： 将应用划分为多个层次，定义各层的接口、任务抽象及消息格式，以及各层之间的通信与交互。业务系统通常会划分为业务逻辑层、服务层、领域层、数据层。网络栈协议是分层模式的典型应用。应用分层模式时，为确保系统可维护性，通..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-15T03:25:51.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:modified_time","content":"2024-04-15T03:25:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"架构模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-15T03:25:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"模式清单","slug":"模式清单","link":"#模式清单","children":[]}],"git":{"createdTime":1698915541000,"updatedTime":1713151551000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":4}]},"readingTime":{"minutes":3.21,"words":964},"filePathRelative":"principle/six.md","localizedDate":"2023年11月2日","excerpt":"<h2>简介</h2>\\n<p>架构模式是系统组件及组件交互的模式，决定了处理数据和领域对象的全局控制结构。组件化是使用架构模式的前提。</p>\\n<h2>模式清单</h2>\\n<h4>分层模式</h4>\\n<p>分层模式：<br>\\n将应用划分为多个层次，定义各层的接口、任务抽象及消息格式，以及各层之间的通信与交互。业务系统通常会划分为业务逻辑层、服务层、领域层、数据层。网络栈协议是分层模式的典型应用。应用分层模式时，为确保系统可维护性，通常第j+1层只依赖于第j层的接口和服务；在性能场合下，可能会有跨层依赖的情况；应对特殊场景的设计中，会有“第j层的服务依赖于第j+1层的服务”的反向依赖关系。可参阅《面向模式的软件架构：模式系统》第2.2.1节。</p>","autoDesc":true}');export{h as comp,o as data};
