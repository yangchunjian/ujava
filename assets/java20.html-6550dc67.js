import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as i,a as n,b as s,d as a,w as u,e}from"./app-8a5cd404.js";const r={},k=n("p",null,"JDK 20 于 2023 年 3 月 21 日发布，非长期支持版本。",-1),d=n("p",null,"根据开发计划，下一个 LTS 版本就是将于 2023 年 9 月发布的 JDK 21。",-1),h=n("figure",null,[n("img",{src:"https://oss.javaguide.cn/github/javaguide/java/new-features/640.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),v=n("p",null,"JDK 20 只有 7 个新特性：",-1),m={href:"https://openjdk.org/jeps/429",target:"_blank",rel:"noopener noreferrer"},_={href:"https://openjdk.org/jeps/432",target:"_blank",rel:"noopener noreferrer"},f={href:"https://openjdk.org/jeps/433",target:"_blank",rel:"noopener noreferrer"},g={href:"https://openjdk.org/jeps/434",target:"_blank",rel:"noopener noreferrer"},b={href:"https://openjdk.org/jeps/436",target:"_blank",rel:"noopener noreferrer"},j={href:"https://openjdk.org/jeps/437",target:"_blank",rel:"noopener noreferrer"},w={href:"https://openjdk.org/jeps/438",target:"_blank",rel:"noopener noreferrer"},J=e(`<h2 id="jep-429-作用域值-第一次孵化" tabindex="-1"><a class="header-anchor" href="#jep-429-作用域值-第一次孵化" aria-hidden="true">#</a> JEP 429：作用域值（第一次孵化）</h2><p>作用域值（Scoped Values）它可以在线程内和线程间共享不可变的数据，优于线程局部变量，尤其是在使用大量虚拟线程时。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">ScopedValue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">V</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScopedValue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// In some method</span>
<span class="token class-name">ScopedValue</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token generics"><span class="token punctuation">&lt;</span>value<span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
           <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token class-name">V</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> call methods <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// In a method called directly or indirectly from the lambda expression</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token class-name">V</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作用域值允许在大型程序中的组件之间安全有效地共享数据，而无需求助于方法参数。</p>`,4),P={href:"https://www.happycoders.eu/java/scoped-values/",target:"_blank",rel:"noopener noreferrer"},S=n("h2",{id:"jep-432-记录模式-第二次预览",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jep-432-记录模式-第二次预览","aria-hidden":"true"},"#"),s(" JEP 432：记录模式（第二次预览）")],-1),y=n("p",null,"记录模式（Record Patterns） 可对 record 的值进行解构，可以嵌套记录模式和类型模式，实现强大的、声明性的和可组合的数据导航和处理形式。",-1),E=n("p",null,"记录模式不能单独使用，而是要与 instanceof 或 switch 模式匹配一同使用。",-1),x={href:"https://openjdk.org/jeps/405",target:"_blank",rel:"noopener noreferrer"},I={href:"https://openjdk.org/jeps/432",target:"_blank",rel:"noopener noreferrer"},q=e(`<ul><li>添加对通用记录模式类型参数推断的支持，</li><li>添加对记录模式的支持以出现在增强语句的标题中<code>for</code></li><li>删除对命名记录模式的支持。</li></ul><h2 id="jep-433-switch-模式匹配-第四次预览" tabindex="-1"><a class="header-anchor" href="#jep-433-switch-模式匹配-第四次预览" aria-hidden="true">#</a> JEP 433：switch 模式匹配（第四次预览）</h2><p>正如 <code>instanceof</code> 一样， <code>switch</code> 也紧跟着增加了类型匹配自动转换功能。</p><p><code>instanceof</code> 代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Old code</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> use s <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token comment">// New code</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> use s <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>switch</code> 代码示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Old code</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">formatter</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> formatted <span class="token operator">=</span> <span class="token string">&quot;unknown&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        formatted <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;int %d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Long</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        formatted <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;long %d&quot;</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Double</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        formatted <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;double %f&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        formatted <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;String %s&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> formatted<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// New code</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">formatterPatternSwitch</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">Integer</span> i <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;int %d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Long</span> l    <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;long %d&quot;</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Double</span> d  <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;double %f&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> s  <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;String %s&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span>        <span class="token operator">-&gt;</span> o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>switch</code> 模式匹配分别在 Java17、Java18、Java19 中进行了预览，Java20 是第四次预览了。每一次的预览基本都会有一些小改进，这里就不细提了。</p><h2 id="jep-434-外部函数和内存-api-第二次预览" tabindex="-1"><a class="header-anchor" href="#jep-434-外部函数和内存-api-第二次预览" aria-hidden="true">#</a> JEP 434: 外部函数和内存 API（第二次预览）</h2><p>Java 程序可以通过该 API 与 Java 运行时之外的代码和数据进行互操作。通过高效地调用外部函数（即 JVM 之外的代码）和安全地访问外部内存（即不受 JVM 管理的内存），该 API 使 Java 程序能够调用本机库并处理本机数据，而不会像 JNI 那样危险和脆弱。</p>`,10),A={href:"https://openjdk.java.net/jeps/412",target:"_blank",rel:"noopener noreferrer"},V={href:"https://openjdk.org/jeps/419",target:"_blank",rel:"noopener noreferrer"},D={href:"https://openjdk.org/jeps/424",target:"_blank",rel:"noopener noreferrer"},T={href:"https://openjdk.org/jeps/434",target:"_blank",rel:"noopener noreferrer"},L=e("<ul><li><code>MemorySegment</code> 和 <code>MemoryAddress</code> 抽象的统一</li><li>增强的 <code>MemoryLayout</code> 层次结构</li><li><code>MemorySession</code>拆分为<code>Arena</code>和<code>SegmentScope</code>，以促进跨维护边界的段共享。</li></ul>",1),K=n("h2",{id:"jep-436-虚拟线程-第二次预览",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jep-436-虚拟线程-第二次预览","aria-hidden":"true"},"#"),s(" JEP 436: 虚拟线程（第二次预览）")],-1),M=n("p",null,"虚拟线程（Virtual Thread-）是 JDK 而不是 OS 实现的轻量级线程(Lightweight Process，LWP），许多虚拟线程共享同一个操作系统线程，虚拟线程的数量可以远大于操作系统线程的数量。",-1),N=n("p",null,"虚拟线程在其他多线程语言中已经被证实是十分有用的，比如 Go 中的 Goroutine、Erlang 中的进程。",-1),O=n("p",null,"虚拟线程避免了上下文切换的额外耗费，兼顾了多线程的优点，简化了高并发程序的复杂，可以有效减少编写、维护和观察高吞吐量并发应用程序的工作量。",-1),B={href:"https://www.zhihu.com/question/536743167",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,"Java 虚拟线程的详细解读和原理可以看下面这两篇文章：",-1),F={href:"https://mp.weixin.qq.com/s/yyApBXxpXxVwttr01Hld6Q",target:"_blank",rel:"noopener noreferrer"},R={href:"https://www.cnblogs.com/throwable/p/16758997.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://openjdk.org/jeps/425",target:"_blank",rel:"noopener noreferrer"},G=n("h2",{id:"jep-437-结构化并发-第二次孵化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jep-437-结构化并发-第二次孵化","aria-hidden":"true"},"#"),s(" JEP 437: 结构化并发(第二次孵化)")],-1),X=n("p",null,[s("Java 19 引入了结构化并发，一种多线程编程方法，目的是为了通过结构化并发 API 来简化多线程编程，并不是为了取代"),n("code",null,"java.util.concurrent"),s("，目前处于孵化器阶段。")],-1),H=n("p",null,"结构化并发将不同线程中运行的多个任务视为单个工作单元，从而简化错误处理、提高可靠性并增强可观察性。也就是说，结构化并发保留了单线程代码的可读性、可维护性和可观察性。",-1),Q={href:"https://download.java.net/java/early_access/loom/docs/api/jdk.incubator.concurrent/jdk/incubator/concurrent/StructuredTaskScope.html",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"StructuredTaskScope",-1),W=n("code",null,"StructuredTaskScope",-1),Y=e(`<p><code>StructuredTaskScope</code> 的基本用法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StructuredTaskScope</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用fork方法派生线程来执行子任务</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> future1 <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>task1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future2 <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span>task2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 等待线程完成</span>
        scope<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 结果的处理可能包括处理或重新抛出异常</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> process results<span class="token operator">/</span>exceptions <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span> <span class="token comment">// close</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结构化并发非常适合虚拟线程，虚拟线程是 JDK 实现的轻量级线程。许多虚拟线程共享同一个操作系统线程，从而允许非常多的虚拟线程。</p>`,3),Z=n("code",null,"StructuredTaskScope",-1),$={href:"https://openjdk.org/jeps/429",target:"_blank",rel:"noopener noreferrer"},nn=n("h2",{id:"jep-432-向量-api-第五次孵化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jep-432-向量-api-第五次孵化","aria-hidden":"true"},"#"),s(" JEP 432：向量 API（第五次孵化）")],-1),sn=n("p",null,"向量计算由对向量的一系列操作组成。向量 API 用来表达向量计算，该计算可以在运行时可靠地编译为支持的 CPU 架构上的最佳向量指令，从而实现优于等效标量计算的性能。",-1),an=n("p",null,"向量 API 的目标是为用户提供简洁易用且与平台无关的表达范围广泛的向量计算。",-1),tn={href:"https://openjdk.java.net/jeps/338",target:"_blank",rel:"noopener noreferrer"},en={href:"http://openjdk.java.net/jeps/11",target:"_blank",rel:"noopener noreferrer"},on={href:"https://openjdk.java.net/jeps/414",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://openjdk.java.net/jeps/417",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://openjdk.java.net/jeps/426",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://openjdk.org/jeps/438",target:"_blank",rel:"noopener noreferrer"};function un(rn,kn){const t=o("ExternalLinkIcon"),p=o("RouterLink");return l(),i("div",null,[k,d,h,v,n("ul",null,[n("li",null,[n("a",m,[s("JEP 429：Scoped Values（作用域值）"),a(t)]),s("（第一次孵化）")]),n("li",null,[n("a",_,[s("JEP 432：Record Patterns（记录模式）"),a(t)]),s("（第二次预览）")]),n("li",null,[n("a",f,[s("JEP 433：switch 模式匹配"),a(t)]),s("（第四次预览）")]),n("li",null,[n("a",g,[s("JEP 434: Foreign Function & Memory API（外部函数和内存 API）"),a(t)]),s("（第二次预览）")]),n("li",null,[n("a",b,[s("JEP 436: Virtual Threads（虚拟线程）"),a(t)]),s("（第二次预览）")]),n("li",null,[n("a",j,[s("JEP 437: Structured Concurrency（结构化并发）"),a(t)]),s("(第二次孵化)")]),n("li",null,[n("a",w,[s("JEP 432：向量 API（"),a(t)]),s("第五次孵化）")])]),J,n("p",null,[s("关于作用域值的详细介绍，推荐阅读"),n("a",P,[s("作用域值常见问题解答"),a(t)]),s("。")]),S,y,E,n("p",null,[s("记录模式在 Java 19 进行了第一次预览， 由"),n("a",x,[s("JEP 405"),a(t)]),s("提出。JDK 20 中是第二次预览，由 "),n("a",I,[s("JEP 432"),a(t)]),s(" 提出。这次的改进包括：")]),q,n("p",null,[s("外部函数和内存 API 在 Java 17 中进行了第一轮孵化，由 "),n("a",A,[s("JEP 412"),a(t)]),s(" 提出。Java 18 中进行了第二次孵化，由"),n("a",V,[s(" JEP 419"),a(t)]),s(" 提出。Java 19 中是第一次预览，由 "),n("a",D,[s("JEP 424"),a(t)]),s(" 提出。")]),n("p",null,[s("JDK 20 中是第二次预览，由 "),n("a",T,[s("JEP 434"),a(t)]),s(" 提出，这次的改进包括：")]),L,n("p",null,[s("在 "),a(p,{to:"/java/new-features/java19.html"},{default:u(()=>[s("Java 19 新特性概览")]),_:1}),s(" 中，我有详细介绍到外部函数和内存 API，这里就不再做额外的介绍了。")]),K,M,N,O,n("p",null,[s("知乎有一个关于 Java 19 虚拟线程的讨论，感兴趣的可以去看看："),n("a",B,[s("https://www.zhihu.com/question/536743167"),a(t)]),s(" 。")]),C,n("ul",null,[n("li",null,[n("a",F,[s("Java19 正式 GA！看虚拟线程如何大幅提高系统吞吐量"),a(t)])]),n("li",null,[n("a",R,[s("虚拟线程 - VirtualThread 源码透视"),a(t)])])]),n("p",null,[s("虚拟线程在 Java 19 中进行了第一次预览，由"),n("a",z,[s("JEP 425"),a(t)]),s("提出。JDK 20 中是第二次预览，做了一些细微变化，这里就不细提了。")]),G,X,H,n("p",null,[s("结构化并发的基本 API 是"),n("a",Q,[U,a(t)]),s("。"),W,s(" 支持将任务拆分为多个并发子任务，在它们自己的线程中执行，并且子任务必须在主任务继续之前完成。")]),Y,n("p",null,[s("JDK 20 中对结构化并发唯一变化是更新为支持在任务范围内创建的线程"),Z,s("继承范围值 这简化了跨线程共享不可变数据，详见"),n("a",$,[s("JEP 429 "),a(t)]),s("。")]),nn,sn,an,n("p",null,[s("向量（Vector） API 最初由 "),n("a",tn,[s("JEP 338"),a(t)]),s(" 提出，并作为"),n("a",en,[s("孵化 API"),a(t)]),s("集成到 Java 16 中。第二轮孵化由 "),n("a",on,[s("JEP 414"),a(t)]),s(" 提出并集成到 Java 17 中，第三轮孵化由 "),n("a",pn,[s("JEP 417"),a(t)]),s(" 提出并集成到 Java 18 中，第四轮由 "),n("a",cn,[s("JEP 426"),a(t)]),s(" 提出并集成到了 Java 19 中。")]),n("p",null,[s("Java20 的这次孵化基本没有改变向量 API ，只是进行了一些错误修复和性能增强，详见 "),n("a",ln,[s("JEP 438"),a(t)]),s("。")])])}const vn=c(r,[["render",un],["__file","java20.html.vue"]]);export{vn as default};
