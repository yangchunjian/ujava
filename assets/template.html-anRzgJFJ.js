import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as l,c as i,e as r}from"./app-9mIwNq47.js";const e={},a=r('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><strong>介绍</strong>：Java模板模式是一种行为设计模式，它定义了一个操作中的程序骨架，将一些步骤延迟到子类中实现。这使得子类可以在不改变程序结构的情况下重新定义程序中的某些步骤。<strong>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中</strong>。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。<strong>主要是用来解决复用和扩展两个问题</strong></p><p><strong>场景</strong>：</p><ul><li><strong>多个子类有共同的方法，且逻辑基本相同</strong></li><li>可以把核心的算法和重要的功能设计为模板方法，子类去实现相关细节功能</li><li>系统在进行重构或者是功能优化的时候可以将子类重复的代码抽离到父类中</li><li>当需要定义一组算法，并且这些算法的结构相似，但是实现细节不同时，可以使用模板模式。</li><li>当需要控制算法的流程，并且在算法的不同阶段需要不同的行为时，可以使用模板模式。</li><li>当需要在不影响算法整体结构的情况下，对算法的某些步骤进行定制化时，可以使用模板模式。</li><li>当需要在多个类中使用相同的算法时，可以使用模板模式，避免代码重复。</li></ul><p>在Java Servlet、JUnit TestCase、Java InputStream、Java AbstractList中都涉及到模板模式的运用</p><p><strong>优点</strong>：</p><ul><li>1.通过把子类中不变的部分抽离到子类中，从而达到去除子类方法的重复代码便于维护</li><li>2.扩展可变部分，子类实现模板父类的某些细节，有助于模板父类的扩展</li><li>3.通过一个父类调用子类实现的操作，通过子类扩展增加新的行为**（行为由父类控制，子类实现 符合开闭原则）**</li></ul><p><strong>不足</strong>：</p><ul><li>1.按照设计习惯，抽象类负责声明最抽象、最一般的事物属性和方法，实现类负责完成具体的事务属性和方法，但是模板方式正好相反，<strong>子类执行的结果影响了父类的结果，会增加代码阅读的难度</strong></li><li>2.每个不同的实现都需要一个子类去实现，导致类的个数不断增加，使得系统更为庞大</li></ul><p>在Java模板模式中，有两种类型的方法：抽象方法和具体方法。抽象方法由子类实现，而具体方法由父类实现。模板方法是由具体方法和抽象方法组成的，它定义了程序的骨架，而具体方法则实现了算法的部分步骤。</p><p>总之，Java模板模式适用于那些需要在程序中定义骨架，并且在子类中实现具体步骤的情况。它可以提高代码的复用性和可维护性，同时也可以使代码更加灵活和可扩展。</p>',11),s=[a];function o(n,p){return l(),i("div",null,s)}const _=t(e,[["render",o],["__file","template.html.vue"]]);export{_ as default};
