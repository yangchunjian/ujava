import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as r,e as o}from"./app-G9Kr6zEw.js";const n={},l=o('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><strong>介绍</strong>：享元模式（Flyweight Pattern）是一种结构型设计模式，它通过共享对象来减少内存使用和对象创建的开销。享元模式属于对象型模式，它通过创建一个享元工厂来管理共享对象，并在需要时返回已经存在的对象，从而减少对象的创建和销毁次数。又称轻量级模式，<code>是对象池的一种实现</code>。所谓“享元”，<strong>顾名思义就是被共享的单元</strong>。享元模式的意图是<strong>复用对象，节省内存</strong>，前提是享元对象是不可变对象。运用共享技术有效地支持大量细粒度的对象。</p><p><strong>场景</strong>：</p><ul><li>1.常常应用于系统底层的开发，以便解决系统的性能问题。</li><li>2.系统有大量相似的对象、需要缓存池的场景。</li></ul><p>String类，Interger,Long等基本包装类中</p><p><strong>优点</strong>：</p><ul><li>1.减少对象的创建 ，降低内存中对象的数量 ，降低系统的内存 ，提高效率；</li><li>2.减少内存之外的其它资源占用。</li></ul><p><strong>不足</strong>：</p><ul><li>1.关注内、外部状态、关注线程安全问题；</li><li>2.使系统、程序复杂化</li></ul>',9),i=[l];function s(c,a){return e(),r("div",null,i)}const p=t(n,[["render",s],["__file","flyweight.html.vue"]]);export{p as default};
