import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as t,e}from"./app-BR4ECklu.js";const p="/assets/img_128-CBfXXUwx.png",i="/assets/img_129-cfow6MTs.png",l="/assets/img_130-BG9LScA1.png",o="/assets/img_131-DystNXk5.png",c="/assets/img_132-SdKXgbAo.png",u="/assets/img_133-Bc6uwXXC.png",r="/assets/img_134-DeF9mUEi.png",d={};function k(g,n){return a(),t("div",null,n[0]||(n[0]=[e('<h2 id="为什么需要容错限流" tabindex="-1"><a class="header-anchor" href="#为什么需要容错限流"><span>为什么需要容错限流</span></a></h2><ul><li>复杂分布式系统通常有很多依赖，如果一个应用不能对来自依赖 故障进行隔离，那么应用本身就处在被拖垮的风险中。在一个高流量的网站中，某个单一后端一旦发生延迟，将会在数秒内导致 所有应用资源被耗尽（一个臭鸡蛋影响一篮筐）。</li><li>如秒杀、抢购、双十一等场景，在某一时间点会有爆发式的网络流量涌入，如果没有好的网络流量限制，任由流量压到后台服务实例，很有可能造成资源耗尽，服务无法响应，甚至严重的导致应用崩溃。</li></ul><h2 id="hystrix是什么" tabindex="-1"><a class="header-anchor" href="#hystrix是什么"><span>Hystrix是什么</span></a></h2><p>Hystrix 能使你的系统在出现依赖服务失效的时候，通过隔离系统所依赖的服务，防止服务级联失败，同时提供失败回退机制，更优雅地应对失效，并使你的系统能更快地从异常中恢复。</p><h2 id="hystrix能做什么" tabindex="-1"><a class="header-anchor" href="#hystrix能做什么"><span>Hystrix能做什么</span></a></h2><ul><li>在通过第三方客户端访问（通常是通过网络）依赖服务出现高延迟或者失败时，为系统提供保护和控制</li><li>在分布式系统中防止级联失败</li><li>快速失败（Fail fast）同时能快速恢复</li><li>提供失败回退（Fallback）和优雅的服务降级机制</li><li>提供近似实时的监控、报警和运维控制手段</li></ul><h2 id="hystrix设计原则" tabindex="-1"><a class="header-anchor" href="#hystrix设计原则"><span>Hystrix设计原则</span></a></h2><ul><li>防止单个依赖耗尽容器（例如 Tomcat）内所有用户线程</li><li>降低系统负载，对无法及时处理的请求快速失败（fail fast）而不是排队</li><li>提供失败回退，以在必要时让失效对用户透明化</li><li>使用隔离机制（例如『舱壁』/『泳道』模式，熔断器模式等）降低依赖服务对整个系统的影响</li><li>针对系统服务的度量、监控和报警，提供优化以满足近似实时性的要求</li><li>在 Hystrix 绝大部分需要动态调整配置并快速部署到所有应用方面，提供优化以满足快速恢复的要求</li><li>能保护应用不受依赖服务的整个执行过程中失败的影响，而不仅仅是网络请求</li></ul><h2 id="hystrix设计思想来源" tabindex="-1"><a class="header-anchor" href="#hystrix设计思想来源"><span>Hystrix设计思想来源</span></a></h2><h3 id="舱壁隔离模式" tabindex="-1"><a class="header-anchor" href="#舱壁隔离模式"><span>舱壁隔离模式</span></a></h3><p>货船为了进行防止漏水和火灾的扩散,会将货仓分隔为多个，当发生灾害时，将所在货仓进行隔离就可以降低整艘船的风险。<br><img src="'+p+'" alt="img_128.png" loading="lazy"></p><h3 id="断路器模式" tabindex="-1"><a class="header-anchor" href="#断路器模式"><span>断路器模式</span></a></h3><p>熔断器就像家里的保险丝，当电流过载了就会跳闸，不过Hystrix的熔断机制相对复杂一些。<br><img src="'+i+'" alt="img_129.png" loading="lazy"></p><p>熔断器开关由关闭到打开的状态转换是通过当前服务健康状况和设定阈值比较决定的.</p><ul><li>当熔断器开关关闭时，请求被允许通过熔断器。如果当前健康状况高于设定阈值，开关继续保持关闭。如果当前健康状况低于设定阈值，开关则切换为打开状态。</li><li>当熔断器开关打开时，请求被禁止通过。</li><li>当熔断器开关处于打开状态，经过一段时间后，熔断器会自动进入半开状态，这时熔断器只允许一个请求通过。当该请求调用成功时，熔断器恢复到关闭状态。若该请求失败，熔断器继续保持打开状态， 接下来的请求被禁止通过。</li></ul><h2 id="hystrix工作流程" tabindex="-1"><a class="header-anchor" href="#hystrix工作流程"><span>Hystrix工作流程</span></a></h2><h3 id="官网原图" tabindex="-1"><a class="header-anchor" href="#官网原图"><span>官网原图</span></a></h3><figure><img src="'+l+'" alt="img_130.png" tabindex="0" loading="lazy"><figcaption>img_130.png</figcaption></figure><h3 id="中文版" tabindex="-1"><a class="header-anchor" href="#中文版"><span>中文版</span></a></h3><figure><img src="'+o+'" alt="img_131.png" tabindex="0" loading="lazy"><figcaption>img_131.png</figcaption></figure><h3 id="流程说明" tabindex="-1"><a class="header-anchor" href="#流程说明"><span>流程说明</span></a></h3><ol><li>每次调用创建一个新的HystrixCommand,把依赖调用封装在run()方法中.</li><li>执行execute()/queue做同步或异步调用.</li><li>当前调用是否已被缓存，是则直接返回结果，否则进入步骤 4</li><li>判断熔断器(circuit-breaker)是否打开,如果打开跳到步骤 8,进行降级策略,如果关闭进入步骤 5</li><li>判断线程池/队列/信号量是否跑满，如果跑满进入降级步骤8,否则继续后续步骤 6</li><li>调用HystrixCommand的run方法.运行依赖逻辑</li></ol><ul><li>6.1. 调用是否出现异常，否：继续，是进入步骤8，</li><li>6.2. 调用是否超时，否：返回调用结果，是进入步骤8</li></ul><ol start="7"><li>搜集5、6步骤所有的运行状态(成功, 失败, 拒绝,超时)上报给熔断器，用于统计从而判断熔断器状态</li><li>getFallback()降级逻辑.四种触发getFallback调用情况（图中步骤8的箭头来源）：<br> 返回执行成功结果</li></ol><h2 id="两种资源隔离模式" tabindex="-1"><a class="header-anchor" href="#两种资源隔离模式"><span>两种资源隔离模式</span></a></h2><h3 id="线程池隔离模式" tabindex="-1"><a class="header-anchor" href="#线程池隔离模式"><span>线程池隔离模式</span></a></h3><p>使用一个线程池来存储当前的请求，线程池对请求作处理，设置任务返回处理超时时间，堆积的请求堆积入线程池队列。这种方式需要为每个依赖的服务申请线程池，有一定的资源消耗，好处是可以应对突发流量（流量洪峰来临时，处理不完可将数据存储到线程池队里慢慢处理）。</p><h3 id="信号量隔离模式" tabindex="-1"><a class="header-anchor" href="#信号量隔离模式"><span>信号量隔离模式</span></a></h3><p>使用一个原子计数器（或信号量）来记录当前有多少个线程在运行，请求来先判断计数器的数值，若超过设置的最大线程个数则丢弃改类型的新请求，若不超过则执行计数操作请求来计数器+1，请求返回计数器-1。这种方式是严格的控制线程且立即返回模式，无法应对突发流量（流量洪峰来临时，处理的线程超过数量，其他的请求会直接返回，不继续去请求依赖的服务）。</p><h3 id="线程池隔离模式-vs-信号量隔离模式" tabindex="-1"><a class="header-anchor" href="#线程池隔离模式-vs-信号量隔离模式"><span>线程池隔离模式 VS 信号量隔离模式</span></a></h3><figure><img src="'+c+'" alt="img_132.png" tabindex="0" loading="lazy"><figcaption>img_132.png</figcaption></figure><h2 id="hystrix主要配置项" tabindex="-1"><a class="header-anchor" href="#hystrix主要配置项"><span>Hystrix主要配置项</span></a></h2><p><img src="'+u+'" alt="img_133.png" loading="lazy"><br><img src="'+r+`" alt="img_134.png" loading="lazy"></p><h2 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手"><span>快速上手</span></a></h2><h3 id="pom-xml" tabindex="-1"><a class="header-anchor" href="#pom-xml"><span>pom.xml</span></a></h3><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.netflix.hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hystrix-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.5.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.netflix.hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hystrix-metrics-event-stream<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.5.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.netflix.hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hystrix-javanica<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.5.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hystrixconfig" tabindex="-1"><a class="header-anchor" href="#hystrixconfig"><span>HystrixConfig</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 声明一个HystrixCommandAspect代理类，现拦截HystrixCommand的功能
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">HystrixCommandAspect</span> <span class="token function">hystrixCommandAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HystrixCommandAspect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="helloservice" tabindex="-1"><a class="header-anchor" href="#helloservice"><span>HelloService</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;helloError&quot;</span><span class="token punctuation">,</span>
            commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;execution.isolation.strategy&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;THREAD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;1000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;circuitBreaker.enabled&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;circuitBreaker.requestVolumeThreshold&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            threadPoolProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;coreSize&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;maximumSize&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;maxQueueSize&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span> <span class="token number">15000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">&quot;Hello &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot; !&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">helloError</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;服务器繁忙，请稍后访问~&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动类" tabindex="-1"><a class="header-anchor" href="#启动类"><span>启动类</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixSimpleApplication</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">HelloService</span> helloService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span> <span class="token class-name">HystrixSimpleApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hi&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> helloService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h3><p>访问 http://localhost:80809/hi?name=zhangsan</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> GET <span class="token parameter variable">-d</span> <span class="token string">&#39;name=zhangsan&#39;</span> http://localhost:8080/hi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>服务器繁忙，请稍后访问~
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,47)]))}const h=s(d,[["render",k],["__file","hystrix.html.vue"]]),b=JSON.parse('{"path":"/assembly/hystrix.html","title":"组件Hystrix","lang":"zh-CN","frontmatter":{"title":"组件Hystrix","icon":"laptop-code","category":["设计组件"],"tag":["组件"],"description":"为什么需要容错限流 复杂分布式系统通常有很多依赖，如果一个应用不能对来自依赖 故障进行隔离，那么应用本身就处在被拖垮的风险中。在一个高流量的网站中，某个单一后端一旦发生延迟，将会在数秒内导致 所有应用资源被耗尽（一个臭鸡蛋影响一篮筐）。 如秒杀、抢购、双十一等场景，在某一时间点会有爆发式的网络流量涌入，如果没有好的网络流量限制，任由流量压到后台服务实例...","head":[["meta",{"property":"og:url","content":"https://ujava.cn/assembly/hystrix.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"组件Hystrix"}],["meta",{"property":"og:description","content":"为什么需要容错限流 复杂分布式系统通常有很多依赖，如果一个应用不能对来自依赖 故障进行隔离，那么应用本身就处在被拖垮的风险中。在一个高流量的网站中，某个单一后端一旦发生延迟，将会在数秒内导致 所有应用资源被耗尽（一个臭鸡蛋影响一篮筐）。 如秒杀、抢购、双十一等场景，在某一时间点会有爆发式的网络流量涌入，如果没有好的网络流量限制，任由流量压到后台服务实例..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-23T01:46:32.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:tag","content":"组件"}],["meta",{"property":"article:modified_time","content":"2024-04-23T01:46:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组件Hystrix\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-23T01:46:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"为什么需要容错限流","slug":"为什么需要容错限流","link":"#为什么需要容错限流","children":[]},{"level":2,"title":"Hystrix是什么","slug":"hystrix是什么","link":"#hystrix是什么","children":[]},{"level":2,"title":"Hystrix能做什么","slug":"hystrix能做什么","link":"#hystrix能做什么","children":[]},{"level":2,"title":"Hystrix设计原则","slug":"hystrix设计原则","link":"#hystrix设计原则","children":[]},{"level":2,"title":"Hystrix设计思想来源","slug":"hystrix设计思想来源","link":"#hystrix设计思想来源","children":[{"level":3,"title":"舱壁隔离模式","slug":"舱壁隔离模式","link":"#舱壁隔离模式","children":[]},{"level":3,"title":"断路器模式","slug":"断路器模式","link":"#断路器模式","children":[]}]},{"level":2,"title":"Hystrix工作流程","slug":"hystrix工作流程","link":"#hystrix工作流程","children":[{"level":3,"title":"官网原图","slug":"官网原图","link":"#官网原图","children":[]},{"level":3,"title":"中文版","slug":"中文版","link":"#中文版","children":[]},{"level":3,"title":"流程说明","slug":"流程说明","link":"#流程说明","children":[]}]},{"level":2,"title":"两种资源隔离模式","slug":"两种资源隔离模式","link":"#两种资源隔离模式","children":[{"level":3,"title":"线程池隔离模式","slug":"线程池隔离模式","link":"#线程池隔离模式","children":[]},{"level":3,"title":"信号量隔离模式","slug":"信号量隔离模式","link":"#信号量隔离模式","children":[]},{"level":3,"title":"线程池隔离模式 VS 信号量隔离模式","slug":"线程池隔离模式-vs-信号量隔离模式","link":"#线程池隔离模式-vs-信号量隔离模式","children":[]}]},{"level":2,"title":"Hystrix主要配置项","slug":"hystrix主要配置项","link":"#hystrix主要配置项","children":[]},{"level":2,"title":"快速上手","slug":"快速上手","link":"#快速上手","children":[{"level":3,"title":"pom.xml","slug":"pom-xml","link":"#pom-xml","children":[]},{"level":3,"title":"HystrixConfig","slug":"hystrixconfig","link":"#hystrixconfig","children":[]},{"level":3,"title":"HelloService","slug":"helloservice","link":"#helloservice","children":[]},{"level":3,"title":"启动类","slug":"启动类","link":"#启动类","children":[]},{"level":3,"title":"测试","slug":"测试","link":"#测试","children":[]}]}],"git":{"createdTime":1713836792000,"updatedTime":1713836792000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":1}]},"readingTime":{"minutes":5.81,"words":1743},"filePathRelative":"assembly/hystrix.md","localizedDate":"2024年4月23日","excerpt":"<h2>为什么需要容错限流</h2>\\n<ul>\\n<li>复杂分布式系统通常有很多依赖，如果一个应用不能对来自依赖 故障进行隔离，那么应用本身就处在被拖垮的风险中。在一个高流量的网站中，某个单一后端一旦发生延迟，将会在数秒内导致 所有应用资源被耗尽（一个臭鸡蛋影响一篮筐）。</li>\\n<li>如秒杀、抢购、双十一等场景，在某一时间点会有爆发式的网络流量涌入，如果没有好的网络流量限制，任由流量压到后台服务实例，很有可能造成资源耗尽，服务无法响应，甚至严重的导致应用崩溃。</li>\\n</ul>\\n<h2>Hystrix是什么</h2>\\n<p>Hystrix 能使你的系统在出现依赖服务失效的时候，通过隔离系统所依赖的服务，防止服务级联失败，同时提供失败回退机制，更优雅地应对失效，并使你的系统能更快地从异常中恢复。</p>","autoDesc":true}');export{h as comp,b as data};
