import{_ as n,o as r,c as l,b as t,e as a}from"./app-DX0aIPNf.js";const o={};function i(c,e){return r(),l("div",null,e[0]||(e[0]=[t("h2",{id:"概述",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#概述"},[t("span",null,"概述")])],-1),t("p",null,[a("脏标志行为模式允许您避免无论如何都需要再次执行的昂贵操作。这是一个简单的模式，实际上只是解释了如何向类添加一个布尔值，您可以在属性更改时设置该值。这将使您的班级知道，它之前可能计算过的任何结果都需要在请求时再次计算。重新计算结果后，可以清除布尔值。"),t("br"),a(" 在深入研究使用此模式之前，需要考虑一些要点：")],-1),t("p",null,"您需要考虑一些事项：",-1),t("ul",null,[t("li",null,"（1） 您需要它吗？当要计算的结果难以计算或需要大量资源计算时，此设计模式非常有效。你想保存它们。您也不想连续多次计算它们，而只有最后一个才算数。"),t("li",null,"（2） 什么时候设置脏标志？确保每当重要属性发生更改时，在类本身中设置 dirty 标志。此属性应影响计算结果的结果，并且通过更改属性，使最后一个结果无效。"),t("li",null,"（3） 你什么时候清除脏标志？每当使用最新信息计算结果时，都应该清除脏标志，这似乎是显而易见的，但有时您可能希望清除该标志。")],-1)]))}const d=n(o,[["render",i],["__file","dirtyflag.html.vue"]]),m=JSON.parse('{"path":"/design/other/dirtyflag.html","title":"脏标志行为模式","lang":"zh-CN","frontmatter":{"title":"脏标志行为模式","icon":"laptop-code","category":["设计模式"],"tag":["设计模式"],"description":"概述 脏标志行为模式允许您避免无论如何都需要再次执行的昂贵操作。这是一个简单的模式，实际上只是解释了如何向类添加一个布尔值，您可以在属性更改时设置该值。这将使您的班级知道，它之前可能计算过的任何结果都需要在请求时再次计算。重新计算结果后，可以清除布尔值。 在深入研究使用此模式之前，需要考虑一些要点： 您需要考虑一些事项： （1） 您需要它吗？当要计算的...","head":[["meta",{"property":"og:url","content":"https://ujava.cn/design/other/dirtyflag.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"脏标志行为模式"}],["meta",{"property":"og:description","content":"概述 脏标志行为模式允许您避免无论如何都需要再次执行的昂贵操作。这是一个简单的模式，实际上只是解释了如何向类添加一个布尔值，您可以在属性更改时设置该值。这将使您的班级知道，它之前可能计算过的任何结果都需要在请求时再次计算。重新计算结果后，可以清除布尔值。 在深入研究使用此模式之前，需要考虑一些要点： 您需要考虑一些事项： （1） 您需要它吗？当要计算的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-03T03:00:03.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:modified_time","content":"2024-03-03T03:00:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"脏标志行为模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-03T03:00:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]}],"git":{"createdTime":1709261449000,"updatedTime":1709434803000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":3}]},"readingTime":{"minutes":1.16,"words":349},"filePathRelative":"design/other/dirtyflag.md","localizedDate":"2024年3月1日","excerpt":"<h2>概述</h2>\\n<p>脏标志行为模式允许您避免无论如何都需要再次执行的昂贵操作。这是一个简单的模式，实际上只是解释了如何向类添加一个布尔值，您可以在属性更改时设置该值。这将使您的班级知道，它之前可能计算过的任何结果都需要在请求时再次计算。重新计算结果后，可以清除布尔值。<br>\\n在深入研究使用此模式之前，需要考虑一些要点：</p>\\n<p>您需要考虑一些事项：</p>\\n<ul>\\n<li>（1） 您需要它吗？当要计算的结果难以计算或需要大量资源计算时，此设计模式非常有效。你想保存它们。您也不想连续多次计算它们，而只有最后一个才算数。</li>\\n<li>（2） 什么时候设置脏标志？确保每当重要属性发生更改时，在类本身中设置 dirty 标志。此属性应影响计算结果的结果，并且通过更改属性，使最后一个结果无效。</li>\\n<li>（3） 你什么时候清除脏标志？每当使用最新信息计算结果时，都应该清除脏标志，这似乎是显而易见的，但有时您可能希望清除该标志。</li>\\n</ul>","autoDesc":true}');export{d as comp,m as data};
