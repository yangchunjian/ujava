const e=JSON.parse('{"key":"v-c616d1ee","path":"/design/create/singleton.html","title":"单例模式","lang":"zh-CN","frontmatter":{"title":"单例模式","icon":"laptop-code","category":["设计模式"],"tag":["设计模式"],"description":"概述 介绍： 用来创建全局唯一的对象 。一个类只允许创建一个对象（或者叫实例），那这个类就是一个单例类，这种设计模式就叫作单例模式。单例有几种经典的实现方式，它们分别是：饿汉式、懒汉式、双重检测、静态内部类、枚举 场景：对于一些全局类，没有后续扩展需求并且不依赖外部系统的场景中可以使用。例如多线程的线程池，数据库的连接池等当对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度","head":[["meta",{"property":"og:url","content":"https://ujava.cn/design/create/singleton.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"单例模式"}],["meta",{"property":"og:description","content":"概述 介绍： 用来创建全局唯一的对象 。一个类只允许创建一个对象（或者叫实例），那这个类就是一个单例类，这种设计模式就叫作单例模式。单例有几种经典的实现方式，它们分别是：饿汉式、懒汉式、双重检测、静态内部类、枚举 场景：对于一些全局类，没有后续扩展需求并且不依赖外部系统的场景中可以使用。例如多线程的线程池，数据库的连接池等当对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-25T09:52:59.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:modified_time","content":"2024-04-25T09:52:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单例模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-25T09:52:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"具体示例","slug":"具体示例","link":"#具体示例","children":[{"level":3,"title":"1）饿汉式","slug":"_1-饿汉式","link":"#_1-饿汉式","children":[]},{"level":3,"title":"2）懒汉式，双检锁","slug":"_2-懒汉式-双检锁","link":"#_2-懒汉式-双检锁","children":[]},{"level":3,"title":"3）静态内部类","slug":"_3-静态内部类","link":"#_3-静态内部类","children":[]},{"level":3,"title":"4）枚举","slug":"_4-枚举","link":"#_4-枚举","children":[]}]}],"git":{"createdTime":1696680072000,"updatedTime":1714038779000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":7}]},"readingTime":{"minutes":2.14,"words":642},"filePathRelative":"design/create/singleton.md","localizedDate":"2023年10月7日","excerpt":"<h2> 概述</h2>\\n<p><strong>介绍</strong>： <mark>用来创建全局唯一的对象</mark> 。一个类只允许创建一个对象（或者叫实例），那这个类就是一个单例类，这种设计模式就叫作单例模式。单例有几种经典的实现方式，它们分别是：<code>饿汉式、懒汉式</code>、双重检测、静态内部类、枚举</p>\\n<p><strong>场景</strong>：对于一些全局类，没有后续扩展需求并且不依赖外部系统的场景中可以使用。例如多线程的<code>线程池，数据库的连接池</code>等当对象需要被共享的场合。由于<code>单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度</code></p>","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}');export{e as data};
