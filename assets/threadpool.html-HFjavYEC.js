const t=JSON.parse('{"key":"v-1e03c85c","path":"/design/other/threadpool.html","title":"线程池(Thread Pool)模式","lang":"zh-CN","frontmatter":{"title":"线程池(Thread Pool)模式","icon":"laptop-code","category":["设计模式"],"tag":["设计模式"],"description":"概述 通常情况下，要执行的任务是短暂的，并且任务数量很大。 为每个任务创建一个新线程会使系统花费更多的时间来创建和销毁 线程而不是执行实际任务。线程池通过重用现有的 线程，并消除创建新线程的延迟。","head":[["meta",{"property":"og:url","content":"https://ujava.cn/design/other/threadpool.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"线程池(Thread Pool)模式"}],["meta",{"property":"og:description","content":"概述 通常情况下，要执行的任务是短暂的，并且任务数量很大。 为每个任务创建一个新线程会使系统花费更多的时间来创建和销毁 线程而不是执行实际任务。线程池通过重用现有的 线程，并消除创建新线程的延迟。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-04T06:36:55.000Z"}],["meta",{"property":"article:author","content":"ujava"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:modified_time","content":"2024-03-04T06:36:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程池(Thread Pool)模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-04T06:36:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ujava\\",\\"url\\":\\"https://ujava.cn\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]}],"git":{"createdTime":1709534215000,"updatedTime":1709534215000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":1}]},"readingTime":{"minutes":0.36,"words":109},"filePathRelative":"design/other/threadpool.md","localizedDate":"2024年3月4日","excerpt":"<h2> 概述</h2>\\n<p>通常情况下，要执行的任务是短暂的，并且任务数量很大。<br>\\n为每个任务创建一个新线程会使系统花费更多的时间来创建和销毁<br>\\n线程而不是执行实际任务。线程池通过重用现有的<br>\\n线程，并消除创建新线程的延迟。</p>\\n","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}');export{t as data};
