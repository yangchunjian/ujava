const t=JSON.parse('{"key":"v-7a3ad5c4","path":"/design/structure/adapter.html","title":"适配器模式","lang":"zh-CN","frontmatter":{"title":"适配器模式","index":false,"icon":"laptop-code","category":["设计模式"],"description":"概述 适配器模式是一种结构型设计模式，它允许将一个类的接口转换成客户端所期望的另一个接口。 适配器模式的主要目的是解决两个不兼容接口之间的接口转换问题，使得原本由于接口不匹配而无法工作的类可以协同工作。 适配器模式的核心思想是创建一个适配器类，该适配器类实现了客户端期望的目标接口，并持有一个对被适配者对象的引用。 适配器类通过调用被适配者对象的方法来实...","head":[["meta",{"property":"og:url","content":"https://ujava.cn/design/structure/adapter.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"适配器模式"}],["meta",{"property":"og:description","content":"概述 适配器模式是一种结构型设计模式，它允许将一个类的接口转换成客户端所期望的另一个接口。 适配器模式的主要目的是解决两个不兼容接口之间的接口转换问题，使得原本由于接口不匹配而无法工作的类可以协同工作。 适配器模式的核心思想是创建一个适配器类，该适配器类实现了客户端期望的目标接口，并持有一个对被适配者对象的引用。 适配器类通过调用被适配者对象的方法来实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-26T09:45:59.000Z"}],["meta",{"property":"article:author","content":"ujava"}],["meta",{"property":"article:modified_time","content":"2023-09-26T09:45:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"适配器模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-26T09:45:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ujava\\",\\"url\\":\\"https://ujava.cn\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]}],"git":{"createdTime":1695721559000,"updatedTime":1695721559000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":1}]},"readingTime":{"minutes":1.26,"words":377},"filePathRelative":"design/structure/adapter.md","localizedDate":"2023年9月26日","autoDesc":true}');export{t as data};
