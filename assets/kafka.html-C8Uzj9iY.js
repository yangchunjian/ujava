import{_ as s,c as n,a as e,o as i}from"./app-CZKXz-g7.js";const l="/assets/img_229-C1TQJ2QW.png",p="/assets/img_230-CLbGxcPc.png",r="/assets/img_231-DPuyx1Sq.png",t="/assets/img_232-zhlpMVND.png",d="/assets/img_233-C1qBEAZG.png",c="/assets/img_234-BCLZpvxZ.png",o="/assets/img_235-YIJ19Sf4.png",v="/assets/img_236-oLaRn-Gh.png",u="/assets/img_237-C-C4fNCI.png",m={};function h(b,a){return i(),n("div",null,a[0]||(a[0]=[e('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>在大数据领域开发者常常会听到MQ这个术语，该术语便是消息队列的意思，<br> Kafka是分布式的发布—订阅消息系统。它最初由LinkedIn(领英)公司发布，使用Scala语言编写，与2010年12月份开源，成为Apache的顶级项目。Kafka是一个高吞吐量的、持久性的、分布式发布订阅消息系统。它主要用于处理活跃的数据(登录、浏览、点击、分享、喜欢等用户行为产生的数据)。</p><h3 id="_1-消息-message" tabindex="-1"><a class="header-anchor" href="#_1-消息-message"><span>1.消息 Message</span></a></h3><p>网络中的两台计算机或者两个通讯设备之间传递的数据。例如说：文本、音乐、视频等内容。</p><h3 id="_2-队列-queue-栈的特点filo-队列fifo" tabindex="-1"><a class="header-anchor" href="#_2-队列-queue-栈的特点filo-队列fifo"><span>2.队列 Queue(栈的特点FILO 队列FIFO)</span></a></h3><p>一种特殊的线性表（数据元素首尾相接），特殊之处在于只允许在首部删除元素和在尾部追加元素。入队、出队</p><h3 id="_3-消息队列-mq" tabindex="-1"><a class="header-anchor" href="#_3-消息队列-mq"><span>3.消息队列 MQ</span></a></h3><p>消息+队列，保存消息的队列。消息的传输过程中的容器；主要提供生产、消费接口供外部调用做数据的存储和获取。</p><h2 id="消息队列分类" tabindex="-1"><a class="header-anchor" href="#消息队列分类"><span>消息队列分类</span></a></h2><p>MQ主要分为两类：点对点(p2p)、发布订阅(Pub/Sub)</p><h3 id="_1-共同点" tabindex="-1"><a class="header-anchor" href="#_1-共同点"><span>1.共同点</span></a></h3><p>消息生产者生产消息发送到queue中，然后消息消费者从queue中读取并且消费消息。</p><h3 id="_2-不同点" tabindex="-1"><a class="header-anchor" href="#_2-不同点"><span>2.不同点</span></a></h3><p>p2p模型包括：消息队列(Queue)、发送者(Sender)、接收者(Receiver) ，一个生产者生产的消息只有一个消费者(Consumer)(即一旦被消费，消息就不在消息队列中)。比如说打电话。</p><p>Pub/Sub包含：消息队列(Queue)、主题(Topic)、发布者(Publisher)、订阅者(Subscriber)每个消息可以有多个消费者，彼此互不影响。比如我发布一个微博：关注我的人都能够看到。</p><h2 id="kafka的特点" tabindex="-1"><a class="header-anchor" href="#kafka的特点"><span>Kafka的特点</span></a></h2><p>Kafka如此受欢迎，而且有越来越多的系统支持与Kafka的集成，主要由于Kafka具有如下特性。<br> ● 高吞吐量、低延迟：Kafka每秒可以处理几十万条消息，它的延迟最低只有几毫秒。<br> ● 可扩展性：Kafka集群同Hadoop集群一样，支持横向扩展。<br> ● 持久性、可靠性：Kafka消息可以被持久化到本地磁盘，并且支持Partition数据备份，防止数据丢失。<br> ● 容错性：允许Kafka集群中的节点失败，如果Partition（分区）副本数量为n，则最多允许n-1个节点失败。<br> ● 高并发：单节点支持上千个客户端同时读写，每秒钟有上百MB的吞吐量，基本上达到了网卡的极限</p><h2 id="kafka组成" tabindex="-1"><a class="header-anchor" href="#kafka组成"><span>Kafka组成</span></a></h2><ol><li>Topic：主题，Kafka处理的消息的不同分类。</li><li>Broker：消息代理，Kafka集群中的一个kafka服务节点称为一个broker，主要存储消息数据。存在硬盘中每个topic都是有分区的。</li><li>Partition：Topic物理上的分组，一个topic在broker中被分为1个或者多个partition，分区在创建topic的时候指定。</li><li>Replica：数据副本，可以为保存在Kafka中的数据指定副本数，以提高数据冗余性，防止数据丢失；</li><li>Message：消息，是通信的基本单位，每个消息都属于一个partition</li></ol><h3 id="kafka服务相关" tabindex="-1"><a class="header-anchor" href="#kafka服务相关"><span>Kafka服务相关</span></a></h3><ol><li>Producer：消息和数据的生产者，向Kafka的一个topic发布消息。</li><li>Consumer：消息和数据的消费者，定于topic并处理其发布的消息。</li><li>Zookeeper：协调kafka的正常运行。</li><li>KRaft：Kafka的KRaft模式在2.8.0版本中被引入。从2.8.0版本开始，Kafka提供了对KRaft的支持，其中最大的变化之一就是不再依赖外部的ZooKeeper来管理Kafka的元数据。因此，如果你使用2.8.0版本或更高版本的Kafka，你将能够使用KRaft模式，无需安装和配置ZooKeeper。<br><img src="'+l+'" alt="img_229.png" loading="lazy"></li></ol><h3 id="kafka架构设计" tabindex="-1"><a class="header-anchor" href="#kafka架构设计"><span>Kafka架构设计</span></a></h3><p>一个典型的Kafka集群包含若干个生产者（Producer）、若干Kafka集群节点（Broker）、若干消费者（Consumer）以及一个Zookeeper集群或者KRaft模式。Kafka通过Zookeeper管理集群配置，选举Leader以及在消费者发生变化时进行负载均衡。生产者使用推（Push）模式将消息发布到集群节点，而消费者使用拉（Pull）模式从集群节点中订阅并消费消息。</p><h3 id="主题和分区的具体定义如下。" tabindex="-1"><a class="header-anchor" href="#主题和分区的具体定义如下。"><span>主题和分区的具体定义如下。</span></a></h3><p>● 主题是生产者发布到Kafka集群的每条信息所属的类别，即Kafka是面向主题的，一个主题可以分布在多个节点上。<br> ● 分区是Kafka集群横向扩展和一切并行化的基础，每个Topic可以被切分为一个或多个分区。一个分区只对应一个集群节点，每个分区内部的消息是强有序的。<br> ● Offset（即偏移量）是消息在分区中的编号，每个分区中的编号是独立的。<br><img src="'+p+'" alt="img_230.png" loading="lazy"></p><h2 id="kafka分布式集群的构建" tabindex="-1"><a class="header-anchor" href="#kafka分布式集群的构建"><span>Kafka分布式集群的构建</span></a></h2><p>在kafka2.0版本以前是依赖于zookeeper集群中安装<br> ·|| Kafka使用Zookeeper作为其分布式协调框架，能很好地将消息生产、消息存储、消息消费的过程结合在一起。同时借助Zookeeper,Kafka能够将生产者、消费者和集群节点在内的所有组件，在无状态的情况下建立起生产者和消费者的订阅关系，并实现生产者与消费者的负载均衡。<br> 可以看出Kafka集群依赖于Zookeeper，所以在安装Kafka之前需要提前安装Zookeeper。Zookeeper集群在前面Hadoop集群的构建过程中已经在使用，Kafka可以共用之前安装的Zookeeper集群，接下来只需要安装Kafka集群即可。<br><img src="'+r+'" alt="img_231.png" loading="lazy"></p><p>·|| 较新版本的 Apache Kafka（从2.8.0版本开始）引入了KRaft，这是一个内置的分布式存储 系统，用于管理Kafka的元数据信息，不再需要依赖外部的 ZooKeeper。因此，你在使用较新版本的Kafka时，不再需要单独安装和配置 ZooKeeper。<br> 在KRaft模式下，Kafka内部有自己的元数据存储，这消除了对外部 ZooKeeper 的依赖。这样做的目的是简化 Kafka 集群的维护和部署，以及提高可用性。<br><img src="'+t+'" alt="img_232.png" loading="lazy"><br> 在基于zookeeper和kraft两种集群管理机制下，200万分区数据量下的耗时比较。基于自带的KRaft，性能表现会更优。<br><img src="'+d+`" alt="img_233.png" loading="lazy"></p><h3 id="基于kraft下的kafka安装" tabindex="-1"><a class="header-anchor" href="#基于kraft下的kafka安装"><span>基于KRaft下的kafka安装</span></a></h3><p>解压压缩包</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>tar -zxvf kafka_2.12-3.6.0.tgz -C kafka</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>编辑环境变量</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>export KAFKA_HOME=/home/hadoop/kafka/kafka_2.12-3.6.0</span></span>
<span class="line"><span>export PATH=$KAFKA_HOME/bin:PATH</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>编辑配置文件server.properties<br> 文件所在路径\${KAFKA_HOME}/config/kraft/server.properties<br> 该文件中几个重点参数</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>process.roles=broker,controller ##broker相当于从节点，controller相当于主节点</span></span>
<span class="line"><span>node.id=2 ##节点ID 每个节点必须唯一</span></span>
<span class="line"><span>controller.quorum.voters=1@vm02:9093,2@vm03:9093,3@vm04:9093</span></span>
<span class="line"><span>##参与主节点选举，格式(node.id)@(hostname):(port)</span></span>
<span class="line"><span>advertised.listeners=PLAINTEXT://hostname:9092 ##对外服务地址，消费者、生产者对该节点的访问</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成集群ID</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kafka-storage.sh random-uuid</span></span>
<span class="line"><span>6foHn9NLQpiMAirIK7EG4A</span></span>
<span class="line"><span>##生成6foHn9NLQpiMAirIK7EG4A 的uuid</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有节点执行，kafka初始化</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kafka-storage.sh format -t 6foHn9NLQpiMAirIK7EG4A -c ./$KAFKA_HOME/config/kraft/server.properties</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>所有节点执行，启动kafka</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kafka-server-start.sh -daemon $KAFKA_HOME/config/kraft/server.properties</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查看kafka进程</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>jps</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="`+c+'" alt="img_234.png" tabindex="0" loading="lazy"><figcaption>img_234.png</figcaption></figure><h2 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例</span></a></h2><h3 id="创建topic" tabindex="-1"><a class="header-anchor" href="#创建topic"><span>创建topic</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kafka-topics.sh --create --topic your_topic --bootstrap-server vm02:9092,vm03:9092,vm04:9092 --partitions 3 --replication-factor 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注： --bootstrap-server vm02:9092,vm03:9092,vm04:9092 此处参数可以指定集群所有节点，也可以指定localhost:9092,创建的主题并不意味着后期的消费者和生产者只能指定在 localhost 节点上。这里的 --bootstrap-server 参数在创建主题时主要是为了指定初始的 Kafka 节点，它告诉 Kafka 工具在哪里查找集群的元数据。</p><p>后期的消费者和生产者在连接到 Kafka 集群时，会从指定的初始节点获取集群的元数据，然后与整个集群建立连接。一旦获取了元数据，消费者和生产者就可以与整个 Kafka 集群进行通信，而不仅仅限制在初始指定的节点上。因此，使用 --bootstrap-server localhost:9092 创建的主题对于后期的消费者和生产者，仍然可以在整个 Kafka 集群的任何节点上进行使用，只要它们能够连接到集群并获取到正确的元数据信息。</p><h3 id="查看已创建的topic的详细信息" tabindex="-1"><a class="header-anchor" href="#查看已创建的topic的详细信息"><span>查看已创建的topic的详细信息</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kafka-topics.sh --describe --bootstrap-server vm02:9092,vm03:9092,vm04:9092  --topic your_topic</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+o+`" alt="img_235.png" tabindex="0" loading="lazy"><figcaption>img_235.png</figcaption></figure><h3 id="修改已创建topic" tabindex="-1"><a class="header-anchor" href="#修改已创建topic"><span>修改已创建topic</span></a></h3><p>在官方对于alter参数的解释中，</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>--alter                                  Alter the number of partitions and     </span></span>
<span class="line"><span>                                           replica assignment. Update the       </span></span>
<span class="line"><span>                                           configuration of an existing topic   </span></span>
<span class="line"><span>                                           via --alter is no longer supported   </span></span>
<span class="line"><span>                                           here (the kafka-configs CLI supports </span></span>
<span class="line"><span>                                           altering topic configs with a --     </span></span>
<span class="line"><span>                                           bootstrap-server option).</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a href="http://kafka-topics.sh" target="_blank" rel="noopener noreferrer">kafka-topics.sh</a> --alter选项在最新版本中已不再支持更新现有主题的配置，这意味着一旦主题被创建，就不能使用–alter选项来更改其分区数和副本分配。<a href="http://xn--kafka-configs-vm3u73ej03aci7k2e8dbkb.sh" target="_blank" rel="noopener noreferrer">可以通过使用kafka-configs.sh</a></p><h4 id="修改主题的配置参数。" tabindex="-1"><a class="header-anchor" href="#修改主题的配置参数。"><span>修改主题的配置参数。</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kafka-configs.sh --bootstrap-server vm02:9092,vm03:9092,vm04:9092 \\</span></span>
<span class="line"><span>--entity-type topics --entity-name your_topic \\</span></span>
<span class="line"><span>--alter --add-config retention.ms=86400000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查看topic-定义相关参数信息。" tabindex="-1"><a class="header-anchor" href="#查看topic-定义相关参数信息。"><span>查看topic 定义相关参数信息。</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kafka-configs.sh --bootstrap-server \\</span></span>
<span class="line"><span>vm02:9092,vm03:9092,vm04:9092 \\</span></span>
<span class="line"><span>--entity-type topics --entity-name your_topic --describe</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+`" alt="img_236.png" tabindex="0" loading="lazy"><figcaption>img_236.png</figcaption></figure><h4 id="删除已创建topic" tabindex="-1"><a class="header-anchor" href="#删除已创建topic"><span>删除已创建topic</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kafka-topics.sh --delete --topic your_topic --bootstrap-server vm02:9092,vm03:9092,vm04:9092</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="创建生产者producer" tabindex="-1"><a class="header-anchor" href="#创建生产者producer"><span>创建生产者producer</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kafka-console-producer.sh --broker-list 192.168.56.101:9092 --topic mrt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="场景应用示例" tabindex="-1"><a class="header-anchor" href="#场景应用示例"><span>场景应用示例</span></a></h2><p>以postgresql数据库中的public.conn_fdw表作为生产者producer身份把数据推向kafka，然后在使用kafka把数据推推向消费者数据库Oracle</p><h3 id="在postgresql数据库中创建测试数据表" tabindex="-1"><a class="header-anchor" href="#在postgresql数据库中创建测试数据表"><span>在postgresql数据库中创建测试数据表，</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE public.conn_fdw (</span></span>
<span class="line"><span>	id int4 NULL,</span></span>
<span class="line"><span>	&quot;name&quot; varchar(50) NULL,</span></span>
<span class="line"><span>	age int4 NULL,</span></span>
<span class="line"><span>	city varchar(50) NULL,</span></span>
<span class="line"><span>	salary int4 NULL</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在oracle中创建同样的表结构" tabindex="-1"><a class="header-anchor" href="#在oracle中创建同样的表结构"><span>在Oracle中创建同样的表结构</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>create table SYSTEM.CONN_FDW</span></span>
<span class="line"><span>(</span></span>
<span class="line"><span>  id     NUMBER,</span></span>
<span class="line"><span>  name   VARCHAR2(50),</span></span>
<span class="line"><span>  age    NUMBER,</span></span>
<span class="line"><span>  city   VARCHAR2(50),</span></span>
<span class="line"><span>  salary NUMBER,</span></span>
<span class="line"><span>  load_time timestamp default current_timestamp</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建主题conn-fdw" tabindex="-1"><a class="header-anchor" href="#创建主题conn-fdw"><span>创建主题conn_fdw</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kafka-topics.sh --create --topic conn_fdw \\</span></span>
<span class="line"><span>--bootstrap-server vm02:9092,vm03:9092,vm04:9092 \\</span></span>
<span class="line"><span>--partitions 3 \\</span></span>
<span class="line"><span>--replication-factor 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查看已经创建的主题conn-fdw" tabindex="-1"><a class="header-anchor" href="#查看已经创建的主题conn-fdw"><span>查看已经创建的主题conn_fdw</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>kafka-topics.sh --describe \\</span></span>
<span class="line"><span>--bootstrap-server vm02:9092,vm03:9092,vm04:9092  \\</span></span>
<span class="line"><span>--topic conn_fdw</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+`" alt="img_237.png" loading="lazy"><br> 在此图中有</p><h3 id="添加maven依赖" tabindex="-1"><a class="header-anchor" href="#添加maven依赖"><span>添加maven依赖</span></a></h3><p>添加相应的依赖包，以作为java代码class的支持</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>    &lt;dependency&gt;</span></span>
<span class="line"><span>      &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span></span>
<span class="line"><span>      &lt;artifactId&gt;kafka_2.12&lt;/artifactId&gt;</span></span>
<span class="line"><span>      &lt;version&gt;2.3.0&lt;/version&gt;</span></span>
<span class="line"><span>    &lt;/dependency&gt;</span></span>
<span class="line"><span>    &lt;dependency&gt;</span></span>
<span class="line"><span>      &lt;groupId&gt;org.postgresql&lt;/groupId&gt;</span></span>
<span class="line"><span>      &lt;artifactId&gt;postgresql&lt;/artifactId&gt;</span></span>
<span class="line"><span>      &lt;version&gt;42.2.23&lt;/version&gt; &lt;!-- 使用你的 PostgreSQL 版本 --&gt;</span></span>
<span class="line"><span>    &lt;/dependency&gt;</span></span>
<span class="line"><span>    &lt;dependency&gt;</span></span>
<span class="line"><span>      &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</span></span>
<span class="line"><span>      &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</span></span>
<span class="line"><span>      &lt;version&gt;1.2.3&lt;/version&gt; &lt;!-- 请使用最新版本 --&gt;</span></span>
<span class="line"><span>    &lt;/dependency&gt;</span></span>
<span class="line"><span>    &lt;dependency&gt;</span></span>
<span class="line"><span>      &lt;groupId&gt;com.oracle.database.jdbc&lt;/groupId&gt;</span></span>
<span class="line"><span>      &lt;artifactId&gt;ojdbc10&lt;/artifactId&gt; &lt;!-- 使用你的 Oracle JDBC 版本 --&gt;</span></span>
<span class="line"><span>      &lt;version&gt;19.8.0.0&lt;/version&gt;</span></span>
<span class="line"><span>    &lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="kafka生产者代码" tabindex="-1"><a class="header-anchor" href="#kafka生产者代码"><span>Kafka生产者代码</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import org.apache.kafka.clients.producer.KafkaProducer;</span></span>
<span class="line"><span>import org.apache.kafka.clients.producer.Producer;</span></span>
<span class="line"><span>import org.apache.kafka.clients.producer.ProducerConfig;</span></span>
<span class="line"><span>import org.apache.kafka.clients.producer.ProducerRecord;</span></span>
<span class="line"><span>import java.sql.Connection;</span></span>
<span class="line"><span>import java.sql.DriverManager;</span></span>
<span class="line"><span>import java.sql.ResultSet;</span></span>
<span class="line"><span>import java.sql.Statement;</span></span>
<span class="line"><span>import java.util.Properties;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class PgKafkaProducer {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        // Kafka 配置</span></span>
<span class="line"><span>        Properties props = new Properties();</span></span>
<span class="line"><span>        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;10.0.0.102:9092,10.0.0.103:9092,10.0.0.104:9092&quot;);</span></span>
<span class="line"><span>        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span></span>
<span class="line"><span>        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // PostgreSQL 连接配置</span></span>
<span class="line"><span>        String jdbcUrl = &quot;jdbc:postgresql://10.0.0.108:5432/postgres&quot;;</span></span>
<span class="line"><span>        String username = &quot;postgres&quot;;</span></span>
<span class="line"><span>        String password = &quot;postgres&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password);</span></span>
<span class="line"><span>             Statement statement = connection.createStatement()) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            // 查询 PostgreSQL 数据</span></span>
<span class="line"><span>            String query = &quot;SELECT id,name,age,city,salary FROM public.conn_fdw&quot;;</span></span>
<span class="line"><span>            ResultSet resultSet = statement.executeQuery(query);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            // Kafka 生产者</span></span>
<span class="line"><span>            try (Producer&lt;String, String&gt; producer = new KafkaProducer&lt;&gt;(props)) {</span></span>
<span class="line"><span>                while (resultSet.next()) {</span></span>
<span class="line"><span>                    // 将每一行数据作为消息发送到 Kafka 主题</span></span>
<span class="line"><span>                    String key = String.valueOf(resultSet.getInt(&quot;id&quot;));</span></span>
<span class="line"><span>                    String value = resultSet.getString(&quot;name&quot;) + &quot;,&quot; +</span></span>
<span class="line"><span>                            resultSet.getInt(&quot;age&quot;) + &quot;,&quot; +</span></span>
<span class="line"><span>                            resultSet.getString(&quot;city&quot;) + &quot;,&quot; +</span></span>
<span class="line"><span>                            resultSet.getInt(&quot;salary&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                    ProducerRecord&lt;String, String&gt; record = new ProducerRecord&lt;&gt;(&quot;conn_fdw&quot;, key, value);</span></span>
<span class="line"><span>                    producer.send(record);</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        } catch (Exception e) {</span></span>
<span class="line"><span>            e.printStackTrace();</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="消费者代码" tabindex="-1"><a class="header-anchor" href="#消费者代码"><span>消费者代码</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import org.apache.kafka.clients.consumer.Consumer;</span></span>
<span class="line"><span>import org.apache.kafka.clients.consumer.ConsumerConfig;</span></span>
<span class="line"><span>import org.apache.kafka.clients.consumer.ConsumerRecords;</span></span>
<span class="line"><span>import org.apache.kafka.clients.consumer.KafkaConsumer;</span></span>
<span class="line"><span>import java.sql.Connection;</span></span>
<span class="line"><span>import java.sql.DriverManager;</span></span>
<span class="line"><span>import java.sql.PreparedStatement;</span></span>
<span class="line"><span>import java.util.Collections;</span></span>
<span class="line"><span>import java.util.Properties;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class KafkaToOracleConsumer {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        // Kafka 配置</span></span>
<span class="line"><span>        Properties kafkaProps = new Properties();</span></span>
<span class="line"><span>        kafkaProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, &quot;10.0.0.102:9092,10.0.0.103:9092,10.0.0.104:9092&quot;);</span></span>
<span class="line"><span>        kafkaProps.put(ConsumerConfig.GROUP_ID_CONFIG, &quot;conn_fdw_groupid&quot;);</span></span>
<span class="line"><span>        kafkaProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span></span>
<span class="line"><span>        kafkaProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // Oracle 连接配置</span></span>
<span class="line"><span>        String jdbcUrl = &quot;jdbc:oracle:thin:@192.168.48.1:1521:orcl&quot;;</span></span>
<span class="line"><span>        String username = &quot;system&quot;;</span></span>
<span class="line"><span>        String password = &quot;system&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password);</span></span>
<span class="line"><span>             PreparedStatement preparedStatement = connection.prepareStatement(</span></span>
<span class="line"><span>                     &quot;INSERT INTO SYSTEM.CONN_FDW (id, name, age, city, salary) VALUES (?, ?, ?, ?, ?)&quot;)) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            // Kafka 消费者</span></span>
<span class="line"><span>            try (Consumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;&gt;(kafkaProps)) {</span></span>
<span class="line"><span>                consumer.subscribe(Collections.singletonList(&quot;conn_fdw&quot;));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                while (true) {</span></span>
<span class="line"><span>                    ConsumerRecords&lt;String, String&gt; records = consumer.poll(100);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                    records.forEach(record -&gt; {</span></span>
<span class="line"><span>                        // 解析 Kafka 消息</span></span>
<span class="line"><span>                        String[] values = record.value().split(&quot;,&quot;);</span></span>
<span class="line"><span>                        int id = Integer.parseInt(values[0]);</span></span>
<span class="line"><span>                        String name = values[1];</span></span>
<span class="line"><span>                        int age = Integer.parseInt(values[2]);</span></span>
<span class="line"><span>                        String city = values[3];</span></span>
<span class="line"><span>                        int salary = Integer.parseInt(values[4]);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                        // 插入到 Oracle 数据库</span></span>
<span class="line"><span>                        try {</span></span>
<span class="line"><span>                            preparedStatement.setInt(1, id);</span></span>
<span class="line"><span>                            preparedStatement.setString(2, name);</span></span>
<span class="line"><span>                            preparedStatement.setInt(3, age);</span></span>
<span class="line"><span>                            preparedStatement.setString(4, city);</span></span>
<span class="line"><span>                            preparedStatement.setInt(5, salary);</span></span>
<span class="line"><span>                            preparedStatement.executeUpdate();</span></span>
<span class="line"><span>                        } catch (Exception e) {</span></span>
<span class="line"><span>                            e.printStackTrace();</span></span>
<span class="line"><span>                        }</span></span>
<span class="line"><span>                    });</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        } catch (Exception e) {</span></span>
<span class="line"><span>            e.printStackTrace();</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时可以通过同时执行两段代码，在跑起来的过程中向生产者PG数据库插入以下数据库，然后到Oracle 数据库中观察数据流的流入情况。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(1, &#39;John&#39;, 30, &#39;New York&#39;, 50000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(2, &#39;Alice&#39;, 25, &#39;Los Angeles&#39;, 60000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(3, &#39;Bob&#39;, 35, &#39;Chicago&#39;, 70000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(4, &#39;Eva&#39;, 28, &#39;San Francisco&#39;, 55000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(5, &#39;Mike&#39;, 32, &#39;Seattle&#39;, 65000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(6, &#39;Sophia&#39;, 29, &#39;Boston&#39;, 75000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(7, &#39;David&#39;, 27, &#39;Denver&#39;, 52000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(8, &#39;Emily&#39;, 31, &#39;Austin&#39;, 68000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(9, &#39;Daniel&#39;, 26, &#39;Phoenix&#39;, 58000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(10, &#39;Olivia&#39;, 33, &#39;Houston&#39;, 72000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(11, &#39;Liam&#39;, 24, &#39;Portland&#39;, 49000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(12, &#39;Ava&#39;, 34, &#39;Atlanta&#39;, 71000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(13, &#39;Logan&#39;, 30, &#39;Miami&#39;, 62000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(14, &#39;Mia&#39;, 28, &#39;Dallas&#39;, 54000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(15, &#39;Jackson&#39;, 29, &#39;Minneapolis&#39;, 67000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(16, &#39;Sophie&#39;, 31, &#39;Detroit&#39;, 59000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(17, &#39;William&#39;, 27, &#39;Philadelphia&#39;, 70000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(18, &#39;Emma&#39;, 32, &#39;San Diego&#39;, 66000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(19, &#39;James&#39;, 26, &#39;Raleigh&#39;, 63000);</span></span>
<span class="line"><span>INSERT INTO public.conn_fdw</span></span>
<span class="line"><span>(id, &quot;name&quot;, age, city, salary)</span></span>
<span class="line"><span>VALUES(20, &#39;Avery&#39;, 35, &#39;Tampa&#39;, 71000);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,85)]))}const g=s(m,[["render",h],["__file","kafka.html.vue"]]),f=JSON.parse('{"path":"/assembly/kafka.html","title":"组件Kafka","lang":"zh-CN","frontmatter":{"title":"组件Kafka","icon":"laptop-code","category":["设计组件"],"tag":["组件"],"description":"简介 在大数据领域开发者常常会听到MQ这个术语，该术语便是消息队列的意思， Kafka是分布式的发布—订阅消息系统。它最初由LinkedIn(领英)公司发布，使用Scala语言编写，与2010年12月份开源，成为Apache的顶级项目。Kafka是一个高吞吐量的、持久性的、分布式发布订阅消息系统。它主要用于处理活跃的数据(登录、浏览、点击、分享、喜欢等...","head":[["meta",{"property":"og:url","content":"https://ujava.cn/assembly/kafka.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"组件Kafka"}],["meta",{"property":"og:description","content":"简介 在大数据领域开发者常常会听到MQ这个术语，该术语便是消息队列的意思， Kafka是分布式的发布—订阅消息系统。它最初由LinkedIn(领英)公司发布，使用Scala语言编写，与2010年12月份开源，成为Apache的顶级项目。Kafka是一个高吞吐量的、持久性的、分布式发布订阅消息系统。它主要用于处理活跃的数据(登录、浏览、点击、分享、喜欢等..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-29T15:25:53.000Z"}],["meta",{"property":"article:tag","content":"组件"}],["meta",{"property":"article:modified_time","content":"2024-09-29T15:25:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组件Kafka\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-29T15:25:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"1.消息 Message","slug":"_1-消息-message","link":"#_1-消息-message","children":[]},{"level":3,"title":"2.队列 Queue(栈的特点FILO 队列FIFO)","slug":"_2-队列-queue-栈的特点filo-队列fifo","link":"#_2-队列-queue-栈的特点filo-队列fifo","children":[]},{"level":3,"title":"3.消息队列 MQ","slug":"_3-消息队列-mq","link":"#_3-消息队列-mq","children":[]}]},{"level":2,"title":"消息队列分类","slug":"消息队列分类","link":"#消息队列分类","children":[{"level":3,"title":"1.共同点","slug":"_1-共同点","link":"#_1-共同点","children":[]},{"level":3,"title":"2.不同点","slug":"_2-不同点","link":"#_2-不同点","children":[]}]},{"level":2,"title":"Kafka的特点","slug":"kafka的特点","link":"#kafka的特点","children":[]},{"level":2,"title":"Kafka组成","slug":"kafka组成","link":"#kafka组成","children":[{"level":3,"title":"Kafka服务相关","slug":"kafka服务相关","link":"#kafka服务相关","children":[]},{"level":3,"title":"Kafka架构设计","slug":"kafka架构设计","link":"#kafka架构设计","children":[]},{"level":3,"title":"主题和分区的具体定义如下。","slug":"主题和分区的具体定义如下。","link":"#主题和分区的具体定义如下。","children":[]}]},{"level":2,"title":"Kafka分布式集群的构建","slug":"kafka分布式集群的构建","link":"#kafka分布式集群的构建","children":[{"level":3,"title":"基于KRaft下的kafka安装","slug":"基于kraft下的kafka安装","link":"#基于kraft下的kafka安装","children":[]}]},{"level":2,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[{"level":3,"title":"创建topic","slug":"创建topic","link":"#创建topic","children":[]},{"level":3,"title":"查看已创建的topic的详细信息","slug":"查看已创建的topic的详细信息","link":"#查看已创建的topic的详细信息","children":[]},{"level":3,"title":"修改已创建topic","slug":"修改已创建topic","link":"#修改已创建topic","children":[]}]},{"level":2,"title":"场景应用示例","slug":"场景应用示例","link":"#场景应用示例","children":[{"level":3,"title":"在postgresql数据库中创建测试数据表，","slug":"在postgresql数据库中创建测试数据表","link":"#在postgresql数据库中创建测试数据表","children":[]},{"level":3,"title":"在Oracle中创建同样的表结构","slug":"在oracle中创建同样的表结构","link":"#在oracle中创建同样的表结构","children":[]},{"level":3,"title":"添加maven依赖","slug":"添加maven依赖","link":"#添加maven依赖","children":[]},{"level":3,"title":"Kafka生产者代码","slug":"kafka生产者代码","link":"#kafka生产者代码","children":[]},{"level":3,"title":"消费者代码","slug":"消费者代码","link":"#消费者代码","children":[]}]}],"git":{"createdTime":1727621000000,"updatedTime":1727623553000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":2}]},"readingTime":{"minutes":10.95,"words":3286},"filePathRelative":"assembly/kafka.md","localizedDate":"2024年9月29日","excerpt":"<h2>简介</h2>\\n<p>在大数据领域开发者常常会听到MQ这个术语，该术语便是消息队列的意思，<br>\\nKafka是分布式的发布—订阅消息系统。它最初由LinkedIn(领英)公司发布，使用Scala语言编写，与2010年12月份开源，成为Apache的顶级项目。Kafka是一个高吞吐量的、持久性的、分布式发布订阅消息系统。它主要用于处理活跃的数据(登录、浏览、点击、分享、喜欢等用户行为产生的数据)。</p>\\n<h3>1.消息 Message</h3>\\n<p>网络中的两台计算机或者两个通讯设备之间传递的数据。例如说：文本、音乐、视频等内容。</p>\\n<h3>2.队列 Queue(栈的特点FILO 队列FIFO)</h3>","autoDesc":true}');export{g as comp,f as data};
