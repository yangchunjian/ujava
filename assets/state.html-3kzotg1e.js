const t=JSON.parse('{"key":"v-97e8e36e","path":"/design/action/state.html","title":"状态模式","lang":"zh-CN","frontmatter":{"title":"状态模式","icon":"laptop-code","category":["设计模式"],"tag":["设计模式"],"description":"概述 介绍：Java状态模式是一种行为型设计模式，它允许对象在内部状态改变时改变它的行为。状态模式将状态封装成独立的类，并将请求委托给当前状态对象，从而实现状态的切换和状态行为的变化。 又称状态对象(Pattern of Objects for States)模式，是一种对象的行为模式。状态模式允许一个对象在其内部状态改变的时候改变其行为。这个对象看上去就像是改变了它的类一样。 本质：根据状态来分离和选择行为 场景： 一个由一个或多个动态变化的属性导致发生不同行为的对象，在与外部事件产生互动时，其内部状态就会改变，从而使得系统的行为也随之发生变化，那么这个对象，就是有状态的对象 代码中包含大量与对象状态有关的条件语句，像是if else或switch case语句，且这些条件执行与否依赖于该对象的状态。 当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时。 当一个对象需要根据状态改变它的数据和方法时。 当一个对象需要在多个状态之间切换，并且每个状态都有不同的行为时。","head":[["meta",{"property":"og:url","content":"https://ujava.cn/ujava/design/action/state.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"状态模式"}],["meta",{"property":"og:description","content":"概述 介绍：Java状态模式是一种行为型设计模式，它允许对象在内部状态改变时改变它的行为。状态模式将状态封装成独立的类，并将请求委托给当前状态对象，从而实现状态的切换和状态行为的变化。 又称状态对象(Pattern of Objects for States)模式，是一种对象的行为模式。状态模式允许一个对象在其内部状态改变的时候改变其行为。这个对象看上去就像是改变了它的类一样。 本质：根据状态来分离和选择行为 场景： 一个由一个或多个动态变化的属性导致发生不同行为的对象，在与外部事件产生互动时，其内部状态就会改变，从而使得系统的行为也随之发生变化，那么这个对象，就是有状态的对象 代码中包含大量与对象状态有关的条件语句，像是if else或switch case语句，且这些条件执行与否依赖于该对象的状态。 当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时。 当一个对象需要根据状态改变它的数据和方法时。 当一个对象需要在多个状态之间切换，并且每个状态都有不同的行为时。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-03T03:00:03.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:modified_time","content":"2024-03-03T03:00:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"状态模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-03T03:00:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]}],"git":{"createdTime":1696676011000,"updatedTime":1709434803000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":4}]},"readingTime":{"minutes":3,"words":901},"filePathRelative":"design/action/state.md","localizedDate":"2023年10月7日","excerpt":"<h2> 概述</h2>\\n<p><strong>介绍</strong>：Java状态模式是一种行为型设计模式，它允许对象在内部状态改变时改变它的行为。状态模式将状态封装成独立的类，并将请求委托给当前状态对象，从而实现状态的切换和状态行为的变化。<br>\\n又称状态对象(Pattern of Objects for States)模式，是一种对象的行为模式。状态模式允许一个对象在其内部状态改变的时候改变其行为。这个对象看上去就像是改变了它的类一样。 <strong>本质：根据状态来分离和选择行为</strong></p>\\n<p><strong>场景</strong>：</p>\\n<ul>\\n<li>一个由一个或多个动态变化的属性导致发生不同行为的对象，在与外部事件产生互动时，其内部状态就会改变，从而使得系统的行为也随之发生变化，那么这个对象，就是有状态的对象</li>\\n<li><strong>代码中包含大量与对象状态有关的条件语句</strong>，像是if else或switch case语句，<strong>且这些条件执行与否依赖于该对象的状态</strong>。</li>\\n<li>当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时。</li>\\n<li>当一个对象需要根据状态改变它的数据和方法时。</li>\\n<li>当一个对象需要在多个状态之间切换，并且每个状态都有不同的行为时。</li>\\n</ul>","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}');export{t as data};
