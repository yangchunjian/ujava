const e=JSON.parse('{"key":"v-d5e12a84","path":"/java/jdkdesign.html","title":"JDK中用到的设计模式","lang":"zh-CN","frontmatter":{"title":"JDK中用到的设计模式","category":"Java","icon":"laptop-code","tag":["设计Java"],"description":"桥接模式 这个模式将抽象和抽象操作的实现进⾏了解耦，这样使得抽象和实现可以 独⽴地变化。 在 Java 应⽤中，对于桥接模式有⼀个⾮常典型的例⼦，就是应⽤程序使⽤ JDBC 驱动程序进⾏开发的⽅式。所谓驱动程序，指的是按照预先约定好 的接⼝来操作计算机系统或者是外围设备的程序。 适配器模式 ⽤来把⼀个接⼝转化成另⼀个接⼝。使得原本由于接⼝不兼容⽽不能⼀...","head":[["meta",{"property":"og:url","content":"https://ujava.cn/java/jdkdesign.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"JDK中用到的设计模式"}],["meta",{"property":"og:description","content":"桥接模式 这个模式将抽象和抽象操作的实现进⾏了解耦，这样使得抽象和实现可以 独⽴地变化。 在 Java 应⽤中，对于桥接模式有⼀个⾮常典型的例⼦，就是应⽤程序使⽤ JDBC 驱动程序进⾏开发的⽅式。所谓驱动程序，指的是按照预先约定好 的接⼝来操作计算机系统或者是外围设备的程序。 适配器模式 ⽤来把⼀个接⼝转化成另⼀个接⼝。使得原本由于接⼝不兼容⽽不能⼀..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-25T00:56:50.000Z"}],["meta",{"property":"article:author","content":"ujava"}],["meta",{"property":"article:tag","content":"设计Java"}],["meta",{"property":"article:modified_time","content":"2024-01-25T00:56:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JDK中用到的设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-25T00:56:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ujava\\",\\"url\\":\\"https://ujava.cn\\"}]}"]]},"headers":[{"level":2,"title":"桥接模式","slug":"桥接模式","link":"#桥接模式","children":[]},{"level":2,"title":"适配器模式","slug":"适配器模式","link":"#适配器模式","children":[]},{"level":2,"title":"组合模式","slug":"组合模式","link":"#组合模式","children":[]},{"level":2,"title":"装饰者模式","slug":"装饰者模式","link":"#装饰者模式","children":[]},{"level":2,"title":"享元模式","slug":"享元模式","link":"#享元模式","children":[]},{"level":2,"title":"代理模式","slug":"代理模式","link":"#代理模式","children":[]},{"level":2,"title":"抽象⼯⼚模式","slug":"抽象工厂模式","link":"#抽象工厂模式","children":[]},{"level":2,"title":"建造者模式","slug":"建造者模式","link":"#建造者模式","children":[]},{"level":2,"title":"⼯⼚⽅法","slug":"工厂方法","link":"#工厂方法","children":[]},{"level":2,"title":"原型模式","slug":"原型模式","link":"#原型模式","children":[]},{"level":2,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]},{"level":2,"title":"责任链模式","slug":"责任链模式","link":"#责任链模式","children":[]},{"level":2,"title":"命令模式","slug":"命令模式","link":"#命令模式","children":[]},{"level":2,"title":"解释器模式","slug":"解释器模式","link":"#解释器模式","children":[]},{"level":2,"title":"迭代器模式","slug":"迭代器模式","link":"#迭代器模式","children":[]},{"level":2,"title":"中介者模式","slug":"中介者模式","link":"#中介者模式","children":[]},{"level":2,"title":"备忘录模式","slug":"备忘录模式","link":"#备忘录模式","children":[]},{"level":2,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":2,"title":"策略模式","slug":"策略模式","link":"#策略模式","children":[]},{"level":2,"title":"模板⽅法模式","slug":"模板方法模式","link":"#模板方法模式","children":[]},{"level":2,"title":"访问者模式","slug":"访问者模式","link":"#访问者模式","children":[]},{"level":2,"title":"状态模式","slug":"状态模式","link":"#状态模式","children":[]}],"git":{"createdTime":1706144210000,"updatedTime":1706144210000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":1}]},"readingTime":{"minutes":3.91,"words":1173},"filePathRelative":"java/jdkdesign.md","localizedDate":"2024年1月25日","autoDesc":true}');export{e as data};
