import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as r,c as o,a as n,b as s,d as a,e as t}from"./app-8a5cd404.js";const l={},p=t('<p>Redis 共有 5 种基本数据结构：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。</p><p>这 5 种数据结构是直接提供给用户使用的，是数据的保存形式，其底层实现主要依赖这 8 种数据结构：简单动态字符串（SDS）、LinkedList（双向链表）、Hash Table（哈希表）、SkipList（跳跃表）、Intset（整数集合）、ZipList（压缩列表）、QuickList（快速列表）。</p><p>Redis 基本数据结构的底层数据结构实现如下：</p><table><thead><tr><th style="text-align:left;">String</th><th style="text-align:left;">List</th><th style="text-align:left;">Hash</th><th style="text-align:left;">Set</th><th style="text-align:left;">Zset</th></tr></thead><tbody><tr><td style="text-align:left;">SDS</td><td style="text-align:left;">LinkedList/ZipList/QuickList</td><td style="text-align:left;">Hash Table、ZipList</td><td style="text-align:left;">ZipList、Intset</td><td style="text-align:left;">ZipList、SkipList</td></tr></tbody></table><p>Redis 3.2 之前，List 底层实现是 LinkedList 或者 ZipList。 Redis 3.2 之后，引入了 LinkedList 和 ZipList 的结合 QuickList，List 的底层实现变为 QuickList。</p><p>你可以在 Redis 官网上找到 Redis 数据结构非常详细的介绍：</p>',6),c={href:"https://redis.com/redis-enterprise/data-structures/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://redis.io/docs/manual/data-types/data-types-tutorial/",target:"_blank",rel:"noopener noreferrer"},v=t('<p>未来随着 Redis 新版本的发布，可能会有新的数据结构出现，通过查阅 Redis 官网对应的介绍，你总能获取到最靠谱的信息。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/image-20220720181630203.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="string-字符串" tabindex="-1"><a class="header-anchor" href="#string-字符串" aria-hidden="true">#</a> String（字符串）</h2><h3 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h3><p>String 是 Redis 中最简单同时也是最常用的一个数据结构。</p><p>String 是一种二进制安全的数据结构，可以用来存储任何类型的数据比如字符串、整数、浮点数、图片（图片的 base64 编码或者解码或者图片的路径）、序列化后的对象。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/image-20220719124403897.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>虽然 Redis 是用 C 语言写的，但是 Redis 并没有使用 C 的字符串表示，而是自己构建了一种 <strong>简单动态字符串</strong>（Simple Dynamic String，<strong>SDS</strong>）。相比于 C 的原生字符串，Redis 的 SDS 不光可以保存文本数据还可以保存二进制数据，并且获取字符串长度复杂度为 O(1)（C 字符串为 O(N)）,除此之外，Redis 的 SDS API 是安全的，不会造成缓冲区溢出。</p><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h3><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td>SET key value</td><td>设置指定 key 的值</td></tr><tr><td>SETNX key value</td><td>只有在 key 不存在时设置 key 的值</td></tr><tr><td>GET key</td><td>获取指定 key 的值</td></tr><tr><td>MSET key1 value1 key2 value2 …</td><td>设置一个或多个指定 key 的值</td></tr><tr><td>MGET key1 key2 ...</td><td>获取一个或多个指定 key 的值</td></tr><tr><td>STRLEN key</td><td>返回 key 所储存的字符串值的长度</td></tr><tr><td>INCR key</td><td>将 key 中储存的数字值增一</td></tr><tr><td>DECR key</td><td>将 key 中储存的数字值减一</td></tr><tr><td>EXISTS key</td><td>判断指定 key 是否存在</td></tr><tr><td>DEL key（通用）</td><td>删除指定的 key</td></tr><tr><td>EXPIRE key seconds（通用）</td><td>给指定 key 设置过期时间</td></tr></tbody></table>',10),m={href:"https://redis.io/commands/?group=string",target:"_blank",rel:"noopener noreferrer"},g=t(`<p><strong>基本操作</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> SET key value
OK
<span class="token operator">&gt;</span> GET key
<span class="token string">&quot;value&quot;</span>
<span class="token operator">&gt;</span> EXISTS key
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token operator">&gt;</span> STRLEN key
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>
<span class="token operator">&gt;</span> DEL key
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token operator">&gt;</span> GET key
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>批量设置</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> MSET key1 value1 key2 value2
OK
<span class="token operator">&gt;</span> MGET key1 key2 <span class="token comment"># 批量获取多个 key 对应的 value</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;value1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;value2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>计数器（字符串的内容为整数的时候可以使用）：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> SET number <span class="token number">1</span>
OK
<span class="token operator">&gt;</span> INCR number <span class="token comment"># 将 key 中储存的数字值增一</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token operator">&gt;</span> GET number
<span class="token string">&quot;2&quot;</span>
<span class="token operator">&gt;</span> DECR number <span class="token comment"># 将 key 中储存的数字值减一</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token operator">&gt;</span> GET number
<span class="token string">&quot;1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>设置过期时间（默认为永不过期）</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> EXPIRE key <span class="token number">60</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token operator">&gt;</span> SETEX key <span class="token number">60</span> value <span class="token comment"># 设置值并设置过期时间</span>
OK
<span class="token operator">&gt;</span> TTL key
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">56</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><p><strong>需要存储常规数据的场景</strong></p><ul><li>举例：缓存 session、token、图片地址、序列化后的对象(相比较于 Hash 存储更节省内存)。</li><li>相关命令：<code>SET</code>、<code>GET</code>。</li></ul><p><strong>需要计数的场景</strong></p><ul><li>举例：用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数。</li><li>相关命令：<code>SET</code>、<code>GET</code>、 <code>INCR</code>、<code>DECR</code> 。</li></ul><p><strong>分布式锁</strong></p><p>利用 <code>SETNX key value</code> 命令可以实现一个最简易的分布式锁（存在一些缺陷，通常不建议这样实现分布式锁）。</p><h2 id="list-列表" tabindex="-1"><a class="header-anchor" href="#list-列表" aria-hidden="true">#</a> List（列表）</h2><h3 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1" aria-hidden="true">#</a> 介绍</h3>`,17),b={href:"https://javaguide.cn/cs-basics/data-structure/linear-data-structure.html",target:"_blank",rel:"noopener noreferrer"},k=t('<p>许多高级编程语言都内置了链表的实现比如 Java 中的 <code>LinkedList</code>，但是 C 语言并没有实现链表，所以 Redis 实现了自己的链表数据结构。Redis 的 List 的实现为一个 <strong>双向链表</strong>，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/image-20220719124413287.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="常用命令-1" tabindex="-1"><a class="header-anchor" href="#常用命令-1" aria-hidden="true">#</a> 常用命令</h3><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td>RPUSH key value1 value2 ...</td><td>在指定列表的尾部（右边）添加一个或多个元素</td></tr><tr><td>LPUSH key value1 value2 ...</td><td>在指定列表的头部（左边）添加一个或多个元素</td></tr><tr><td>LSET key index value</td><td>将指定列表索引 index 位置的值设置为 value</td></tr><tr><td>LPOP key</td><td>移除并获取指定列表的第一个元素(最左边)</td></tr><tr><td>RPOP key</td><td>移除并获取指定列表的最后一个元素(最右边)</td></tr><tr><td>LLEN key</td><td>获取列表元素数量</td></tr><tr><td>LRANGE key start end</td><td>获取列表 start 和 end 之间 的元素</td></tr></tbody></table>',4),h={href:"https://redis.io/commands/?group=list",target:"_blank",rel:"noopener noreferrer"},y=t(`<p><strong>通过 <code>RPUSH/LPOP</code> 或者 <code>LPUSH/RPOP</code>实现队列</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> RPUSH myList value1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token operator">&gt;</span> RPUSH myList value2 value3
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token operator">&gt;</span> LPOP myList
<span class="token string">&quot;value1&quot;</span>
<span class="token operator">&gt;</span> LRANGE myList <span class="token number">0</span> <span class="token number">1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;value2&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;value3&quot;</span>
<span class="token operator">&gt;</span> LRANGE myList <span class="token number">0</span> <span class="token parameter variable">-1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;value2&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;value3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通过 <code>RPUSH/RPOP</code>或者<code>LPUSH/LPOP</code> 实现栈</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> RPUSH myList2 value1 value2 value3
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token operator">&gt;</span> RPOP myList2 <span class="token comment"># 将 list的最右边的元素取出</span>
<span class="token string">&quot;value3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我专门画了一个图方便大家理解 <code>RPUSH</code> , <code>LPOP</code> , <code>lpush</code> , <code>RPOP</code> 命令：</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-list.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>通过 <code>LRANGE</code> 查看对应下标范围的列表元素</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> RPUSH myList value1 value2 value3
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token operator">&gt;</span> LRANGE myList <span class="token number">0</span> <span class="token number">1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;value1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;value2&quot;</span>
<span class="token operator">&gt;</span> LRANGE myList <span class="token number">0</span> <span class="token parameter variable">-1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;value1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;value2&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;value3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>LRANGE</code> 命令，你可以基于 List 实现分页查询，性能非常高！</p><p><strong>通过 <code>LLEN</code> 查看链表长度</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> LLEN myList
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1" aria-hidden="true">#</a> 应用场景</h3><p><strong>信息流展示</strong></p><ul><li>举例：最新文章、最新动态。</li><li>相关命令：<code>LPUSH</code>、<code>LRANGE</code>。</li></ul><p><strong>消息队列</strong></p><p>Redis List 数据结构可以用来做消息队列，只是功能过于简单且存在很多缺陷，不建议这样做。</p><p>相对来说，Redis 5.0 新增加的一个数据结构 <code>Stream</code> 更适合做消息队列一些，只是功能依然非常简陋。和专业的消息队列相比，还是有很多欠缺的地方比如消息丢失和堆积问题不好解决。</p><h2 id="hash-哈希" tabindex="-1"><a class="header-anchor" href="#hash-哈希" aria-hidden="true">#</a> Hash（哈希）</h2><h3 id="介绍-2" tabindex="-1"><a class="header-anchor" href="#介绍-2" aria-hidden="true">#</a> 介绍</h3><p>Redis 中的 Hash 是一个 String 类型的 field-value（键值对） 的映射表，特别适合用于存储对象，后续操作的时候，你可以直接修改这个对象中的某些字段的值。</p><p>Hash 类似于 JDK1.8 前的 <code>HashMap</code>，内部实现也差不多(数组 + 链表)。不过，Redis 的 Hash 做了更多优化。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/image-20220719124421703.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="常用命令-2" tabindex="-1"><a class="header-anchor" href="#常用命令-2" aria-hidden="true">#</a> 常用命令</h3><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td>HSET key field value</td><td>设置指定哈希表中指定字段的值</td></tr><tr><td>HSETNX key field value</td><td>只有指定字段不存在时设置指定字段的值</td></tr><tr><td>HMSET key field1 value1 field2 value2 ...</td><td>同时将一个或多个 field-value (域-值)对设置到指定哈希表中</td></tr><tr><td>HGET key field</td><td>获取指定哈希表中指定字段的值</td></tr><tr><td>HMGET key field1 field2 ...</td><td>获取指定哈希表中一个或者多个指定字段的值</td></tr><tr><td>HGETALL key</td><td>获取指定哈希表中所有的键值对</td></tr><tr><td>HEXISTS key field</td><td>查看指定哈希表中指定的字段是否存在</td></tr><tr><td>HDEL key field1 field2 ...</td><td>删除一个或多个哈希表字段</td></tr><tr><td>HLEN key</td><td>获取指定哈希表中字段的数量</td></tr><tr><td>HINCRBY key field increment</td><td>对指定哈希中的指定字段做运算操作（正数为加，负数为减）</td></tr></tbody></table>`,24),S={href:"https://redis.io/commands/?group=hash",target:"_blank",rel:"noopener noreferrer"},f=t(`<p><strong>模拟对象数据存储</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> HMSET userInfoKey name <span class="token string">&quot;guide&quot;</span> description <span class="token string">&quot;dev&quot;</span> age <span class="token number">24</span>
OK
<span class="token operator">&gt;</span> HEXISTS userInfoKey name <span class="token comment"># 查看 key 对应的 value中指定的字段是否存在。</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token operator">&gt;</span> HGET userInfoKey name <span class="token comment"># 获取存储在哈希表中指定字段的值。</span>
<span class="token string">&quot;guide&quot;</span>
<span class="token operator">&gt;</span> HGET userInfoKey age
<span class="token string">&quot;24&quot;</span>
<span class="token operator">&gt;</span> HGETALL userInfoKey <span class="token comment"># 获取在哈希表中指定 key 的所有字段和值</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;guide&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;description&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;dev&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;24&quot;</span>
<span class="token operator">&gt;</span> HSET userInfoKey name <span class="token string">&quot;GuideGeGe&quot;</span>
<span class="token operator">&gt;</span> HGET userInfoKey name
<span class="token string">&quot;GuideGeGe&quot;</span>
<span class="token operator">&gt;</span> HINCRBY userInfoKey age <span class="token number">2</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">26</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景-2" tabindex="-1"><a class="header-anchor" href="#应用场景-2" aria-hidden="true">#</a> 应用场景</h3><p><strong>对象数据存储场景</strong></p><ul><li>举例：用户信息、商品信息、文章信息、购物车信息。</li><li>相关命令：<code>HSET</code> （设置单个字段的值）、<code>HMSET</code>（设置多个字段的值）、<code>HGET</code>（获取单个字段的值）、<code>HMGET</code>（获取多个字段的值）。</li></ul><h2 id="set-集合" tabindex="-1"><a class="header-anchor" href="#set-集合" aria-hidden="true">#</a> Set（集合）</h2><h3 id="介绍-3" tabindex="-1"><a class="header-anchor" href="#介绍-3" aria-hidden="true">#</a> 介绍</h3><p>Redis 中的 Set 类型是一种无序集合，集合中的元素没有先后顺序但都唯一，有点类似于 Java 中的 <code>HashSet</code> 。当你需要存储一个列表数据，又不希望出现重复数据时，Set 是一个很好的选择，并且 Set 提供了判断某个元素是否在一个 Set 集合内的重要接口，这个也是 List 所不能提供的。</p><p>你可以基于 Set 轻易实现交集、并集、差集的操作，比如你可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。这样的话，Set 可以非常方便的实现如共同关注、共同粉丝、共同喜好等功能。这个过程也就是求交集的过程。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/image-20220719124430264.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="常用命令-3" tabindex="-1"><a class="header-anchor" href="#常用命令-3" aria-hidden="true">#</a> 常用命令</h3><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td>SADD key member1 member2 ...</td><td>向指定集合添加一个或多个元素</td></tr><tr><td>SMEMBERS key</td><td>获取指定集合中的所有元素</td></tr><tr><td>SCARD key</td><td>获取指定集合的元素数量</td></tr><tr><td>SISMEMBER key member</td><td>判断指定元素是否在指定集合中</td></tr><tr><td>SINTER key1 key2 ...</td><td>获取给定所有集合的交集</td></tr><tr><td>SINTERSTORE destination key1 key2 ...</td><td>将给定所有集合的交集存储在 destination 中</td></tr><tr><td>SUNION key1 key2 ...</td><td>获取给定所有集合的并集</td></tr><tr><td>SUNIONSTORE destination key1 key2 ...</td><td>将给定所有集合的并集存储在 destination 中</td></tr><tr><td>SDIFF key1 key2 ...</td><td>获取给定所有集合的差集</td></tr><tr><td>SDIFFSTORE destination key1 key2 ...</td><td>将给定所有集合的差集存储在 destination 中</td></tr><tr><td>SPOP key count</td><td>随机移除并获取指定集合中一个或多个元素</td></tr><tr><td>SRANDMEMBER key count</td><td>随机获取指定集合中指定数量的元素</td></tr></tbody></table>`,12),R={href:"https://redis.io/commands/?group=set",target:"_blank",rel:"noopener noreferrer"},E=t(`<p><strong>基本操作</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> SADD mySet value1 value2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token operator">&gt;</span> SADD mySet value1 <span class="token comment"># 不允许有重复元素，因此添加失败</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token operator">&gt;</span> SMEMBERS mySet
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;value1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;value2&quot;</span>
<span class="token operator">&gt;</span> SCARD mySet
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token operator">&gt;</span> SISMEMBER mySet value1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token operator">&gt;</span> SADD mySet2 value2 value3
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>mySet</code> : <code>value1</code>、<code>value2</code> 。</li><li><code>mySet2</code>：<code>value2</code>、<code>value3</code> 。</li></ul><p><strong>求交集</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> SINTERSTORE mySet3 mySet mySet2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token operator">&gt;</span> SMEMBERS mySet3
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;value2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>求并集</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> SUNION mySet mySet2
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;value3&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;value2&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;value1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>求差集</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> SDIFF mySet mySet2 <span class="token comment"># 差集是由所有属于 mySet 但不属于 A 的元素组成的集合</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;value1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景-3" tabindex="-1"><a class="header-anchor" href="#应用场景-3" aria-hidden="true">#</a> 应用场景</h3><p><strong>需要存放的数据不能重复的场景</strong></p><ul><li>举例：网站 UV 统计（数据量巨大的场景还是 <code>HyperLogLog</code>更适合一些）、文章点赞、动态点赞等场景。</li><li>相关命令：<code>SCARD</code>（获取集合数量） 。</li></ul><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/image-20220719073733851.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>需要获取多个数据源交集、并集和差集的场景</strong></p><ul><li>举例：共同好友(交集)、共同粉丝(交集)、共同关注(交集)、好友推荐（差集）、音乐推荐（差集）、订阅号推荐（差集+交集） 等场景。</li><li>相关命令：<code>SINTER</code>（交集）、<code>SINTERSTORE</code> （交集）、<code>SUNION</code> （并集）、<code>SUNIONSTORE</code>（并集）、<code>SDIFF</code>（差集）、<code>SDIFFSTORE</code> （差集）。</li></ul><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/image-20220719074543513.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>需要随机获取数据源中的元素的场景</strong></p><ul><li>举例：抽奖系统、随机点名等场景。</li><li>相关命令：<code>SPOP</code>（随机获取集合中的元素并移除，适合不允许重复中奖的场景）、<code>SRANDMEMBER</code>（随机获取集合中的元素，适合允许重复中奖的场景）。</li></ul><h2 id="sorted-set-有序集合" tabindex="-1"><a class="header-anchor" href="#sorted-set-有序集合" aria-hidden="true">#</a> Sorted Set（有序集合）</h2><h3 id="介绍-4" tabindex="-1"><a class="header-anchor" href="#介绍-4" aria-hidden="true">#</a> 介绍</h3><p>Sorted Set 类似于 Set，但和 Set 相比，Sorted Set 增加了一个权重参数 <code>score</code>，使得集合中的元素能够按 <code>score</code> 进行有序排列，还可以通过 <code>score</code> 的范围来获取元素的列表。有点像是 Java 中 <code>HashMap</code> 和 <code>TreeSet</code> 的结合体。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/image-20220719124437791.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="常用命令-4" tabindex="-1"><a class="header-anchor" href="#常用命令-4" aria-hidden="true">#</a> 常用命令</h3><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td>ZADD key score1 member1 score2 member2 ...</td><td>向指定有序集合添加一个或多个元素</td></tr><tr><td>ZCARD KEY</td><td>获取指定有序集合的元素数量</td></tr><tr><td>ZSCORE key member</td><td>获取指定有序集合中指定元素的 score 值</td></tr><tr><td>ZINTERSTORE destination numkeys key1 key2 ...</td><td>将给定所有有序集合的交集存储在 destination 中，对相同元素对应的 score 值进行 SUM 聚合操作，numkeys 为集合数量</td></tr><tr><td>ZUNIONSTORE destination numkeys key1 key2 ...</td><td>求并集，其它和 ZINTERSTORE 类似</td></tr><tr><td>ZDIFFSTORE destination numkeys key1 key2 ...</td><td>求差集，其它和 ZINTERSTORE 类似</td></tr><tr><td>ZRANGE key start end</td><td>获取指定有序集合 start 和 end 之间的元素（score 从低到高）</td></tr><tr><td>ZREVRANGE key start end</td><td>获取指定有序集合 start 和 end 之间的元素（score 从高到底）</td></tr><tr><td>ZREVRANK key member</td><td>获取指定有序集合中指定元素的排名(score 从大到小排序)</td></tr></tbody></table>`,24),L={href:"https://redis.io/commands/?group=sorted-set",target:"_blank",rel:"noopener noreferrer"},q=t(`<p><strong>基本操作</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZADD myZset <span class="token number">2.0</span> value1 <span class="token number">1.0</span> value2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token operator">&gt;</span> ZCARD myZset
<span class="token number">2</span>
<span class="token operator">&gt;</span> ZSCORE myZset value1
<span class="token number">2.0</span>
<span class="token operator">&gt;</span> ZRANGE myZset <span class="token number">0</span> <span class="token number">1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;value2&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;value1&quot;</span>
<span class="token operator">&gt;</span> ZREVRANGE myZset <span class="token number">0</span> <span class="token number">1</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;value1&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;value2&quot;</span>
<span class="token operator">&gt;</span> ZADD myZset2 <span class="token number">4.0</span> value2 <span class="token number">3.0</span> value3
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>myZset</code> : <code>value1</code>(2.0)、<code>value2</code>(1.0) 。</li><li><code>myZset2</code>：<code>value2</code> （4.0）、<code>value3</code>(3.0) 。</li></ul><p><strong>获取指定元素的排名</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZREVRANK myZset value1
<span class="token number">0</span>
<span class="token operator">&gt;</span> ZREVRANK myZset value2
<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>求交集</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZINTERSTORE myZset3 <span class="token number">2</span> myZset myZset2
<span class="token number">1</span>
<span class="token operator">&gt;</span> ZRANGE myZset3 <span class="token number">0</span> <span class="token number">1</span> WITHSCORES
value2
<span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>求并集</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZUNIONSTORE myZset4 <span class="token number">2</span> myZset myZset2
<span class="token number">3</span>
<span class="token operator">&gt;</span> ZRANGE myZset4 <span class="token number">0</span> <span class="token number">2</span> WITHSCORES
value1
<span class="token number">2</span>
value3
<span class="token number">3</span>
value2
<span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>求差集</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZDIFF <span class="token number">2</span> myZset myZset2 WITHSCORES
value1
<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用场景-4" tabindex="-1"><a class="header-anchor" href="#应用场景-4" aria-hidden="true">#</a> 应用场景</h3><p><strong>需要随机获取数据源中的元素根据某个权重进行排序的场景</strong></p><ul><li>举例：各种排行榜比如直播间送礼物的排行榜、朋友圈的微信步数排行榜、王者荣耀中的段位排行榜、话题热度排行榜等等。</li><li>相关命令：<code>ZRANGE</code> (从小到大排序)、 <code>ZREVRANGE</code> （从大到小排序）、<code>ZREVRANK</code> (指定元素排名)。</li></ul><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/2021060714195385.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,15),T={href:"https://www.yuque.com/docs/share/f37fc804-bfe6-4b0d-b373-9c462188fec7",target:"_blank",rel:"noopener noreferrer"},_=t('<figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/image-20220719071115140.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>需要存储的数据有优先级或者重要程度的场景</strong> 比如优先级任务队列。</p><ul><li>举例：优先级任务队列。</li><li>相关命令：<code>ZRANGE</code> (从小到大排序)、 <code>ZREVRANGE</code> （从大到小排序）、<code>ZREVRANK</code> (指定元素排名)。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>String</td><td>一种二进制安全的数据结构，可以用来存储任何类型的数据比如字符串、整数、浮点数、图片（图片的 base64 编码或者解码或者图片的路径）、序列化后的对象。</td></tr><tr><td>List</td><td>Redis 的 List 的实现为一个双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销。</td></tr><tr><td>Set</td><td>一个 String 类型的 field-value（键值对） 的映射表，特别适合用于存储对象，后续操作的时候，你可以直接修改这个对象中的某些字段的值。</td></tr><tr><td>Hash</td><td>无序集合，集合中的元素没有先后顺序但都唯一，有点类似于 Java 中的 <code>HashSet</code> 。</td></tr><tr><td>Zset</td><td>和 Set 相比，Sorted Set 增加了一个权重参数 <code>score</code>，使得集合中的元素能够按 <code>score</code> 进行有序排列，还可以通过 <code>score</code> 的范围来获取元素的列表。有点像是 Java 中 <code>HashMap</code> 和 <code>TreeSet</code> 的结合体。</td></tr></tbody></table><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',6),x={href:"https://redis.com/redis-enterprise/data-structures/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://redis.io/commands/",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://redis.io/docs/manual/data-types/data-types-tutorial/",target:"_blank",rel:"noopener noreferrer"},H={href:"https://segmentfault.com/a/1190000040032006",target:"_blank",rel:"noopener noreferrer"};function I(D,O){const e=d("ExternalLinkIcon");return r(),o("div",null,[p,n("ul",null,[n("li",null,[n("a",c,[s("Redis Data Structures"),a(e)])]),n("li",null,[n("a",u,[s("Redis Data types tutorial"),a(e)])])]),v,n("p",null,[s("更多 Redis String 命令以及详细使用指南，请查看 Redis 官网对应的介绍："),n("a",m,[s("https://redis.io/commands/?group=string"),a(e)]),s(" 。")]),g,n("p",null,[s("Redis 中的 List 其实就是链表数据结构的实现。我在 "),n("a",b,[s("线性数据结构 :数组、链表、栈、队列"),a(e)]),s(" 这篇文章中详细介绍了链表这种数据结构，我这里就不多做介绍了。")]),k,n("p",null,[s("更多 Redis List 命令以及详细使用指南，请查看 Redis 官网对应的介绍："),n("a",h,[s("https://redis.io/commands/?group=list"),a(e)]),s(" 。")]),y,n("p",null,[s("更多 Redis Hash 命令以及详细使用指南，请查看 Redis 官网对应的介绍："),n("a",S,[s("https://redis.io/commands/?group=hash"),a(e)]),s(" 。")]),f,n("p",null,[s("更多 Redis Set 命令以及详细使用指南，请查看 Redis 官网对应的介绍："),n("a",R,[s("https://redis.io/commands/?group=set"),a(e)]),s(" 。")]),E,n("p",null,[s("更多 Redis Sorted Set 命令以及详细使用指南，请查看 Redis 官网对应的介绍："),n("a",L,[s("https://redis.io/commands/?group=sorted-set"),a(e)]),s(" 。")]),q,n("p",null,[n("a",T,[s("《Java 面试指北》"),a(e)]),s(" 的「技术面试题篇」就有一篇文章详细介绍如何使用 Sorted Set 来设计制作一个排行榜。")]),_,n("ul",null,[n("li",null,[s("Redis Data Structures："),n("a",x,[s("https://redis.com/redis-enterprise/data-structures/"),a(e)]),s(" 。")]),n("li",null,[s("Redis Commands："),n("a",N,[s("https://redis.io/commands/"),a(e)]),s(" 。")]),n("li",null,[s("Redis Data types tutorial："),n("a",Z,[s("https://redis.io/docs/manual/data-types/data-types-tutorial/"),a(e)]),s(" 。")]),n("li",null,[s("Redis 存储对象信息是用 Hash 还是 String : "),n("a",H,[s("https://segmentfault.com/a/1190000040032006"),a(e)])])])])}const P=i(l,[["render",I],["__file","redis-data-structures-01.html.vue"]]);export{P as default};
