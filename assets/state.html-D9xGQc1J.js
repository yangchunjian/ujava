import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as r,e as l}from"./app-vQZZNZ4Y.js";const o={},i=l('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><strong>介绍</strong>：Java状态模式是一种行为型设计模式，它允许对象在内部状态改变时改变它的行为。状态模式将状态封装成独立的类，并将请求委托给当前状态对象，从而实现状态的切换和状态行为的变化。<br> 又称状态对象(Pattern of Objects for States)模式，是一种对象的行为模式。状态模式允许一个对象在其内部状态改变的时候改变其行为。这个对象看上去就像是改变了它的类一样。 <strong>本质：根据状态来分离和选择行为</strong></p><p><strong>场景</strong>：</p><ul><li>一个由一个或多个动态变化的属性导致发生不同行为的对象，在与外部事件产生互动时，其内部状态就会改变，从而使得系统的行为也随之发生变化，那么这个对象，就是有状态的对象</li><li><strong>代码中包含大量与对象状态有关的条件语句</strong>，像是if else或switch case语句，<strong>且这些条件执行与否依赖于该对象的状态</strong>。</li><li>当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时。</li><li>当一个对象需要根据状态改变它的数据和方法时。</li><li>当一个对象需要在多个状态之间切换，并且每个状态都有不同的行为时。</li></ul><p><strong>优点</strong>：</p><ul><li>1.<strong>简化应用逻辑控</strong>, 把负责逻辑控制的代码分散到单独的状态类中，不用再关注代码执行状态的逻辑，只需要关注整个对象的状态就好，使得代码结构化和意图更清晰，从而简化应用的逻辑控制</li><li>2.<strong>更好地分离状态和行为</strong>， 状态模式通过设置所有状态类的公共接口，把状态和状态对应的行为分离开，把所有与一个特定的状态相关的行为都放入一个对象中，使得应用程序在控制的时候，只需要关心状态的切换，而不用关心这个状态对应的真正处理。</li><li>3.<strong>更好的扩展性</strong>， 引入了状态处理的公共接口后，使得扩展新的状态变得非常容易，只需要新增加一个实现状态处理的公共接口的实现类，然后在进行状态维护的地方，设置状态变化到这个新的状态即可</li><li>4.<strong>显式化进行状态转换</strong>，为不同的状态引入独立的对象，使得状态的转换变得更加明确。而且状态对象可以保证上下文不会发生内部状态不一致的情况，因为上下文中只有一个变量来记录状态对象，只要为这一个变量赋值就可以了</li></ul><p><strong>不足</strong>：</p><ul><li>1.一个状态对应一个状态处理类，会使得程序引入太多的状态类，这样程序变得杂乱。</li><li>2.<strong>没有遵守开闭原则</strong>，引入新的新的状态会导致原有状态的修改</li><li>3.没有很好的处理耦合关系</li></ul><p><strong>注意</strong>：</p><ul><li>状态模式可以增加类的数量，因此需要在设计时考虑类的数量和复杂性。</li><li>状态模式需要对状态进行封装，因此需要在设计时考虑状态的可扩展性和可维护性。</li></ul>',10),n=[i];function e(a,g){return s(),r("div",null,n)}const p=t(o,[["render",e],["__file","state.html.vue"]]);export{p as default};
