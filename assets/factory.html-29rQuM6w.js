import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c,e as t}from"./app-NXwiSPWT.js";const r={},i=t('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><strong>介绍</strong>： 通过一个工厂类来实现对象的创建，而无需直接暴露对象的创建逻辑给客户端。 工厂模式包括简单工厂、工厂方法、抽象工厂这3种细分模式。<code>用来创建不同但是相关类型的对象</code>（继承同一父类或者接口的一组子类），由给定的参数来决定创建哪种类型的对象。简单工厂模式的优点在于客户端无需了解具体产品类的创建细节，只需通过工厂类来创建对象，并且工厂类可以根据客户端的需求来动态创建不同类型的对象。但是缺点也比较明显，如果需要创建的产品类数量较多，则工厂类的代码会变得很臃肿，不便于维护。</p><p><strong>场景</strong>：当对象创建逻辑比较复杂，是一个“大工程”的时候，就考虑使用工厂模式，<code>封装对象的创建过程，将对象的创建和使用相分离</code>。Spring IOC、Google Guice就是使用的工厂模式。</p><p><strong>优点</strong>：</p><ul><li>1.<code>封装变化</code>：创建逻辑有可能变化，封装成工厂类之后，创建逻辑的变更对调用者透明</li><li>2.<code>代码复用</code>：创建代码抽离到独立的工厂类之后可以复用</li><li>3.<code>隔离复杂性</code>：封装复杂的创建逻辑，调用者无需了解如何创建对象</li><li>4.<code>控制复杂度</code>：将创建代码抽离出来，让原本的函数或类职责更单一，代码更简洁</li></ul><p><strong>不足</strong>：</p><ul><li>1.简单工厂，耦合度高，如果有变动就需要修改唯一的工厂</li><li>2.工厂方法，优点符合开闭（具体的业务类有具体工厂），缺点是每增加一个产品，相应的也要增加一个子工厂，加大了额外的开发量</li></ul>',7),l=[i];function n(d,s){return e(),c("div",null,l)}const p=o(r,[["render",n],["__file","factory.html.vue"]]);export{p as default};
