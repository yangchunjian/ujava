const t=JSON.parse('{"key":"v-3c60841a","path":"/highfreq/reactor.html","title":"Reactor模型详解","lang":"zh-CN","frontmatter":{"title":"Reactor模型详解","index":false,"icon":"laptop-code","category":["设计高频"],"tag":["高频"],"description":"前言 说到NIO、Netty，Reactor模型一定是绕不开的，因为这种模式架构太经典了，但是好多人在学习的时候，往往会忽视基础的学习，一上来就是Netty，各种高大上，但是却没有静下心来好好看看Netty的基石——Reactor模型。本文就带着大家看看Reactor模型，让大家对Reactor模型有个浅显而又感性的认识。 一、经典的同步阻塞模型 img_46.png 这是最为传统的Socket服务设计，有多个客户端连接服务端，服务端会开启很多线程，一个线程为一个客户端服务。","head":[["meta",{"property":"og:url","content":"https://ujava.cn/highfreq/reactor.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"Reactor模型详解"}],["meta",{"property":"og:description","content":"前言 说到NIO、Netty，Reactor模型一定是绕不开的，因为这种模式架构太经典了，但是好多人在学习的时候，往往会忽视基础的学习，一上来就是Netty，各种高大上，但是却没有静下心来好好看看Netty的基石——Reactor模型。本文就带着大家看看Reactor模型，让大家对Reactor模型有个浅显而又感性的认识。 一、经典的同步阻塞模型 img_46.png 这是最为传统的Socket服务设计，有多个客户端连接服务端，服务端会开启很多线程，一个线程为一个客户端服务。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T01:16:48.000Z"}],["meta",{"property":"article:author","content":"ujava"}],["meta",{"property":"article:tag","content":"高频"}],["meta",{"property":"article:modified_time","content":"2024-02-25T01:16:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Reactor模型详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-25T01:16:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ujava\\",\\"url\\":\\"https://ujava.cn\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"一、经典的同步阻塞模型","slug":"一、经典的同步阻塞模型","link":"#一、经典的同步阻塞模型","children":[]},{"level":2,"title":"二、单reactor单线程设计","slug":"二、单reactor单线程设计","link":"#二、单reactor单线程设计","children":[]},{"level":2,"title":"三、单reactor多线程设计","slug":"三、单reactor多线程设计","link":"#三、单reactor多线程设计","children":[]},{"level":2,"title":"四、多reactor多线程设计","slug":"四、多reactor多线程设计","link":"#四、多reactor多线程设计","children":[]},{"level":2,"title":"五、Reactor模型结构图","slug":"五、reactor模型结构图","link":"#五、reactor模型结构图","children":[]}],"git":{"createdTime":1708584590000,"updatedTime":1708823808000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":2}]},"readingTime":{"minutes":11.26,"words":3378},"filePathRelative":"highfreq/reactor.md","localizedDate":"2024年2月22日","excerpt":"<h2> 前言</h2>\\n<p>说到NIO、Netty，Reactor模型一定是绕不开的，因为这种模式架构太经典了，但是好多人在学习的时候，往往会忽视基础的学习，一上来就是Netty，各种高大上，但是却没有静下心来好好看看Netty的基石——Reactor模型。本文就带着大家看看Reactor模型，让大家对Reactor模型有个浅显而又感性的认识。</p>\\n<h2> 一、经典的同步阻塞模型</h2>\\n<figure><figcaption>img_46.png</figcaption></figure>\\n<p>这是最为传统的Socket服务设计，有多个客户端连接服务端，服务端会开启很多线程，一个线程为一个客户端服务。</p>","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}');export{t as data};
