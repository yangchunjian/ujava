const e=JSON.parse('{"key":"v-9750fcb0","path":"/principle/theory.html","title":"设计原理:六大设计原则","lang":"zh-CN","frontmatter":{"title":"设计原理:六大设计原则","icon":"laptop-code","category":["设计原理"],"description":"简介 一、单一职责原则 单一职责原则：英文名称是Single Responsiblity Principle，简称是SRP。定义：应该有且仅有一个原因引起类的变更。 单一职责原则要求：一个接口或类只有一个原因引起变化，也就是一个接口或类只有一个职责，它就负责一件事情。 单一职责原则的好处： 类的复杂性降低，实现什么职责都有清晰明确的定义； 可读性提高，复杂性降低，那当然可读性提高了； 可维护性提高，可读性提高，那当然更容易维护了； 变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大的帮助。","head":[["meta",{"property":"og:url","content":"https://ujava.cn/principle/theory.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"设计原理:六大设计原则"}],["meta",{"property":"og:description","content":"简介 一、单一职责原则 单一职责原则：英文名称是Single Responsiblity Principle，简称是SRP。定义：应该有且仅有一个原因引起类的变更。 单一职责原则要求：一个接口或类只有一个原因引起变化，也就是一个接口或类只有一个职责，它就负责一件事情。 单一职责原则的好处： 类的复杂性降低，实现什么职责都有清晰明确的定义； 可读性提高，复杂性降低，那当然可读性提高了； 可维护性提高，可读性提高，那当然更容易维护了； 变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大的帮助。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-03T03:00:03.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:modified_time","content":"2024-03-03T03:00:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计原理:六大设计原则\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-03T03:00:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"一、单一职责原则","slug":"一、单一职责原则","link":"#一、单一职责原则","children":[]},{"level":2,"title":"二、里氏替换原则","slug":"二、里氏替换原则","link":"#二、里氏替换原则","children":[]},{"level":2,"title":"三、依赖倒置原则","slug":"三、依赖倒置原则","link":"#三、依赖倒置原则","children":[]},{"level":2,"title":"四、接口隔离原则","slug":"四、接口隔离原则","link":"#四、接口隔离原则","children":[]},{"level":2,"title":"五、迪米特法则","slug":"五、迪米特法则","link":"#五、迪米特法则","children":[]},{"level":2,"title":"六、开放封闭原则","slug":"六、开放封闭原则","link":"#六、开放封闭原则","children":[]}],"git":{"createdTime":1700039377000,"updatedTime":1709434803000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":3}]},"readingTime":{"minutes":20.24,"words":6073},"filePathRelative":"principle/theory.md","localizedDate":"2023年11月15日","excerpt":"<h2> 简介</h2>\\n<h2> 一、单一职责原则</h2>\\n<p>单一职责原则：英文名称是Single Responsiblity Principle，简称是SRP。定义：应该有且仅有一个原因引起类的变更。</p>\\n<p>单一职责原则要求：一个接口或类只有一个原因引起变化，也就是一个接口或类只有一个职责，它就负责一件事情。</p>\\n<p>单一职责原则的好处：</p>\\n<ul>\\n<li>类的复杂性降低，实现什么职责都有清晰明确的定义；</li>\\n<li>可读性提高，复杂性降低，那当然可读性提高了；</li>\\n<li>可维护性提高，可读性提高，那当然更容易维护了；</li>\\n<li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大的帮助。</li>\\n</ul>","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}');export{e as data};
