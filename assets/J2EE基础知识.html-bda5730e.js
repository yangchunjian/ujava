import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as i,c as p,a as e,b as s,d as n,e as a}from"./app-8a5cd404.js";const l={},c=a('<h2 id="servlet-总结" tabindex="-1"><a class="header-anchor" href="#servlet-总结" aria-hidden="true">#</a> Servlet 总结</h2><p>在 Java Web 程序中，<strong>Servlet</strong>主要负责接收用户请求 <code>HttpServletRequest</code>,在<code>doGet()</code>,<code>doPost()</code>中做相应的处理，并将回应<code>HttpServletResponse</code>反馈给用户。<strong>Servlet</strong> 可以设置初始化参数，供 Servlet 内部使用。一个 Servlet 类只会有一个实例，在它初始化时调用<code>init()</code>方法，销毁时调用<code>destroy()</code>方法**。**Servlet 需要在 web.xml 中配置（MyEclipse 中创建 Servlet 会自动配置），<strong>一个 Servlet 可以设置多个 URL 访问</strong>。<strong>Servlet 不是线程安全</strong>，因此要谨慎使用类变量。</p><h2 id="阐述-servlet-和-cgi-的区别" tabindex="-1"><a class="header-anchor" href="#阐述-servlet-和-cgi-的区别" aria-hidden="true">#</a> 阐述 Servlet 和 CGI 的区别?</h2><h3 id="cgi-的不足之处" tabindex="-1"><a class="header-anchor" href="#cgi-的不足之处" aria-hidden="true">#</a> CGI 的不足之处</h3><p>1，需要为每个请求启动一个操作 CGI 程序的系统进程。如果请求频繁，这将会带来很大的开销。</p><p>2，需要为每个请求加载和运行一个 CGI 程序，这将带来很大的开销</p><p>3，需要重复编写处理网络协议的代码以及编码，这些工作都是非常耗时的。</p><h3 id="servlet-的优点" tabindex="-1"><a class="header-anchor" href="#servlet-的优点" aria-hidden="true">#</a> Servlet 的优点</h3><p>1，只需要启动一个操作系统进程以及加载一个 JVM，大大降低了系统的开销</p><p>2，如果多个请求需要做同样处理的时候，这时候只需要加载一个类，这也大大降低了开销</p><p>3，所有动态加载的类可以实现对网络协议以及请求解码的共享，大大降低了工作量。</p><p>4，Servlet 能直接和 Web 服务器交互，而普通的 CGI 程序不能。Servlet 还能在各个程序之间共享数据，使数据库连接池之类的功能很容易实现。</p><p>补充：Sun Microsystems 公司在 1996 年发布 Servlet 技术就是为了和 CGI 进行竞争，Servlet 是一个特殊的 Java 程序，一个基于 Java 的 Web 应用通常包含一个或多个 Servlet 类。Servlet 不能够自行创建并执行，它是在 Servlet 容器中运行的，容器将用户的请求传递给 Servlet 程序，并将 Servlet 的响应回传给用户。通常一个 Servlet 会关联一个或多个 JSP 页面。以前 CGI 经常因为性能开销上的问题被诟病，然而 Fast CGI 早就已经解决了 CGI 效率上的问题，所以面试的时候大可不必信口开河的诟病 CGI，事实上有很多你熟悉的网站都使用了 CGI 技术。</p><p>参考：《javaweb 整合开发王者归来》P7</p><h2 id="servlet-接口中有哪些方法及-servlet-生命周期探秘" tabindex="-1"><a class="header-anchor" href="#servlet-接口中有哪些方法及-servlet-生命周期探秘" aria-hidden="true">#</a> Servlet 接口中有哪些方法及 Servlet 生命周期探秘</h2><p>Servlet 接口定义了 5 个方法，其中<strong>前三个方法与 Servlet 生命周期相关</strong>：</p><ul><li><code>void init(ServletConfig config) throws ServletException</code></li><li><code>void service(ServletRequest req, ServletResponse resp) throws ServletException, java.io.IOException</code></li><li><code>void destroy()</code></li><li><code>java.lang.String getServletInfo()</code></li><li><code>ServletConfig getServletConfig()</code></li></ul><p><strong>生命周期：</strong> <strong>Web 容器加载 Servlet 并将其实例化后，Servlet 生命周期开始</strong>，容器运行其<strong>init()方法</strong>进行 Servlet 的初始化；请求到达时调用 Servlet 的<strong>service()方法</strong>，service()方法会根据需要调用与请求对应的<strong>doGet 或 doPost</strong>等方法；当服务器关闭或项目被卸载时服务器会将 Servlet 实例销毁，此时会调用 Servlet 的<strong>destroy()方法</strong>。<strong>init 方法和 destroy 方法只会执行一次，service 方法客户端每次请求 Servlet 都会执行</strong>。Servlet 中有时会用到一些需要初始化与销毁的资源，因此可以把初始化资源的代码放入 init 方法中，销毁资源的代码放入 destroy 方法中，这样就不需要每次处理客户端的请求都要初始化与销毁资源。</p><p>参考：《javaweb 整合开发王者归来》P81</p><h2 id="get-和-post-请求的区别" tabindex="-1"><a class="header-anchor" href="#get-和-post-请求的区别" aria-hidden="true">#</a> get 和 post 请求的区别</h2>',20),d={href:"https://www.cnblogs.com/logsharing/p/8448446.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.zhihu.com/question/28586791",target:"_blank",rel:"noopener noreferrer"},g=e("p",null,"可以把 get 和 post 当作两个不同的行为，两者并没有什么本质区别，底层都是 TCP 连接。 get 请求用来从服务器上获得资源，而 post 是用来向服务器提交数据。比如你要获取人员列表可以用 get 请求，你需要创建一个人员可以用 post 。这也是 Restful API 最基本的一个要求。",-1),h=e("p",null,"推荐阅读：",-1),v={href:"https://www.zhihu.com/question/28586791",target:"_blank",rel:"noopener noreferrer"},k={href:"https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&mid=100000054&idx=1&sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd",target:"_blank",rel:"noopener noreferrer"},S=a(`<h2 id="什么情况下调用-doget-和-dopost" tabindex="-1"><a class="header-anchor" href="#什么情况下调用-doget-和-dopost" aria-hidden="true">#</a> 什么情况下调用 doGet()和 doPost()</h2><p>Form 标签里的 method 的属性为 get 时调用 doGet()，为 post 时调用 doPost()。</p><h2 id="转发-forward-和重定向-redirect-的区别" tabindex="-1"><a class="header-anchor" href="#转发-forward-和重定向-redirect-的区别" aria-hidden="true">#</a> 转发(Forward)和重定向(Redirect)的区别</h2><p><strong>转发是服务器行为，重定向是客户端行为。</strong></p><p><strong>转发（Forward）</strong><br> 通过 RequestDispatcher 对象的 forward（HttpServletRequest request,HttpServletResponse response）方法实现的。RequestDispatcher 可以通过 HttpServletRequest 的 getRequestDispatcher()方法获得。例如下面的代码就是跳转到 login_success.jsp 页面。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>     request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;login_success.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>重定向（Redirect）</strong> 是利用服务器返回的状态码来实现的。客户端浏览器请求服务器的时候，服务器会返回一个状态码。服务器通过 <code>HttpServletResponse</code> 的 <code>setStatus(int status)</code> 方法设置状态码。如果服务器返回 301 或者 302，则浏览器会到新的网址重新请求该资源。</p><ol><li><p><strong>从地址栏显示来说</strong></p><p>forward 是服务器请求资源,服务器直接访问目标地址的 URL,把那个 URL 的响应内容读取过来,然后把这些内容再发给浏览器.浏览器根本不知道服务器发送的内容从哪里来的,所以它的地址栏还是原来的地址.<br> redirect 是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的 URL.</p></li><li><p><strong>从数据共享来说</strong></p><p>forward:转发页面和转发到的页面可以共享 request 里面的数据.<br> redirect:不能共享数据.</p></li><li><p><strong>从运用地方来说</strong></p><p>forward:一般用于用户登陆的时候,根据角色转发到相应的模块.<br> redirect:一般用于用户注销登陆时返回主页面和跳转到其它的网站等</p></li><li><p>从效率来说</p><p>forward:高.<br> redirect:低.</p></li></ol><h2 id="自动刷新-refresh" tabindex="-1"><a class="header-anchor" href="#自动刷新-refresh" aria-hidden="true">#</a> 自动刷新(Refresh)</h2><p>自动刷新不仅可以实现一段时间之后自动跳转到另一个页面，还可以实现一段时间之后自动刷新本页面。Servlet 中通过 HttpServletResponse 对象设置 Header 属性实现自动刷新例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Refresh&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;5;URL=http://localhost:8080/servlet/example.htm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 5 为时间，单位为秒。URL 指定就是要跳转的页面（如果设置自己的路径，就会实现每过 5 秒自动刷新本页面一次）</p><h2 id="servlet-与线程安全" tabindex="-1"><a class="header-anchor" href="#servlet-与线程安全" aria-hidden="true">#</a> Servlet 与线程安全</h2><p><strong>Servlet 不是线程安全的，多线程并发的读写会导致数据不同步的问题。</strong> 解决的办法是尽量不要定义 name 属性，而是要把 name 变量分别定义在 doGet()和 doPost()方法内。虽然使用 synchronized(name){}语句块可以解决问题，但是会造成线程的等待，不是很科学的办法。<br> 注意：多线程的并发的读写 Servlet 类属性会导致数据不同步。但是如果只是并发地读取属性而不写入，则不存在数据不同步的问题。因此 Servlet 里的只读属性最好定义为 final 类型的。</p><p>参考：《javaweb 整合开发王者归来》P92</p><h2 id="jsp-和-servlet-是什么关系" tabindex="-1"><a class="header-anchor" href="#jsp-和-servlet-是什么关系" aria-hidden="true">#</a> JSP 和 Servlet 是什么关系</h2><p>其实这个问题在上面已经阐述过了，Servlet 是一个特殊的 Java 程序，它运行于服务器的 JVM 中，能够依靠服务器的支持向浏览器提供显示内容。JSP 本质上是 Servlet 的一种简易形式，JSP 会被服务器处理成一个类似于 Servlet 的 Java 程序，可以简化页面内容的生成。Servlet 和 JSP 最主要的不同点在于，Servlet 的应用逻辑是在 Java 文件中，并且完全从表示层中的 HTML 分离开来。而 JSP 的情况是 Java 和 HTML 可以组合成一个扩展名为.jsp 的文件。有人说，Servlet 就是在 Java 中写 HTML，而 JSP 就是在 HTML 中写 Java 代码，当然这个说法是很片面且不够准确的。JSP 侧重于视图，Servlet 更侧重于控制逻辑，在 MVC 架构模式中，JSP 适合充当视图（view）而 Servlet 适合充当控制器（controller）。</p><h2 id="jsp-工作原理" tabindex="-1"><a class="header-anchor" href="#jsp-工作原理" aria-hidden="true">#</a> JSP 工作原理</h2><p>JSP 是一种 Servlet，但是与 HttpServlet 的工作方式不太一样。HttpServlet 是先由源代码编译为 class 文件后部署到服务器下，为先编译后部署。而 JSP 则是先部署后编译。JSP 会在客户端第一次请求 JSP 文件时被编译为 HttpJspPage 类（接口 Servlet 的一个子类）。该类会被服务器临时存放在服务器工作目录里面。下面通过实例给大家介绍。<br> 工程 JspLoginDemo 下有一个名为 login.jsp 的 Jsp 文件，把工程第一次部署到服务器上后访问这个 Jsp 文件，我们发现这个目录下多了下图这两个东东。<br> .class 文件便是 JSP 对应的 Servlet。编译完毕后再运行 class 文件来响应客户端请求。以后客户端访问 login.jsp 的时候，Tomcat 将不再重新编译 JSP 文件，而是直接调用 class 文件来响应客户端请求。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/1.jpeg" alt="JSP工作原理" tabindex="0" loading="lazy"><figcaption>JSP工作原理</figcaption></figure><p>由于 JSP 只会在客户端第一次请求的时候被编译 ，因此第一次请求 JSP 时会感觉比较慢，之后就会感觉快很多。如果把服务器保存的 class 文件删除，服务器也会重新编译 JSP。</p><p>开发 Web 程序时经常需要修改 JSP。Tomcat 能够自动检测到 JSP 程序的改动。如果检测到 JSP 源代码发生了改动。Tomcat 会在下次客户端请求 JSP 时重新编译 JSP，而不需要重启 Tomcat。这种自动检测功能是默认开启的，检测改动会消耗少量的时间，在部署 Web 应用的时候可以在 web.xml 中将它关掉。</p><p>参考：《javaweb 整合开发王者归来》P97</p><h2 id="jsp-有哪些内置对象、作用分别是什么" tabindex="-1"><a class="header-anchor" href="#jsp-有哪些内置对象、作用分别是什么" aria-hidden="true">#</a> JSP 有哪些内置对象、作用分别是什么</h2>`,24),m={href:"http://blog.csdn.net/qq_34337272/article/details/64310849",target:"_blank",rel:"noopener noreferrer"},b=a('<p>JSP 有 9 个内置对象：</p><ul><li>request：封装客户端的请求，其中包含来自 GET 或 POST 请求的参数；</li><li>response：封装服务器对客户端的响应；</li><li>pageContext：通过该对象可以获取其他对象；</li><li>session：封装用户会话的对象；</li><li>application：封装服务器运行环境的对象；</li><li>out：输出服务器响应的输出流对象；</li><li>config：Web 应用的配置对象；</li><li>page：JSP 页面本身（相当于 Java 程序中的 this）；</li><li>exception：封装页面抛出异常的对象。</li></ul><h2 id="request-对象的主要方法有哪些" tabindex="-1"><a class="header-anchor" href="#request-对象的主要方法有哪些" aria-hidden="true">#</a> Request 对象的主要方法有哪些</h2><ul><li>setAttribute(String name,Object)：设置名字为 name 的 request 的参数值</li><li>getAttribute(String name)：返回由 name 指定的属性值</li><li>getAttributeNames()：返回 request 对象所有属性的名字集合，结果是一个枚举的实例</li><li>getCookies()：返回客户端的所有 Cookie 对象，结果是一个 Cookie 数组</li><li>getCharacterEncoding()：返回请求中的字符编码方式 = getContentLength()：返回请求的 Body 的长度</li><li>getHeader(String name)：获得 HTTP 协议定义的文件头信息</li><li>getHeaders(String name)：返回指定名字的 request Header 的所有值，结果是一个枚举的实例</li><li>getHeaderNames()：返回所以 request Header 的名字，结果是一个枚举的实例</li><li>getInputStream()：返回请求的输入流，用于获得请求中的数据</li><li>getMethod()：获得客户端向服务器端传送数据的方法</li><li>getParameter(String name)：获得客户端传送给服务器端的有 name 指定的参数值</li><li>getParameterNames()：获得客户端传送给服务器端的所有参数的名字，结果是一个枚举的实例</li><li>getParameterValues(String name)：获得有 name 指定的参数的所有值</li><li>getProtocol()：获取客户端向服务器端传送数据所依据的协议名称</li><li>getQueryString()：获得查询字符串</li><li>getRequestURI()：获取发出请求字符串的客户端地址</li><li>getRemoteAddr()：获取客户端的 IP 地址</li><li>getRemoteHost()：获取客户端的名字</li><li>getSession([Boolean create])：返回和请求相关 Session</li><li>getServerName()：获取服务器的名字</li><li>getServletPath()：获取客户端所请求的脚本文件的路径</li><li>getServerPort()：获取服务器的端口号</li><li>removeAttribute(String name)：删除请求中的一个属性</li></ul><h2 id="request-getattribute-和-request-getparameter-有何区别" tabindex="-1"><a class="header-anchor" href="#request-getattribute-和-request-getparameter-有何区别" aria-hidden="true">#</a> request.getAttribute()和 request.getParameter()有何区别</h2><p><strong>从获取方向来看：</strong></p><p><code>getParameter()</code>是获取 POST/GET 传递的参数值；</p><p><code>getAttribute()</code>是获取对象容器中的数据值；</p><p><strong>从用途来看：</strong></p><p><code>getParameter()</code>用于客户端重定向时，即点击了链接或提交按扭时传值用，即用于在用表单或 url 重定向传值时接收数据用。</p><p><code>getAttribute()</code> 用于服务器端重定向时，即在 sevlet 中使用了 forward 函数,或 struts 中使用了<br> mapping.findForward。 getAttribute 只能收到程序用 setAttribute 传过来的值。</p><p>另外，可以用 <code>setAttribute()</code>,<code>getAttribute()</code> 发送接收对象.而 <code>getParameter()</code> 显然只能传字符串。<br><code>setAttribute()</code> 是应用服务器把这个对象放在该页面所对应的一块内存中去，当你的页面服务器重定向到另一个页面时，应用服务器会把这块内存拷贝另一个页面所对应的内存中。这样<code>getAttribute()</code>就能取得你所设下的值，当然这种方法可以传对象。session 也一样，只是对象在内存中的生命周期不一样而已。<code>getParameter()</code>只是应用服务器在分析你送上来的 request 页面的文本时，取得你设在表单或 url 重定向时的值。</p><p><strong>总结：</strong></p><p><code>getParameter()</code>返回的是 String,用于读取提交的表单中的值;（获取之后会根据实际需要转换为自己需要的相应类型，比如整型，日期类型啊等等）</p><p><code>getAttribute()</code>返回的是 Object，需进行转换,可用<code>setAttribute()</code>设置成任意对象，使用很灵活，可随时用</p><h2 id="include-指令-include-的行为的区别" tabindex="-1"><a class="header-anchor" href="#include-指令-include-的行为的区别" aria-hidden="true">#</a> include 指令 include 的行为的区别</h2><p><strong>include 指令：</strong> JSP 可以通过 include 指令来包含其他文件。被包含的文件可以是 JSP 文件、HTML 文件或文本文件。包含的文件就好像是该 JSP 文件的一部分，会被同时编译执行。 语法格式如下：<br> &lt;%@ include file=&quot;文件相对 url 地址&quot; %&gt;</p><p>i<strong>nclude 动作：</strong> <code>&lt;jsp:include&gt;</code>动作元素用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面。语法格式如下：<br> &lt;jsp:include page=&quot;相对 URL 地址&quot; flush=&quot;true&quot; /&gt;</p><h2 id="jsp-九大内置对象-七大动作-三大指令" tabindex="-1"><a class="header-anchor" href="#jsp-九大内置对象-七大动作-三大指令" aria-hidden="true">#</a> JSP 九大内置对象，七大动作，三大指令</h2>',19),f={href:"http://blog.csdn.net/qq_34337272/article/details/64310849",target:"_blank",rel:"noopener noreferrer"},q=a(`<h2 id="讲解-jsp-中的四种作用域" tabindex="-1"><a class="header-anchor" href="#讲解-jsp-中的四种作用域" aria-hidden="true">#</a> 讲解 JSP 中的四种作用域</h2><p>JSP 中的四种作用域包括 page、request、session 和 application，具体来说：</p><ul><li><strong>page</strong>代表与一个页面相关的对象和属性。</li><li><strong>request</strong>代表与 Web 客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个 Web 组件；需要在页面显示的临时数据可以置于此作用域。</li><li><strong>session</strong>代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的 session 中。</li><li><strong>application</strong>代表与整个 Web 应用程序相关的对象和属性，它实质上是跨越整个 Web 应用程序，包括多个页面、请求和会话的一个全局作用域。</li></ul><h2 id="如何实现-jsp-或-servlet-的单线程模式" tabindex="-1"><a class="header-anchor" href="#如何实现-jsp-或-servlet-的单线程模式" aria-hidden="true">#</a> 如何实现 JSP 或 Servlet 的单线程模式</h2><p>对于 JSP 页面，可以通过 page 指令进行设置。<br><code>&lt;%@page isThreadSafe=&quot;false&quot;%&gt;</code></p><p>对于 Servlet，可以让自定义的 Servlet 实现 SingleThreadModel 标识接口。</p><p>说明：如果将 JSP 或 Servlet 设置成单线程工作模式，会导致每个请求创建一个 Servlet 实例，这种实践将导致严重的性能问题（服务器的内存压力很大，还会导致频繁的垃圾回收），所以通常情况下并不会这么做。</p><h2 id="实现会话跟踪的技术有哪些" tabindex="-1"><a class="header-anchor" href="#实现会话跟踪的技术有哪些" aria-hidden="true">#</a> 实现会话跟踪的技术有哪些</h2><ol><li><p><strong>使用 Cookie</strong></p><p>向客户端发送 Cookie</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Cookie</span> c <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建Cookie</span>
c<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置最大时效，此处设置的最大时效为一天</span>
response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//把Cookie放入到HTTP响应中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从客户端读取 Cookie</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span>cookies <span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>cookies <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cookies<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span>cookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cookis<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">//something is here.</span>
    <span class="token comment">//you can get the value</span>
    cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优点:</strong> 数据可以持久保存，不需要服务器资源，简单，基于文本的 Key-Value</p><p><strong>缺点:</strong> 大小受到限制，用户可以禁用 Cookie 功能，由于保存在本地，有一定的安全风险。</p></li><li><p>URL 重写</p><p>在 URL 中添加用户会话的信息作为请求的参数，或者将唯一的会话 ID 添加到 URL 结尾以标识一个会话。</p><p><strong>优点：</strong> 在 Cookie 被禁用的时候依然可以使用</p><p><strong>缺点：</strong> 必须对网站的 URL 进行编码，所有页面必须动态生成，不能用预先记录下来的 URL 进行访问。</p></li><li><p>隐藏的表单域</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>session<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>优点：</strong> Cookie 被禁时可以使用</p><p><strong>缺点：</strong> 所有页面必须是表单提交之后的结果。</p></li><li><p>HttpSession</p><p>在所有会话跟踪技术中，HttpSession 对象是最强大也是功能最多的。当一个用户第一次访问某个网站时会自动创建 HttpSession，每个用户可以访问他自己的 HttpSession。可以通过 HttpServletRequest 对象的 getSession 方 法获得 HttpSession，通过 HttpSession 的 setAttribute 方法可以将一个值放在 HttpSession 中，通过调用 HttpSession 对象的 getAttribute 方法，同时传入属性名就可以获取保存在 HttpSession 中的对象。与上面三种方式不同的 是，HttpSession 放在服务器的内存中，因此不要将过大的对象放在里面，即使目前的 Servlet 容器可以在内存将满时将 HttpSession 中的对象移到其他存储设备中，但是这样势必影响性能。添加到 HttpSession 中的值可以是任意 Java 对象，这个对象最好实现了 Serializable 接口，这样 Servlet 容器在必要的时候可以将其序列化到文件中，否则在序列化时就会出现异常。</p></li></ol><h2 id="cookie-和-session-的区别" tabindex="-1"><a class="header-anchor" href="#cookie-和-session-的区别" aria-hidden="true">#</a> Cookie 和 Session 的区别</h2><p>Cookie 和 Session 都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。</p><p><strong>Cookie 一般用来保存用户信息</strong> 比如 ① 我们在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候页面可以自动帮你登录的一些基本信息给填了；② 一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以存放了一个 Token 在 Cookie 中，下次登录的时候只需要根据 Token 值来查找用户即可(为了安全考虑，重新登录一般要将 Token 重写)；③ 登录一次网站后访问网站其他页面不需要重新登录。<strong>Session 的主要作用就是通过服务端记录用户的状态。</strong> 典型的场景是购物车，当你要添加商品到购物车的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。</p><p>Cookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。</p><p>Cookie 存储在客户端中，而 Session 存储在服务器上，相对来说 Session 安全性更高。如果使用 Cookie 的一些敏感信息不要写入 Cookie 中，最好能将 Cookie 信息加密然后使用到的时候再去服务器端解密。</p>`,14);function P(J,_){const t=r("ExternalLinkIcon");return i(),p("div",null,[c,e("p",null,[s("get 和 post 请求实际上是没有区别，大家可以自行查询相关文章（参考文章："),e("a",d,[s("https://www.cnblogs.com/logsharing/p/8448446.html"),n(t)]),s("，知乎对应的问题链接："),e("a",u,[s("get 和 post 区别？"),n(t)]),s("）！")]),g,h,e("ul",null,[e("li",null,[e("a",v,[s("https://www.zhihu.com/question/28586791"),n(t)])]),e("li",null,[e("a",k,[s("https://mp.weixin.qq.com/s?__biz=MzI3NzIzMzg3Mw==&mid=100000054&idx=1&sn=71f6c214f3833d9ca20b9f7dcd9d33e4#rd"),n(t)])])]),S,e("p",null,[e("a",m,[s("JSP 内置对象 - CSDN 博客"),n(t)])]),b,e("p",null,[e("a",f,[s("JSP 九大内置对象，七大动作，三大指令总结"),n(t)])]),q])}const x=o(l,[["render",P],["__file","J2EE基础知识.html.vue"]]);export{x as default};
