import{_ as a,o,c as n,b as e,e as t}from"./app-BvYoZils.js";const c={};function i(l,r){return o(),n("div",null,r[0]||(r[0]=[e("h2",{id:"概述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#概述"},[e("span",null,"概述")])],-1),e("p",null,[t("当访问数据结构模式时，常规锁不会区分“读锁”和“写锁”"),e("br"),t(" 由许多读取数据的线程组成，每个线程都必须锁定数据，这会产生不必要的序列化。"),e("br"),t(" 众所周知，读写器锁的存在解决了这个问题"),e("br"),t(" “多个并发读卡器，单个写入器锁”，用于由多个线程同时读取数据组成"),e("br"),t(" 并且只允许一个线程写入或修改数据。所有其他人（读者或作者）将被阻止，而作者"),e("br"),t(" 正在修改或写入数据，并被取消阻止，直到写入程序完成写入。")],-1)]))}const d=a(c,[["render",i],["__file","readerwriterlock.html.vue"]]),m=JSON.parse('{"path":"/design/other/readerwriterlock.html","title":"读写锁模式","lang":"zh-CN","frontmatter":{"title":"读写锁模式","icon":"laptop-code","category":["设计模式"],"tag":["设计模式"],"description":"概述 当访问数据结构模式时，常规锁不会区分“读锁”和“写锁” 由许多读取数据的线程组成，每个线程都必须锁定数据，这会产生不必要的序列化。 众所周知，读写器锁的存在解决了这个问题 “多个并发读卡器，单个写入器锁”，用于由多个线程同时读取数据组成 并且只允许一个线程写入或修改数据。所有其他人（读者或作者）将被阻止，而作者 正在修改或写入数据，并被取消阻止，...","head":[["meta",{"property":"og:url","content":"https://ujava.cn/design/other/readerwriterlock.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"读写锁模式"}],["meta",{"property":"og:description","content":"概述 当访问数据结构模式时，常规锁不会区分“读锁”和“写锁” 由许多读取数据的线程组成，每个线程都必须锁定数据，这会产生不必要的序列化。 众所周知，读写器锁的存在解决了这个问题 “多个并发读卡器，单个写入器锁”，用于由多个线程同时读取数据组成 并且只允许一个线程写入或修改数据。所有其他人（读者或作者）将被阻止，而作者 正在修改或写入数据，并被取消阻止，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-04T07:11:24.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:modified_time","content":"2024-03-04T07:11:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"读写锁模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-04T07:11:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]}],"git":{"createdTime":1709534215000,"updatedTime":1709536284000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":2}]},"readingTime":{"minutes":0.6,"words":181},"filePathRelative":"design/other/readerwriterlock.md","localizedDate":"2024年3月4日","excerpt":"<h2>概述</h2>\\n<p>当访问数据结构模式时，常规锁不会区分“读锁”和“写锁”<br>\\n由许多读取数据的线程组成，每个线程都必须锁定数据，这会产生不必要的序列化。<br>\\n众所周知，读写器锁的存在解决了这个问题<br>\\n“多个并发读卡器，单个写入器锁”，用于由多个线程同时读取数据组成<br>\\n并且只允许一个线程写入或修改数据。所有其他人（读者或作者）将被阻止，而作者<br>\\n正在修改或写入数据，并被取消阻止，直到写入程序完成写入。</p>\\n","autoDesc":true}');export{d as comp,m as data};
