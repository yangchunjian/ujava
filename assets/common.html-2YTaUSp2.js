const t=JSON.parse('{"key":"v-a6dd7256","path":"/algorithm/common.html","title":"设计算法:常见算法","lang":"zh-CN","frontmatter":{"title":"设计算法:常见算法","icon":"laptop-code","category":["设计算法"],"description":"设计算法 1、递归与分治 1.1 递归算法：直接或者间接不断反复调用自身来达到解决问题的方法。这就要求原始问题可以分解成相同问题的子问题。 示例：阶乘、斐波纳契数列、汉诺塔问题 斐波纳契数列：又称黄金分割数列，指的是这样一个数列：1、1、2、3、5、8、13、21、……在数学上，斐波纳契数列以如下被以递归的方法定义：F1=1,F2=1,Fn=F（n-1）+F（n-2）（n&gt; 2,n∈N*））。 1.2 分治算法：待解决复杂的问题能够简化为几个若干个小规模相同的问题，然后逐步划分，达到易于解决的程度。","head":[["meta",{"property":"og:url","content":"https://ujava.cn/algorithm/common.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"设计算法:常见算法"}],["meta",{"property":"og:description","content":"设计算法 1、递归与分治 1.1 递归算法：直接或者间接不断反复调用自身来达到解决问题的方法。这就要求原始问题可以分解成相同问题的子问题。 示例：阶乘、斐波纳契数列、汉诺塔问题 斐波纳契数列：又称黄金分割数列，指的是这样一个数列：1、1、2、3、5、8、13、21、……在数学上，斐波纳契数列以如下被以递归的方法定义：F1=1,F2=1,Fn=F（n-1）+F（n-2）（n&gt; 2,n∈N*））。 1.2 分治算法：待解决复杂的问题能够简化为几个若干个小规模相同的问题，然后逐步划分，达到易于解决的程度。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-01T03:13:51.000Z"}],["meta",{"property":"article:author","content":"ujava"}],["meta",{"property":"article:modified_time","content":"2024-03-01T03:13:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计算法:常见算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-01T03:13:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ujava\\",\\"url\\":\\"https://ujava.cn\\"}]}"]]},"headers":[{"level":2,"title":"设计算法","slug":"设计算法","link":"#设计算法","children":[]},{"level":2,"title":"1、递归与分治","slug":"_1、递归与分治","link":"#_1、递归与分治","children":[]},{"level":2,"title":"2、动态规划","slug":"_2、动态规划","link":"#_2、动态规划","children":[]},{"level":2,"title":"3、贪心算法","slug":"_3、贪心算法","link":"#_3、贪心算法","children":[]},{"level":2,"title":"4、回溯法","slug":"_4、回溯法","link":"#_4、回溯法","children":[]},{"level":2,"title":"5、分支限界法","slug":"_5、分支限界法","link":"#_5、分支限界法","children":[]}],"git":{"createdTime":1699603659000,"updatedTime":1709262831000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":2}]},"readingTime":{"minutes":4.53,"words":1360},"filePathRelative":"algorithm/common.md","localizedDate":"2023年11月10日","excerpt":"<h2> 设计算法</h2>\\n<h2> 1、递归与分治</h2>\\n<p>1.1 递归算法：直接或者间接不断反复调用自身来达到解决问题的方法。这就要求原始问题可以分解成相同问题的子问题。</p>\\n<p>示例：阶乘、斐波纳契数列、汉诺塔问题</p>\\n<p>斐波纳契数列：又称黄金分割数列，指的是这样一个数列：1、1、2、3、5、8、13、21、……在数学上，斐波纳契数列以如下被以递归的方法定义：F1=1,F2=1,Fn=F（n-1）+F（n-2）（n&gt;<br>\\n2,n∈N*））。</p>\\n<p>1.2 分治算法：待解决复杂的问题能够简化为几个若干个小规模相同的问题，然后逐步划分，达到易于解决的程度。</p>","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}');export{t as data};
