import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,d as e,e as t}from"./app-1f7cd020.js";const _={},c=e("h2",{id:"概述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#概述","aria-hidden":"true"},"#"),t(" 概述")],-1),a=e("p",null,"适配器模式是一种结构型设计模式，它允许将一个类的接口转换成客户端所期望的另一个接口。",-1),l=e("p",null,"适配器模式的主要目的是解决两个不兼容接口之间的接口转换问题，使得原本由于接口不匹配而无法工作的类可以协同工作。",-1),r=e("p",null,"适配器模式的核心思想是创建一个适配器类，该适配器类实现了客户端期望的目标接口，并持有一个对被适配者对象的引用。",-1),d=e("p",null,"适配器类通过调用被适配者对象的方法来实现目标接口的方法，从而完成接口的适配。",-1),i=e("p",null,[t("它允许不兼容的接口之间进行通信。适配器模式通过将一个类的接口转换为客户端所期望的另一个接口来实现这一点。这种模式可以在不修改现有代码的情况下重用现有类。"),e("br"),t(" 适配器模式可以帮助我们在不修改现有代码的情况下重用现有类，并且可以使不兼容的接口之间进行通信。")],-1),h=e("p",null,[e("em",null,"主要作用：适配器模式将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。")],-1),p=[c,a,l,r,d,i,h];function u(f,m){return s(),n("div",null,p)}const b=o(_,[["render",u],["__file","adapter.html.vue"]]);export{b as default};
