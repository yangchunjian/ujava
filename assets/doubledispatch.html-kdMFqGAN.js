import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c as s,a as e,b as c}from"./app-iKhm-0dg.js";const a={},n=e("h2",{id:"概述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#概述","aria-hidden":"true"},"#"),c(" 概述")],-1),r=e("p",null,[c("当带有参数的消息发送到对象时，结果行为由接收方中该方法的实现定义。有时，行为也必须由参数的类型决定。"),e("br"),c(" 实现此目的的一种方法是为 methods 参数创建多个 instanceof-checks。但是，这会产生维护问题。添加新类型时，我们还需要更改方法的实现并添加新的 instanceof-check。这违反了单一责任原则——一个类应该只有一个理由来改变。"),e("br"),c(" 而不是 instanceof-checks，更好的方法是对参数对象进行另一个虚拟调用。这样，可以轻松添加新功能，而无需修改现有实现（开闭原则）。")],-1),d=[n,r];function i(_,h){return o(),s("div",null,d)}const m=t(a,[["render",i],["__file","doubledispatch.html.vue"]]);export{m as default};
