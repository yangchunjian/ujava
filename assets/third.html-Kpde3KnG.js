const e=JSON.parse('{"key":"v-38a29abe","path":"/principle/third.html","title":"代码抽象与分层","lang":"zh-CN","frontmatter":{"title":"代码抽象与分层","icon":"laptop-code","category":["设计原理"],"description":"抽象与分层，是计算与程序世界里最根本的思想。逻辑之始。 抽象 抽象在代码中 有同学会问：抽象是什么？看上去真的很难懂啊！ 实际上，抽象就隐藏在写下的每一行代码里。 抽象主要有通用域抽象和领域抽象。通用域抽象是所有软件都会复用的概念、实体与交互；领域抽象则特定于某个具体的行业领域。抽象通常使用术语来表达。 让我们来重新看看写过的代码，从中找出抽象吧！ 主要有六类抽象： 流程型抽象： 表达应用流程，将单一功能构造成实用的服务 任务型抽象： 使用有限可控的任务执行者集稳定高效地完成源源不断来临的任务 数据处理抽象： 任务的实际内容 结构型抽象： 存储和容纳执行任务所需要的资源、数据集 数据模型抽象： 具有语义关联的数据项聚合体 原子数据抽象： 组成数据的基本数据单位","head":[["meta",{"property":"og:url","content":"https://ujava.cn/principle/third.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"代码抽象与分层"}],["meta",{"property":"og:description","content":"抽象与分层，是计算与程序世界里最根本的思想。逻辑之始。 抽象 抽象在代码中 有同学会问：抽象是什么？看上去真的很难懂啊！ 实际上，抽象就隐藏在写下的每一行代码里。 抽象主要有通用域抽象和领域抽象。通用域抽象是所有软件都会复用的概念、实体与交互；领域抽象则特定于某个具体的行业领域。抽象通常使用术语来表达。 让我们来重新看看写过的代码，从中找出抽象吧！ 主要有六类抽象： 流程型抽象： 表达应用流程，将单一功能构造成实用的服务 任务型抽象： 使用有限可控的任务执行者集稳定高效地完成源源不断来临的任务 数据处理抽象： 任务的实际内容 结构型抽象： 存储和容纳执行任务所需要的资源、数据集 数据模型抽象： 具有语义关联的数据项聚合体 原子数据抽象： 组成数据的基本数据单位"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-15T03:25:51.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:modified_time","content":"2024-04-15T03:25:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代码抽象与分层\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-15T03:25:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"抽象","slug":"抽象","link":"#抽象","children":[]},{"level":2,"title":"六类抽象","slug":"六类抽象","link":"#六类抽象","children":[]},{"level":2,"title":"结构型抽象","slug":"结构型抽象","link":"#结构型抽象","children":[]},{"level":2,"title":"原子数据抽象","slug":"原子数据抽象","link":"#原子数据抽象","children":[]},{"level":2,"title":"分层","slug":"分层","link":"#分层","children":[]},{"level":2,"title":"缺失抽象与分层会怎样","slug":"缺失抽象与分层会怎样","link":"#缺失抽象与分层会怎样","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1698750645000,"updatedTime":1713151551000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":4}]},"readingTime":{"minutes":12.7,"words":3811},"filePathRelative":"principle/third.md","localizedDate":"2023年10月31日","excerpt":"<blockquote>\\n<p>抽象与分层，是计算与程序世界里最根本的思想。逻辑之始。</p>\\n</blockquote>\\n<h2> 抽象</h2>\\n<h4> 抽象在代码中</h4>\\n<p>有同学会问：抽象是什么？看上去真的很难懂啊！ 实际上，抽象就隐藏在写下的每一行代码里。</p>\\n<p>抽象主要有通用域抽象和领域抽象。通用域抽象是所有软件都会复用的概念、实体与交互；领域抽象则特定于某个具体的行业领域。抽象通常使用术语来表达。</p>\\n<p>让我们来重新看看写过的代码，从中找出抽象吧！</p>\\n<p>主要有六类抽象：</p>\\n<ul>\\n<li>流程型抽象： 表达应用流程，将单一功能构造成实用的服务</li>\\n<li>任务型抽象： 使用有限可控的任务执行者集稳定高效地完成源源不断来临的任务</li>\\n<li>数据处理抽象： 任务的实际内容</li>\\n<li>结构型抽象： 存储和容纳执行任务所需要的资源、数据集</li>\\n<li>数据模型抽象： 具有语义关联的数据项聚合体</li>\\n<li>原子数据抽象： 组成数据的基本数据单位</li>\\n</ul>","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}');export{e as data};
