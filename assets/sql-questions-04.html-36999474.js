import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o as e,c as p,a as t,b as n,d as o,e as c}from"./app-8a5cd404.js";const i={},l={href:"https://www.nowcoder.com/exam/oj?page=1&tab=SQL%E7%AF%87&topicId=240",target:"_blank",rel:"noopener noreferrer"},r=c(`<p>较难或者困难的题目可以根据自身实际情况和面试需要来决定是否要跳过。</p><h2 id="专用窗口函数" tabindex="-1"><a class="header-anchor" href="#专用窗口函数" aria-hidden="true">#</a> 专用窗口函数</h2><p>MySQL 8.0 版本引入了窗口函数的支持，下面是 MySQL 中常见的窗口函数及其用法：</p><ol><li><code>ROW_NUMBER()</code>: 为查询结果集中的每一行分配一个唯一的整数值。</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> col1<span class="token punctuation">)</span> <span class="token keyword">AS</span> row_num
<span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>RANK()</code>: 计算每一行在排序结果中的排名。</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> col1 <span class="token keyword">DESC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ranking
<span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>DENSE_RANK()</code>: 计算每一行在排序结果中的排名，保留相同的排名。</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> DENSE_RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> col1 <span class="token keyword">DESC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ranking
<span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><code>NTILE(n)</code>: 将结果分成 n 个基本均匀的桶，并为每个桶分配一个标识号。</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> NTILE<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> col1<span class="token punctuation">)</span> <span class="token keyword">AS</span> bucket
<span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><code>SUM()</code>, <code>AVG()</code>,<code>COUNT()</code>, <code>MIN()</code>, <code>MAX()</code>: 这些聚合函数也可以与窗口函数结合使用，计算窗口内指定列的汇总、平均值、计数、最小值和最大值。</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>col1<span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> sum_col
<span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li><code>LEAD()</code> 和 <code>LAG()</code>: LEAD 函数用于获取当前行之后的某个偏移量的行的值，而 LAG 函数用于获取当前行之前的某个偏移量的行的值。</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> LEAD<span class="token punctuation">(</span>col1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> col1<span class="token punctuation">)</span> <span class="token keyword">AS</span> next_col1<span class="token punctuation">,</span>
                 LAG<span class="token punctuation">(</span>col1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> col1<span class="token punctuation">)</span> <span class="token keyword">AS</span> prev_col1
<span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li><code>FIRST_VALUE()</code> 和 <code>LAST_VALUE()</code>: FIRST_VALUE 函数用于获取窗口内指定列的第一个值，LAST_VALUE 函数用于获取窗口内指定列的最后一个值。</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> FIRST_VALUE<span class="token punctuation">(</span>col2<span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> col1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> col2<span class="token punctuation">)</span> <span class="token keyword">AS</span> first_val<span class="token punctuation">,</span>
                 LAST_VALUE<span class="token punctuation">(</span>col2<span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> col1 <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> col2<span class="token punctuation">)</span> <span class="token keyword">AS</span> last_val
<span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>窗口函数通常需要配合 OVER 子句一起使用，用于定义窗口的大小、排序规则和分组方式。</p><h3 id="每类试卷得分前三名" tabindex="-1"><a class="header-anchor" href="#每类试卷得分前三名" aria-hidden="true">#</a> 每类试卷得分前三名</h3><p><strong>描述</strong>：</p><p>现有试卷信息表 <code>examination_info</code>（<code>exam_id</code> 试卷 ID, <code>tag</code> 试卷类别, <code>difficulty</code> 试卷难度, <code>duration</code> 考试时长, <code>release_time</code> 发布时间）：</p><table><thead><tr><th>id</th><th>exam_id</th><th>tag</th><th>difficulty</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>1</td><td>9001</td><td>SQL</td><td>hard</td><td>60</td><td>2021-09-01 06:00:00</td></tr><tr><td>2</td><td>9002</td><td>SQL</td><td>hard</td><td>60</td><td>2021-09-01 06:00:00</td></tr><tr><td>3</td><td>9003</td><td>算法</td><td>medium</td><td>80</td><td>2021-09-01 10:00:00</td></tr></tbody></table><p>试卷作答记录表 <code>exam_record</code>（<code>uid</code> 用户 ID, <code>exam_id</code> 试卷 ID, <code>start_time</code> 开始作答时间, <code>submit_time</code> 交卷时间, score 得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2021-09-01 09:01:01</td><td>2021-09-01 09:31:00</td><td>78</td></tr><tr><td>2</td><td>1002</td><td>9001</td><td>2021-09-01 09:01:01</td><td>2021-09-01 09:31:00</td><td>81</td></tr><tr><td>3</td><td>1002</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>81</td></tr><tr><td>4</td><td>1003</td><td>9001</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:40:01</td><td>86</td></tr><tr><td>5</td><td>1003</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:51</td><td>89</td></tr><tr><td>6</td><td>1004</td><td>9001</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:30:01</td><td>85</td></tr><tr><td>7</td><td>1005</td><td>9003</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:02</td><td>85</td></tr><tr><td>8</td><td>1006</td><td>9003</td><td>2021-09-07 10:01:01</td><td>2021-09-07 10:21:01</td><td>84</td></tr><tr><td>9</td><td>1003</td><td>9003</td><td>2021-09-08 12:01:01</td><td>2021-09-08 12:11:01</td><td>40</td></tr><tr><td>10</td><td>1003</td><td>9002</td><td>2021-09-01 14:01:01</td><td>(NULL)</td><td>(NULL)</td></tr></tbody></table><p>找到每类试卷得分的前 3 名，如果两人最大分数相同，选择最小分数大者，如果还相同，选择 uid 大者。由示例数据结果输出如下：</p><table><thead><tr><th>tid</th><th>uid</th><th>ranking</th></tr></thead><tbody><tr><td>SQL</td><td>1003</td><td>1</td></tr><tr><td>SQL</td><td>1004</td><td>2</td></tr><tr><td>SQL</td><td>1002</td><td>3</td></tr><tr><td>算法</td><td>1005</td><td>1</td></tr><tr><td>算法</td><td>1006</td><td>2</td></tr><tr><td>算法</td><td>1003</td><td>3</td></tr></tbody></table><p><strong>解释</strong>：有作答得分记录的试卷 tag 有 SQL 和算法，SQL 试卷用户 1001、1002、1003、1004 有作答得分，最高得分分别为 81、81、89、85，最低得分分别为 78、81、86、40，因此先按最高得分排名再按最低得分排名取前三为 1003、1004、1002。</p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> tag<span class="token punctuation">,</span>
       UID<span class="token punctuation">,</span>
       ranking
<span class="token keyword">FROM</span>
  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> b<span class="token punctuation">.</span>tag <span class="token keyword">AS</span> tag<span class="token punctuation">,</span>
          a<span class="token punctuation">.</span>uid <span class="token keyword">AS</span> UID<span class="token punctuation">,</span>
          ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> b<span class="token punctuation">.</span>tag
                             <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> b<span class="token punctuation">.</span>tag<span class="token punctuation">,</span>
                                      <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">,</span> 
                                      <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">,</span> 
                                      a<span class="token punctuation">.</span>uid <span class="token keyword">DESC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ranking
   <span class="token keyword">FROM</span> exam_record a
   <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> examination_info b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> b<span class="token punctuation">.</span>exam_id
   <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> b<span class="token punctuation">.</span>tag<span class="token punctuation">,</span>
            a<span class="token punctuation">.</span>uid<span class="token punctuation">)</span> t
<span class="token keyword">WHERE</span> ranking <span class="token operator">&lt;=</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二快-慢用时之差大于试卷时长一半的试卷-较难" tabindex="-1"><a class="header-anchor" href="#第二快-慢用时之差大于试卷时长一半的试卷-较难" aria-hidden="true">#</a> 第二快/慢用时之差大于试卷时长一半的试卷（较难）</h3><p><strong>描述</strong>：</p><p>现有试卷信息表 <code>examination_info</code>（<code>exam_id</code> 试卷 ID, <code>tag</code> 试卷类别, <code>difficulty</code> 试卷难度, <code>duration</code> 考试时长, <code>release_time</code> 发布时间）：</p><table><thead><tr><th>id</th><th>exam_id</th><th>tag</th><th>difficulty</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>1</td><td>9001</td><td>SQL</td><td>hard</td><td>60</td><td>2021-09-01 06:00:00</td></tr><tr><td>2</td><td>9002</td><td>C++</td><td>hard</td><td>60</td><td>2021-09-01 06:00:00</td></tr><tr><td>3</td><td>9003</td><td>算法</td><td>medium</td><td>80</td><td>2021-09-01 10:00:00</td></tr></tbody></table><p>试卷作答记录表 <code>exam_record</code>（<code>uid</code> 用户 ID, <code>exam_id</code> 试卷 ID, <code>start_time</code> 开始作答时间, <code>submit_time</code> 交卷时间, <code>score</code> 得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2021-09-01 09:01:01</td><td>2021-09-01 09:51:01</td><td>78</td></tr><tr><td>2</td><td>1001</td><td>9002</td><td>2021-09-01 09:01:01</td><td>2021-09-01 09:31:00</td><td>81</td></tr><tr><td>3</td><td>1002</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>81</td></tr><tr><td>4</td><td>1003</td><td>9001</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:59:01</td><td>86</td></tr><tr><td>5</td><td>1003</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:51</td><td>89</td></tr><tr><td>6</td><td>1004</td><td>9002</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:30:01</td><td>85</td></tr><tr><td>7</td><td>1005</td><td>9001</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:02</td><td>85</td></tr><tr><td>8</td><td>1006</td><td>9001</td><td>2021-09-07 10:01:01</td><td>2021-09-07 10:21:01</td><td>84</td></tr><tr><td>9</td><td>1003</td><td>9001</td><td>2021-09-08 12:01:01</td><td>2021-09-08 12:11:01</td><td>40</td></tr><tr><td>10</td><td>1003</td><td>9002</td><td>2021-09-01 14:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>11</td><td>1005</td><td>9001</td><td>2021-09-01 14:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>12</td><td>1003</td><td>9003</td><td>2021-09-08 15:01:01</td><td>(NULL)</td><td>(NULL)</td></tr></tbody></table><p>找到第二快和第二慢用时之差大于试卷时长的一半的试卷信息，按试卷 ID 降序排序。由示例数据结果输出如下：</p><table><thead><tr><th>exam_id</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>9001</td><td>60</td><td>2021-09-01 06:00:00</td></tr></tbody></table><p><strong>解释</strong>：试卷 9001 被作答用时有 50 分钟、50 分钟、30 分 1 秒、11 分钟、10 分钟，第二快和第二慢用时之差为 50 分钟-11 分钟=39 分钟，试卷时长为 60 分钟，因此满足大于试卷时长一半的条件，输出试卷 ID、时长、发布时间。</p><p><strong>思路：</strong></p><p>第一步，找到每张试卷完成时间的顺序排名和倒序排名 也就是表 a；</p><p>第二步，与通过试卷信息表 b 建立内连接，并根据试卷 id 分组，利用<code>having</code>筛选排名为第二个数据，将秒转化为分钟并进行比较，最后再根据试卷 id 倒序排序就行</p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>exam_id<span class="token punctuation">,</span>
       b<span class="token punctuation">.</span>duration<span class="token punctuation">,</span>
       b<span class="token punctuation">.</span>release_time
<span class="token keyword">FROM</span>
  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> exam_id<span class="token punctuation">,</span>
          row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> exam_id
                             <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> timestampdiff<span class="token punctuation">(</span><span class="token keyword">SECOND</span><span class="token punctuation">,</span> start_time<span class="token punctuation">,</span> submit_time<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">)</span> rn1<span class="token punctuation">,</span>
          row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> exam_id
                            <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> timestampdiff<span class="token punctuation">(</span><span class="token keyword">SECOND</span><span class="token punctuation">,</span> start_time<span class="token punctuation">,</span> submit_time<span class="token punctuation">)</span> <span class="token keyword">ASC</span><span class="token punctuation">)</span> rn2<span class="token punctuation">,</span>
                                              timestampdiff<span class="token punctuation">(</span><span class="token keyword">SECOND</span><span class="token punctuation">,</span> start_time<span class="token punctuation">,</span> submit_time<span class="token punctuation">)</span> timex
   <span class="token keyword">FROM</span> exam_record
   <span class="token keyword">WHERE</span> score <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">)</span> a
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> examination_info b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>exam_id <span class="token operator">=</span> b<span class="token punctuation">.</span>exam_id
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>exam_id
<span class="token keyword">HAVING</span> <span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">IF</span> <span class="token punctuation">(</span>rn1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>timex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">IF</span> <span class="token punctuation">(</span>rn2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>timex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>duration <span class="token operator">/</span> <span class="token number">2</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>exam_id <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="连续两次作答试卷的最大时间窗-较难" tabindex="-1"><a class="header-anchor" href="#连续两次作答试卷的最大时间窗-较难" aria-hidden="true">#</a> 连续两次作答试卷的最大时间窗（较难）</h3><p><strong>描述</strong></p><p>现有试卷作答记录表 <code>exam_record</code>（<code>uid</code> 用户 ID, <code>exam_id</code> 试卷 ID, <code>start_time</code> 开始作答时间, <code>submit_time</code> 交卷时间, <code>score</code> 得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1006</td><td>9003</td><td>2021-09-07 10:01:01</td><td>2021-09-07 10:21:02</td><td>84</td></tr><tr><td>2</td><td>1006</td><td>9001</td><td>2021-09-01 12:11:01</td><td>2021-09-01 12:31:01</td><td>89</td></tr><tr><td>3</td><td>1006</td><td>9002</td><td>2021-09-06 10:01:01</td><td>2021-09-06 10:21:01</td><td>81</td></tr><tr><td>4</td><td>1005</td><td>9002</td><td>2021-09-05 10:01:01</td><td>2021-09-05 10:21:01</td><td>81</td></tr><tr><td>5</td><td>1005</td><td>9001</td><td>2021-09-05 10:31:01</td><td>2021-09-05 10:51:01</td><td>81</td></tr></tbody></table><p>请计算在 2021 年至少有两天作答过试卷的人中，计算该年连续两次作答试卷的最大时间窗 <code>days_window</code>，那么根据该年的历史规律他在 <code>days_window</code> 天里平均会做多少套试卷，按最大时间窗和平均做答试卷套数倒序排序。由示例数据结果输出如下：</p><table><thead><tr><th>uid</th><th>days_window</th><th>avg_exam_cnt</th></tr></thead><tbody><tr><td>1006</td><td>6</td><td>2.57</td></tr></tbody></table><p><strong>解释</strong>：用户 1006 分别在 20210901、20210906、20210907 作答过 3 次试卷，连续两次作答最大时间窗为 6 天（1 号到 6 号），他 1 号到 7 号这 7 天里共做了 3 张试卷，平均每天 3/7=0.428571 张，那么 6 天里平均会做 0.428571*6=2.57 张试卷（保留两位小数）；用户 1005 在 20210905 做了两张试卷，但是只有一天的作答记录，过滤掉。</p><p><strong>思路：</strong></p><p>上面这个解释中提示要对作答记录去重，千万别被骗了，不要去重！去重就通不过测试用例。注意限制时间是 2021 年；</p><p>而且要注意时间差要+1 天；还要注意<mark>没交卷也算在内</mark>！！！！ （反正感觉这题描述不清，出的不是很好）</p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> UID<span class="token punctuation">,</span>
       <span class="token function">max</span><span class="token punctuation">(</span>datediff<span class="token punctuation">(</span>next_time<span class="token punctuation">,</span> start_time<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">AS</span> days_window<span class="token punctuation">,</span>
       <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>datediff<span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>datediff<span class="token punctuation">(</span>next_time<span class="token punctuation">,</span> start_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_exam_cnt
<span class="token keyword">FROM</span>
  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> UID<span class="token punctuation">,</span>
          start_time<span class="token punctuation">,</span>
          lead<span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> UID
                                    <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> start_time<span class="token punctuation">)</span> <span class="token keyword">AS</span> next_time
   <span class="token keyword">FROM</span> exam_record
   <span class="token keyword">WHERE</span> <span class="token keyword">YEAR</span> <span class="token punctuation">(</span>start_time<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&#39;2021&#39;</span> <span class="token punctuation">)</span> a
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> UID
<span class="token keyword">HAVING</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> <span class="token keyword">date</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> days_window <span class="token keyword">DESC</span><span class="token punctuation">,</span>
         avg_exam_cnt <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="近三个月未完成为-0-的用户完成情况" tabindex="-1"><a class="header-anchor" href="#近三个月未完成为-0-的用户完成情况" aria-hidden="true">#</a> 近三个月未完成为 0 的用户完成情况</h3><p><strong>描述</strong>：</p><p>现有试卷作答记录表 <code>exam_record</code>（<code>uid</code>:用户 ID, <code>exam_id</code>:试卷 ID, <code>start_time</code>:开始作答时间, <code>submit_time</code>:交卷时间，为空的话则代表未完成, <code>score</code>:得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1006</td><td>9003</td><td>2021-09-06 10:01:01</td><td>2021-09-06 10:21:02</td><td>84</td></tr><tr><td>2</td><td>1006</td><td>9001</td><td>2021-08-02 12:11:01</td><td>2021-08-02 12:31:01</td><td>89</td></tr><tr><td>3</td><td>1006</td><td>9002</td><td>2021-06-06 10:01:01</td><td>2021-06-06 10:21:01</td><td>81</td></tr><tr><td>4</td><td>1006</td><td>9002</td><td>2021-05-06 10:01:01</td><td>2021-05-06 10:21:01</td><td>81</td></tr><tr><td>5</td><td>1006</td><td>9001</td><td>2021-05-01 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>6</td><td>1001</td><td>9001</td><td>2021-09-05 10:31:01</td><td>2021-09-05 10:51:01</td><td>81</td></tr><tr><td>7</td><td>1001</td><td>9003</td><td>2021-08-01 09:01:01</td><td>2021-08-01 09:51:11</td><td>78</td></tr><tr><td>8</td><td>1001</td><td>9002</td><td>2021-07-01 09:01:01</td><td>2021-07-01 09:31:00</td><td>81</td></tr><tr><td>9</td><td>1001</td><td>9002</td><td>2021-07-01 12:01:01</td><td>2021-07-01 12:31:01</td><td>81</td></tr><tr><td>10</td><td>1001</td><td>9002</td><td>2021-07-01 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr></tbody></table><p>找到每个人近三个有试卷作答记录的月份中没有试卷是未完成状态的用户的试卷作答完成数，按试卷完成数和用户 ID 降序排名。由示例数据结果输出如下：</p><table><thead><tr><th>uid</th><th>exam_complete_cnt</th></tr></thead><tbody><tr><td>1006</td><td>3</td></tr></tbody></table><p><strong>解释</strong>：用户 1006 近三个有作答试卷的月份为 202109、202108、202106，作答试卷数为 3，全部完成；用户 1001 近三个有作答试卷的月份为 202109、202108、202107，作答试卷数为 5，完成试卷数为 4，因为有未完成试卷，故过滤掉。</p><p><strong>思路:</strong></p><ol><li><code>找到每个人近三个有试卷作答记录的月份中没有试卷是未完成状态的用户的试卷作答完成数</code>首先看这句话，肯定要先根据人进行分组</li><li>最近三个月，可以采用连续重复排名，倒序排列，排名&lt;=3</li><li>统计作答数</li><li>拼装剩余条件</li><li>排序</li></ol><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> UID<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> exam_complete_cnt
<span class="token keyword">FROM</span>
  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token punctuation">,</span> DENSE_RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> UID
                             <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> date_format<span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m&#39;</span><span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">)</span> dr
   <span class="token keyword">FROM</span> exam_record<span class="token punctuation">)</span> t1
<span class="token keyword">WHERE</span> dr <span class="token operator">&lt;=</span> <span class="token number">3</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> UID
<span class="token keyword">HAVING</span> <span class="token function">count</span><span class="token punctuation">(</span>dr<span class="token punctuation">)</span><span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> exam_complete_cnt <span class="token keyword">DESC</span><span class="token punctuation">,</span>
         UID <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="未完成率较高的-50-用户近三个月答卷情况-困难" tabindex="-1"><a class="header-anchor" href="#未完成率较高的-50-用户近三个月答卷情况-困难" aria-hidden="true">#</a> 未完成率较高的 50%用户近三个月答卷情况（困难）</h3><p><strong>描述</strong>：</p><p>现有用户信息表 <code>user_info</code>（<code>uid</code> 用户 ID，<code>nick_name</code> 昵称, <code>achievement</code> 成就值, <code>level</code> 等级, <code>job</code> 职业方向, <code>register_time</code> 注册时间）：</p><table><thead><tr><th>id</th><th>uid</th><th>nick_name</th><th>achievement</th><th>level</th><th>job</th><th>register_time</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>牛客 1 号</td><td>3200</td><td>7</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>2</td><td>1002</td><td>牛客 2 号</td><td>2500</td><td>6</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>3</td><td>1003</td><td>牛客 3 号 ♂</td><td>2200</td><td>5</td><td>算法</td><td>2020-01-01 10:00:00</td></tr></tbody></table><p>试卷信息表 <code>examination_info</code>（<code>exam_id</code> 试卷 ID, <code>tag</code> 试卷类别, <code>difficulty</code> 试卷难度, <code>duration</code> 考试时长, <code>release_time</code> 发布时间）：</p><table><thead><tr><th>id</th><th>exam_id</th><th>tag</th><th>difficulty</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>1</td><td>9001</td><td>SQL</td><td>hard</td><td>60</td><td>2020-01-01 10:00:00</td></tr><tr><td>2</td><td>9002</td><td>SQL</td><td>hard</td><td>80</td><td>2020-01-01 10:00:00</td></tr><tr><td>3</td><td>9003</td><td>算法</td><td>hard</td><td>80</td><td>2020-01-01 10:00:00</td></tr><tr><td>4</td><td>9004</td><td>PYTHON</td><td>medium</td><td>70</td><td>2020-01-01 10:00:00</td></tr></tbody></table><p>试卷作答记录表 <code>exam_record</code>（<code>uid</code> 用户 ID, <code>exam_id</code> 试卷 ID, <code>start_time</code> 开始作答时间, <code>submit_time</code> 交卷时间, <code>score</code> 得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2020-01-01 09:01:01</td><td>2020-01-01 09:21:59</td><td>90</td></tr><tr><td>15</td><td>1002</td><td>9001</td><td>2020-01-01 18:01:01</td><td>2020-01-01 18:59:02</td><td>90</td></tr><tr><td>13</td><td>1001</td><td>9001</td><td>2020-01-02 10:01:01</td><td>2020-01-02 10:31:01</td><td>89</td></tr><tr><td>2</td><td>1002</td><td>9001</td><td>2020-01-20 10:01:01</td><td></td><td></td></tr><tr><td>3</td><td>1002</td><td>9001</td><td>2020-02-01 12:11:01</td><td></td><td></td></tr><tr><td>5</td><td>1001</td><td>9001</td><td>2020-03-01 12:01:01</td><td></td><td></td></tr><tr><td>6</td><td>1002</td><td>9001</td><td>2020-03-01 12:01:01</td><td>2020-03-01 12:41:01</td><td>90</td></tr><tr><td>4</td><td>1003</td><td>9001</td><td>2020-03-01 19:01:01</td><td></td><td></td></tr><tr><td>7</td><td>1002</td><td>9001</td><td>2020-05-02 19:01:01</td><td>2020-05-02 19:32:00</td><td>90</td></tr><tr><td>14</td><td>1001</td><td>9002</td><td>2020-01-01 12:11:01</td><td></td><td></td></tr><tr><td>8</td><td>1001</td><td>9002</td><td>2020-01-02 19:01:01</td><td>2020-01-02 19:59:01</td><td>69</td></tr><tr><td>9</td><td>1001</td><td>9002</td><td>2020-02-02 12:01:01</td><td>2020-02-02 12:20:01</td><td>99</td></tr><tr><td>10</td><td>1002</td><td>9002</td><td>2020-02-02 12:01:01</td><td></td><td></td></tr><tr><td>11</td><td>1002</td><td>9002</td><td>2020-02-02 12:01:01</td><td>2020-02-02 12:43:01</td><td>81</td></tr><tr><td>12</td><td>1002</td><td>9002</td><td>2020-03-02 12:11:01</td><td></td><td></td></tr><tr><td>17</td><td>1001</td><td>9002</td><td>2020-05-05 18:01:01</td><td></td><td></td></tr><tr><td>16</td><td>1002</td><td>9003</td><td>2020-05-06 12:01:01</td><td></td><td></td></tr></tbody></table><p>请统计 SQL 试卷上未完成率较高的 50%用户中，6 级和 7 级用户在有试卷作答记录的近三个月中，每个月的答卷数目和完成数目。按用户 ID、月份升序排序。</p><p>由示例数据结果输出如下：</p><table><thead><tr><th>uid</th><th>start_month</th><th>total_cnt</th><th>complete_cnt</th></tr></thead><tbody><tr><td>1002</td><td>202002</td><td>3</td><td>1</td></tr><tr><td>1002</td><td>202003</td><td>2</td><td>1</td></tr><tr><td>1002</td><td>202005</td><td>2</td><td>1</td></tr></tbody></table><p>解释：各个用户对 SQL 试卷的未完成数、作答总数、未完成率如下：</p><table><thead><tr><th>uid</th><th>incomplete_cnt</th><th>total_cnt</th><th>incomplete_rate</th></tr></thead><tbody><tr><td>1001</td><td>3</td><td>7</td><td>0.4286</td></tr><tr><td>1002</td><td>4</td><td>8</td><td>0.5000</td></tr><tr><td>1003</td><td>1</td><td>1</td><td>1.0000</td></tr></tbody></table><p>1001、1002、1003 分别排在 1.0、0.5、0.0 的位置，因此较高的 50%用户（排位&lt;=0.5）为 1002、1003；</p><p>1003 不是 6 级或 7 级；</p><p>有试卷作答记录的近三个月为 202005、202003、202002；</p><p>这三个月里 1002 的作答题数分别为 3、2、2，完成数目分别为 1、1、1。</p><p><strong>思路：</strong></p><p>注意点：这题注意求的是所有的答题次数和完成次数，而 sql 类别的试卷是限制未完成率排名，6, 7 级用户限制的是做题记录。</p><p>先求出未完成率的排名</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> UID<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span>submit_time <span class="token operator">IS</span> <span class="token boolean">NULL</span>
             <span class="token operator">OR</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span> <span class="token keyword">AS</span> num<span class="token punctuation">,</span>
       PERCENT_RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span>
                            <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">count</span><span class="token punctuation">(</span>submit_time <span class="token operator">IS</span> <span class="token boolean">NULL</span>
                                           <span class="token operator">OR</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ranking
<span class="token keyword">FROM</span> exam_record
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> examination_info <span class="token keyword">USING</span> <span class="token punctuation">(</span>exam_id<span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> tag <span class="token operator">=</span> <span class="token string">&#39;SQL&#39;</span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> UID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再求出最近三个月的练习记录</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> UID<span class="token punctuation">,</span>
       date_format<span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> month_d<span class="token punctuation">,</span>
       submit_time<span class="token punctuation">,</span>
       exam_id<span class="token punctuation">,</span>
       dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> UID
                          <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> date_format<span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m&#39;</span><span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ranking
<span class="token keyword">FROM</span> exam_record
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> user_info <span class="token keyword">USING</span> <span class="token punctuation">(</span>UID<span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> <span class="token keyword">LEVEL</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span>uid<span class="token punctuation">,</span>
       t1<span class="token punctuation">.</span>month_d<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total_cnt<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>submit_time<span class="token punctuation">)</span> <span class="token keyword">AS</span> complete_cnt
<span class="token keyword">FROM</span><span class="token comment">-- 先求出未完成率的排名</span>

  <span class="token punctuation">(</span><span class="token keyword">SELECT</span> UID<span class="token punctuation">,</span>
          <span class="token function">count</span><span class="token punctuation">(</span>submit_time <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token operator">OR</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span> <span class="token keyword">AS</span> num<span class="token punctuation">,</span>
          PERCENT_RANK<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span>
                               <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token function">count</span><span class="token punctuation">(</span>submit_time <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token operator">OR</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span>start_time<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ranking
   <span class="token keyword">FROM</span> exam_record
   <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> examination_info <span class="token keyword">USING</span> <span class="token punctuation">(</span>exam_id<span class="token punctuation">)</span>
   <span class="token keyword">WHERE</span> tag <span class="token operator">=</span> <span class="token string">&#39;SQL&#39;</span>
   <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> UID<span class="token punctuation">)</span> t
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span>
  <span class="token punctuation">(</span><span class="token comment">-- 再求出近三个月的练习记录</span>
 <span class="token keyword">SELECT</span> UID<span class="token punctuation">,</span>
        date_format<span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> month_d<span class="token punctuation">,</span>
        submit_time<span class="token punctuation">,</span>
        exam_id<span class="token punctuation">,</span>
        dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> UID
                           <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> date_format<span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m&#39;</span><span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ranking
   <span class="token keyword">FROM</span> exam_record
   <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> user_info <span class="token keyword">USING</span> <span class="token punctuation">(</span>UID<span class="token punctuation">)</span>
   <span class="token keyword">WHERE</span> <span class="token keyword">LEVEL</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> t1 <span class="token keyword">USING</span> <span class="token punctuation">(</span>UID<span class="token punctuation">)</span>
<span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>ranking <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token operator">AND</span> t<span class="token punctuation">.</span>ranking <span class="token operator">&gt;=</span> <span class="token number">0.5</span> <span class="token comment">-- 使用限制找到符合条件的记录</span>

<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> t1<span class="token punctuation">.</span>uid<span class="token punctuation">,</span>
         t1<span class="token punctuation">.</span>month_d
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> t1<span class="token punctuation">.</span>uid<span class="token punctuation">,</span>
         t1<span class="token punctuation">.</span>month_d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="试卷完成数同比-2020-年的增长率及排名变化-困难" tabindex="-1"><a class="header-anchor" href="#试卷完成数同比-2020-年的增长率及排名变化-困难" aria-hidden="true">#</a> 试卷完成数同比 2020 年的增长率及排名变化（困难）</h3><p><strong>描述</strong>：</p><p>现有试卷信息表 <code>examination_info</code>（<code>exam_id</code> 试卷 ID, <code>tag</code> 试卷类别, <code>difficulty</code> 试卷难度, <code>duration</code> 考试时长, <code>release_time</code> 发布时间）：</p><table><thead><tr><th>id</th><th>exam_id</th><th>tag</th><th>difficulty</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>1</td><td>9001</td><td>SQL</td><td>hard</td><td>60</td><td>2021-01-01 10:00:00</td></tr><tr><td>2</td><td>9002</td><td>C++</td><td>hard</td><td>80</td><td>2021-01-01 10:00:00</td></tr><tr><td>3</td><td>9003</td><td>算法</td><td>hard</td><td>80</td><td>2021-01-01 10:00:00</td></tr><tr><td>4</td><td>9004</td><td>PYTHON</td><td>medium</td><td>70</td><td>2021-01-01 10:00:00</td></tr></tbody></table><p>试卷作答记录表 <code>exam_record</code>（<code>uid</code> 用户 ID, <code>exam_id</code> 试卷 ID, <code>start_time</code> 开始作答时间, <code>submit_time</code> 交卷时间, <code>score</code> 得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2020-08-02 10:01:01</td><td>2020-08-02 10:31:01</td><td>89</td></tr><tr><td>2</td><td>1002</td><td>9001</td><td>2020-04-01 18:01:01</td><td>2020-04-01 18:59:02</td><td>90</td></tr><tr><td>3</td><td>1001</td><td>9001</td><td>2020-04-01 09:01:01</td><td>2020-04-01 09:21:59</td><td>80</td></tr><tr><td>5</td><td>1002</td><td>9001</td><td>2021-03-02 19:01:01</td><td>2021-03-02 19:32:00</td><td>20</td></tr><tr><td>8</td><td>1003</td><td>9001</td><td>2021-05-02 12:01:01</td><td>2021-05-02 12:31:01</td><td>98</td></tr><tr><td>13</td><td>1003</td><td>9001</td><td>2020-01-02 10:01:01</td><td>2020-01-02 10:31:01</td><td>89</td></tr><tr><td>9</td><td>1001</td><td>9002</td><td>2020-02-02 12:01:01</td><td>2020-02-02 12:20:01</td><td>99</td></tr><tr><td>10</td><td>1002</td><td>9002</td><td>2021-02-02 12:01:01</td><td>2020-02-02 12:43:01</td><td>81</td></tr><tr><td>11</td><td>1001</td><td>9002</td><td>2020-01-02 19:01:01</td><td>2020-01-02 19:59:01</td><td>69</td></tr><tr><td>16</td><td>1002</td><td>9002</td><td>2020-02-02 12:01:01</td><td></td><td></td></tr><tr><td>17</td><td>1002</td><td>9002</td><td>2020-03-02 12:11:01</td><td></td><td></td></tr><tr><td>18</td><td>1001</td><td>9002</td><td>2021-05-05 18:01:01</td><td></td><td></td></tr><tr><td>4</td><td>1002</td><td>9003</td><td>2021-01-20 10:01:01</td><td>2021-01-20 10:10:01</td><td>81</td></tr><tr><td>6</td><td>1001</td><td>9003</td><td>2021-04-02 19:01:01</td><td>2021-04-02 19:40:01</td><td>89</td></tr><tr><td>15</td><td>1002</td><td>9003</td><td>2021-01-01 18:01:01</td><td>2021-01-01 18:59:02</td><td>90</td></tr><tr><td>7</td><td>1004</td><td>9004</td><td>2020-05-02 12:01:01</td><td>2020-05-02 12:20:01</td><td>99</td></tr><tr><td>12</td><td>1001</td><td>9004</td><td>2021-09-02 12:11:01</td><td></td><td></td></tr><tr><td>14</td><td>1002</td><td>9004</td><td>2020-01-01 12:11:01</td><td>2020-01-01 12:31:01</td><td>83</td></tr></tbody></table><p>请计算 2021 年上半年各类试卷的做完次数相比 2020 年上半年同期的增长率（百分比格式，保留 1 位小数），以及做完次数排名变化，按增长率和 21 年排名降序输出。</p><p>由示例数据结果输出如下：</p><table><thead><tr><th>tag</th><th>exam_cnt_20</th><th>exam_cnt_21</th><th>growth_rate</th><th>exam_cnt_rank_20</th><th>exam_cnt_rank_21</th><th>rank_delta</th></tr></thead><tbody><tr><td>SQL</td><td>3</td><td>2</td><td>-33.3%</td><td>1</td><td>2</td><td>1</td></tr></tbody></table><p>解释：2020 年上半年有 3 个 tag 有作答完成的记录，分别是 C++、SQL、PYTHON，它们被做完的次数分别是 3、3、2，做完次数排名为 1、1（并列）、3；</p><p>2021 年上半年有 2 个 tag 有作答完成的记录，分别是算法、SQL，它们被做完的次数分别是 3、2，做完次数排名为 1、2；具体如下：</p><table><thead><tr><th>tag</th><th>start_year</th><th>exam_cnt</th><th>exam_cnt_rank</th></tr></thead><tbody><tr><td>C++</td><td>2020</td><td>3</td><td>1</td></tr><tr><td>SQL</td><td>2020</td><td>3</td><td>1</td></tr><tr><td>PYTHON</td><td>2020</td><td>2</td><td>3</td></tr><tr><td>算法</td><td>2021</td><td>3</td><td>1</td></tr><tr><td>SQL</td><td>2021</td><td>2</td><td>2</td></tr></tbody></table><p>因此能输出同比结果的 tag 只有 SQL，从 2020 到 2021 年，做完次数 3=&gt;2，减少 33.3%（保留 1 位小数）；排名 1=&gt;2，后退 1 名。</p><p><strong>思路：</strong></p><p>本题难点在于长整型的数据类型要求不能有负号产生，用 cast 函数转换数据类型为 signed。</p><p>以及用到的<code>增长率计算公式：(exam_cnt_21-exam_cnt_20)/exam_cnt_20</code></p><p>做完次数排名变化（2021 年和 2020 年比排名升了或者降了多少）</p><p>计算公式：<code>exam_cnt_rank_21 - exam_cnt_rank_20</code></p><p>在 MySQL 中，<code>CAST()</code> 函数用于将一个表达式的数据类型转换为另一个数据类型。它的基本语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>CAST<span class="token punctuation">(</span>expression <span class="token keyword">AS</span> data_type<span class="token punctuation">)</span>

<span class="token comment">-- 将一个字符串转换成整数</span>
<span class="token keyword">SELECT</span> CAST<span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span> <span class="token keyword">AS</span> <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例就不一一举例了，这个函数很简单</p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  tag<span class="token punctuation">,</span>
  exam_cnt_20<span class="token punctuation">,</span>
  exam_cnt_21<span class="token punctuation">,</span>
  concat<span class="token punctuation">(</span>
    <span class="token function">round</span><span class="token punctuation">(</span>
      <span class="token number">100</span> <span class="token operator">*</span> <span class="token punctuation">(</span>exam_cnt_21 <span class="token operator">-</span> exam_cnt_20<span class="token punctuation">)</span> <span class="token operator">/</span> exam_cnt_20<span class="token punctuation">,</span>
      <span class="token number">1</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">&#39;%&#39;</span>
  <span class="token punctuation">)</span> <span class="token keyword">AS</span> growth_rate<span class="token punctuation">,</span>
  exam_cnt_rank_20<span class="token punctuation">,</span>
  exam_cnt_rank_21<span class="token punctuation">,</span>
  cast<span class="token punctuation">(</span>exam_cnt_rank_21 <span class="token keyword">AS</span> signed<span class="token punctuation">)</span> <span class="token operator">-</span> cast<span class="token punctuation">(</span>exam_cnt_rank_20 <span class="token keyword">AS</span> signed<span class="token punctuation">)</span> <span class="token keyword">AS</span> rank_delta
<span class="token keyword">FROM</span>
  <span class="token punctuation">(</span>
    <span class="token comment">#2020年、2021年上半年各类试卷的做完次数和做完次数排名</span>
    <span class="token keyword">SELECT</span>
      tag<span class="token punctuation">,</span>
      <span class="token function">count</span><span class="token punctuation">(</span>
        <span class="token keyword">IF</span> <span class="token punctuation">(</span>
          date_format<span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m%d&#39;</span><span class="token punctuation">)</span> <span class="token operator">BETWEEN</span> <span class="token string">&#39;20200101&#39;</span>
          <span class="token operator">AND</span> <span class="token string">&#39;20200630&#39;</span><span class="token punctuation">,</span>
          start_time<span class="token punctuation">,</span>
          <span class="token boolean">NULL</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token keyword">AS</span> exam_cnt_20<span class="token punctuation">,</span>
      <span class="token function">count</span><span class="token punctuation">(</span>
        <span class="token keyword">IF</span> <span class="token punctuation">(</span>
          substring<span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">BETWEEN</span> <span class="token string">&#39;2021-01-01&#39;</span>
          <span class="token operator">AND</span> <span class="token string">&#39;2021-06-30&#39;</span><span class="token punctuation">,</span>
          start_time<span class="token punctuation">,</span>
          <span class="token boolean">NULL</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token keyword">AS</span> exam_cnt_21<span class="token punctuation">,</span>
      rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span>
        <span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
          <span class="token function">count</span><span class="token punctuation">(</span>
            <span class="token keyword">IF</span> <span class="token punctuation">(</span>
              date_format<span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m%d&#39;</span><span class="token punctuation">)</span> <span class="token operator">BETWEEN</span> <span class="token string">&#39;20200101&#39;</span>
              <span class="token operator">AND</span> <span class="token string">&#39;20200630&#39;</span><span class="token punctuation">,</span>
              start_time<span class="token punctuation">,</span>
              <span class="token boolean">NULL</span>
            <span class="token punctuation">)</span>
          <span class="token punctuation">)</span> <span class="token keyword">DESC</span>
      <span class="token punctuation">)</span> <span class="token keyword">AS</span> exam_cnt_rank_20<span class="token punctuation">,</span>
      rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span>
        <span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
          <span class="token function">count</span><span class="token punctuation">(</span>
            <span class="token keyword">IF</span> <span class="token punctuation">(</span>
              substring<span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">BETWEEN</span> <span class="token string">&#39;2021-01-01&#39;</span>
              <span class="token operator">AND</span> <span class="token string">&#39;2021-06-30&#39;</span><span class="token punctuation">,</span>
              start_time<span class="token punctuation">,</span>
              <span class="token boolean">NULL</span>
            <span class="token punctuation">)</span>
          <span class="token punctuation">)</span> <span class="token keyword">DESC</span>
      <span class="token punctuation">)</span> <span class="token keyword">AS</span> exam_cnt_rank_21
    <span class="token keyword">FROM</span>
      examination_info
      <span class="token keyword">JOIN</span> exam_record <span class="token keyword">USING</span> <span class="token punctuation">(</span>exam_id<span class="token punctuation">)</span>
    <span class="token keyword">WHERE</span>
      submit_time <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
      tag
  <span class="token punctuation">)</span> main
<span class="token keyword">WHERE</span>
  exam_cnt_21 <span class="token operator">*</span> exam_cnt_20 <span class="token operator">&lt;&gt;</span> <span class="token number">0</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  growth_rate <span class="token keyword">DESC</span><span class="token punctuation">,</span>
  exam_cnt_rank_21 <span class="token keyword">DESC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="聚合窗口函数" tabindex="-1"><a class="header-anchor" href="#聚合窗口函数" aria-hidden="true">#</a> 聚合窗口函数</h2><h3 id="对试卷得分做-min-max-归一化" tabindex="-1"><a class="header-anchor" href="#对试卷得分做-min-max-归一化" aria-hidden="true">#</a> 对试卷得分做 min-max 归一化</h3><p><strong>描述</strong>：</p><p>现有试卷信息表 <code>examination_info</code>（<code>exam_id</code> 试卷 ID, <code>tag</code> 试卷类别, <code>difficulty</code> 试卷难度, <code>duration</code> 考试时长, <code>release_time</code> 发布时间）：</p><table><thead><tr><th>id</th><th>exam_id</th><th>tag</th><th>difficulty</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>1</td><td>9001</td><td>SQL</td><td>hard</td><td>60</td><td>2020-01-01 10:00:00</td></tr><tr><td>2</td><td>9002</td><td>C++</td><td>hard</td><td>80</td><td>2020-01-01 10:00:00</td></tr><tr><td>3</td><td>9003</td><td>算法</td><td>hard</td><td>80</td><td>2020-01-01 10:00:00</td></tr><tr><td>4</td><td>9004</td><td>PYTHON</td><td>medium</td><td>70</td><td>2020-01-01 10:00:00</td></tr></tbody></table><p>试卷作答记录表 <code>exam_record</code>（<code>uid</code> 用户 ID, <code>exam_id</code> 试卷 ID, <code>start_time</code> 开始作答时间, <code>submit_time</code> 交卷时间, <code>score</code> 得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>6</td><td>1003</td><td>9001</td><td>2020-01-02 12:01:01</td><td>2020-01-02 12:31:01</td><td>68</td></tr><tr><td>9</td><td>1001</td><td>9001</td><td>2020-01-02 10:01:01</td><td>2020-01-02 10:31:01</td><td>89</td></tr><tr><td>1</td><td>1001</td><td>9001</td><td>2020-01-01 09:01:01</td><td>2020-01-01 09:21:59</td><td>90</td></tr><tr><td>12</td><td>1002</td><td>9002</td><td>2021-05-05 18:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>3</td><td>1004</td><td>9002</td><td>2020-01-01 12:01:01</td><td>2020-01-01 12:11:01</td><td>60</td></tr><tr><td>2</td><td>1003</td><td>9002</td><td>2020-01-01 19:01:01</td><td>2020-01-01 19:30:01</td><td>75</td></tr><tr><td>7</td><td>1001</td><td>9002</td><td>2020-01-02 12:01:01</td><td>2020-01-02 12:43:01</td><td>81</td></tr><tr><td>10</td><td>1002</td><td>9002</td><td>2020-01-01 12:11:01</td><td>2020-01-01 12:31:01</td><td>83</td></tr><tr><td>4</td><td>1003</td><td>9002</td><td>2020-01-01 12:01:01</td><td>2020-01-01 12:41:01</td><td>90</td></tr><tr><td>5</td><td>1002</td><td>9002</td><td>2020-01-02 19:01:01</td><td>2020-01-02 19:32:00</td><td>90</td></tr><tr><td>11</td><td>1002</td><td>9004</td><td>2021-09-06 12:01:01</td><td>(NULL)</td><td>(NULL)</td></tr><tr><td>8</td><td>1001</td><td>9005</td><td>2020-01-02 12:11:01</td><td>(NULL)</td><td>(NULL)</td></tr></tbody></table><p>在物理学及统计学数据计算时，有个概念叫 min-max 标准化，也被称为离差标准化，是对原始数据的线性变换，使结果值映射到[0 - 1]之间。</p><p>转换函数为：</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/sql/29A377601170AB822322431FCDF7EDFE.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>请你将用户作答高难度试卷的得分在每份试卷作答记录内执行 min-max 归一化后缩放到[0,100]区间，并输出用户 ID、试卷 ID、归一化后分数平均值；最后按照试卷 ID 升序、归一化分数降序输出。（注：得分区间默认为[0,100]，如果某个试卷作答记录中只有一个得分，那么无需使用公式，归一化并缩放后分数仍为原分数）。</p><p>由示例数据结果输出如下：</p><table><thead><tr><th>uid</th><th>exam_id</th><th>avg_new_score</th></tr></thead><tbody><tr><td>1001</td><td>9001</td><td>98</td></tr><tr><td>1003</td><td>9001</td><td>0</td></tr><tr><td>1002</td><td>9002</td><td>88</td></tr><tr><td>1003</td><td>9002</td><td>75</td></tr><tr><td>1001</td><td>9002</td><td>70</td></tr><tr><td>1004</td><td>9002</td><td>0</td></tr></tbody></table><p>解释：高难度试卷有 9001、9002、9003；</p><p>作答了 9001 的记录有 3 条，分数分别为 68、89、90，按给定公式归一化后分数为：0、95、100，而后两个得分都是用户 1001 作答的，因此用户 1001 对试卷 9001 的新得分为(95+100)/2≈98（只保留整数部分），用户 1003 对于试卷 9001 的新得分为 0。最后结果按照试卷 ID 升序、归一化分数降序输出。</p><p><strong>思路：</strong></p><p>注意点：</p><ol><li>将高难度的试卷，按每类试卷的得分，利用 max/min (col) over()窗口函数求得各组内最大最小值，然后进行归一化公式计算，缩放区间为[0,100]，即 min_max*100</li><li>若某类试卷只有一个得分，则无需使用归一化公式，因只有一个分 max_score=min_score,score，公式后结果可能会变成 0。</li><li>最后结果按 uid、exam_id 分组求归一化后均值，score 为 NULL 的要过滤掉。</li></ol><p>最后就是仔细看上面公式 （说实话，这题看起来就很绕）</p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>
  uid<span class="token punctuation">,</span>
  exam_id<span class="token punctuation">,</span>
  <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>min_max<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_new_score
<span class="token keyword">FROM</span>
  <span class="token punctuation">(</span>
    <span class="token keyword">SELECT</span>
      <span class="token operator">*</span><span class="token punctuation">,</span>
      <span class="token keyword">IF</span> <span class="token punctuation">(</span>
        max_score <span class="token operator">=</span> min_score<span class="token punctuation">,</span>
        score<span class="token punctuation">,</span>
        <span class="token punctuation">(</span>score <span class="token operator">-</span> min_score<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>max_score <span class="token operator">-</span> min_score<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>
      <span class="token punctuation">)</span> <span class="token keyword">AS</span> min_max
    <span class="token keyword">FROM</span>
      <span class="token punctuation">(</span>
        <span class="token keyword">SELECT</span>
          uid<span class="token punctuation">,</span>
          a<span class="token punctuation">.</span>exam_id<span class="token punctuation">,</span>
          score<span class="token punctuation">,</span>
          <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>exam_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_score<span class="token punctuation">,</span>
          <span class="token function">min</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> a<span class="token punctuation">.</span>exam_id<span class="token punctuation">)</span> <span class="token keyword">AS</span> min_score
        <span class="token keyword">FROM</span>
          exam_record a
          <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> examination_info b <span class="token keyword">USING</span> <span class="token punctuation">(</span>exam_id<span class="token punctuation">)</span>
        <span class="token keyword">WHERE</span>
          difficulty <span class="token operator">=</span> <span class="token string">&#39;hard&#39;</span>
      <span class="token punctuation">)</span> t
    <span class="token keyword">WHERE</span>
      score <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
  <span class="token punctuation">)</span> t1
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
  uid<span class="token punctuation">,</span>
  exam_id
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
  exam_id <span class="token keyword">ASC</span><span class="token punctuation">,</span>
  avg_new_score <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="每份试卷每月作答数和截止当月的作答总数" tabindex="-1"><a class="header-anchor" href="#每份试卷每月作答数和截止当月的作答总数" aria-hidden="true">#</a> 每份试卷每月作答数和截止当月的作答总数</h3><p><strong>描述:</strong></p><p>现有试卷作答记录表 exam_record（uid 用户 ID, exam_id 试卷 ID, start_time 开始作答时间, submit_time 交卷时间, score 得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2020-01-01 09:01:01</td><td>2020-01-01 09:21:59</td><td>90</td></tr><tr><td>2</td><td>1002</td><td>9001</td><td>2020-01-20 10:01:01</td><td>2020-01-20 10:10:01</td><td>89</td></tr><tr><td>3</td><td>1002</td><td>9001</td><td>2020-02-01 12:11:01</td><td>2020-02-01 12:31:01</td><td>83</td></tr><tr><td>4</td><td>1003</td><td>9001</td><td>2020-03-01 19:01:01</td><td>2020-03-01 19:30:01</td><td>75</td></tr><tr><td>5</td><td>1004</td><td>9001</td><td>2020-03-01 12:01:01</td><td>2020-03-01 12:11:01</td><td>60</td></tr><tr><td>6</td><td>1003</td><td>9001</td><td>2020-03-01 12:01:01</td><td>2020-03-01 12:41:01</td><td>90</td></tr><tr><td>7</td><td>1002</td><td>9001</td><td>2020-05-02 19:01:01</td><td>2020-05-02 19:32:00</td><td>90</td></tr><tr><td>8</td><td>1001</td><td>9002</td><td>2020-01-02 19:01:01</td><td>2020-01-02 19:59:01</td><td>69</td></tr><tr><td>9</td><td>1004</td><td>9002</td><td>2020-02-02 12:01:01</td><td>2020-02-02 12:20:01</td><td>99</td></tr><tr><td>10</td><td>1003</td><td>9002</td><td>2020-02-02 12:01:01</td><td>2020-02-02 12:31:01</td><td>68</td></tr><tr><td>11</td><td>1001</td><td>9002</td><td>2020-02-02 12:01:01</td><td>2020-02-02 12:43:01</td><td>81</td></tr><tr><td>12</td><td>1001</td><td>9002</td><td>2020-03-02 12:11:01</td><td>(NULL)</td><td>(NULL)</td></tr></tbody></table><p>请输出每份试卷每月作答数和截止当月的作答总数。<br> 由示例数据结果输出如下：</p><table><thead><tr><th>exam_id</th><th>start_month</th><th>month_cnt</th><th>cum_exam_cnt</th></tr></thead><tbody><tr><td>9001</td><td>202001</td><td>2</td><td>2</td></tr><tr><td>9001</td><td>202002</td><td>1</td><td>3</td></tr><tr><td>9001</td><td>202003</td><td>3</td><td>6</td></tr><tr><td>9001</td><td>202005</td><td>1</td><td>7</td></tr><tr><td>9002</td><td>202001</td><td>1</td><td>1</td></tr><tr><td>9002</td><td>202002</td><td>3</td><td>4</td></tr><tr><td>9002</td><td>202003</td><td>1</td><td>5</td></tr></tbody></table><p>解释：试卷 9001 在 202001、202002、202003、202005 共 4 个月有被作答记录，每个月被作答数分别为 2、1、3、1，截止当月累积作答总数为 2、3、6、7。</p><p><strong>思路：</strong></p><p>这题就两个关键点：统计截止当月的作答总数、输出每份试卷每月作答数和截止当月的作答总数</p><p>这个是关键<code>**sum(count(*)) over(partition by exam_id order by date_format(start_time,&#39;%Y%m&#39;))**</code></p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> exam_id<span class="token punctuation">,</span>
       date_format<span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> start_month<span class="token punctuation">,</span>
       <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> month_cnt<span class="token punctuation">,</span>
       <span class="token function">sum</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> exam_id
                           <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> date_format<span class="token punctuation">(</span>start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> cum_exam_cnt
<span class="token keyword">FROM</span> exam_record
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> exam_id<span class="token punctuation">,</span>
         start_month
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="每月及截止当月的答题情况-较难" tabindex="-1"><a class="header-anchor" href="#每月及截止当月的答题情况-较难" aria-hidden="true">#</a> 每月及截止当月的答题情况（较难）</h3><p><strong>描述</strong>：现有试卷作答记录表 <code>exam_record</code>（<code>uid</code> 用户 ID, <code>exam_id</code> 试卷 ID, <code>start_time</code> 开始作答时间, <code>submit_time</code> 交卷时间, <code>score</code> 得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2020-01-01 09:01:01</td><td>2020-01-01 09:21:59</td><td>90</td></tr><tr><td>2</td><td>1002</td><td>9001</td><td>2020-01-20 10:01:01</td><td>2020-01-20 10:10:01</td><td>89</td></tr><tr><td>3</td><td>1002</td><td>9001</td><td>2020-02-01 12:11:01</td><td>2020-02-01 12:31:01</td><td>83</td></tr><tr><td>4</td><td>1003</td><td>9001</td><td>2020-03-01 19:01:01</td><td>2020-03-01 19:30:01</td><td>75</td></tr><tr><td>5</td><td>1004</td><td>9001</td><td>2020-03-01 12:01:01</td><td>2020-03-01 12:11:01</td><td>60</td></tr><tr><td>6</td><td>1003</td><td>9001</td><td>2020-03-01 12:01:01</td><td>2020-03-01 12:41:01</td><td>90</td></tr><tr><td>7</td><td>1002</td><td>9001</td><td>2020-05-02 19:01:01</td><td>2020-05-02 19:32:00</td><td>90</td></tr><tr><td>8</td><td>1001</td><td>9002</td><td>2020-01-02 19:01:01</td><td>2020-01-02 19:59:01</td><td>69</td></tr><tr><td>9</td><td>1004</td><td>9002</td><td>2020-02-02 12:01:01</td><td>2020-02-02 12:20:01</td><td>99</td></tr><tr><td>10</td><td>1003</td><td>9002</td><td>2020-02-02 12:01:01</td><td>2020-02-02 12:31:01</td><td>68</td></tr><tr><td>11</td><td>1001</td><td>9002</td><td>2020-01-02 19:01:01</td><td>2020-02-02 12:43:01</td><td>81</td></tr><tr><td>12</td><td>1001</td><td>9002</td><td>2020-03-02 12:11:01</td><td>(NULL)</td><td>(NULL)</td></tr></tbody></table><p>请输出自从有用户作答记录以来，每月的试卷作答记录中月活用户数、新增用户数、截止当月的单月最大新增用户数、截止当月的累积用户数。结果按月份升序输出。</p><p>由示例数据结果输出如下：</p><table><thead><tr><th>start_month</th><th>mau</th><th>month_add_uv</th><th>max_month_add_uv</th><th>cum_sum_uv</th></tr></thead><tbody><tr><td>202001</td><td>2</td><td>2</td><td>2</td><td>2</td></tr><tr><td>202002</td><td>4</td><td>2</td><td>2</td><td>4</td></tr><tr><td>202003</td><td>3</td><td>0</td><td>2</td><td>4</td></tr><tr><td>202005</td><td>1</td><td>0</td><td>2</td><td>4</td></tr></tbody></table><table><thead><tr><th>month</th><th>1001</th><th>1002</th><th>1003</th><th>1004</th></tr></thead><tbody><tr><td>202001</td><td>1</td><td>1</td><td></td><td></td></tr><tr><td>202002</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>202003</td><td>1</td><td></td><td>1</td><td>1</td></tr><tr><td>202005</td><td></td><td>1</td><td></td><td></td></tr></tbody></table><p>由上述矩阵可以看出，2020 年 1 月有 2 个用户活跃（mau=2），当月新增用户数为 2；</p><p>2020 年 2 月有 4 个用户活跃，当月新增用户数为 2，最大单月新增用户数为 2，当前累积用户数为 4。</p><p><strong>思路：</strong></p><p>难点：</p><p>1.如何求每月新增用户</p><p>2.截至当月的答题情况</p><p>大致流程：</p><p>（1）统计每个人的首次登陆月份 <code>min()</code></p><p>（2）统计每月的月活和新增用户数：先得到每个人的首次登陆月份，再对首次登陆月份分组求和是该月份的新增人数</p><p>（3）统计截止当月的单月最大新增用户数、截止当月的累积用户数 ，最终按照按月份升序输出</p><p><strong>答案</strong>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 截止当月的单月最大新增用户数、截止当月的累积用户数，按月份升序输出</span>
<span class="token keyword">SELECT</span>
	start_month<span class="token punctuation">,</span>
	mau<span class="token punctuation">,</span>
	month_add_uv<span class="token punctuation">,</span>
	<span class="token function">max</span><span class="token punctuation">(</span> month_add_uv <span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> start_month <span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token function">sum</span><span class="token punctuation">(</span> month_add_uv <span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> start_month <span class="token punctuation">)</span>
<span class="token keyword">FROM</span>
	<span class="token punctuation">(</span>
	<span class="token comment">-- 统计每月的月活和新增用户数</span>
	<span class="token keyword">SELECT</span>
		date_format<span class="token punctuation">(</span> a<span class="token punctuation">.</span>start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m&#39;</span> <span class="token punctuation">)</span> <span class="token keyword">AS</span> start_month<span class="token punctuation">,</span>
		<span class="token function">count</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> a<span class="token punctuation">.</span>uid <span class="token punctuation">)</span> <span class="token keyword">AS</span> mau<span class="token punctuation">,</span>
		<span class="token function">count</span><span class="token punctuation">(</span> <span class="token keyword">DISTINCT</span> b<span class="token punctuation">.</span>uid <span class="token punctuation">)</span> <span class="token keyword">AS</span> month_add_uv
	<span class="token keyword">FROM</span>
		exam_record a
		<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>
         <span class="token comment">-- 统计每个人的首次登陆月份</span>
		<span class="token keyword">SELECT</span> uid<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span> date_format<span class="token punctuation">(</span> start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> first_month <span class="token keyword">FROM</span> exam_record <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> uid <span class="token punctuation">)</span> b <span class="token keyword">ON</span> date_format<span class="token punctuation">(</span> a<span class="token punctuation">.</span>start_time<span class="token punctuation">,</span> <span class="token string">&#39;%Y%m&#39;</span> <span class="token punctuation">)</span> <span class="token operator">=</span> b<span class="token punctuation">.</span>first_month
	<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
		start_month
	<span class="token punctuation">)</span> main
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
	start_month
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,166);function u(k,m){const s=d("ExternalLinkIcon");return e(),p("div",null,[t("blockquote",null,[t("p",null,[n("题目来源于："),t("a",l,[n("牛客题霸 - SQL 进阶挑战"),o(s)])])]),r])}const h=a(i,[["render",u],["__file","sql-questions-04.html.vue"]]);export{h as default};
