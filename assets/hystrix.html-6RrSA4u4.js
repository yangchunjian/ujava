const e=JSON.parse('{"key":"v-39302c8c","path":"/assembly/hystrix.html","title":"组件Hystrix","lang":"zh-CN","frontmatter":{"title":"组件Hystrix","icon":"laptop-code","category":["设计组件"],"tag":["组件"],"description":"为什么需要容错限流 复杂分布式系统通常有很多依赖，如果一个应用不能对来自依赖 故障进行隔离，那么应用本身就处在被拖垮的风险中。在一个高流量的网站中，某个单一后端一旦发生延迟，将会在数秒内导致 所有应用资源被耗尽（一个臭鸡蛋影响一篮筐）。 如秒杀、抢购、双十一等场景，在某一时间点会有爆发式的网络流量涌入，如果没有好的网络流量限制，任由流量压到后台服务实例，很有可能造成资源耗尽，服务无法响应，甚至严重的导致应用崩溃。 Hystrix是什么 Hystrix 能使你的系统在出现依赖服务失效的时候，通过隔离系统所依赖的服务，防止服务级联失败，同时提供失败回退机制，更优雅地应对失效，并使你的系统能更快地从异常中恢复。","head":[["meta",{"property":"og:url","content":"https://ujava.cn/assembly/hystrix.html"}],["meta",{"property":"og:site_name","content":"UJava"}],["meta",{"property":"og:title","content":"组件Hystrix"}],["meta",{"property":"og:description","content":"为什么需要容错限流 复杂分布式系统通常有很多依赖，如果一个应用不能对来自依赖 故障进行隔离，那么应用本身就处在被拖垮的风险中。在一个高流量的网站中，某个单一后端一旦发生延迟，将会在数秒内导致 所有应用资源被耗尽（一个臭鸡蛋影响一篮筐）。 如秒杀、抢购、双十一等场景，在某一时间点会有爆发式的网络流量涌入，如果没有好的网络流量限制，任由流量压到后台服务实例，很有可能造成资源耗尽，服务无法响应，甚至严重的导致应用崩溃。 Hystrix是什么 Hystrix 能使你的系统在出现依赖服务失效的时候，通过隔离系统所依赖的服务，防止服务级联失败，同时提供失败回退机制，更优雅地应对失效，并使你的系统能更快地从异常中恢复。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-23T01:46:32.000Z"}],["meta",{"property":"article:author","content":"UJava"}],["meta",{"property":"article:tag","content":"组件"}],["meta",{"property":"article:modified_time","content":"2024-04-23T01:46:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组件Hystrix\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-23T01:46:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"UJava\\",\\"url\\":\\"https://ujava.cn/article/\\"}]}"]]},"headers":[{"level":2,"title":"为什么需要容错限流","slug":"为什么需要容错限流","link":"#为什么需要容错限流","children":[]},{"level":2,"title":"Hystrix是什么","slug":"hystrix是什么","link":"#hystrix是什么","children":[]},{"level":2,"title":"Hystrix能做什么","slug":"hystrix能做什么","link":"#hystrix能做什么","children":[]},{"level":2,"title":"Hystrix设计原则","slug":"hystrix设计原则","link":"#hystrix设计原则","children":[]},{"level":2,"title":"Hystrix设计思想来源","slug":"hystrix设计思想来源","link":"#hystrix设计思想来源","children":[{"level":3,"title":"舱壁隔离模式","slug":"舱壁隔离模式","link":"#舱壁隔离模式","children":[]},{"level":3,"title":"断路器模式","slug":"断路器模式","link":"#断路器模式","children":[]}]},{"level":2,"title":"Hystrix工作流程","slug":"hystrix工作流程","link":"#hystrix工作流程","children":[{"level":3,"title":"官网原图","slug":"官网原图","link":"#官网原图","children":[]},{"level":3,"title":"中文版","slug":"中文版","link":"#中文版","children":[]},{"level":3,"title":"流程说明","slug":"流程说明","link":"#流程说明","children":[]}]},{"level":2,"title":"两种资源隔离模式","slug":"两种资源隔离模式","link":"#两种资源隔离模式","children":[{"level":3,"title":"线程池隔离模式","slug":"线程池隔离模式","link":"#线程池隔离模式","children":[]},{"level":3,"title":"信号量隔离模式","slug":"信号量隔离模式","link":"#信号量隔离模式","children":[]},{"level":3,"title":"线程池隔离模式 VS 信号量隔离模式","slug":"线程池隔离模式-vs-信号量隔离模式","link":"#线程池隔离模式-vs-信号量隔离模式","children":[]}]},{"level":2,"title":"Hystrix主要配置项","slug":"hystrix主要配置项","link":"#hystrix主要配置项","children":[]},{"level":2,"title":"快速上手","slug":"快速上手","link":"#快速上手","children":[{"level":3,"title":"pom.xml","slug":"pom-xml","link":"#pom-xml","children":[]},{"level":3,"title":"HystrixConfig","slug":"hystrixconfig","link":"#hystrixconfig","children":[]},{"level":3,"title":"HelloService","slug":"helloservice","link":"#helloservice","children":[]},{"level":3,"title":"启动类","slug":"启动类","link":"#启动类","children":[]},{"level":3,"title":"测试","slug":"测试","link":"#测试","children":[]}]}],"git":{"createdTime":1713836792000,"updatedTime":1713836792000,"contributors":[{"name":"yangchunjian","email":"1091938307@qq.com","commits":1}]},"readingTime":{"minutes":5.81,"words":1743},"filePathRelative":"assembly/hystrix.md","localizedDate":"2024年4月23日","excerpt":"<h2> 为什么需要容错限流</h2>\\n<ul>\\n<li>复杂分布式系统通常有很多依赖，如果一个应用不能对来自依赖 故障进行隔离，那么应用本身就处在被拖垮的风险中。在一个高流量的网站中，某个单一后端一旦发生延迟，将会在数秒内导致 所有应用资源被耗尽（一个臭鸡蛋影响一篮筐）。</li>\\n<li>如秒杀、抢购、双十一等场景，在某一时间点会有爆发式的网络流量涌入，如果没有好的网络流量限制，任由流量压到后台服务实例，很有可能造成资源耗尽，服务无法响应，甚至严重的导致应用崩溃。</li>\\n</ul>\\n<h2> Hystrix是什么</h2>\\n<p>Hystrix 能使你的系统在出现依赖服务失效的时候，通过隔离系统所依赖的服务，防止服务级联失败，同时提供失败回退机制，更优雅地应对失效，并使你的系统能更快地从异常中恢复。</p>","copyright":{"author":"UJava(ujava.cn)","license":"MIT"},"autoDesc":true}');export{e as data};
